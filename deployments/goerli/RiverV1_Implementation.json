{
  "address": "0xBf2871F0b6dbB479f5F6bB540fb5b2e4D91f5b86",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "AllowanceTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyDonation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentPublicKeys",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentSignatures",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedVersion",
          "type": "uint256"
        }
      ],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPublicKeyCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignatureCount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_providedValidatorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "InvalidValidatorCountReport",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWithdrawalCredentials",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoAvailableValidatorKeys",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullTransfer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroMintedShares",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validatorCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validatorBalanceSum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "roundId",
          "type": "bytes32"
        }
      ],
      "name": "BeaconDataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "name": "FundedValidatorKey",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PulledELFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UserDeposit",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_KEY_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIGNATURE_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "depositAndTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxCount",
          "type": "uint256"
        }
      ],
      "name": "depositToConsensusLayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdministrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowlist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeaconValidatorBalanceSum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "beaconValidatorBalanceSum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeaconValidatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "beaconValidatorCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositedValidatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "depositedValidatorCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getELFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGlobalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperatorRewardsShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingAdministrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawalCredentials",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_elFeeRecipientAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_withdrawalCredentials",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_systemAdministratorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_allowlistAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operatorRegistryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_globalFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_operatorRewardsShare",
          "type": "uint256"
        }
      ],
      "name": "initRiverV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendELFees",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAllowlist",
          "type": "address"
        }
      ],
      "name": "setAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_validatorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorBalanceSum",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_roundId",
          "type": "bytes32"
        }
      ],
      "name": "setBeaconData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newELFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setELFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "setGlobalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newOperatorRewardsShare",
          "type": "uint256"
        }
      ],
      "name": "setOperatorRewardsShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTreasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "underlyingBalance",
          "type": "uint256"
        }
      ],
      "name": "sharesFromUnderlyingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUnderlyingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "underlyingBalanceFromShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa81e3aa472ff385183e0ae7a67dfbf5976cd7fcd671500bb40223913a62ebd7d",
  "receipt": {
    "to": null,
    "from": "0x92D7d6DADe15fcF369534cEb8CD1A27f97185ab3",
    "contractAddress": "0xBf2871F0b6dbB479f5F6bB540fb5b2e4D91f5b86",
    "transactionIndex": 19,
    "gasUsed": "2689756",
    "logsBloom": "0x
    "blockHash": "0x2f9a1be545f3dae0ccb6229a9ed549b222665b23176be0907a36624e5bebd84d",
    "transactionHash": "0xa81e3aa472ff385183e0ae7a67dfbf5976cd7fcd671500bb40223913a62ebd7d",
    "logs": [],
    "blockNumber": 7491589,
    "cumulativeGasUsed": "9767634",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e0747c9f458a392de0f02a251cd18ac6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"AllowanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyDonation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentPublicKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicKeyCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providedValidatorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"InvalidValidatorCountReport\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawalCredentials\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAvailableValidatorKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroMintedShares\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorBalanceSum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"roundId\",\"type\":\"bytes32\"}],\"name\":\"BeaconDataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"FundedValidatorKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PulledELFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserDeposit\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_KEY_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNATURE_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"depositAndTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCount\",\"type\":\"uint256\"}],\"name\":\"depositToConsensusLayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdministrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowlist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeaconValidatorBalanceSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beaconValidatorBalanceSum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeaconValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beaconValidatorCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositedValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositedValidatorCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getELFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorRewardsShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingAdministrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalCredentials\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_elFeeRecipientAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_withdrawalCredentials\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_systemAdministratorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowlistAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operatorRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_globalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_operatorRewardsShare\",\"type\":\"uint256\"}],\"name\":\"initRiverV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendELFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAllowlist\",\"type\":\"address\"}],\"name\":\"setAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorBalanceSum\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_roundId\",\"type\":\"bytes32\"}],\"name\":\"setBeaconData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newELFeeRecipient\",\"type\":\"address\"}],\"name\":\"setELFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setGlobalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newOperatorRewardsShare\",\"type\":\"uint256\"}],\"name\":\"setOperatorRewardsShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingBalance\",\"type\":\"uint256\"}],\"name\":\"sharesFromUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlyingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"underlyingBalanceFromShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kiln\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"An approved account can use transferFrom to transfer funds on behalf of the token owner\",\"params\":{\"_spender\":\"Address that is allowed to spend the tokens\",\"_value\":\"The allowed amount, will override previous value\"}},\"balanceOf(address)\":{\"params\":{\"_owner\":\"Address to be checked\"}},\"balanceOfUnderlying(address)\":{\"params\":{\"_owner\":\"Address to be checked\"}},\"depositAndTransfer(address)\":{\"params\":{\"_recipient\":\"Address receiving the minted lsETH\"}},\"depositToConsensusLayer(uint256)\":{\"params\":{\"_maxCount\":\"The maximum amount of validator keys to fund\"}},\"initRiverV1(address,address,bytes32,address,address,address,address,address,uint256,uint256)\":{\"params\":{\"_allowlistAddress\":\"Address of the allowlist contract\",\"_depositContractAddress\":\"Address to make Consensus Layer deposits\",\"_elFeeRecipientAddress\":\"Address that receives the execution layer fees\",\"_globalFee\":\"Amount retained when the eth balance increases, splitted between the treasury and the operators\",\"_operatorRegistryAddress\":\"Address of the operator registry\",\"_operatorRewardsShare\":\"Share of the global fee used to reward node operators\",\"_systemAdministratorAddress\":\"Administrator address\",\"_treasuryAddress\":\"Address receiving the fee minus the operator share\",\"_withdrawalCredentials\":\"Credentials to use for every validator deposit\"}},\"setAllowlist(address)\":{\"params\":{\"_newAllowlist\":\"New address for the allowlist\"}},\"setBeaconData(uint256,uint256,bytes32)\":{\"details\":\"Can only be called by the oracle address\",\"params\":{\"_roundId\":\"An identifier for this update\",\"_validatorBalanceSum\":\"The validator balance sum of the active validators on the consensus layer\",\"_validatorCount\":\"The number of active validators on the consensus layer\"}},\"setELFeeRecipient(address)\":{\"params\":{\"_newELFeeRecipient\":\"New address for the recipient\"}},\"setGlobalFee(uint256)\":{\"params\":{\"newFee\":\"New fee value\"}},\"setOperatorRewardsShare(uint256)\":{\"params\":{\"newOperatorRewardsShare\":\"New share value\"}},\"setOracle(address)\":{\"params\":{\"_oracleAddress\":\"Address of the oracle\"}},\"setTreasury(address)\":{\"params\":{\"_newTreasury\":\"New address for the treasury\"}},\"transfer(address,uint256)\":{\"params\":{\"_to\":\"Address receiving the tokens\",\"_value\":\"Amount to be sent\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"If the specified _from argument is the message sender, behaves like a regular transferIf the specified _from argument is not the message sender, checks that the message sender has been given enough allowance\",\"params\":{\"_from\":\"Address sending the tokens\",\"_to\":\"Address receiving the tokens\",\"_value\":\"Amount to be sent\"}},\"transferOwnership(address)\":{\"params\":{\"_newAdmin\":\"New address for the admin\"}}},\"title\":\"River (v1)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Accepts the ownership of the system\"},\"allowance(address,address)\":{\"notice\":\"Retrieve the allowance value for a spender_owner Address that issued the allowance_spender Address that received the allowance\"},\"approve(address,uint256)\":{\"notice\":\"Approves an account for future spendings\"},\"balanceOf(address)\":{\"notice\":\"Retrieve the balance of an account\"},\"balanceOfUnderlying(address)\":{\"notice\":\"Retrieve the underlying asset balance of an account\"},\"decimals()\":{\"notice\":\"Retrieve the decimal count\"},\"deposit()\":{\"notice\":\"Explicit deposit method to mint on msg.sender\"},\"depositAndTransfer(address)\":{\"notice\":\"Explicit deposit method to mint on msg.sender and transfer to _recipient\"},\"depositToConsensusLayer(uint256)\":{\"notice\":\"Deposits current balance to the Consensus Layer by batches of 32 ETH\"},\"getAdministrator()\":{\"notice\":\"Retrieve system administrator address\"},\"getAllowlist()\":{\"notice\":\"Retrieve the allowlist address\"},\"getBeaconValidatorBalanceSum()\":{\"notice\":\"Get Beacon validator balance sum\"},\"getBeaconValidatorCount()\":{\"notice\":\"Get Beacon validator count (the amount of validator reported by the oracles)\"},\"getDepositedValidatorCount()\":{\"notice\":\"Get the deposited validator count (the count of deposits made by the contract)\"},\"getELFeeRecipient()\":{\"notice\":\"Retrieve the execution layer fee recipient\"},\"getGlobalFee()\":{\"notice\":\"Get the current global fee\"},\"getOperatorRewardsShare()\":{\"notice\":\"Get the current operator rewards share\"},\"getOracle()\":{\"notice\":\"Get Oracle address\"},\"getPendingAdministrator()\":{\"notice\":\"Retrieve system pending administrator address\"},\"getPendingEth()\":{\"notice\":\"Returns the amount of pending ETH\"},\"getTreasury()\":{\"notice\":\"Retrieve the treasury address\"},\"getWithdrawalCredentials()\":{\"notice\":\"Retrieve the withdrawal credentials\"},\"initRiverV1(address,address,bytes32,address,address,address,address,address,uint256,uint256)\":{\"notice\":\"Initializes the River system\"},\"name()\":{\"notice\":\"Retrieve the token name\"},\"sendELFees()\":{\"notice\":\"Input for execution layer fee earnings\"},\"setAllowlist(address)\":{\"notice\":\"Changes the allowlist address\"},\"setBeaconData(uint256,uint256,bytes32)\":{\"notice\":\"Sets the validator count and validator balance sum reported by the oracle\"},\"setELFeeRecipient(address)\":{\"notice\":\"Changes the execution layer fee recipient\"},\"setGlobalFee(uint256)\":{\"notice\":\"Changes the global fee parameter\"},\"setOperatorRewardsShare(uint256)\":{\"notice\":\"Changes the operator rewards share.\"},\"setOracle(address)\":{\"notice\":\"Set Oracle address\"},\"setTreasury(address)\":{\"notice\":\"Changes the treasury address\"},\"symbol()\":{\"notice\":\"Retrieve the token symbol\"},\"totalSupply()\":{\"notice\":\"Retrieve the total token supply\"},\"totalUnderlyingSupply()\":{\"notice\":\"Retrieve the total underlying asset supply\"},\"transfer(address,uint256)\":{\"notice\":\"Performs a transfer from the message sender to the provided account\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Performs a transfer between two recipients\"},\"transferOwnership(address)\":{\"notice\":\"Changes the admin but waits for new admin approval\"}},\"notice\":\"This contract merges all the manager contracts and implements all the virtual methods stitching all components together\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/River.1.sol\":\"RiverV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\ncontract Initializable {\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    modifier init(uint256 version) {\\n        if (version != Version.get()) {\\n            revert InvalidInitialization(version, Version.get());\\n        }\\n        Version.set(version + 1); // prevents reentrency on the called method\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc93555f4bd660f91e565f20753e0d3a01e783e673bc0209d0d1e33c7b6941053\",\"license\":\"BUSL-1.1\"},\"contracts/src/River.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IAllowlist.1.sol\\\";\\nimport \\\"./interfaces/IOperatorRegistry.1.sol\\\";\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\nimport \\\"./interfaces/IELFeeRecipient.1.sol\\\";\\n\\nimport \\\"./components/ConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"./components/UserDepositManager.1.sol\\\";\\nimport \\\"./components/SharesManager.1.sol\\\";\\nimport \\\"./components/OracleManager.1.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./libraries/LibOwnable.sol\\\";\\n\\nimport \\\"./state/shared/AdministratorAddress.sol\\\";\\nimport \\\"./state/river/AllowlistAddress.sol\\\";\\nimport \\\"./state/river/OperatorsRegistryAddress.sol\\\";\\nimport \\\"./state/river/TreasuryAddress.sol\\\";\\nimport \\\"./state/river/OperatorRewardsShare.sol\\\";\\nimport \\\"./state/river/GlobalFee.sol\\\";\\nimport \\\"./state/river/ELFeeRecipientAddress.sol\\\";\\n\\n/// @title River (v1)\\n/// @author Kiln\\n/// @notice This contract merges all the manager contracts and implements all the virtual methods stitching all components together\\ncontract RiverV1 is\\n    ConsensusLayerDepositManagerV1,\\n    UserDepositManagerV1,\\n    SharesManagerV1,\\n    OracleManagerV1,\\n    Initializable,\\n    IRiverV1\\n{\\n    uint256 public constant BASE = 100000;\\n    uint256 internal constant DEPOSIT_MASK = 0x1;\\n    uint256 internal constant TRANSFER_MASK = 0;\\n    /// @notice Prevents unauthorized calls\\n\\n    modifier onlyAdmin() override (OracleManagerV1) {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Initializes the River system\\n    /// @param _depositContractAddress Address to make Consensus Layer deposits\\n    /// @param _elFeeRecipientAddress Address that receives the execution layer fees\\n    /// @param _withdrawalCredentials Credentials to use for every validator deposit\\n    /// @param _systemAdministratorAddress Administrator address\\n    /// @param _allowlistAddress Address of the allowlist contract\\n    /// @param _operatorRegistryAddress Address of the operator registry\\n    /// @param _treasuryAddress Address receiving the fee minus the operator share\\n    /// @param _globalFee Amount retained when the eth balance increases, splitted between the treasury and the operators\\n    /// @param _operatorRewardsShare Share of the global fee used to reward node operators\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _operatorRegistryAddress,\\n        address _treasuryAddress,\\n        uint256 _globalFee,\\n        uint256 _operatorRewardsShare\\n    )\\n        external\\n        init(0)\\n    {\\n        if (_systemAdministratorAddress == address(0)) {\\n            // only check on initialization\\n            revert Errors.InvalidZeroAddress();\\n        }\\n        LibOwnable._setAdmin(_systemAdministratorAddress);\\n        TreasuryAddress.set(_treasuryAddress);\\n        GlobalFee.set(_globalFee);\\n        OperatorRewardsShare.set(_operatorRewardsShare);\\n        ELFeeRecipientAddress.set(_elFeeRecipientAddress);\\n\\n        ConsensusLayerDepositManagerV1.initConsensusLayerDepositManagerV1(\\n            _depositContractAddress, _withdrawalCredentials\\n        );\\n        OracleManagerV1.initOracleManagerV1(_oracleAddress);\\n        AllowlistAddress.set(_allowlistAddress);\\n        OperatorsRegistryAddress.set(_operatorRegistryAddress);\\n    }\\n\\n    /// @notice Changes the global fee parameter\\n    /// @param newFee New fee value\\n    function setGlobalFee(uint256 newFee) external onlyAdmin {\\n        if (newFee > BASE) {\\n            revert Errors.InvalidArgument();\\n        }\\n\\n        GlobalFee.set(newFee);\\n    }\\n\\n    /// @notice Get the current global fee\\n    function getGlobalFee() external view returns (uint256) {\\n        return GlobalFee.get();\\n    }\\n\\n    /// @notice Changes the operator rewards share.\\n    /// @param newOperatorRewardsShare New share value\\n    function setOperatorRewardsShare(uint256 newOperatorRewardsShare) external onlyAdmin {\\n        if (newOperatorRewardsShare > BASE) {\\n            revert Errors.InvalidArgument();\\n        }\\n\\n        OperatorRewardsShare.set(newOperatorRewardsShare);\\n    }\\n\\n    /// @notice Get the current operator rewards share\\n    function getOperatorRewardsShare() external view returns (uint256) {\\n        return OperatorRewardsShare.get();\\n    }\\n\\n    /// @notice Changes the allowlist address\\n    /// @param _newAllowlist New address for the allowlist\\n    function setAllowlist(address _newAllowlist) external onlyAdmin {\\n        AllowlistAddress.set(_newAllowlist);\\n    }\\n\\n    /// @notice Retrieve the allowlist address\\n    function getAllowlist() external view returns (address) {\\n        return address(AllowlistAddress.get());\\n    }\\n\\n    /// @notice Changes the treasury address\\n    /// @param _newTreasury New address for the treasury\\n    function setTreasury(address _newTreasury) external onlyAdmin {\\n        TreasuryAddress.set(_newTreasury);\\n    }\\n\\n    /// @notice Retrieve the treasury address\\n    function getTreasury() external view returns (address) {\\n        return TreasuryAddress.get();\\n    }\\n\\n    /// @notice Changes the admin but waits for new admin approval\\n    /// @param _newAdmin New address for the admin\\n    function transferOwnership(address _newAdmin) external onlyAdmin {\\n        LibOwnable._setPendingAdmin(_newAdmin);\\n    }\\n\\n    /// @notice Accepts the ownership of the system\\n    function acceptOwnership() external {\\n        if (msg.sender != LibOwnable._getPendingAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        LibOwnable._setAdmin(msg.sender);\\n        LibOwnable._setPendingAdmin(address(0));\\n    }\\n\\n    /// @notice Retrieve system administrator address\\n    function getAdministrator() external view returns (address) {\\n        return LibOwnable._getAdmin();\\n    }\\n\\n    /// @notice Retrieve system pending administrator address\\n    function getPendingAdministrator() external view returns (address) {\\n        return LibOwnable._getPendingAdmin();\\n    }\\n\\n    /// @notice Changes the execution layer fee recipient\\n    /// @param _newELFeeRecipient New address for the recipient\\n    function setELFeeRecipient(address _newELFeeRecipient) external onlyAdmin {\\n        ELFeeRecipientAddress.set(_newELFeeRecipient);\\n    }\\n\\n    /// @notice Retrieve the execution layer fee recipient\\n    function getELFeeRecipient() external view returns (address) {\\n        return ELFeeRecipientAddress.get();\\n    }\\n\\n    /// @notice Input for execution layer fee earnings\\n    function sendELFees() external payable {\\n        if (msg.sender != ELFeeRecipientAddress.get()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n    }\\n\\n    /// @notice Handler called whenever a token transfer is triggered\\n    /// @param _from Token sender\\n    /// @param _to Token receiver\\n    function _onTransfer(address _from, address _to) internal view override {\\n        IAllowlistV1(AllowlistAddress.get()).onlyAllowed(_from, TRANSFER_MASK); // this call reverts if unauthorized or denied\\n        IAllowlistV1(AllowlistAddress.get()).onlyAllowed(_to, TRANSFER_MASK); // this call reverts if unauthorized or denied\\n    }\\n\\n    /// @notice Handler called whenever a user deposits ETH to the system. Mints the adequate amount of shares.\\n    /// @param _depositor User address that made the deposit\\n    /// @param _amount Amount of ETH deposited\\n    function _onDeposit(address _depositor, address _recipient, uint256 _amount) internal override {\\n        uint256 mintedShares = SharesManagerV1._mintShares(_depositor, _amount);\\n        if (_depositor == _recipient) {\\n            IAllowlistV1(AllowlistAddress.get()).onlyAllowed(_depositor, DEPOSIT_MASK); // this call reverts if unauthorized or denied\\n        } else {\\n            IAllowlistV1(AllowlistAddress.get()).onlyAllowed(_depositor, DEPOSIT_MASK + TRANSFER_MASK); // this call reverts if unauthorized or denied\\n            IAllowlistV1(AllowlistAddress.get()).onlyAllowed(_recipient, TRANSFER_MASK);\\n            _transfer(_depositor, _recipient, mintedShares);\\n        }\\n    }\\n\\n    /// @notice Handler called whenever a deposit to the consensus layer is made. Should retrieve _requestedAmount or lower keys\\n    /// @param _requestedAmount Amount of keys required. Contract is expected to send _requestedAmount or lower.\\n    function _getNextValidators(uint256 _requestedAmount)\\n        internal\\n        override\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        return IOperatorsRegistryV1(OperatorsRegistryAddress.get()).pickNextValidators(_requestedAmount);\\n    }\\n\\n    /// @notice Internal utility managing reward distribution amongst node operators\\n    /// @param _reward Amount of shares to split between operators\\n    function _rewardOperators(uint256 _reward) internal returns (uint256) {\\n        Operators.Operator[] memory operators =\\n            IOperatorsRegistryV1(OperatorsRegistryAddress.get()).listActiveOperators();\\n        uint256[] memory validatorCounts = new uint256[](operators.length);\\n\\n        uint256 totalActiveValidators = 0;\\n        for (uint256 idx = 0; idx < operators.length;) {\\n            uint256 operatorActiveValidatorCount = operators[idx].funded - operators[idx].stopped;\\n            totalActiveValidators += operatorActiveValidatorCount;\\n            validatorCounts[idx] = operatorActiveValidatorCount;\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        if (totalActiveValidators > 0) {\\n            uint256 rewardsPerActiveValidator = _reward / totalActiveValidators;\\n\\n            for (uint256 idx = 0; idx < validatorCounts.length;) {\\n                _mintRawShares(operators[idx].feeRecipient, validatorCounts[idx] * rewardsPerActiveValidator);\\n                unchecked {\\n                    ++idx;\\n                }\\n            }\\n        } else {\\n            _reward = 0;\\n        }\\n\\n        return _reward;\\n    }\\n\\n    /// @notice Internal utility to pull funds from the execution layer fee recipient to River and return the delta in the balance\\n    function _pullELFees() internal override returns (uint256) {\\n        address elFeeRecipient = ELFeeRecipientAddress.get();\\n        if (elFeeRecipient == address(0)) {\\n            return 0;\\n        }\\n        uint256 initialBalance = address(this).balance;\\n        IELFeeRecipientV1(payable(elFeeRecipient)).pullELFees();\\n        uint256 collectedELFees = address(this).balance - initialBalance;\\n        emit PulledELFees(collectedELFees);\\n        return collectedELFees;\\n    }\\n\\n    /// @notice Handler called whenever the balance of ETH handled by the system increases. Splits funds between operators and treasury.\\n    /// @param _amount Additional eth received\\n    function _onEarnings(uint256 _amount) internal override {\\n        uint256 currentTotalSupply = _totalSupply();\\n        if (currentTotalSupply == 0) {\\n            revert ZeroMintedShares();\\n        }\\n        uint256 globalFee = GlobalFee.get();\\n        uint256 numerator = _amount * currentTotalSupply * globalFee;\\n        uint256 denominator = (_assetBalance() * BASE) - (_amount * globalFee);\\n        uint256 sharesToMint = denominator == 0 ? 0 : (numerator / denominator);\\n\\n        uint256 operatorRewards = (sharesToMint * OperatorRewardsShare.get()) / BASE;\\n\\n        uint256 mintedRewards = _rewardOperators(operatorRewards);\\n\\n        _mintRawShares(TreasuryAddress.get(), sharesToMint - mintedRewards);\\n    }\\n\\n    /// @notice Handler called whenever the total balance of ETH is requested\\n    function _assetBalance() internal view override returns (uint256) {\\n        uint256 beaconValidatorCount = BeaconValidatorCount.get();\\n        uint256 depositedValidatorCount = DepositedValidatorCount.get();\\n        if (beaconValidatorCount < depositedValidatorCount) {\\n            return BeaconValidatorBalanceSum.get() + address(this).balance\\n                + (depositedValidatorCount - beaconValidatorCount) * ConsensusLayerDepositManagerV1.DEPOSIT_SIZE;\\n        } else {\\n            return BeaconValidatorBalanceSum.get() + address(this).balance;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc4bdcad545c580f7cf0d81009d7dd0cdfc72f592c12337a756232291d290c022\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/ConsensusLayerDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IDepositContract.sol\\\";\\n\\nimport \\\"../libraries/BytesLib.sol\\\";\\nimport \\\"../libraries/Uint256Lib.sol\\\";\\n\\nimport \\\"../state/river/DepositContractAddress.sol\\\";\\nimport \\\"../state/river/WithdrawalCredentials.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\n\\nimport \\\"../interfaces/components/IConsensusLayerDepositManager.1.sol\\\";\\n\\n/// @title Consensus Layer Deposit Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the interactions with the official deposit contract, funding all validators\\n/// @dev _onValidatorKeyRequest must be overriden.\\nabstract contract ConsensusLayerDepositManagerV1 is IConsensusLayerDepositManagerV1 {\\n    uint256 public constant PUBLIC_KEY_LENGTH = 48;\\n    uint256 public constant SIGNATURE_LENGTH = 96;\\n    uint256 public constant DEPOSIT_SIZE = 32 ether;\\n\\n    /// @notice Initializer to set the deposit contract address and the withdrawal credentials to use\\n    /// @param _depositContractAddress The address of the deposit contract\\n    /// @param _withdrawalCredentials The withdrawal credentials to apply to all deposits\\n    function initConsensusLayerDepositManagerV1(address _depositContractAddress, bytes32 _withdrawalCredentials)\\n        internal\\n    {\\n        DepositContractAddress.set(IDepositContract(_depositContractAddress));\\n\\n        WithdrawalCredentials.set(_withdrawalCredentials);\\n    }\\n\\n    /// @notice Retrieve the withdrawal credentials\\n    function getWithdrawalCredentials() external view returns (bytes32) {\\n        return WithdrawalCredentials.get();\\n    }\\n\\n    /// @notice Internal helper to retrieve validator keys ready to be funded\\n    /// @dev Must be overriden with an implementation that provides keyCount or less keys upon call\\n    /// @param _keyCount The amount of keys (or less) to return.\\n    function _getNextValidators(uint256 _keyCount)\\n        internal\\n        virtual\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n\\n    /// @notice Deposits current balance to the Consensus Layer by batches of 32 ETH\\n    /// @param _maxCount The maximum amount of validator keys to fund\\n    function depositToConsensusLayer(uint256 _maxCount) external {\\n        uint256 validatorsToDeposit = Uint256Lib.min(address(this).balance / DEPOSIT_SIZE, _maxCount);\\n\\n        if (validatorsToDeposit == 0) {\\n            revert NotEnoughFunds();\\n        }\\n\\n        (bytes[] memory publicKeys, bytes[] memory signatures) = _getNextValidators(validatorsToDeposit);\\n\\n        uint256 receivedPublicKeyCount = publicKeys.length;\\n\\n        if (receivedPublicKeyCount == 0) {\\n            revert NoAvailableValidatorKeys();\\n        }\\n\\n        if (receivedPublicKeyCount > validatorsToDeposit) {\\n            revert InvalidPublicKeyCount();\\n        }\\n\\n        uint256 receivedSignatureCount = signatures.length;\\n\\n        if (receivedSignatureCount != receivedPublicKeyCount) {\\n            revert InvalidSignatureCount();\\n        }\\n\\n        bytes32 withdrawalCredentials = WithdrawalCredentials.get();\\n\\n        if (withdrawalCredentials == 0) {\\n            revert InvalidWithdrawalCredentials();\\n        }\\n\\n        for (uint256 idx = 0; idx < receivedPublicKeyCount;) {\\n            _depositValidator(publicKeys[idx], signatures[idx], withdrawalCredentials);\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        DepositedValidatorCount.set(DepositedValidatorCount.get() + receivedPublicKeyCount);\\n    }\\n\\n    /// @notice Deposits 32 ETH to the official Deposit contract\\n    /// @param _publicKey The public key of the validator\\n    /// @param _signature The signature provided by the operator\\n    /// @param _withdrawalCredentials The withdrawal credentials provided by River\\n    function _depositValidator(bytes memory _publicKey, bytes memory _signature, bytes32 _withdrawalCredentials)\\n        internal\\n    {\\n        if (_publicKey.length != PUBLIC_KEY_LENGTH) {\\n            revert InconsistentPublicKeys();\\n        }\\n\\n        if (_signature.length != SIGNATURE_LENGTH) {\\n            revert InconsistentSignatures();\\n        }\\n        uint256 value = DEPOSIT_SIZE;\\n\\n        uint256 depositAmount = value / 1000000000 wei;\\n\\n        bytes32 pubkeyRoot = sha256(BytesLib.pad64(_publicKey));\\n        bytes32 signatureRoot = sha256(\\n            abi.encodePacked(\\n                sha256(BytesLib.slice(_signature, 0, 64)),\\n                sha256(BytesLib.pad64(BytesLib.slice(_signature, 64, SIGNATURE_LENGTH - 64)))\\n            )\\n        );\\n\\n        bytes32 depositDataRoot = sha256(\\n            abi.encodePacked(\\n                sha256(abi.encodePacked(pubkeyRoot, _withdrawalCredentials)),\\n                sha256(abi.encodePacked(Uint256Lib.toLittleEndian64(depositAmount), signatureRoot))\\n            )\\n        );\\n\\n        uint256 targetBalance = address(this).balance - value;\\n\\n        DepositContractAddress.get().deposit{value: value}(\\n            _publicKey, abi.encodePacked(_withdrawalCredentials), _signature, depositDataRoot\\n        );\\n        require(address(this).balance == targetBalance, \\\"EXPECTING_DEPOSIT_TO_HAPPEN\\\");\\n        emit FundedValidatorKey(_publicKey);\\n    }\\n\\n    /// @notice Get the deposited validator count (the count of deposits made by the contract)\\n    function getDepositedValidatorCount() external view returns (uint256 depositedValidatorCount) {\\n        depositedValidatorCount = DepositedValidatorCount.get();\\n    }\\n}\\n\",\"keccak256\":\"0xbeffd8517a02ec91685ccdf54a800c5d6d28f887d25fe2f62b43e6da4f59b81c\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/OracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"../libraries/LibOwnable.sol\\\";\\n\\nimport \\\"../state/river/OracleAddress.sol\\\";\\nimport \\\"../state/river/LastOracleRoundId.sol\\\";\\nimport \\\"../state/river/BeaconValidatorBalanceSum.sol\\\";\\nimport \\\"../state/river/BeaconValidatorCount.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\n\\nimport \\\"../interfaces/components/IOracleManager.1.sol\\\";\\n\\n/// @title Oracle Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the inputs provided by the oracle\\nabstract contract OracleManagerV1 is IOracleManagerV1 {\\n    /// @notice Handler called if the delta between the last and new validator balance sum is positive\\n    /// @dev Must be overriden\\n    /// @param _profits The positive increase in the validator balance sum (staking rewards)\\n    function _onEarnings(uint256 _profits) internal virtual;\\n\\n    function _pullELFees() internal virtual returns (uint256);\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() virtual {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Set the initial oracle address\\n    /// @param _oracle Address of the oracle\\n    function initOracleManagerV1(address _oracle) internal {\\n        OracleAddress.set(_oracle);\\n    }\\n\\n    /// @notice Sets the validator count and validator balance sum reported by the oracle\\n    /// @dev Can only be called by the oracle address\\n    /// @param _validatorCount The number of active validators on the consensus layer\\n    /// @param _validatorBalanceSum The validator balance sum of the active validators on the consensus layer\\n    /// @param _roundId An identifier for this update\\n    function setBeaconData(uint256 _validatorCount, uint256 _validatorBalanceSum, bytes32 _roundId) external {\\n        if (msg.sender != OracleAddress.get()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n\\n        if (_validatorCount > DepositedValidatorCount.get()) {\\n            revert InvalidValidatorCountReport(_validatorCount, DepositedValidatorCount.get());\\n        }\\n\\n        uint256 newValidators = _validatorCount - BeaconValidatorCount.get();\\n        uint256 previousValidatorBalanceSum = BeaconValidatorBalanceSum.get() + (newValidators * 32 ether);\\n\\n        BeaconValidatorBalanceSum.set(_validatorBalanceSum);\\n        BeaconValidatorCount.set(_validatorCount);\\n        LastOracleRoundId.set(_roundId);\\n\\n        uint256 executionLayerFees = _pullELFees();\\n\\n        if (previousValidatorBalanceSum < _validatorBalanceSum + executionLayerFees) {\\n            _onEarnings((_validatorBalanceSum + executionLayerFees) - previousValidatorBalanceSum);\\n        }\\n\\n        emit BeaconDataUpdate(_validatorCount, _validatorBalanceSum, _roundId);\\n    }\\n\\n    /// @notice Get Oracle address\\n    function getOracle() external view returns (address oracle) {\\n        oracle = OracleAddress.get();\\n    }\\n\\n    /// @notice Set Oracle address\\n    /// @param _oracleAddress Address of the oracle\\n    function setOracle(address _oracleAddress) external onlyAdmin {\\n        OracleAddress.set(_oracleAddress);\\n    }\\n\\n    /// @notice Get Beacon validator balance sum\\n    function getBeaconValidatorBalanceSum() external view returns (uint256 beaconValidatorBalanceSum) {\\n        beaconValidatorBalanceSum = BeaconValidatorBalanceSum.get();\\n    }\\n\\n    /// @notice Get Beacon validator count (the amount of validator reported by the oracles)\\n    function getBeaconValidatorCount() external view returns (uint256 beaconValidatorCount) {\\n        beaconValidatorCount = BeaconValidatorCount.get();\\n    }\\n}\\n\",\"keccak256\":\"0x8bb6e4ccf6fa59d2d6ffe9e72777284fce5acd5744c00719568b7fea23b89c90\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/SharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Errors.sol\\\";\\n\\nimport \\\"../state/river/Shares.sol\\\";\\nimport \\\"../state/river/SharesPerOwner.sol\\\";\\nimport \\\"../state/shared/ApprovalsPerOwner.sol\\\";\\n\\nimport \\\"../interfaces/components/ISharesManager.1.sol\\\";\\n\\n/// @title Shares Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the shares of the depositor and the rebasing effect depending on the oracle data\\nabstract contract SharesManagerV1 is ISharesManagerV1 {\\n    /// @notice Internal hook triggered on the external transfer call\\n    /// @param _from Address of the sender\\n    /// @param _to Address of the recipient\\n    function _onTransfer(address _from, address _to) internal view virtual;\\n\\n    /// @notice Internal method to override to provide the total underlying asset balance\\n    function _assetBalance() internal view virtual returns (uint256);\\n\\n    /// @notice Modifier used to ensure that the transfer is allowed by using the internal hook to perform internal checks\\n    /// @param _from Address of the sender\\n    /// @param _to Address of the recipient\\n    modifier transferAllowed(address _from, address _to) {\\n        _onTransfer(_from, _to);\\n        _;\\n    }\\n\\n    /// @notice Modifier used to ensure the amount transferred is not 0\\n    /// @param _value Amount to check\\n    modifier isNotZero(uint256 _value) {\\n        if (_value == 0) {\\n            revert NullTransfer();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier used to ensure that the sender has enough funds for the transfer\\n    /// @param _owner Address of the sender\\n    /// @param _value Value that is required to be sent\\n    modifier hasFunds(address _owner, uint256 _value) {\\n        if (_balanceOf(_owner) < _value) {\\n            revert BalanceTooLow();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Retrieve the token name\\n    function name() external pure returns (string memory) {\\n        return \\\"River Ether\\\";\\n    }\\n\\n    /// @notice Retrieve the token symbol\\n    function symbol() external pure returns (string memory) {\\n        return \\\"lsETH\\\";\\n    }\\n\\n    /// @notice Retrieve the decimal count\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @notice Retrieve the total token supply\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /// @notice Retrieve the total underlying asset supply\\n    function totalUnderlyingSupply() external view returns (uint256) {\\n        return _assetBalance();\\n    }\\n\\n    /// @notice Retrieve the balance of an account\\n    /// @param _owner Address to be checked\\n    function balanceOf(address _owner) external view returns (uint256 balance) {\\n        return _balanceOf(_owner);\\n    }\\n\\n    /// @notice Retrieve the underlying asset balance of an account\\n    /// @param _owner Address to be checked\\n    function balanceOfUnderlying(address _owner) public view returns (uint256 balance) {\\n        return _balanceFromShares(SharesPerOwner.get(_owner));\\n    }\\n\\n    function underlyingBalanceFromShares(uint256 shares) external view returns (uint256) {\\n        return _balanceFromShares(shares);\\n    }\\n\\n    function sharesFromUnderlyingBalance(uint256 underlyingBalance) external view returns (uint256) {\\n        return _sharesFromBalance(underlyingBalance);\\n    }\\n\\n    /// @notice Retrieve the allowance value for a spender\\n    /// @notice _owner Address that issued the allowance\\n    /// @notice _spender Address that received the allowance\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining) {\\n        return ApprovalsPerOwner.get(_owner, _spender);\\n    }\\n\\n    /// @notice Performs a transfer from the message sender to the provided account\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount to be sent\\n    function transfer(address _to, uint256 _value)\\n        external\\n        transferAllowed(msg.sender, _to)\\n        isNotZero(_value)\\n        hasFunds(msg.sender, _value)\\n        returns (bool)\\n    {\\n        return _transfer(msg.sender, _to, _value);\\n    }\\n\\n    /// @notice Performs a transfer between two recipients\\n    /// @dev If the specified _from argument is the message sender, behaves like a regular transfer\\n    /// @dev If the specified _from argument is not the message sender, checks that the message sender has been given enough allowance\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount to be sent\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        external\\n        transferAllowed(_from, _to)\\n        isNotZero(_value)\\n        hasFunds(_from, _value)\\n        returns (bool)\\n    {\\n        if (_from != msg.sender) {\\n            uint256 currentAllowance = ApprovalsPerOwner.get(_from, msg.sender);\\n            if (currentAllowance < _value) {\\n                revert AllowanceTooLow(_from, msg.sender, currentAllowance, _value);\\n            }\\n            ApprovalsPerOwner.set(_from, msg.sender, currentAllowance - _value);\\n        }\\n        return _transfer(_from, _to, _value);\\n    }\\n\\n    /// @notice Approves an account for future spendings\\n    /// @dev An approved account can use transferFrom to transfer funds on behalf of the token owner\\n    /// @param _spender Address that is allowed to spend the tokens\\n    /// @param _value The allowed amount, will override previous value\\n    function approve(address _spender, uint256 _value) external returns (bool success) {\\n        ApprovalsPerOwner.set(msg.sender, _spender, _value);\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /// @notice Internal utility to retrieve the total supply of tokens\\n    function _totalSupply() internal view returns (uint256) {\\n        return Shares.get();\\n    }\\n\\n    /// @notice Internal utility to perform an unchecked transfer\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount to be sent\\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\\n        SharesPerOwner.set(_from, SharesPerOwner.get(_from) - _value);\\n        SharesPerOwner.set(_to, SharesPerOwner.get(_to) + _value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /// @notice Internal utility to retrieve the underlying asset balance for the given shares\\n    /// @param _shares Amount of shares to convert\\n    function _balanceFromShares(uint256 _shares) internal view returns (uint256) {\\n        uint256 _totalSharesValue = Shares.get();\\n\\n        if (_totalSharesValue == 0) {\\n            return 0;\\n        }\\n\\n        return ((_shares * _assetBalance())) / _totalSharesValue;\\n    }\\n\\n    /// @notice Internal utility to retrieve the shares count for a given underlying asset amount\\n    /// @param _balance Amount of underlying asset balance to convert\\n    function _sharesFromBalance(uint256 _balance) internal view returns (uint256) {\\n        uint256 _totalSharesValue = Shares.get();\\n\\n        if (_totalSharesValue == 0) {\\n            return 0;\\n        }\\n\\n        return (_balance * _totalSharesValue) / _assetBalance();\\n    }\\n\\n    /// @notice Internal utility to mint shares for the specified user\\n    /// @dev This method assumes that funds received are now part of the _assetBalance()\\n    /// @param _owner Account that should receive the new shares\\n    /// @param _underlyingAssetValue Value of underlying asset received, to convert into shares\\n    function _mintShares(address _owner, uint256 _underlyingAssetValue) internal returns (uint256) {\\n        uint256 oldTotalAssetBalance = _assetBalance() - _underlyingAssetValue;\\n\\n        if (oldTotalAssetBalance == 0) {\\n            _mintRawShares(_owner, _underlyingAssetValue);\\n            return _underlyingAssetValue;\\n        } else {\\n            uint256 sharesToMint = (_underlyingAssetValue * _totalSupply()) / oldTotalAssetBalance;\\n            _mintRawShares(_owner, sharesToMint);\\n            return sharesToMint;\\n        }\\n    }\\n\\n    /// @notice Internal utility to mint shares without any conversion, and emits a mint Transfer event\\n    /// @param _owner Account that should receive the new shares\\n    /// @param _value Amount of shares to mint\\n    function _mintRawShares(address _owner, uint256 _value) internal {\\n        Shares.set(Shares.get() + _value);\\n        SharesPerOwner.set(_owner, SharesPerOwner.get(_owner) + _value);\\n        emit Transfer(address(0), _owner, _value);\\n    }\\n\\n    /// @notice Internal utility to retrieve the amount of shares per owner\\n    /// @param _owner Account to be checked\\n    function _balanceOf(address _owner) internal view returns (uint256 balance) {\\n        return SharesPerOwner.get(_owner);\\n    }\\n}\\n\",\"keccak256\":\"0x67a4c9d90fcdba1a4aadb044275267eb4c6ccb78ca1c697183e6844c746428a9\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/UserDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Errors.sol\\\";\\n\\nimport \\\"../interfaces/components/IUserDepositManager.1.sol\\\";\\n\\n/// @title User Deposit Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the inbound transfers cases or the explicit submissions\\nabstract contract UserDepositManagerV1 is IUserDepositManagerV1 {\\n    /// @notice Handler called whenever a user has sent funds to the contract\\n    /// @dev Must be overriden\\n    /// @param _depositor Address that made the deposit\\n    /// @param _recipient Address that receives the minted shares\\n    /// @param _amount Amount deposited\\n    function _onDeposit(address _depositor, address _recipient, uint256 _amount) internal virtual;\\n\\n    /// @notice Internal utility calling the deposit handler and emitting the deposit details\\n    function _deposit(address _recipient) internal {\\n        if (msg.value == 0) {\\n            revert EmptyDeposit();\\n        }\\n\\n        _onDeposit(msg.sender, _recipient, msg.value);\\n\\n        emit UserDeposit(msg.sender, _recipient, msg.value);\\n    }\\n\\n    /// @notice Returns the amount of pending ETH\\n    function getPendingEth() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /// @notice Explicit deposit method to mint on msg.sender\\n    function deposit() external payable {\\n        _deposit(msg.sender);\\n    }\\n\\n    /// @notice Explicit deposit method to mint on msg.sender and transfer to _recipient\\n    /// @param _recipient Address receiving the minted lsETH\\n    function depositAndTransfer(address _recipient) external payable {\\n        _deposit(_recipient);\\n    }\\n\\n    /// @notice Implicit deposit method, when the user performs a regular transfer to the contract\\n    receive() external payable {\\n        _deposit(msg.sender);\\n    }\\n\\n    /// @notice Invalid call, when the user sends a transaction with a data payload but no method matched\\n    fallback() external payable {\\n        revert Errors.InvalidCall();\\n    }\\n}\\n\",\"keccak256\":\"0x14869034f9611f0fc0640b5340a1b95533dfd4430145b5175db8bcb6b191c564\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAllowlist.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IAllowlistV1 {\\n    event ChangedAllowlistStatuses(address[] indexed accounts, uint256[] statuses);\\n\\n    error InvalidAlloweeCount();\\n    error Denied(address _account);\\n    error Unauthorized(address _account);\\n    error MismatchedAlloweeAndStatusCount();\\n\\n    function initAllowlistV1(address _admin, address _allower) external;\\n    function setAllower(address _newAllowerAddress) external;\\n    function getAllower() external view returns (address);\\n    function allow(address[] calldata _accounts, uint256[] calldata _statuses) external;\\n    function onlyAllowed(address _account, uint256 _mask) external view;\\n    function isAllowed(address _account, uint256 _mask) external view returns (bool);\\n    function isDenied(address _account) external view returns (bool);\\n    function hasPermission(address _account, uint256 _mask) external view returns (bool);\\n    function getPermissions(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5310ff049595d9d7acc3a8b4cc3144ba66b56b3c4e6b4a715954ce8012de11f4\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IDepositContract.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IDepositContract {\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawalCredentials,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    )\\n        external\\n        payable;\\n}\\n\",\"keccak256\":\"0x6eaf465d7758a49041ebb95239099db74889743530d6f78186ab29361ae57f89\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IELFeeRecipient.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IELFeeRecipientV1 {\\n    error InvalidCall();\\n\\n    function initELFeeRecipientV1(address _riverAddress) external;\\n    function pullELFees() external;\\n    receive() external payable;\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x00544d3913dc7a63655d7be8fca84986a766dfd4f85174ce5728658d52243003\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IOperatorRegistry.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/operatorsRegistry/Operators.sol\\\";\\n\\ninterface IOperatorsRegistryV1 {\\n    error OperatorAlreadyExists(string name);\\n    error InactiveOperator(uint256 index);\\n    error InvalidFundedKeyDeletionAttempt();\\n    error InvalidUnsortedIndexes();\\n    error InvalidArrayLengths();\\n    error InvalidEmptyArray();\\n    error InvalidKeyCount();\\n    error InvalidPublicKeysLength();\\n    error InvalidSignatureLength();\\n    error InvalidIndexOutOfBounds();\\n    error OperatorLimitTooHigh(uint256 limit, uint256 keyCount);\\n\\n    event AddedOperator(uint256 indexed index, string name, address operatorAddress, address feeRecipientAddress);\\n    event SetOperatorStatus(uint256 indexed index, bool active);\\n    event SetOperatorLimit(uint256 indexed index, uint256 newLimit);\\n    event SetOperatorStoppedValidatorCount(uint256 indexed index, uint256 newStoppedValidatorCount);\\n    event SetOperatorFeeRecipientAddress(uint256 indexed index, address newOperatorAddress);\\n    event SetOperatorAddress(uint256 indexed index, address newOperatorAddress);\\n    event SetOperatorName(uint256 indexed name, string newName);\\n    event AddedValidatorKeys(uint256 indexed index, bytes publicKeys);\\n    event RemovedValidatorKey(uint256 indexed index, bytes publicKey);\\n\\n    function initOperatorsRegistryV1(address _admin, address _river) external;\\n    function listActiveOperators() external view returns (Operators.Operator[] memory);\\n    function getRiver() external view returns (address);\\n    function setRiver(address _newRiver) external;\\n    function getOperatorDetails(string calldata _name)\\n        external\\n        view\\n        returns (int256 _index, address _operatorAddress);\\n    function addOperator(string calldata _name, address _operator, address _feeRecipient) external;\\n    function setOperatorAddress(uint256 _index, address _newOperatorAddress) external;\\n    function setOperatorFeeRecipientAddress(uint256 _index, address _newOperatorFeeRecipientAddress) external;\\n    function setOperatorName(uint256 _index, string calldata _newName) external;\\n    function setOperatorStatus(uint256 _index, bool _newStatus) external;\\n    function setOperatorStoppedValidatorCount(uint256 _index, uint256 _newStoppedValidatorCount) external;\\n    function setOperatorLimits(uint256[] calldata _operatorIndexes, uint256[] calldata _newLimits) external;\\n    function addValidators(uint256 _index, uint256 _keyCount, bytes calldata _publicKeys, bytes calldata _signatures)\\n        external;\\n    function removeValidators(uint256 _index, uint256[] calldata _indexes) external;\\n    function getOperator(uint256 _index) external view returns (Operators.Operator memory);\\n    function getOperatorCount() external view returns (uint256);\\n    function getValidator(uint256 _operatorIndex, uint256 _validatorIndex)\\n        external\\n        view\\n        returns (bytes memory publicKey, bytes memory signature, bool funded);\\n    function pickNextValidators(uint256 _requestedAmount)\\n        external\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n}\\n\",\"keccak256\":\"0xcdaafe16aaf68328470be8fd4d5e64411e13ac8dd3313e1d26d8f0fcdbff3aef\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRiver.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./components/IConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"./components/IOracleManager.1.sol\\\";\\nimport \\\"./components/ISharesManager.1.sol\\\";\\nimport \\\"./components/IUserDepositManager.1.sol\\\";\\n\\ninterface IRiverV1 is IConsensusLayerDepositManagerV1, IUserDepositManagerV1, ISharesManagerV1, IOracleManagerV1 {\\n    error ZeroMintedShares();\\n\\n    event PulledELFees(uint256 amount);\\n\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _operatorRegistryAddress,\\n        address _treasuryAddress,\\n        uint256 _globalFee,\\n        uint256 _operatorRewardsShare\\n    )\\n        external;\\n\\n    function setGlobalFee(uint256 newFee) external;\\n    function getGlobalFee() external view returns (uint256);\\n    function setOperatorRewardsShare(uint256 newOperatorRewardsShare) external;\\n    function getOperatorRewardsShare() external view returns (uint256);\\n    function setAllowlist(address _newAllowlist) external;\\n    function getAllowlist() external view returns (address);\\n    function setTreasury(address _newTreasury) external;\\n    function getTreasury() external view returns (address);\\n    function transferOwnership(address _newAdmin) external;\\n    function acceptOwnership() external;\\n    function getAdministrator() external view returns (address);\\n    function getPendingAdministrator() external view returns (address);\\n    function setELFeeRecipient(address _newELFeeRecipient) external;\\n    function getELFeeRecipient() external view returns (address);\\n    function sendELFees() external payable;\\n}\\n\",\"keccak256\":\"0xf2c1e3e2b8b2148adbd71f76336096a789f682504f77a4ae079de11f84360386\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IConsensusLayerDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IConsensusLayerDepositManagerV1 {\\n    event FundedValidatorKey(bytes publicKey);\\n\\n    error NotEnoughFunds();\\n    error InconsistentPublicKeys();\\n    error InconsistentSignatures();\\n    error NoAvailableValidatorKeys();\\n    error InvalidPublicKeyCount();\\n    error InvalidSignatureCount();\\n    error InvalidWithdrawalCredentials();\\n\\n    function getWithdrawalCredentials() external view returns (bytes32);\\n    function depositToConsensusLayer(uint256 _maxCount) external;\\n    function getDepositedValidatorCount() external view returns (uint256 depositedValidatorCount);\\n}\\n\",\"keccak256\":\"0xb6bc772223ac779517d63ca0923546c8ffb8559b0fd7839909297b67f95f0160\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IOracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IOracleManagerV1 {\\n    event BeaconDataUpdate(uint256 validatorCount, uint256 validatorBalanceSum, bytes32 roundId);\\n\\n    error InvalidValidatorCountReport(uint256 _providedValidatorCount, uint256 _depositedValidatorCount);\\n\\n    function setBeaconData(uint256 _validatorCount, uint256 _validatorBalanceSum, bytes32 _roundId) external;\\n    function getOracle() external view returns (address oracle);\\n    function setOracle(address _oracleAddress) external;\\n    function getBeaconValidatorBalanceSum() external view returns (uint256 beaconValidatorBalanceSum);\\n    function getBeaconValidatorCount() external view returns (uint256 beaconValidatorCount);\\n}\\n\",\"keccak256\":\"0x48302c21becf34c3eddb16f5782759427d683b92eb325b07d107dfcabfe04fa5\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/ISharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISharesManagerV1 is IERC20 {\\n    error BalanceTooLow();\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n    error NullTransfer();\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function totalUnderlyingSupply() external view returns (uint256);\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n    function balanceOfUnderlying(address _owner) external view returns (uint256 balance);\\n    function underlyingBalanceFromShares(uint256 shares) external view returns (uint256);\\n    function sharesFromUnderlyingBalance(uint256 underlyingBalance) external view returns (uint256);\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0x038d83b91a4d9ef2945720eec488d66a3f085b0d04e5cc7fd5d62ebcc52b6591\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IUserDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IUserDepositManagerV1 {\\n    event UserDeposit(address indexed depositor, address indexed recipient, uint256 amount);\\n\\n    error EmptyDeposit();\\n    error EmptyDonation();\\n\\n    function getPendingEth() external view returns (uint256);\\n    function deposit() external payable;\\n    function depositAndTransfer(address _recipient) external payable;\\n    receive() external payable;\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x693b99f64b5c183783aa8cebbe9df7f339ec4dc5cf74f86f27435d768387ce47\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/BytesLib.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary BytesLib {\\n    function pad64(bytes memory _b) internal pure returns (bytes memory) {\\n        assert(_b.length >= 32 && _b.length <= 64);\\n        if (64 == _b.length) {\\n            return _b;\\n        }\\n\\n        bytes memory zero32 = new bytes(32);\\n        assembly {\\n            mstore(add(zero32, 0x20), 0)\\n        }\\n\\n        if (32 == _b.length) {\\n            return BytesLib.concat(_b, zero32);\\n        } else {\\n            return BytesLib.concat(_b, BytesLib.slice(zero32, 0, uint256(64) - _b.length));\\n        }\\n    }\\n\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for { let cc := add(_postBytes, 0x20) } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } { mstore(mc, mload(cc)) }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } { mstore(mc, mload(cc)) }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xdfc510d8549761baaf6ab4ebc34c43e6c33ea1955cd5f5db03b878dc1a4d4e4a\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    error Unauthorized(address caller);\\n    error InvalidCall();\\n    error InvalidArgument();\\n    error InvalidZeroAddress();\\n}\\n\",\"keccak256\":\"0xb212763b0c7e4f4addfb85d863c616469be04e2d43e2431e9ef6da5d47f07436\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\nimport \\\"../state/shared/PendingAdministratorAddress.sol\\\";\\n\\nlibrary LibOwnable {\\n    function _setAdmin(address newAdmin) internal {\\n        AdministratorAddress.set(newAdmin);\\n    }\\n\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n\\n    function _setPendingAdmin(address newAdmin) internal {\\n        PendingAdministratorAddress.set(newAdmin);\\n    }\\n\\n    function _getPendingAdmin() internal view returns (address) {\\n        return PendingAdministratorAddress.get();\\n    }\\n}\\n\",\"keccak256\":\"0x41156e3a841b426dd1d3a8b7a82cb88065974a3c812bb47481b3acce56798247\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/Uint256Lib.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Uint256Lib {\\n    function toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n        result = 0;\\n        uint256 temp_value = _value;\\n        for (uint256 i = 0; i < 8;) {\\n            result = (result << 8) | (temp_value & 0xFF);\\n            temp_value >>= 8;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        assert(0 == temp_value); // fully converted\\n        result <<= (24 * 8);\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256 max) {\\n        return (a > b ? b : a);\\n    }\\n}\\n\",\"keccak256\":\"0x99f626d32f7c5facded9c88d7f72775a67ae23234a4fb2147401121548a2e2c2\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x52ccf1daa33de9c72831e0d7458928c37ca7b5f8d8f732114095edeb81339920\",\"license\":\"MIT\"},\"contracts/src/state/operatorsRegistry/Operators.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/Errors.sol\\\";\\n\\nlibrary Operators {\\n    bytes32 internal constant OPERATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.operators\\\")) - 1);\\n\\n    bytes32 internal constant OPERATORS_MAPPING_SLOT = bytes32(uint256(keccak256(\\\"river.state.operatorsMapping\\\")) - 1);\\n\\n    struct Operator {\\n        bool active;\\n        string name;\\n        address operator;\\n        address feeRecipient;\\n        uint256 limit;\\n        uint256 funded;\\n        uint256 keys;\\n        uint256 stopped;\\n    }\\n\\n    struct CachedOperator {\\n        bool active;\\n        string name;\\n        address operator;\\n        address feeRecipient;\\n        uint256 limit;\\n        uint256 funded;\\n        uint256 keys;\\n        uint256 stopped;\\n        uint256 index;\\n    }\\n\\n    struct OperatorResolution {\\n        bool active;\\n        uint256 index;\\n    }\\n\\n    struct SlotOperator {\\n        Operator[] value;\\n    }\\n\\n    struct SlotOperatorMapping {\\n        mapping(string => OperatorResolution) value;\\n    }\\n\\n    error OperatorNotFound(string name);\\n    error OperatorNotFoundAtIndex(uint256 index);\\n\\n    function _getOperatorIndex(string memory name) internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n\\n        if (!opm.value[name].active) {\\n            revert OperatorNotFound(name);\\n        }\\n\\n        return opm.value[name].index;\\n    }\\n\\n    function _getOperatorActive(string memory name) internal view returns (bool) {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n        return opm.value[name].active;\\n    }\\n\\n    function _setOperatorIndex(string memory name, bool active, uint256 index) internal {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n        opm.value[name] = OperatorResolution({active: active, index: index});\\n    }\\n\\n    function exists(string memory name) internal view returns (bool) {\\n        return _getOperatorActive(name);\\n    }\\n\\n    function indexOf(string memory name) internal view returns (int256) {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n\\n        if (!opm.value[name].active) {\\n            return -1;\\n        }\\n\\n        return int256(opm.value[name].index);\\n    }\\n\\n    function get(string memory name) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n        uint256 index = _getOperatorIndex(name);\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[index];\\n    }\\n\\n    function getByIndex(uint256 index) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (r.value.length <= index) {\\n            revert OperatorNotFoundAtIndex(index);\\n        }\\n\\n        return r.value[index];\\n    }\\n\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    function _hasFundableKeys(Operators.Operator memory operator) internal pure returns (bool) {\\n        return (\\n            operator.active && operator.keys > operator.funded - operator.stopped\\n                && operator.limit > operator.funded - operator.stopped\\n        );\\n    }\\n\\n    function getAllActive() internal view returns (Operator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n\\n        for (uint256 idx = 0; idx < r.value.length;) {\\n            if (r.value[idx].active) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        Operator[] memory activeOperators = new Operator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < r.value.length;) {\\n            if (r.value[idx].active) {\\n                activeOperators[activeIdx] = r.value[idx];\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    function getAllFundable() internal view returns (CachedOperator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n\\n        for (uint256 idx = 0; idx < r.value.length;) {\\n            if (_hasFundableKeys(r.value[idx])) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        CachedOperator[] memory activeOperators = new CachedOperator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < r.value.length;) {\\n            Operator memory op = r.value[idx];\\n            if (_hasFundableKeys(op)) {\\n                activeOperators[activeIdx] = CachedOperator({\\n                    active: op.active,\\n                    name: op.name,\\n                    operator: op.operator,\\n                    feeRecipient: op.feeRecipient,\\n                    limit: op.limit,\\n                    funded: op.funded,\\n                    keys: op.keys,\\n                    stopped: op.stopped,\\n                    index: idx\\n                });\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    function set(string memory name, Operator memory newValue) internal returns (uint256) {\\n        if (newValue.operator == address(0) || newValue.feeRecipient == address(0)) {\\n            revert Errors.InvalidZeroAddress();\\n        }\\n        bool opExists = _getOperatorActive(name);\\n\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (!opExists) {\\n            r.value.push(newValue);\\n            _setOperatorIndex(name, newValue.active, r.value.length - 1);\\n            return (r.value.length - 1);\\n        } else {\\n            uint256 index = _getOperatorIndex(name);\\n            r.value[index] = newValue;\\n            if (opExists != newValue.active) {\\n                _setOperatorIndex(name, newValue.active, index);\\n            }\\n            return (index);\\n        }\\n    }\\n\\n    function setOperatorName(uint256 index, string memory newName) internal {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        string memory oldName = r.value[index].name;\\n        r.value[index].name = newName;\\n\\n        _setOperatorIndex(oldName, false, 0); // set storage to 0\\n        _setOperatorIndex(newName, true, index);\\n    }\\n}\\n\",\"keccak256\":\"0xfad312dfa2b1e31f480fae2794de69be0874551b3e77025069a5de3439fb6882\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/AllowlistAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\n\\nlibrary AllowlistAddress {\\n    bytes32 internal constant ALLOWLIST_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowlistAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ALLOWLIST_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        if (newValue == address(0)) {\\n            revert Errors.InvalidZeroAddress();\\n        }\\n        UnstructuredStorage.setStorageAddress(ALLOWLIST_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xbe54f33e27300f15e2b47ec60b727048b764e73a6ae03308cbd9c8e31709f9eb\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/BeaconValidatorBalanceSum.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary BeaconValidatorBalanceSum {\\n    bytes32 internal constant VALIDATOR_BALANCE_SUM_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.beaconValidatorBalanceSum\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(VALIDATOR_BALANCE_SUM_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(VALIDATOR_BALANCE_SUM_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x48995ea16b0e6fa95c74fe37fccb5b1240f697bad7e36bbce1547abedacfae4a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/BeaconValidatorCount.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary BeaconValidatorCount {\\n    bytes32 internal constant BEACON_VALIDATOR_COUNT_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.beaconValidatorCount\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(BEACON_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(BEACON_VALIDATOR_COUNT_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x866375c8488248156dd37fe77873e45c3dfa5b82f3d67952c564bb9771cbd177\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DepositContractAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../interfaces/IDepositContract.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary DepositContractAddress {\\n    bytes32 internal constant DEPOSIT_CONTRACT_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositContractAddress\\\")) - 1);\\n\\n    function get() internal view returns (IDepositContract) {\\n        return IDepositContract(UnstructuredStorage.getStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT));\\n    }\\n\\n    function set(IDepositContract newValue) internal {\\n        if (address(newValue) == address(0)) {\\n            revert Errors.InvalidZeroAddress();\\n        }\\n        return UnstructuredStorage.setStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT, address(newValue));\\n    }\\n}\\n\",\"keccak256\":\"0x44afddb642f7965745def7b72147ba71e40e58e2947258d24dc0db272843e28a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DepositedValidatorCount.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary DepositedValidatorCount {\\n    bytes32 internal constant DEPOSITED_VALIDATOR_COUNT_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositedValidatorCount\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x60cc15ed3078f7faf654c5ff5ddd8444fe7fb9cdded552cc754e474d79507a40\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/ELFeeRecipientAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary ELFeeRecipientAddress {\\n    bytes32 internal constant EL_FEE_RECIPIENT_ADDRESS =\\n        bytes32(uint256(keccak256(\\\"river.state.elFeeRecipientAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(EL_FEE_RECIPIENT_ADDRESS);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(EL_FEE_RECIPIENT_ADDRESS, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xbcbeda6c91d05c7afd1b6652ed50e75f8e89ab15515fc949cb5631c335da45e1\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/GlobalFee.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary GlobalFee {\\n    bytes32 internal constant GLOBAL_FEE_SLOT = bytes32(uint256(keccak256(\\\"river.state.globalFee\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(GLOBAL_FEE_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(GLOBAL_FEE_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xbe84f50b90b7e0afe2b85593493ca950ebaf60b5ce00206cf31e6dcdfa9dffe0\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/LastOracleRoundId.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary LastOracleRoundId {\\n    bytes32 internal constant LAST_ORACLE_ROUND_ID_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.lastOracleRoundId\\\")) - 1);\\n\\n    function get() internal view returns (bytes32) {\\n        return UnstructuredStorage.getStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT);\\n    }\\n\\n    function set(bytes32 newValue) internal {\\n        UnstructuredStorage.setStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x9cd4be635b16daef58d101f2655ae3c8c3b6907f84a2d77ef47aa43089531548\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/OperatorRewardsShare.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary OperatorRewardsShare {\\n    bytes32 internal constant OPERATOR_REWARDS_SHARE_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.operatorRewardsShare\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(OPERATOR_REWARDS_SHARE_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(OPERATOR_REWARDS_SHARE_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xe0d3789bdd6dd1963e3ec312e123a699af70aca4aae51c151e367e9d784a958d\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/OperatorsRegistryAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\n\\nlibrary OperatorsRegistryAddress {\\n    bytes32 internal constant OPERATORS_REGISTRY_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.operatorsRegistryAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(OPERATORS_REGISTRY_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        if (newValue == address(0)) {\\n            revert Errors.InvalidZeroAddress();\\n        }\\n        UnstructuredStorage.setStorageAddress(OPERATORS_REGISTRY_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xfd337497cce3de69135995d0be80082b0083d3f5078685e3ac8c06bf28f12506\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/OracleAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\n\\nlibrary OracleAddress {\\n    bytes32 internal constant ORACLE_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.oracleAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ORACLE_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        if (newValue == address(0)) {\\n            revert Errors.InvalidZeroAddress();\\n        }\\n        UnstructuredStorage.setStorageAddress(ORACLE_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xfdd2fd78dd4c45e268b9093864993d56220ab60982a49f7de7af25cbdc8393bf\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/Shares.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Shares {\\n    bytes32 internal constant SHARES_SLOT = bytes32(uint256(keccak256(\\\"river.state.shares\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(SHARES_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(SHARES_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xd928f7e6f42e62ef422e6584cef8dc8a2205b48571f484bf117b423591f82844\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/SharesPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary SharesPerOwner {\\n    bytes32 internal constant SHARES_SLOT = bytes32(uint256(keccak256(\\\"river.state.sharesPerOwner\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(address => uint256) value;\\n    }\\n\\n    function get(address owner) internal view returns (uint256) {\\n        bytes32 slot = SHARES_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[owner];\\n    }\\n\\n    function set(address owner, uint256 newValue) internal {\\n        bytes32 slot = SHARES_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[owner] = newValue;\\n    }\\n}\\n\",\"keccak256\":\"0x7644bec5bc614b545e3b5e8108957528f8030e75f33a05a2aa0b9bc2807eb595\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/TreasuryAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\n\\nlibrary TreasuryAddress {\\n    bytes32 internal constant TREASURY_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.treasuryAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(TREASURY_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        if (newValue == address(0)) {\\n            revert Errors.InvalidZeroAddress();\\n        }\\n        UnstructuredStorage.setStorageAddress(TREASURY_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xb2e10fecd46c3cf5949a1cc47c11f0c472db9e2666617ae2d0e6394c6653799a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/WithdrawalCredentials.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary WithdrawalCredentials {\\n    bytes32 internal constant WITHDRAWAL_CREDENTIALS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.withdrawalCredentials\\\")) - 1);\\n\\n    function get() internal view returns (bytes32) {\\n        return UnstructuredStorage.getStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT);\\n    }\\n\\n    function set(bytes32 newValue) internal {\\n        UnstructuredStorage.setStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xb6a4e66aba567655d67547e66a0241e317071e4aadb11167785ac0917a239717\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary AdministratorAddress {\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x6c103a106ff958994c38f055a316144416df36aeb299ba660e7b8af063931b72\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/ApprovalsPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary ApprovalsPerOwner {\\n    bytes32 internal constant APPROVALS_PER_OWNER_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.approvalsPerOwner\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(address => mapping(address => uint256)) value;\\n    }\\n\\n    function get(address owner, address operator) internal view returns (uint256) {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[owner][operator];\\n    }\\n\\n    function set(address owner, address operator, uint256 newValue) internal {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[owner][operator] = newValue;\\n    }\\n}\\n\",\"keccak256\":\"0xf459ba95285310a18f896e1cdde64f781a8f1e82faf2ae9e5efa8e94a9141b83\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/PendingAdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary PendingAdministratorAddress {\\n    bytes32 public constant PENDING_ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.pendingAdministratorAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x5888a98f160df2cc8d51e0352c57ae0491678b9e18c0be0cac5e5f9527aff650\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Version {\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(VERSION_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf90d1ecf583061aa70dc464ec1fde21da6e9309601bcbba38f47d26257a1c656\",\"license\":\"BUSL-1.1\"},\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612fb2806100206000396000f3fe60806040526004361061026b5760003560e01c806370a0823111610144578063bf15af56116100b6578063ec342ad01161007a578063ec342ad0146106bb578063efd60347146106d2578063f0f44260146106da578063f2fde38b146106fa578063f79c3f021461071a578063f9e018571461073a5761027b565b8063bf15af5614610649578063c5eff3d01461065e578063d0e30db014610673578063d56580ff1461067b578063dd62ed3e1461069b5761027b565b8063833b1fce11610108578063833b1fce146105a957806387f2adfb146105be57806395d89b41146105d35780639e3947f314610601578063a9059cbb14610616578063ac232bde146106365761027b565b806370a0823114610514578063799a19541461053457806379ba5097146105545780637adbf9731461056957806380d4027e146105895761027b565b8063252d6a34116101dd5780633af9e669116101a15780633af9e669146104805780633b19e84a146104a0578063540bc5ea146104b557806356396715146104ca57806358bf3c7f146104df5780635a88bd77146104ff5761027b565b8063252d6a34146103fd578063291206f6146104125780632cb562e114610432578063313ce5671461044757806336bf3325146104635761027b565b8063143a08d41161022f578063143a08d414610369578063169674071461037e57806318160ddd146103a0578063192feab4146103b55780631bcbfaba146103c857806323b872dd146103dd5761027b565b8063014d76bd1461029457806306fdde03146102bc578063095ea7b3146102f95780631311cf8d1461032957806313d86aed146103495761027b565b3661027b576102793361075a565b005b60405163574b16a760e11b815260040160405180910390fd5b3480156102a057600080fd5b506102a96107c6565b6040519081526020015b60405180910390f35b3480156102c857600080fd5b5060408051808201909152600b81526a2934bb32b91022ba3432b960a91b60208201525b6040516102b391906128c7565b34801561030557600080fd5b506103196103143660046128ef565b6107d5565b60405190151581526020016102b3565b34801561033557600080fd5b5061027961034436600461291b565b61082c565b34801561035557600080fd5b50610279610364366004612938565b61087c565b34801561037557600080fd5b506102a96109cd565b34801561038a57600080fd5b506103936109d7565b6040516102b39190612951565b3480156103ac57600080fd5b506102a96109e1565b3480156103c157600080fd5b50476102a9565b3480156103d457600080fd5b506102a96109eb565b3480156103e957600080fd5b506103196103f8366004612965565b6109f5565b34801561040957600080fd5b506102a9610ad9565b34801561041e57600080fd5b5061027961042d366004612938565b610ae3565b34801561043e57600080fd5b50610393610b4b565b34801561045357600080fd5b50604051601281526020016102b3565b34801561046f57600080fd5b506102a96801bc16d674ec80000081565b34801561048c57600080fd5b506102a961049b36600461291b565b610b55565b3480156104ac57600080fd5b50610393610b68565b3480156104c157600080fd5b506102a9606081565b3480156104d657600080fd5b506102a9610b72565b3480156104eb57600080fd5b506102796104fa36600461291b565b610b7c565b34801561050b57600080fd5b50610393610bc0565b34801561052057600080fd5b506102a961052f36600461291b565b610bca565b34801561054057600080fd5b506102a961054f366004612938565b610bd5565b34801561056057600080fd5b50610279610be0565b34801561057557600080fd5b5061027961058436600461291b565b610c30565b34801561059557600080fd5b506102796105a43660046129a6565b610c74565b3480156105b557600080fd5b50610393610dc6565b3480156105ca57600080fd5b506102a9610dd0565b3480156105df57600080fd5b506040805180820190915260058152640d8e68aa8960db1b60208201526102ec565b34801561060d57600080fd5b506102a9610dda565b34801561062257600080fd5b506103196106313660046128ef565b610de4565b61027961064436600461291b565b610e53565b34801561065557600080fd5b506102a9603081565b34801561066a57600080fd5b50610393610e5c565b610279610e66565b34801561068757600080fd5b50610279610696366004612938565b610e6f565b3480156106a757600080fd5b506102a96106b63660046129d2565b610ed7565b3480156106c757600080fd5b506102a9620186a081565b610279610eea565b3480156106e657600080fd5b506102796106f536600461291b565b610f25565b34801561070657600080fd5b5061027961071536600461291b565b610f69565b34801561072657600080fd5b506102a9610735366004612938565b610fad565b34801561074657600080fd5b50610279610755366004612a0b565b610fb8565b34610778576040516395b66fe960e01b815260040160405180910390fd5b61078333823461108c565b6040513481526001600160a01b0382169033907f3bc57f469ad6d10d7723ea226cd22bd2b9e527def2b529f6ab44645a166895829060200160405180910390a350565b60006107d0611208565b905090565b60006107e233848461123c565b6040518281526001600160a01b0384169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259060200160405180910390a35060015b92915050565b610834611293565b6001600160a01b0316336001600160a01b031614610870573360405163472511eb60e11b81526004016108679190612951565b60405180910390fd5b6108798161129d565b50565b600061089a6108946801bc16d674ec80000047612ad6565b836112d0565b9050806108ba57604051631036b5ad60e31b815260040160405180910390fd5b6000806108c6836112e5565b81519193509150806108eb5760405163200149ad60e21b815260040160405180910390fd5b8381111561090c57604051635993bd5760e01b815260040160405180910390fd5b815181811461092e576040516322e5ce4360e21b815260040160405180910390fd5b600061093861136d565b90508061095857604051639be7315960e01b815260040160405180910390fd5b60005b838110156109a8576109a086828151811061097857610978612af8565b602002602001015186838151811061099257610992612af8565b60200260200101518461139d565b60010161095b565b506109c4836109b5611821565b6109bf9190612b0e565b611851565b50505050505050565b60006107d061187f565b60006107d0611293565b60006107d06118eb565b60006107d06118f5565b60008383610a038282611925565b8380610a22576040516336b216db60e21b815260040160405180910390fd5b868580610a2e836119f5565b1015610a4d576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b0389163314610ac1576000610a698a33611a00565b905087811015610aab57604051637b936de360e01b81526001600160a01b038b1660048201523360248201526044810182905260648101899052608401610867565b610abf8a33610aba8b85612b26565b61123c565b505b610acc898989611a58565b9998505050505050505050565b60006107d0611ae6565b610aeb611293565b6001600160a01b0316336001600160a01b031614610b1e573360405163472511eb60e11b81526004016108679190612951565b620186a0811115610b425760405163a9cb9e0d60e01b815260040160405180910390fd5b61087981611b16565b60006107d0611b44565b6000610826610b6383611b74565b611bc2565b60006107d0611bfa565b60006107d061136d565b610b84611293565b6001600160a01b0316336001600160a01b031614610bb7573360405163472511eb60e11b81526004016108679190612951565b61087981611c2a565b60006107d0611c7f565b6000610826826119f5565b600061082682611c89565b610be8611c7f565b6001600160a01b0316336001600160a01b031614610c1b573360405163472511eb60e11b81526004016108679190612951565b610c2433611cb6565b610c2e6000611cbf565b565b610c38611293565b6001600160a01b0316336001600160a01b031614610c6b573360405163472511eb60e11b81526004016108679190612951565b61087981611cc8565b610c7c611d1d565b6001600160a01b0316336001600160a01b031614610caf573360405163472511eb60e11b81526004016108679190612951565b610cb7611821565b831115610ce95782610cc7611821565b6040516376179ac560e01b815260048101929092526024820152604401610867565b6000610cf3611d4d565b610cfd9085612b26565b90506000610d14826801bc16d674ec800000612b3d565b610d1c611ae6565b610d269190612b0e565b9050610d3184611d7d565b610d3a85611dab565b610d4383611dd9565b6000610d4d611e07565b9050610d598186612b0e565b821015610d7d57610d7d82610d6e8388612b0e565b610d789190612b26565b611ed2565b60408051878152602081018790529081018590527f98e488f5118fc11ab540716c2afc4e440c0a892d27a4efef33db94b4f9da65899060600160405180910390a1505050505050565b60006107d0611d1d565b60006107d0611821565b60006107d0611d4d565b60003383610df28282611925565b8380610e11576040516336b216db60e21b815260040160405180910390fd5b338580610e1d836119f5565b1015610e3c576040516351940b3960e11b815260040160405180910390fd5b610e47338989611a58565b98975050505050505050565b6108798161075a565b60006107d0611fc0565b610c2e3361075a565b610e77611293565b6001600160a01b0316336001600160a01b031614610eaa573360405163472511eb60e11b81526004016108679190612951565b620186a0811115610ece5760405163a9cb9e0d60e01b815260040160405180910390fd5b61087981611ff0565b6000610ee38383611a00565b9392505050565b610ef2611b44565b6001600160a01b0316336001600160a01b031614610c2e573360405163472511eb60e11b81526004016108679190612951565b610f2d611293565b6001600160a01b0316336001600160a01b031614610f60573360405163472511eb60e11b81526004016108679190612951565b6108798161201e565b610f71611293565b6001600160a01b0316336001600160a01b031614610fa4573360405163472511eb60e11b81526004016108679190612951565b61087981611cbf565b600061082682611bc2565b6000610fc2612073565b8114610ff35780610fd1612073565b604051631cfd276760e31b815260048101929092526024820152604401610867565b611006611001826001612b0e565b6120a3565b6001600160a01b03871661102d5760405163f6b2911f60e01b815260040160405180910390fd5b61103687611cb6565b61103f8461201e565b61104883611b16565b61105182611ff0565b61105a8a61129d565b6110648b8a6120d1565b61106d88610c6b565b61107686611c2a565b61107f856120e7565b5050505050505050505050565b6000611098848361213c565b9050826001600160a01b0316846001600160a01b0316141561111f576110bc611fc0565b6001600160a01b0316635a4091028560016040518363ffffffff1660e01b81526004016110ea929190612b5c565b60006040518083038186803b15801561110257600080fd5b505afa158015611116573d6000803e3d6000fd5b50505050611202565b611127611fc0565b6001600160a01b0316635a4091028561114260006001612b0e565b6040518363ffffffff1660e01b815260040161115f929190612b5c565b60006040518083038186803b15801561117757600080fd5b505afa15801561118b573d6000803e3d6000fd5b50505050611197611fc0565b6001600160a01b0316635a4091028460006040518363ffffffff1660e01b81526004016111c5929190612b5c565b60006040518083038186803b1580156111dd57600080fd5b505afa1580156111f1573d6000803e3d6000fd5b50505050611200848483611a58565b505b50505050565b60006107d061123860017f8b296ea79529153bb5bae302cb8c44db7ed739099e80c9f19feb68f6a43578a8612b26565b5490565b600061126960017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847612b26565b6001600160a01b039485166000908152602091825260408082209590961681529390525091902055565b60006107d06121a0565b6108796112cb60017f8e9e2a1d30fed357d8a000c1131fc77ed65d2052918caf1ccc6eb1e7af3d13b6612b26565b829055565b60008183116112df5782610ee3565b50919050565b6060806112f06121d0565b6001600160a01b031663a1947323846040518263ffffffff1660e01b815260040161131d91815260200190565b6000604051808303816000875af115801561133c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113649190810190612cf9565b91509150915091565b60006107d061123860017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42612b26565b60308351146113bf5760405163050cb55360e41b815260040160405180910390fd5b60608251146113e15760405163408ebd3960e01b815260040160405180910390fd5b6801bc16d674ec80000060006113fb633b9aca0083612ad6565b90506000600261140a87612200565b6040516114179190612d5c565b602060405180830381855afa158015611434573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906114579190612d78565b9050600060028061146b8860006040612289565b6040516114789190612d5c565b602060405180830381855afa158015611495573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906114b89190612d78565b60026114d86114d38a60406114ce816060612b26565b612289565b612200565b6040516114e59190612d5c565b602060405180830381855afa158015611502573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906115259190612d78565b60408051602081019390935282015260600160408051601f198184030181529082905261155191612d5c565b602060405180830381855afa15801561156e573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906115919190612d78565b9050600060028084886040516020016115b4929190918252602082015260400190565b60408051601f19818403018152908290526115ce91612d5c565b602060405180830381855afa1580156115eb573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061160e9190612d78565b600261161987612396565b604080516020810192909252810186905260600160408051601f198184030181529082905261164791612d5c565b602060405180830381855afa158015611664573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906116879190612d78565b60408051602081019390935282015260600160408051601f19818403018152908290526116b391612d5c565b602060405180830381855afa1580156116d0573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906116f39190612d78565b905060006117018647612b26565b905061170b6123d4565b6001600160a01b03166322895118878b8a60405160200161172e91815260200190565b6040516020818303038152906040528c876040518663ffffffff1660e01b815260040161175e9493929190612d91565b6000604051808303818588803b15801561177757600080fd5b505af115801561178b573d6000803e3d6000fd5b50505050508047146117df5760405162461bcd60e51b815260206004820152601b60248201527f455850454354494e475f4445504f5349545f544f5f48415050454e00000000006044820152606401610867565b7f11553d182c6d24df901ccbb837d640c1ee9994876a88dccc8ddfd7ebab9b6ce18960405161180e91906128c7565b60405180910390a1505050505050505050565b60006107d061123860017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8612b26565b6108796112cb60017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8612b26565b60008061188a611d4d565b90506000611896611821565b9050808210156118e2576801bc16d674ec8000006118b48383612b26565b6118be9190612b3d565b476118c7611ae6565b6118d19190612b0e565b6118db9190612b0e565b9250505090565b476118d1611ae6565b60006107d0612404565b60006107d061123860017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37612b26565b61192d611fc0565b6001600160a01b0316635a4091028360006040518363ffffffff1660e01b815260040161195b929190612b5c565b60006040518083038186803b15801561197357600080fd5b505afa158015611987573d6000803e3d6000fd5b50505050611993611fc0565b6001600160a01b0316635a4091028260006040518363ffffffff1660e01b81526004016119c1929190612b5c565b60006040518083038186803b1580156119d957600080fd5b505afa1580156119ed573d6000803e3d6000fd5b505050505050565b600061082682611b74565b600080611a2e60017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847612b26565b6001600160a01b039485166000908152602091825260408082209590961681529390525050205490565b6000611a778483611a6887611b74565b611a729190612b26565b612434565b611a8f8383611a8586611b74565b611a729190612b0e565b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611ad491815260200190565b60405180910390a35060019392505050565b60006107d061123860017f42b27da24a254372d1e7ea692a34d85d9237abb39a65153affece1e2f1e60900612b26565b6108796112cb60017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37612b26565b60006107d061123860017f8e9e2a1d30fed357d8a000c1131fc77ed65d2052918caf1ccc6eb1e7af3d13b6612b26565b600080611ba260017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838612b26565b6001600160a01b0390931660009081526020939093525050604090205490565b600080611bcd612404565b905080611bdd5750600092915050565b80611be661187f565b611bf09085612b3d565b610ee39190612ad6565b60006107d061123860017faa490d1834c76465b09f09618af9f91fbbd04c30f1f453b24b1e8f907c9e1fa3612b26565b6001600160a01b038116611c515760405163f6b2911f60e01b815260040160405180910390fd5b6108796112cb60017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780612b26565b60006107d0612480565b600080611c94612404565b905080611ca45750600092915050565b611cac61187f565b611bf08285612b3d565b610879816124b0565b610879816124de565b6001600160a01b038116611cef5760405163f6b2911f60e01b815260040160405180910390fd5b6108796112cb60017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb612b26565b60006107d061123860017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb612b26565b60006107d061123860017f6929b6137e885d965ed089510659a629a29a4a54f85c28286fa5e0d7dcf27a37612b26565b6108796112cb60017f42b27da24a254372d1e7ea692a34d85d9237abb39a65153affece1e2f1e60900612b26565b6108796112cb60017f6929b6137e885d965ed089510659a629a29a4a54f85c28286fa5e0d7dcf27a37612b26565b6108796112cb60017fd7f2d45e512a86049f7a113657b39731b6b558609584243063a52cd31a8eb529612b26565b600080611e12611b44565b90506001600160a01b038116611e2a57600091505090565b6000479050816001600160a01b0316637b4b81826040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611e6a57600080fd5b505af1158015611e7e573d6000803e3d6000fd5b5050505060008147611e909190612b26565b90507fda841d3042d792e2509a333b9dcbd4b3dd9b9047d382011f8788fab90ca7e3c781604051611ec391815260200190565b60405180910390a19392505050565b6000611edc6118eb565b905080611efc57604051630d35acd760e21b815260040160405180910390fd5b6000611f066118f5565b9050600081611f158486612b3d565b611f1f9190612b3d565b90506000611f2d8386612b3d565b620186a0611f3961187f565b611f439190612b3d565b611f4d9190612b26565b905060008115611f6657611f618284612ad6565b611f69565b60005b90506000620186a0611f79611208565b611f839084612b3d565b611f8d9190612ad6565b90506000611f9a8261250c565b9050611fb6611fa7611bfa565b611fb18386612b26565b6126d3565b5050505050505050565b60006107d061123860017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780612b26565b6108796112cb60017f8b296ea79529153bb5bae302cb8c44db7ed739099e80c9f19feb68f6a43578a8612b26565b6001600160a01b0381166120455760405163f6b2911f60e01b815260040160405180910390fd5b6108796112cb60017faa490d1834c76465b09f09618af9f91fbbd04c30f1f453b24b1e8f907c9e1fa3612b26565b60006107d061123860017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd612b26565b6108796112cb60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd612b26565b6120da82612741565b6120e381612796565b5050565b6001600160a01b03811661210e5760405163f6b2911f60e01b815260040160405180910390fd5b6108796112cb60017f3f075dea7ef99b1e5db245018e5e4ed8d2a0d93953f5932b2176bef59bd69061612b26565b6000808261214861187f565b6121529190612b26565b90508061216c5761216384846126d3565b82915050610826565b6000816121776118eb565b6121819086612b3d565b61218b9190612ad6565b905061219785826126d3565b91506108269050565b60006107d061123860017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113612b26565b60006107d061123860017f3f075dea7ef99b1e5db245018e5e4ed8d2a0d93953f5932b2176bef59bd69061612b26565b6060602082511015801561221657506040825111155b61222257612222612ddc565b815160401415612230575090565b6040805160208082528183019092526000916020820181803683370190505090506000602082015282516020141561226c57610ee383826127c4565b610ee383612284836000875160406114ce9190612b26565b6127c4565b60608161229781601f612b0e565b10156122d65760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610867565b6122e08284612b0e565b845110156123245760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610867565b606082158015612343576040519150600082526020820160405261238d565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561237c578051835260209283019201612364565b5050858452601f01601f1916604052505b50949350505050565b600081815b60088110156123bc57600892831b60ff831617929190911c9060010161239b565b5080156123cb576123cb612ddc565b5060c01b919050565b60006107d061123860017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260612b26565b60006107d061123860017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b612b26565b600061246160017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838612b26565b6001600160a01b03909316600090815260209390935250604090912055565b60006107d061123860017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281612b26565b6108796112cb60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113612b26565b6108796112cb60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281612b26565b6000806125176121d0565b6001600160a01b0316638cb310036040518163ffffffff1660e01b8152600401600060405180830381865afa158015612554573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261257c9190810190612e32565b9050600081516001600160401b0381111561259957612599612b75565b6040519080825280602002602001820160405280156125c2578160200160208202803683370190505b5090506000805b835181101561264f5760008482815181106125e6576125e6612af8565b602002602001015160e0015185838151811061260457612604612af8565b602002602001015160a0015161261a9190612b26565b90506126268184612b0e565b92508084838151811061263b5761263b612af8565b6020908102919091010152506001016125c9565b5080156126c55760006126628287612ad6565b905060005b83518110156126be576126b685828151811061268557612685612af8565b602002602001015160600151838684815181106126a4576126a4612af8565b6020026020010151611fb19190612b3d565b600101612667565b50506126ca565b600094505b50929392505050565b6126ee816126df612404565b6126e99190612b0e565b612841565b6126fc8282611a8585611b74565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0381166127685760405163f6b2911f60e01b815260040160405180910390fd5b6108796112cb60017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260612b26565b6108796112cb60017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42612b26565b6060806040519050835180825260208201818101602087015b818310156127f55780518352602092830192016127dd565b50855184518101855292509050808201602086015b8183101561282257805183526020928301920161280a565b508651929092011591909101601f01601f191660405250905092915050565b6108796112cb60017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b612b26565b60005b8381101561288a578181015183820152602001612872565b838111156112025750506000910152565b600081518084526128b381602086016020860161286f565b601f01601f19169290920160200192915050565b602081526000610ee3602083018461289b565b6001600160a01b038116811461087957600080fd5b6000806040838503121561290257600080fd5b823561290d816128da565b946020939093013593505050565b60006020828403121561292d57600080fd5b8135610ee3816128da565b60006020828403121561294a57600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60008060006060848603121561297a57600080fd5b8335612985816128da565b92506020840135612995816128da565b929592945050506040919091013590565b6000806000606084860312156129bb57600080fd5b505081359360208301359350604090920135919050565b600080604083850312156129e557600080fd5b82356129f0816128da565b91506020830135612a00816128da565b809150509250929050565b6000806000806000806000806000806101408b8d031215612a2b57600080fd5b8a35612a36816128da565b995060208b0135612a46816128da565b985060408b0135975060608b0135612a5d816128da565b965060808b0135612a6d816128da565b955060a08b0135612a7d816128da565b945060c08b0135612a8d816128da565b935060e08b0135612a9d816128da565b809350506101008b013591506101208b013590509295989b9194979a5092959850565b634e487b7160e01b600052601160045260246000fd5b600082612af357634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60008219821115612b2157612b21612ac0565b500190565b600082821015612b3857612b38612ac0565b500390565b6000816000190483118215151615612b5757612b57612ac0565b500290565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b0381118282101715612bae57612bae612b75565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612bdc57612bdc612b75565b604052919050565b60006001600160401b03821115612bfd57612bfd612b75565b5060051b60200190565b60006001600160401b03831115612c2057612c20612b75565b612c33601f8401601f1916602001612bb4565b9050828152838383011115612c4757600080fd5b610ee383602083018461286f565b600082601f830112612c6657600080fd5b81516020612c7b612c7683612be4565b612bb4565b82815260059290921b84018101918181019086841115612c9a57600080fd5b8286015b84811015612cee5780516001600160401b03811115612cbd5760008081fd5b8701603f81018913612ccf5760008081fd5b612ce0898683015160408401612c07565b845250918301918301612c9e565b509695505050505050565b60008060408385031215612d0c57600080fd5b82516001600160401b0380821115612d2357600080fd5b612d2f86838701612c55565b93506020850151915080821115612d4557600080fd5b50612d5285828601612c55565b9150509250929050565b60008251612d6e81846020870161286f565b9190910192915050565b600060208284031215612d8a57600080fd5b5051919050565b608081526000612da4608083018761289b565b8281036020840152612db6818761289b565b90508281036040840152612dca818661289b565b91505082606083015295945050505050565b634e487b7160e01b600052600160045260246000fd5b80518015158114612e0257600080fd5b919050565b600082601f830112612e1857600080fd5b610ee383835160208501612c07565b8051612e02816128da565b60006020808385031215612e4557600080fd5b82516001600160401b0380821115612e5c57600080fd5b818501915085601f830112612e7057600080fd5b8151612e7e612c7682612be4565b81815260059190911b83018401908481019088831115612e9d57600080fd5b8585015b83811015612f6f57805185811115612eb95760008081fd5b8601610100818c03601f1901811315612ed25760008081fd5b612eda612b8b565b612ee58a8401612df2565b815260408084015189811115612efb5760008081fd5b612f098f8d83880101612e07565b8c840152506060612f1b818601612e27565b8284015260809150612f2e828601612e27565b9083015260a0848101519183019190915260c0808501519183019190915260e080850151918301919091529190920151908201528352918601918601612ea1565b509897505050505050505056fea2646970667358221220355dd8f76eb70b5ecf06bd71ceff081fc27c755b405f869ec8ed6a8cc5f55fe764736f6c634300080a0033",
  "deployedBytecode": "0x60806040526004361061026b5760003560e01c806370a0823111610144578063bf15af56116100b6578063ec342ad01161007a578063ec342ad0146106bb578063efd60347146106d2578063f0f44260146106da578063f2fde38b146106fa578063f79c3f021461071a578063f9e018571461073a5761027b565b8063bf15af5614610649578063c5eff3d01461065e578063d0e30db014610673578063d56580ff1461067b578063dd62ed3e1461069b5761027b565b8063833b1fce11610108578063833b1fce146105a957806387f2adfb146105be57806395d89b41146105d35780639e3947f314610601578063a9059cbb14610616578063ac232bde146106365761027b565b806370a0823114610514578063799a19541461053457806379ba5097146105545780637adbf9731461056957806380d4027e146105895761027b565b8063252d6a34116101dd5780633af9e669116101a15780633af9e669146104805780633b19e84a146104a0578063540bc5ea146104b557806356396715146104ca57806358bf3c7f146104df5780635a88bd77146104ff5761027b565b8063252d6a34146103fd578063291206f6146104125780632cb562e114610432578063313ce5671461044757806336bf3325146104635761027b565b8063143a08d41161022f578063143a08d414610369578063169674071461037e57806318160ddd146103a0578063192feab4146103b55780631bcbfaba146103c857806323b872dd146103dd5761027b565b8063014d76bd1461029457806306fdde03146102bc578063095ea7b3146102f95780631311cf8d1461032957806313d86aed146103495761027b565b3661027b576102793361075a565b005b60405163574b16a760e11b815260040160405180910390fd5b3480156102a057600080fd5b506102a96107c6565b6040519081526020015b60405180910390f35b3480156102c857600080fd5b5060408051808201909152600b81526a2934bb32b91022ba3432b960a91b60208201525b6040516102b391906128c7565b34801561030557600080fd5b506103196103143660046128ef565b6107d5565b60405190151581526020016102b3565b34801561033557600080fd5b5061027961034436600461291b565b61082c565b34801561035557600080fd5b50610279610364366004612938565b61087c565b34801561037557600080fd5b506102a96109cd565b34801561038a57600080fd5b506103936109d7565b6040516102b39190612951565b3480156103ac57600080fd5b506102a96109e1565b3480156103c157600080fd5b50476102a9565b3480156103d457600080fd5b506102a96109eb565b3480156103e957600080fd5b506103196103f8366004612965565b6109f5565b34801561040957600080fd5b506102a9610ad9565b34801561041e57600080fd5b5061027961042d366004612938565b610ae3565b34801561043e57600080fd5b50610393610b4b565b34801561045357600080fd5b50604051601281526020016102b3565b34801561046f57600080fd5b506102a96801bc16d674ec80000081565b34801561048c57600080fd5b506102a961049b36600461291b565b610b55565b3480156104ac57600080fd5b50610393610b68565b3480156104c157600080fd5b506102a9606081565b3480156104d657600080fd5b506102a9610b72565b3480156104eb57600080fd5b506102796104fa36600461291b565b610b7c565b34801561050b57600080fd5b50610393610bc0565b34801561052057600080fd5b506102a961052f36600461291b565b610bca565b34801561054057600080fd5b506102a961054f366004612938565b610bd5565b34801561056057600080fd5b50610279610be0565b34801561057557600080fd5b5061027961058436600461291b565b610c30565b34801561059557600080fd5b506102796105a43660046129a6565b610c74565b3480156105b557600080fd5b50610393610dc6565b3480156105ca57600080fd5b506102a9610dd0565b3480156105df57600080fd5b506040805180820190915260058152640d8e68aa8960db1b60208201526102ec565b34801561060d57600080fd5b506102a9610dda565b34801561062257600080fd5b506103196106313660046128ef565b610de4565b61027961064436600461291b565b610e53565b34801561065557600080fd5b506102a9603081565b34801561066a57600080fd5b50610393610e5c565b610279610e66565b34801561068757600080fd5b50610279610696366004612938565b610e6f565b3480156106a757600080fd5b506102a96106b63660046129d2565b610ed7565b3480156106c757600080fd5b506102a9620186a081565b610279610eea565b3480156106e657600080fd5b506102796106f536600461291b565b610f25565b34801561070657600080fd5b5061027961071536600461291b565b610f69565b34801561072657600080fd5b506102a9610735366004612938565b610fad565b34801561074657600080fd5b50610279610755366004612a0b565b610fb8565b34610778576040516395b66fe960e01b815260040160405180910390fd5b61078333823461108c565b6040513481526001600160a01b0382169033907f3bc57f469ad6d10d7723ea226cd22bd2b9e527def2b529f6ab44645a166895829060200160405180910390a350565b60006107d0611208565b905090565b60006107e233848461123c565b6040518281526001600160a01b0384169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259060200160405180910390a35060015b92915050565b610834611293565b6001600160a01b0316336001600160a01b031614610870573360405163472511eb60e11b81526004016108679190612951565b60405180910390fd5b6108798161129d565b50565b600061089a6108946801bc16d674ec80000047612ad6565b836112d0565b9050806108ba57604051631036b5ad60e31b815260040160405180910390fd5b6000806108c6836112e5565b81519193509150806108eb5760405163200149ad60e21b815260040160405180910390fd5b8381111561090c57604051635993bd5760e01b815260040160405180910390fd5b815181811461092e576040516322e5ce4360e21b815260040160405180910390fd5b600061093861136d565b90508061095857604051639be7315960e01b815260040160405180910390fd5b60005b838110156109a8576109a086828151811061097857610978612af8565b602002602001015186838151811061099257610992612af8565b60200260200101518461139d565b60010161095b565b506109c4836109b5611821565b6109bf9190612b0e565b611851565b50505050505050565b60006107d061187f565b60006107d0611293565b60006107d06118eb565b60006107d06118f5565b60008383610a038282611925565b8380610a22576040516336b216db60e21b815260040160405180910390fd5b868580610a2e836119f5565b1015610a4d576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b0389163314610ac1576000610a698a33611a00565b905087811015610aab57604051637b936de360e01b81526001600160a01b038b1660048201523360248201526044810182905260648101899052608401610867565b610abf8a33610aba8b85612b26565b61123c565b505b610acc898989611a58565b9998505050505050505050565b60006107d0611ae6565b610aeb611293565b6001600160a01b0316336001600160a01b031614610b1e573360405163472511eb60e11b81526004016108679190612951565b620186a0811115610b425760405163a9cb9e0d60e01b815260040160405180910390fd5b61087981611b16565b60006107d0611b44565b6000610826610b6383611b74565b611bc2565b60006107d0611bfa565b60006107d061136d565b610b84611293565b6001600160a01b0316336001600160a01b031614610bb7573360405163472511eb60e11b81526004016108679190612951565b61087981611c2a565b60006107d0611c7f565b6000610826826119f5565b600061082682611c89565b610be8611c7f565b6001600160a01b0316336001600160a01b031614610c1b573360405163472511eb60e11b81526004016108679190612951565b610c2433611cb6565b610c2e6000611cbf565b565b610c38611293565b6001600160a01b0316336001600160a01b031614610c6b573360405163472511eb60e11b81526004016108679190612951565b61087981611cc8565b610c7c611d1d565b6001600160a01b0316336001600160a01b031614610caf573360405163472511eb60e11b81526004016108679190612951565b610cb7611821565b831115610ce95782610cc7611821565b6040516376179ac560e01b815260048101929092526024820152604401610867565b6000610cf3611d4d565b610cfd9085612b26565b90506000610d14826801bc16d674ec800000612b3d565b610d1c611ae6565b610d269190612b0e565b9050610d3184611d7d565b610d3a85611dab565b610d4383611dd9565b6000610d4d611e07565b9050610d598186612b0e565b821015610d7d57610d7d82610d6e8388612b0e565b610d789190612b26565b611ed2565b60408051878152602081018790529081018590527f98e488f5118fc11ab540716c2afc4e440c0a892d27a4efef33db94b4f9da65899060600160405180910390a1505050505050565b60006107d0611d1d565b60006107d0611821565b60006107d0611d4d565b60003383610df28282611925565b8380610e11576040516336b216db60e21b815260040160405180910390fd5b338580610e1d836119f5565b1015610e3c576040516351940b3960e11b815260040160405180910390fd5b610e47338989611a58565b98975050505050505050565b6108798161075a565b60006107d0611fc0565b610c2e3361075a565b610e77611293565b6001600160a01b0316336001600160a01b031614610eaa573360405163472511eb60e11b81526004016108679190612951565b620186a0811115610ece5760405163a9cb9e0d60e01b815260040160405180910390fd5b61087981611ff0565b6000610ee38383611a00565b9392505050565b610ef2611b44565b6001600160a01b0316336001600160a01b031614610c2e573360405163472511eb60e11b81526004016108679190612951565b610f2d611293565b6001600160a01b0316336001600160a01b031614610f60573360405163472511eb60e11b81526004016108679190612951565b6108798161201e565b610f71611293565b6001600160a01b0316336001600160a01b031614610fa4573360405163472511eb60e11b81526004016108679190612951565b61087981611cbf565b600061082682611bc2565b6000610fc2612073565b8114610ff35780610fd1612073565b604051631cfd276760e31b815260048101929092526024820152604401610867565b611006611001826001612b0e565b6120a3565b6001600160a01b03871661102d5760405163f6b2911f60e01b815260040160405180910390fd5b61103687611cb6565b61103f8461201e565b61104883611b16565b61105182611ff0565b61105a8a61129d565b6110648b8a6120d1565b61106d88610c6b565b61107686611c2a565b61107f856120e7565b5050505050505050505050565b6000611098848361213c565b9050826001600160a01b0316846001600160a01b0316141561111f576110bc611fc0565b6001600160a01b0316635a4091028560016040518363ffffffff1660e01b81526004016110ea929190612b5c565b60006040518083038186803b15801561110257600080fd5b505afa158015611116573d6000803e3d6000fd5b50505050611202565b611127611fc0565b6001600160a01b0316635a4091028561114260006001612b0e565b6040518363ffffffff1660e01b815260040161115f929190612b5c565b60006040518083038186803b15801561117757600080fd5b505afa15801561118b573d6000803e3d6000fd5b50505050611197611fc0565b6001600160a01b0316635a4091028460006040518363ffffffff1660e01b81526004016111c5929190612b5c565b60006040518083038186803b1580156111dd57600080fd5b505afa1580156111f1573d6000803e3d6000fd5b50505050611200848483611a58565b505b50505050565b60006107d061123860017f8b296ea79529153bb5bae302cb8c44db7ed739099e80c9f19feb68f6a43578a8612b26565b5490565b600061126960017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847612b26565b6001600160a01b039485166000908152602091825260408082209590961681529390525091902055565b60006107d06121a0565b6108796112cb60017f8e9e2a1d30fed357d8a000c1131fc77ed65d2052918caf1ccc6eb1e7af3d13b6612b26565b829055565b60008183116112df5782610ee3565b50919050565b6060806112f06121d0565b6001600160a01b031663a1947323846040518263ffffffff1660e01b815260040161131d91815260200190565b6000604051808303816000875af115801561133c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113649190810190612cf9565b91509150915091565b60006107d061123860017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42612b26565b60308351146113bf5760405163050cb55360e41b815260040160405180910390fd5b60608251146113e15760405163408ebd3960e01b815260040160405180910390fd5b6801bc16d674ec80000060006113fb633b9aca0083612ad6565b90506000600261140a87612200565b6040516114179190612d5c565b602060405180830381855afa158015611434573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906114579190612d78565b9050600060028061146b8860006040612289565b6040516114789190612d5c565b602060405180830381855afa158015611495573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906114b89190612d78565b60026114d86114d38a60406114ce816060612b26565b612289565b612200565b6040516114e59190612d5c565b602060405180830381855afa158015611502573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906115259190612d78565b60408051602081019390935282015260600160408051601f198184030181529082905261155191612d5c565b602060405180830381855afa15801561156e573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906115919190612d78565b9050600060028084886040516020016115b4929190918252602082015260400190565b60408051601f19818403018152908290526115ce91612d5c565b602060405180830381855afa1580156115eb573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061160e9190612d78565b600261161987612396565b604080516020810192909252810186905260600160408051601f198184030181529082905261164791612d5c565b602060405180830381855afa158015611664573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906116879190612d78565b60408051602081019390935282015260600160408051601f19818403018152908290526116b391612d5c565b602060405180830381855afa1580156116d0573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906116f39190612d78565b905060006117018647612b26565b905061170b6123d4565b6001600160a01b03166322895118878b8a60405160200161172e91815260200190565b6040516020818303038152906040528c876040518663ffffffff1660e01b815260040161175e9493929190612d91565b6000604051808303818588803b15801561177757600080fd5b505af115801561178b573d6000803e3d6000fd5b50505050508047146117df5760405162461bcd60e51b815260206004820152601b60248201527f455850454354494e475f4445504f5349545f544f5f48415050454e00000000006044820152606401610867565b7f11553d182c6d24df901ccbb837d640c1ee9994876a88dccc8ddfd7ebab9b6ce18960405161180e91906128c7565b60405180910390a1505050505050505050565b60006107d061123860017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8612b26565b6108796112cb60017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8612b26565b60008061188a611d4d565b90506000611896611821565b9050808210156118e2576801bc16d674ec8000006118b48383612b26565b6118be9190612b3d565b476118c7611ae6565b6118d19190612b0e565b6118db9190612b0e565b9250505090565b476118d1611ae6565b60006107d0612404565b60006107d061123860017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37612b26565b61192d611fc0565b6001600160a01b0316635a4091028360006040518363ffffffff1660e01b815260040161195b929190612b5c565b60006040518083038186803b15801561197357600080fd5b505afa158015611987573d6000803e3d6000fd5b50505050611993611fc0565b6001600160a01b0316635a4091028260006040518363ffffffff1660e01b81526004016119c1929190612b5c565b60006040518083038186803b1580156119d957600080fd5b505afa1580156119ed573d6000803e3d6000fd5b505050505050565b600061082682611b74565b600080611a2e60017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847612b26565b6001600160a01b039485166000908152602091825260408082209590961681529390525050205490565b6000611a778483611a6887611b74565b611a729190612b26565b612434565b611a8f8383611a8586611b74565b611a729190612b0e565b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611ad491815260200190565b60405180910390a35060019392505050565b60006107d061123860017f42b27da24a254372d1e7ea692a34d85d9237abb39a65153affece1e2f1e60900612b26565b6108796112cb60017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37612b26565b60006107d061123860017f8e9e2a1d30fed357d8a000c1131fc77ed65d2052918caf1ccc6eb1e7af3d13b6612b26565b600080611ba260017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838612b26565b6001600160a01b0390931660009081526020939093525050604090205490565b600080611bcd612404565b905080611bdd5750600092915050565b80611be661187f565b611bf09085612b3d565b610ee39190612ad6565b60006107d061123860017faa490d1834c76465b09f09618af9f91fbbd04c30f1f453b24b1e8f907c9e1fa3612b26565b6001600160a01b038116611c515760405163f6b2911f60e01b815260040160405180910390fd5b6108796112cb60017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780612b26565b60006107d0612480565b600080611c94612404565b905080611ca45750600092915050565b611cac61187f565b611bf08285612b3d565b610879816124b0565b610879816124de565b6001600160a01b038116611cef5760405163f6b2911f60e01b815260040160405180910390fd5b6108796112cb60017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb612b26565b60006107d061123860017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb612b26565b60006107d061123860017f6929b6137e885d965ed089510659a629a29a4a54f85c28286fa5e0d7dcf27a37612b26565b6108796112cb60017f42b27da24a254372d1e7ea692a34d85d9237abb39a65153affece1e2f1e60900612b26565b6108796112cb60017f6929b6137e885d965ed089510659a629a29a4a54f85c28286fa5e0d7dcf27a37612b26565b6108796112cb60017fd7f2d45e512a86049f7a113657b39731b6b558609584243063a52cd31a8eb529612b26565b600080611e12611b44565b90506001600160a01b038116611e2a57600091505090565b6000479050816001600160a01b0316637b4b81826040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611e6a57600080fd5b505af1158015611e7e573d6000803e3d6000fd5b5050505060008147611e909190612b26565b90507fda841d3042d792e2509a333b9dcbd4b3dd9b9047d382011f8788fab90ca7e3c781604051611ec391815260200190565b60405180910390a19392505050565b6000611edc6118eb565b905080611efc57604051630d35acd760e21b815260040160405180910390fd5b6000611f066118f5565b9050600081611f158486612b3d565b611f1f9190612b3d565b90506000611f2d8386612b3d565b620186a0611f3961187f565b611f439190612b3d565b611f4d9190612b26565b905060008115611f6657611f618284612ad6565b611f69565b60005b90506000620186a0611f79611208565b611f839084612b3d565b611f8d9190612ad6565b90506000611f9a8261250c565b9050611fb6611fa7611bfa565b611fb18386612b26565b6126d3565b5050505050505050565b60006107d061123860017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780612b26565b6108796112cb60017f8b296ea79529153bb5bae302cb8c44db7ed739099e80c9f19feb68f6a43578a8612b26565b6001600160a01b0381166120455760405163f6b2911f60e01b815260040160405180910390fd5b6108796112cb60017faa490d1834c76465b09f09618af9f91fbbd04c30f1f453b24b1e8f907c9e1fa3612b26565b60006107d061123860017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd612b26565b6108796112cb60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd612b26565b6120da82612741565b6120e381612796565b5050565b6001600160a01b03811661210e5760405163f6b2911f60e01b815260040160405180910390fd5b6108796112cb60017f3f075dea7ef99b1e5db245018e5e4ed8d2a0d93953f5932b2176bef59bd69061612b26565b6000808261214861187f565b6121529190612b26565b90508061216c5761216384846126d3565b82915050610826565b6000816121776118eb565b6121819086612b3d565b61218b9190612ad6565b905061219785826126d3565b91506108269050565b60006107d061123860017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113612b26565b60006107d061123860017f3f075dea7ef99b1e5db245018e5e4ed8d2a0d93953f5932b2176bef59bd69061612b26565b6060602082511015801561221657506040825111155b61222257612222612ddc565b815160401415612230575090565b6040805160208082528183019092526000916020820181803683370190505090506000602082015282516020141561226c57610ee383826127c4565b610ee383612284836000875160406114ce9190612b26565b6127c4565b60608161229781601f612b0e565b10156122d65760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610867565b6122e08284612b0e565b845110156123245760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610867565b606082158015612343576040519150600082526020820160405261238d565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561237c578051835260209283019201612364565b5050858452601f01601f1916604052505b50949350505050565b600081815b60088110156123bc57600892831b60ff831617929190911c9060010161239b565b5080156123cb576123cb612ddc565b5060c01b919050565b60006107d061123860017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260612b26565b60006107d061123860017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b612b26565b600061246160017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838612b26565b6001600160a01b03909316600090815260209390935250604090912055565b60006107d061123860017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281612b26565b6108796112cb60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113612b26565b6108796112cb60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281612b26565b6000806125176121d0565b6001600160a01b0316638cb310036040518163ffffffff1660e01b8152600401600060405180830381865afa158015612554573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261257c9190810190612e32565b9050600081516001600160401b0381111561259957612599612b75565b6040519080825280602002602001820160405280156125c2578160200160208202803683370190505b5090506000805b835181101561264f5760008482815181106125e6576125e6612af8565b602002602001015160e0015185838151811061260457612604612af8565b602002602001015160a0015161261a9190612b26565b90506126268184612b0e565b92508084838151811061263b5761263b612af8565b6020908102919091010152506001016125c9565b5080156126c55760006126628287612ad6565b905060005b83518110156126be576126b685828151811061268557612685612af8565b602002602001015160600151838684815181106126a4576126a4612af8565b6020026020010151611fb19190612b3d565b600101612667565b50506126ca565b600094505b50929392505050565b6126ee816126df612404565b6126e99190612b0e565b612841565b6126fc8282611a8585611b74565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0381166127685760405163f6b2911f60e01b815260040160405180910390fd5b6108796112cb60017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260612b26565b6108796112cb60017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42612b26565b6060806040519050835180825260208201818101602087015b818310156127f55780518352602092830192016127dd565b50855184518101855292509050808201602086015b8183101561282257805183526020928301920161280a565b508651929092011591909101601f01601f191660405250905092915050565b6108796112cb60017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b612b26565b60005b8381101561288a578181015183820152602001612872565b838111156112025750506000910152565b600081518084526128b381602086016020860161286f565b601f01601f19169290920160200192915050565b602081526000610ee3602083018461289b565b6001600160a01b038116811461087957600080fd5b6000806040838503121561290257600080fd5b823561290d816128da565b946020939093013593505050565b60006020828403121561292d57600080fd5b8135610ee3816128da565b60006020828403121561294a57600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60008060006060848603121561297a57600080fd5b8335612985816128da565b92506020840135612995816128da565b929592945050506040919091013590565b6000806000606084860312156129bb57600080fd5b505081359360208301359350604090920135919050565b600080604083850312156129e557600080fd5b82356129f0816128da565b91506020830135612a00816128da565b809150509250929050565b6000806000806000806000806000806101408b8d031215612a2b57600080fd5b8a35612a36816128da565b995060208b0135612a46816128da565b985060408b0135975060608b0135612a5d816128da565b965060808b0135612a6d816128da565b955060a08b0135612a7d816128da565b945060c08b0135612a8d816128da565b935060e08b0135612a9d816128da565b809350506101008b013591506101208b013590509295989b9194979a5092959850565b634e487b7160e01b600052601160045260246000fd5b600082612af357634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60008219821115612b2157612b21612ac0565b500190565b600082821015612b3857612b38612ac0565b500390565b6000816000190483118215151615612b5757612b57612ac0565b500290565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b0381118282101715612bae57612bae612b75565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612bdc57612bdc612b75565b604052919050565b60006001600160401b03821115612bfd57612bfd612b75565b5060051b60200190565b60006001600160401b03831115612c2057612c20612b75565b612c33601f8401601f1916602001612bb4565b9050828152838383011115612c4757600080fd5b610ee383602083018461286f565b600082601f830112612c6657600080fd5b81516020612c7b612c7683612be4565b612bb4565b82815260059290921b84018101918181019086841115612c9a57600080fd5b8286015b84811015612cee5780516001600160401b03811115612cbd5760008081fd5b8701603f81018913612ccf5760008081fd5b612ce0898683015160408401612c07565b845250918301918301612c9e565b509695505050505050565b60008060408385031215612d0c57600080fd5b82516001600160401b0380821115612d2357600080fd5b612d2f86838701612c55565b93506020850151915080821115612d4557600080fd5b50612d5285828601612c55565b9150509250929050565b60008251612d6e81846020870161286f565b9190910192915050565b600060208284031215612d8a57600080fd5b5051919050565b608081526000612da4608083018761289b565b8281036020840152612db6818761289b565b90508281036040840152612dca818661289b565b91505082606083015295945050505050565b634e487b7160e01b600052600160045260246000fd5b80518015158114612e0257600080fd5b919050565b600082601f830112612e1857600080fd5b610ee383835160208501612c07565b8051612e02816128da565b60006020808385031215612e4557600080fd5b82516001600160401b0380821115612e5c57600080fd5b818501915085601f830112612e7057600080fd5b8151612e7e612c7682612be4565b81815260059190911b83018401908481019088831115612e9d57600080fd5b8585015b83811015612f6f57805185811115612eb95760008081fd5b8601610100818c03601f1901811315612ed25760008081fd5b612eda612b8b565b612ee58a8401612df2565b815260408084015189811115612efb5760008081fd5b612f098f8d83880101612e07565b8c840152506060612f1b818601612e27565b8284015260809150612f2e828601612e27565b9083015260a0848101519183019190915260c0808501519183019190915260e080850151918301919091529190920151908201528352918601918601612ea1565b509897505050505050505056fea2646970667358221220355dd8f76eb70b5ecf06bd71ceff081fc27c755b405f869ec8ed6a8cc5f55fe764736f6c634300080a0033",
  "devdoc": {
    "author": "Kiln",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "An approved account can use transferFrom to transfer funds on behalf of the token owner",
        "params": {
          "_spender": "Address that is allowed to spend the tokens",
          "_value": "The allowed amount, will override previous value"
        }
      },
      "balanceOf(address)": {
        "params": {
          "_owner": "Address to be checked"
        }
      },
      "balanceOfUnderlying(address)": {
        "params": {
          "_owner": "Address to be checked"
        }
      },
      "depositAndTransfer(address)": {
        "params": {
          "_recipient": "Address receiving the minted lsETH"
        }
      },
      "depositToConsensusLayer(uint256)": {
        "params": {
          "_maxCount": "The maximum amount of validator keys to fund"
        }
      },
      "initRiverV1(address,address,bytes32,address,address,address,address,address,uint256,uint256)": {
        "params": {
          "_allowlistAddress": "Address of the allowlist contract",
          "_depositContractAddress": "Address to make Consensus Layer deposits",
          "_elFeeRecipientAddress": "Address that receives the execution layer fees",
          "_globalFee": "Amount retained when the eth balance increases, splitted between the treasury and the operators",
          "_operatorRegistryAddress": "Address of the operator registry",
          "_operatorRewardsShare": "Share of the global fee used to reward node operators",
          "_systemAdministratorAddress": "Administrator address",
          "_treasuryAddress": "Address receiving the fee minus the operator share",
          "_withdrawalCredentials": "Credentials to use for every validator deposit"
        }
      },
      "setAllowlist(address)": {
        "params": {
          "_newAllowlist": "New address for the allowlist"
        }
      },
      "setBeaconData(uint256,uint256,bytes32)": {
        "details": "Can only be called by the oracle address",
        "params": {
          "_roundId": "An identifier for this update",
          "_validatorBalanceSum": "The validator balance sum of the active validators on the consensus layer",
          "_validatorCount": "The number of active validators on the consensus layer"
        }
      },
      "setELFeeRecipient(address)": {
        "params": {
          "_newELFeeRecipient": "New address for the recipient"
        }
      },
      "setGlobalFee(uint256)": {
        "params": {
          "newFee": "New fee value"
        }
      },
      "setOperatorRewardsShare(uint256)": {
        "params": {
          "newOperatorRewardsShare": "New share value"
        }
      },
      "setOracle(address)": {
        "params": {
          "_oracleAddress": "Address of the oracle"
        }
      },
      "setTreasury(address)": {
        "params": {
          "_newTreasury": "New address for the treasury"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "_to": "Address receiving the tokens",
          "_value": "Amount to be sent"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "If the specified _from argument is the message sender, behaves like a regular transferIf the specified _from argument is not the message sender, checks that the message sender has been given enough allowance",
        "params": {
          "_from": "Address sending the tokens",
          "_to": "Address receiving the tokens",
          "_value": "Amount to be sent"
        }
      },
      "transferOwnership(address)": {
        "params": {
          "_newAdmin": "New address for the admin"
        }
      }
    },
    "title": "River (v1)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Accepts the ownership of the system"
      },
      "allowance(address,address)": {
        "notice": "Retrieve the allowance value for a spender_owner Address that issued the allowance_spender Address that received the allowance"
      },
      "approve(address,uint256)": {
        "notice": "Approves an account for future spendings"
      },
      "balanceOf(address)": {
        "notice": "Retrieve the balance of an account"
      },
      "balanceOfUnderlying(address)": {
        "notice": "Retrieve the underlying asset balance of an account"
      },
      "decimals()": {
        "notice": "Retrieve the decimal count"
      },
      "deposit()": {
        "notice": "Explicit deposit method to mint on msg.sender"
      },
      "depositAndTransfer(address)": {
        "notice": "Explicit deposit method to mint on msg.sender and transfer to _recipient"
      },
      "depositToConsensusLayer(uint256)": {
        "notice": "Deposits current balance to the Consensus Layer by batches of 32 ETH"
      },
      "getAdministrator()": {
        "notice": "Retrieve system administrator address"
      },
      "getAllowlist()": {
        "notice": "Retrieve the allowlist address"
      },
      "getBeaconValidatorBalanceSum()": {
        "notice": "Get Beacon validator balance sum"
      },
      "getBeaconValidatorCount()": {
        "notice": "Get Beacon validator count (the amount of validator reported by the oracles)"
      },
      "getDepositedValidatorCount()": {
        "notice": "Get the deposited validator count (the count of deposits made by the contract)"
      },
      "getELFeeRecipient()": {
        "notice": "Retrieve the execution layer fee recipient"
      },
      "getGlobalFee()": {
        "notice": "Get the current global fee"
      },
      "getOperatorRewardsShare()": {
        "notice": "Get the current operator rewards share"
      },
      "getOracle()": {
        "notice": "Get Oracle address"
      },
      "getPendingAdministrator()": {
        "notice": "Retrieve system pending administrator address"
      },
      "getPendingEth()": {
        "notice": "Returns the amount of pending ETH"
      },
      "getTreasury()": {
        "notice": "Retrieve the treasury address"
      },
      "getWithdrawalCredentials()": {
        "notice": "Retrieve the withdrawal credentials"
      },
      "initRiverV1(address,address,bytes32,address,address,address,address,address,uint256,uint256)": {
        "notice": "Initializes the River system"
      },
      "name()": {
        "notice": "Retrieve the token name"
      },
      "sendELFees()": {
        "notice": "Input for execution layer fee earnings"
      },
      "setAllowlist(address)": {
        "notice": "Changes the allowlist address"
      },
      "setBeaconData(uint256,uint256,bytes32)": {
        "notice": "Sets the validator count and validator balance sum reported by the oracle"
      },
      "setELFeeRecipient(address)": {
        "notice": "Changes the execution layer fee recipient"
      },
      "setGlobalFee(uint256)": {
        "notice": "Changes the global fee parameter"
      },
      "setOperatorRewardsShare(uint256)": {
        "notice": "Changes the operator rewards share."
      },
      "setOracle(address)": {
        "notice": "Set Oracle address"
      },
      "setTreasury(address)": {
        "notice": "Changes the treasury address"
      },
      "symbol()": {
        "notice": "Retrieve the token symbol"
      },
      "totalSupply()": {
        "notice": "Retrieve the total token supply"
      },
      "totalUnderlyingSupply()": {
        "notice": "Retrieve the total underlying asset supply"
      },
      "transfer(address,uint256)": {
        "notice": "Performs a transfer from the message sender to the provided account"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Performs a transfer between two recipients"
      },
      "transferOwnership(address)": {
        "notice": "Changes the admin but waits for new admin approval"
      }
    },
    "notice": "This contract merges all the manager contracts and implements all the virtual methods stitching all components together",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}