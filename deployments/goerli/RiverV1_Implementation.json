{
  "address": "0xF8bb40A579BC1cfb9E019035840fBCf364aA563b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "AllowanceTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyDonation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "InactiveOperator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentPublicKeys",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentSignatures",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArrayLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEmptyArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFundedKeyDeletionAttempt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedVersion",
          "type": "uint256"
        }
      ],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidKeyCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPublicKeyCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPublicKeysLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignatureCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidUnsortedIndexes",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_providedValidatorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "InvalidValidatorCountReport",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWithdrawalCredentials",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoAvailableValidatorKeys",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullTransfer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "OperatorAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "keyCount",
          "type": "uint256"
        }
      ],
      "name": "OperatorLimitTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "OperatorNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "OperatorNotFoundAtIndex",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroMintedShares",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operatorAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeRecipientAddress",
          "type": "address"
        }
      ],
      "name": "AddedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "publicKeys",
          "type": "bytes"
        }
      ],
      "name": "AddedValidatorKeys",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validatorCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validatorBalanceSum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "roundId",
          "type": "bytes32"
        }
      ],
      "name": "BeaconDataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "name": "FundedValidatorKey",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PulledELFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "name": "RemovedValidatorKey",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOperatorAddress",
          "type": "address"
        }
      ],
      "name": "SetOperatorAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOperatorAddress",
          "type": "address"
        }
      ],
      "name": "SetOperatorFeeRecipientAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        }
      ],
      "name": "SetOperatorLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "name",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "SetOperatorName",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "SetOperatorStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStoppedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "SetOperatorStoppedValidatorCount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UserDeposit",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_KEY_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIGNATURE_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_keyCount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_publicKeys",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_signatures",
          "type": "bytes"
        }
      ],
      "name": "addValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "depositAndTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxCount",
          "type": "uint256"
        }
      ],
      "name": "depositToConsensusLayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdministrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowlist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeaconValidatorBalanceSum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "beaconValidatorBalanceSum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeaconValidatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "beaconValidatorCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositedValidatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "depositedValidatorCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getELFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getOperator",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "funded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "keys",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stopped",
              "type": "uint256"
            }
          ],
          "internalType": "struct Operators.Operator",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getOperatorByName",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "funded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "keys",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stopped",
              "type": "uint256"
            }
          ],
          "internalType": "struct Operators.Operator",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getOperatorDetails",
      "outputs": [
        {
          "internalType": "int256",
          "name": "_index",
          "type": "int256"
        },
        {
          "internalType": "address",
          "name": "_operatorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingAdministrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_operatorIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorIndex",
          "type": "uint256"
        }
      ],
      "name": "getValidator",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "funded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawalCredentials",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_elFeeRecipientAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_withdrawalCredentials",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_systemAdministratorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_allowlistAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_globalFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_operatorRewardsShare",
          "type": "uint256"
        }
      ],
      "name": "initRiverV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "removeValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendELFees",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAllowlist",
          "type": "address"
        }
      ],
      "name": "setAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_validatorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorBalanceSum",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_roundId",
          "type": "bytes32"
        }
      ],
      "name": "setBeaconData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newELFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setELFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "setGlobalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newOperatorAddress",
          "type": "address"
        }
      ],
      "name": "setOperatorAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newOperatorFeeRecipientAddress",
          "type": "address"
        }
      ],
      "name": "setOperatorFeeRecipientAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_operatorIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_newLimits",
          "type": "uint256[]"
        }
      ],
      "name": "setOperatorLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_newName",
          "type": "string"
        }
      ],
      "name": "setOperatorName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newOperatorRewardsShare",
          "type": "uint256"
        }
      ],
      "name": "setOperatorRewardsShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_newStatus",
          "type": "bool"
        }
      ],
      "name": "setOperatorStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newStoppedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "setOperatorStoppedValidatorCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTreasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "underlyingBalance",
          "type": "uint256"
        }
      ],
      "name": "sharesFromUnderlyingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUnderlyingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "underlyingBalanceFromShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb042eab8172bbbb97443d9faefe7753f174a497fd66a5823ff2e3bd8e59d9998",
  "receipt": {
    "to": null,
    "from": "0x92D7d6DADe15fcF369534cEb8CD1A27f97185ab3",
    "contractAddress": "0xF8bb40A579BC1cfb9E019035840fBCf364aA563b",
    "transactionIndex": 14,
    "gasUsed": "5176722",
    "logsBloom": "0x
    "blockHash": "0x0c175e673583068136773118b453a73cd24ced4fb7cb11d3969e46b51db7cd4a",
    "transactionHash": "0xb042eab8172bbbb97443d9faefe7753f174a497fd66a5823ff2e3bd8e59d9998",
    "logs": [],
    "blockNumber": 7426582,
    "cumulativeGasUsed": "9686509",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "729d22041ba07b04f087970e4e8c18b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"AllowanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyDonation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"InactiveOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentPublicKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFundedKeyDeletionAttempt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidKeyCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicKeyCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicKeysLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUnsortedIndexes\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providedValidatorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"InvalidValidatorCountReport\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawalCredentials\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAvailableValidatorKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"OperatorAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keyCount\",\"type\":\"uint256\"}],\"name\":\"OperatorLimitTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"OperatorNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OperatorNotFoundAtIndex\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroMintedShares\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipientAddress\",\"type\":\"address\"}],\"name\":\"AddedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKeys\",\"type\":\"bytes\"}],\"name\":\"AddedValidatorKeys\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorBalanceSum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"roundId\",\"type\":\"bytes32\"}],\"name\":\"BeaconDataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"FundedValidatorKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PulledELFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"RemovedValidatorKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperatorAddress\",\"type\":\"address\"}],\"name\":\"SetOperatorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperatorAddress\",\"type\":\"address\"}],\"name\":\"SetOperatorFeeRecipientAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"SetOperatorLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"name\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"SetOperatorName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetOperatorStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStoppedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"SetOperatorStoppedValidatorCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserDeposit\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_KEY_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNATURE_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_keyCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_publicKeys\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"addValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"depositAndTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCount\",\"type\":\"uint256\"}],\"name\":\"depositToConsensusLayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdministrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowlist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeaconValidatorBalanceSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beaconValidatorBalanceSum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeaconValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beaconValidatorCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositedValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositedValidatorCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getELFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getOperator\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopped\",\"type\":\"uint256\"}],\"internalType\":\"struct Operators.Operator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getOperatorByName\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopped\",\"type\":\"uint256\"}],\"internalType\":\"struct Operators.Operator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getOperatorDetails\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"_index\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingAdministrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorIndex\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"funded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalCredentials\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_elFeeRecipientAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_withdrawalCredentials\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_systemAdministratorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowlistAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_globalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_operatorRewardsShare\",\"type\":\"uint256\"}],\"name\":\"initRiverV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"removeValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendELFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAllowlist\",\"type\":\"address\"}],\"name\":\"setAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorBalanceSum\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_roundId\",\"type\":\"bytes32\"}],\"name\":\"setBeaconData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newELFeeRecipient\",\"type\":\"address\"}],\"name\":\"setELFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setGlobalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOperatorAddress\",\"type\":\"address\"}],\"name\":\"setOperatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOperatorFeeRecipientAddress\",\"type\":\"address\"}],\"name\":\"setOperatorFeeRecipientAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_operatorIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newLimits\",\"type\":\"uint256[]\"}],\"name\":\"setOperatorLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"}],\"name\":\"setOperatorName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newOperatorRewardsShare\",\"type\":\"uint256\"}],\"name\":\"setOperatorRewardsShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"setOperatorStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newStoppedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"setOperatorStoppedValidatorCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingBalance\",\"type\":\"uint256\"}],\"name\":\"sharesFromUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlyingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"underlyingBalanceFromShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kiln\",\"kind\":\"dev\",\"methods\":{\"addOperator(string,address,address)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_feeRecipient\":\"The address where the rewards are sent\",\"_name\":\"The name identifying the operator\",\"_operator\":\"The address representing the operator, receiving the rewards\"}},\"addValidators(uint256,uint256,bytes,bytes)\":{\"details\":\"Only callable by the administrator or the operator address\",\"params\":{\"_index\":\"The operator index\",\"_keyCount\":\"The amount of keys provided\",\"_publicKeys\":\"Public keys of the validator, concatenated\",\"_signatures\":\"Signatures of the validator keys, concatenated\"}},\"approve(address,uint256)\":{\"details\":\"An approved account can use transferFrom to transfer funds on behalf of the token owner\",\"params\":{\"_spender\":\"Address that is allowed to spend the tokens\",\"_value\":\"The allowed amount, will override previous value\"}},\"balanceOf(address)\":{\"params\":{\"_owner\":\"Address to be checked\"}},\"balanceOfUnderlying(address)\":{\"params\":{\"_owner\":\"Address to be checked\"}},\"depositAndTransfer(address)\":{\"params\":{\"_recipient\":\"Address receiving the minted lsETH\"}},\"depositToConsensusLayer(uint256)\":{\"params\":{\"_maxCount\":\"The maximum amount of validator keys to fund\"}},\"getOperator(uint256)\":{\"params\":{\"_index\":\"The index of the operator\"}},\"getOperatorByName(string)\":{\"params\":{\"_name\":\"The name identifying the operator\"}},\"getOperatorDetails(string)\":{\"params\":{\"_name\":\"Name of the operator\"}},\"getValidator(uint256,uint256)\":{\"params\":{\"_operatorIndex\":\"The index of the operator\",\"_validatorIndex\":\"The index of the validator\"}},\"initRiverV1(address,address,bytes32,address,address,address,address,uint256,uint256)\":{\"params\":{\"_allowlistAddress\":\"Address of the allowlist contract\",\"_depositContractAddress\":\"Address to make Consensus Layer deposits\",\"_elFeeRecipientAddress\":\"Address that receives the execution layer fees\",\"_globalFee\":\"Amount retained when the eth balance increases, splitted between the treasury and the operators\",\"_operatorRewardsShare\":\"Share of the global fee used to reward node operators\",\"_systemAdministratorAddress\":\"Administrator address\",\"_treasuryAddress\":\"Address receiving the fee minus the operator share\",\"_withdrawalCredentials\":\"Credentials to use for every validator deposit\"}},\"removeValidators(uint256,uint256[])\":{\"details\":\"Only callable by the administrator or the operator addressThe indexes must be provided sorted in decreasing order, otherwise the method will revertThe operator limit will be set to the lowest deleted key index\",\"params\":{\"_index\":\"The operator index\",\"_indexes\":\"The indexes of the keys to remove\"}},\"setAllowlist(address)\":{\"params\":{\"_newAllowlist\":\"New address for the allowlist\"}},\"setBeaconData(uint256,uint256,bytes32)\":{\"details\":\"Can only be called by the oracle address\",\"params\":{\"_roundId\":\"An identifier for this update\",\"_validatorBalanceSum\":\"The validator balance sum of the active validators on the consensus layer\",\"_validatorCount\":\"The number of active validators on the consensus layer\"}},\"setELFeeRecipient(address)\":{\"params\":{\"_newELFeeRecipient\":\"New address for the recipient\"}},\"setGlobalFee(uint256)\":{\"params\":{\"newFee\":\"New fee value\"}},\"setOperatorAddress(uint256,address)\":{\"details\":\"Only callable by the administrator or the previous operator address\",\"params\":{\"_index\":\"The operator index\",\"_newOperatorAddress\":\"The new address of the operator\"}},\"setOperatorFeeRecipientAddress(uint256,address)\":{\"details\":\"Only callable by the administrator or the previous operator fee recipient address\",\"params\":{\"_index\":\"The operator index\",\"_newOperatorFeeRecipientAddress\":\"The new fee recipient address of the operator\"}},\"setOperatorLimits(uint256[],uint256[])\":{\"details\":\"Only callable by the administratorThe limit cannot exceed the total key count of the operatorThe _indexes and _newLimits must have the same length.Each limit value is applied to the operator index at the same index in the _indexes array.\",\"params\":{\"_newLimits\":\"The new staking limit of the operators\",\"_operatorIndexes\":\"The operator indexes\"}},\"setOperatorName(uint256,string)\":{\"details\":\"Only callable by the administrator or the operatorNo name conflict can exist\",\"params\":{\"_index\":\"The operator index\",\"_newName\":\"The new operator name\"}},\"setOperatorRewardsShare(uint256)\":{\"params\":{\"newOperatorRewardsShare\":\"New share value\"}},\"setOperatorStatus(uint256,bool)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_index\":\"The operator index\",\"_newStatus\":\"The new status of the operator\"}},\"setOperatorStoppedValidatorCount(uint256,uint256)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_index\":\"The operator index\",\"_newStoppedValidatorCount\":\"The new stopped validator count of the operator\"}},\"setOracle(address)\":{\"params\":{\"_oracleAddress\":\"Address of the oracle\"}},\"setTreasury(address)\":{\"params\":{\"_newTreasury\":\"New address for the treasury\"}},\"transfer(address,uint256)\":{\"params\":{\"_to\":\"Address receiving the tokens\",\"_value\":\"Amount to be sent\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"If the specified _from argument is the message sender, behaves like a regular transferIf the specified _from argument is not the message sender, checks that the message sender has been given enough allowance\",\"params\":{\"_from\":\"Address sending the tokens\",\"_to\":\"Address receiving the tokens\",\"_value\":\"Amount to be sent\"}},\"transferOwnership(address)\":{\"params\":{\"_newAdmin\":\"New address for the admin\"}}},\"title\":\"River (v1)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Accepts the ownership of the system\"},\"addOperator(string,address,address)\":{\"notice\":\"Adds an operator to the registry\"},\"addValidators(uint256,uint256,bytes,bytes)\":{\"notice\":\"Adds new keys for an operator\"},\"allowance(address,address)\":{\"notice\":\"Retrieve the allowance value for a spender_owner Address that issued the allowance_spender Address that received the allowance\"},\"approve(address,uint256)\":{\"notice\":\"Approves an account for future spendings\"},\"balanceOf(address)\":{\"notice\":\"Retrieve the balance of an account\"},\"balanceOfUnderlying(address)\":{\"notice\":\"Retrieve the underlying asset balance of an account\"},\"decimals()\":{\"notice\":\"Retrieve the decimal count\"},\"deposit()\":{\"notice\":\"Explicit deposit method to mint on msg.sender\"},\"depositAndTransfer(address)\":{\"notice\":\"Explicit deposit method to mint on msg.sender and transfer to _recipient\"},\"depositToConsensusLayer(uint256)\":{\"notice\":\"Deposits current balance to the Consensus Layer by batches of 32 ETH\"},\"getAdministrator()\":{\"notice\":\"Retrieve system administrator address\"},\"getAllowlist()\":{\"notice\":\"Retrieve the allowlist address\"},\"getBeaconValidatorBalanceSum()\":{\"notice\":\"Get Beacon validator balance sum\"},\"getBeaconValidatorCount()\":{\"notice\":\"Get Beacon validator count (the amount of validator reported by the oracles)\"},\"getDepositedValidatorCount()\":{\"notice\":\"Get the deposited validator count (the count of deposits made by the contract)\"},\"getELFeeRecipient()\":{\"notice\":\"Retrieve the execution layer fee recipient\"},\"getOperator(uint256)\":{\"notice\":\"Get operator details\"},\"getOperatorByName(string)\":{\"notice\":\"Get operator details by name\"},\"getOperatorCount()\":{\"notice\":\"Get operator count\"},\"getOperatorDetails(string)\":{\"notice\":\"Retrieve the operator details from the operator name\"},\"getOracle()\":{\"notice\":\"Get Oracle address\"},\"getPendingAdministrator()\":{\"notice\":\"Retrieve system pending administrator address\"},\"getPendingEth()\":{\"notice\":\"Returns the amount of pending ETH\"},\"getTreasury()\":{\"notice\":\"Retrieve the treasury address\"},\"getValidator(uint256,uint256)\":{\"notice\":\"Get the details of a validator\"},\"getWithdrawalCredentials()\":{\"notice\":\"Retrieve the withdrawal credentials\"},\"initRiverV1(address,address,bytes32,address,address,address,address,uint256,uint256)\":{\"notice\":\"Initializes the River system\"},\"name()\":{\"notice\":\"Retrieve the token name\"},\"removeValidators(uint256,uint256[])\":{\"notice\":\"Remove validator keys\"},\"sendELFees()\":{\"notice\":\"Input for execution layer fee earnings\"},\"setAllowlist(address)\":{\"notice\":\"Changes the allowlist address\"},\"setBeaconData(uint256,uint256,bytes32)\":{\"notice\":\"Sets the validator count and validator balance sum reported by the oracle\"},\"setELFeeRecipient(address)\":{\"notice\":\"Changes the execution layer fee recipient\"},\"setGlobalFee(uint256)\":{\"notice\":\"Changes the global fee parameter\"},\"setOperatorAddress(uint256,address)\":{\"notice\":\"Changes the operator address of an operator\"},\"setOperatorFeeRecipientAddress(uint256,address)\":{\"notice\":\"Changes the operator fee recipient address\"},\"setOperatorLimits(uint256[],uint256[])\":{\"notice\":\"Changes the operator staking limit\"},\"setOperatorName(uint256,string)\":{\"notice\":\"Changes the operator name\"},\"setOperatorRewardsShare(uint256)\":{\"notice\":\"Changes the operator rewards share.\"},\"setOperatorStatus(uint256,bool)\":{\"notice\":\"Changes the operator status\"},\"setOperatorStoppedValidatorCount(uint256,uint256)\":{\"notice\":\"Changes the operator stopped validator cound\"},\"setOracle(address)\":{\"notice\":\"Set Oracle address\"},\"setTreasury(address)\":{\"notice\":\"Changes the treasury address\"},\"symbol()\":{\"notice\":\"Retrieve the token symbol\"},\"totalSupply()\":{\"notice\":\"Retrieve the total token supply\"},\"totalUnderlyingSupply()\":{\"notice\":\"Retrieve the total underlying asset supply\"},\"transfer(address,uint256)\":{\"notice\":\"Performs a transfer from the message sender to the provided account\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Performs a transfer between two recipients\"},\"transferOwnership(address)\":{\"notice\":\"Changes the admin but waits for new admin approval\"}},\"notice\":\"This contract merges all the manager contracts and implements all the virtual methods stitching all components together\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/River.1.sol\":\"RiverV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\ncontract Initializable {\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    modifier init(uint256 version) {\\n        if (version != Version.get()) {\\n            revert InvalidInitialization(version, Version.get());\\n        }\\n        Version.set(version + 1); // prevents reentrency on the called method\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc93555f4bd660f91e565f20753e0d3a01e783e673bc0209d0d1e33c7b6941053\",\"license\":\"BUSL-1.1\"},\"contracts/src/River.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./components/DepositManager.1.sol\\\";\\nimport \\\"./components/TransferManager.1.sol\\\";\\nimport \\\"./components/SharesManager.1.sol\\\";\\nimport \\\"./components/OracleManager.1.sol\\\";\\nimport \\\"./components/OperatorsManager.1.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./libraries/LibOwnable.sol\\\";\\nimport \\\"./interfaces/IRiverELFeeInput.sol\\\";\\nimport \\\"./interfaces/IELFeeRecipient.sol\\\";\\n\\nimport \\\"./state/shared/AdministratorAddress.sol\\\";\\nimport \\\"./state/river/AllowlistAddress.sol\\\";\\nimport \\\"./state/river/TreasuryAddress.sol\\\";\\nimport \\\"./state/river/OperatorRewardsShare.sol\\\";\\nimport \\\"./state/river/GlobalFee.sol\\\";\\nimport \\\"./state/river/ELFeeRecipientAddress.sol\\\";\\n\\n/// @title River (v1)\\n/// @author Kiln\\n/// @notice This contract merges all the manager contracts and implements all the virtual methods stitching all components together\\ncontract RiverV1 is\\n    DepositManagerV1,\\n    TransferManagerV1,\\n    SharesManagerV1,\\n    OracleManagerV1,\\n    OperatorsManagerV1,\\n    Initializable,\\n    IRiverELFeeInput\\n{\\n    error ZeroMintedShares();\\n    event PulledELFees(uint256 amount);\\n\\n    uint256 public constant BASE = 100000;\\n    uint256 internal constant DEPOSIT_MASK = 0x1;\\n    uint256 internal constant TRANSFER_MASK = 0;\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() override(OperatorsManagerV1, OracleManagerV1) {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Initializes the River system\\n    /// @param _depositContractAddress Address to make Consensus Layer deposits\\n    /// @param _elFeeRecipientAddress Address that receives the execution layer fees\\n    /// @param _withdrawalCredentials Credentials to use for every validator deposit\\n    /// @param _systemAdministratorAddress Administrator address\\n    /// @param _allowlistAddress Address of the allowlist contract\\n    /// @param _treasuryAddress Address receiving the fee minus the operator share\\n    /// @param _globalFee Amount retained when the eth balance increases, splitted between the treasury and the operators\\n    /// @param _operatorRewardsShare Share of the global fee used to reward node operators\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _treasuryAddress,\\n        uint256 _globalFee,\\n        uint256 _operatorRewardsShare\\n    ) external init(0) {\\n        if (_systemAdministratorAddress == address(0)) {\\n            // only check on initialization\\n            revert Errors.InvalidZeroAddress();\\n        }\\n        LibOwnable._setAdmin(_systemAdministratorAddress);\\n        TreasuryAddress.set(_treasuryAddress);\\n        GlobalFee.set(_globalFee);\\n        OperatorRewardsShare.set(_operatorRewardsShare);\\n        ELFeeRecipientAddress.set(_elFeeRecipientAddress);\\n\\n        DepositManagerV1.initDepositManagerV1(_depositContractAddress, _withdrawalCredentials);\\n        OracleManagerV1.initOracleManagerV1(_oracleAddress);\\n        AllowlistAddress.set(_allowlistAddress);\\n    }\\n\\n    /// @notice Changes the global fee parameter\\n    /// @param newFee New fee value\\n    function setGlobalFee(uint256 newFee) external onlyAdmin {\\n        if (newFee > BASE) {\\n            revert Errors.InvalidArgument();\\n        }\\n\\n        GlobalFee.set(newFee);\\n    }\\n\\n    /// @notice Changes the operator rewards share.\\n    /// @param newOperatorRewardsShare New share value\\n    function setOperatorRewardsShare(uint256 newOperatorRewardsShare) external onlyAdmin {\\n        if (newOperatorRewardsShare > BASE) {\\n            revert Errors.InvalidArgument();\\n        }\\n\\n        OperatorRewardsShare.set(newOperatorRewardsShare);\\n    }\\n\\n    /// @notice Changes the allowlist address\\n    /// @param _newAllowlist New address for the allowlist\\n    function setAllowlist(address _newAllowlist) external onlyAdmin {\\n        AllowlistAddress.set(_newAllowlist);\\n    }\\n\\n    /// @notice Retrieve the allowlist address\\n    function getAllowlist() external view returns (address) {\\n        return address(AllowlistAddress.get());\\n    }\\n\\n    /// @notice Changes the treasury address\\n    /// @param _newTreasury New address for the treasury\\n    function setTreasury(address _newTreasury) external onlyAdmin {\\n        TreasuryAddress.set(_newTreasury);\\n    }\\n\\n    /// @notice Retrieve the treasury address\\n    function getTreasury() external view returns (address) {\\n        return TreasuryAddress.get();\\n    }\\n\\n    /// @notice Changes the admin but waits for new admin approval\\n    /// @param _newAdmin New address for the admin\\n    function transferOwnership(address _newAdmin) external onlyAdmin {\\n        LibOwnable._setPendingAdmin(_newAdmin);\\n    }\\n\\n    /// @notice Accepts the ownership of the system\\n    function acceptOwnership() external {\\n        if (msg.sender != LibOwnable._getPendingAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        LibOwnable._setAdmin(msg.sender);\\n        LibOwnable._setPendingAdmin(address(0));\\n    }\\n\\n    /// @notice Retrieve system administrator address\\n    function getAdministrator() external view returns (address) {\\n        return LibOwnable._getAdmin();\\n    }\\n\\n    /// @notice Retrieve system pending administrator address\\n    function getPendingAdministrator() external view returns (address) {\\n        return LibOwnable._getPendingAdmin();\\n    }\\n\\n    /// @notice Changes the execution layer fee recipient\\n    /// @param _newELFeeRecipient New address for the recipient\\n    function setELFeeRecipient(address _newELFeeRecipient) external onlyAdmin {\\n        ELFeeRecipientAddress.set(_newELFeeRecipient);\\n    }\\n\\n    /// @notice Retrieve the execution layer fee recipient\\n    function getELFeeRecipient() external view returns (address) {\\n        return ELFeeRecipientAddress.get();\\n    }\\n\\n    /// @notice Input for execution layer fee earnings\\n    function sendELFees() external payable {\\n        if (msg.sender != ELFeeRecipientAddress.get()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n    }\\n\\n    /// @notice Handler called whenever a token transfer is triggered\\n    /// @param _from Token sender\\n    /// @param _to Token receiver\\n    function _onTransfer(address _from, address _to) internal view override {\\n        (AllowlistAddress.get()).onlyAllowed(_from, TRANSFER_MASK); // this call reverts if unauthorized or denied\\n        (AllowlistAddress.get()).onlyAllowed(_to, TRANSFER_MASK); // this call reverts if unauthorized or denied\\n    }\\n\\n    /// @notice Handler called whenever a user deposits ETH to the system. Mints the adequate amount of shares.\\n    /// @param _depositor User address that made the deposit\\n    /// @param _amount Amount of ETH deposited\\n    function _onDeposit(\\n        address _depositor,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal override {\\n        SharesManagerV1._mintShares(_depositor, _amount);\\n        if (_depositor == _recipient) {\\n            (AllowlistAddress.get()).onlyAllowed(_depositor, DEPOSIT_MASK); // this call reverts if unauthorized or denied\\n        } else {\\n            (AllowlistAddress.get()).onlyAllowed(_depositor, DEPOSIT_MASK + TRANSFER_MASK); // this call reverts if unauthorized or denied\\n            (AllowlistAddress.get()).onlyAllowed(_recipient, TRANSFER_MASK);\\n            _transfer(_depositor, _recipient, _amount);\\n        }\\n    }\\n\\n    /// @notice Handler called whenever a deposit to the consensus layer is made. Should retrieve _requestedAmount or lower keys\\n    /// @param _requestedAmount Amount of keys required. Contract is expected to send _requestedAmount or lower.\\n    function _getNextValidators(uint256 _requestedAmount)\\n        internal\\n        override\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        return OperatorsManagerV1._getNextValidatorsFromActiveOperators(_requestedAmount);\\n    }\\n\\n    /// @notice Internal utility managing reward distribution amongst node operators\\n    /// @param _reward Amount of shares to split between operators\\n    function _rewardOperators(uint256 _reward) internal returns (uint256) {\\n        Operators.Operator[] memory operators = Operators.getAllActive();\\n        uint256[] memory validatorCounts = new uint256[](operators.length);\\n\\n        uint256 totalActiveValidators = 0;\\n        for (uint256 idx = 0; idx < operators.length; ) {\\n            uint256 operatorActiveValidatorCount = operators[idx].funded - operators[idx].stopped;\\n            totalActiveValidators += operatorActiveValidatorCount;\\n            validatorCounts[idx] = operatorActiveValidatorCount;\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        if (totalActiveValidators > 0) {\\n            uint256 rewardsPerActiveValidator = _reward / totalActiveValidators;\\n\\n            for (uint256 idx = 0; idx < validatorCounts.length; ) {\\n                _mintRawShares(operators[idx].feeRecipient, validatorCounts[idx] * rewardsPerActiveValidator);\\n                unchecked {\\n                    ++idx;\\n                }\\n            }\\n        } else {\\n            _reward = 0;\\n        }\\n\\n        return _reward;\\n    }\\n\\n    /// @notice Internal utility to pull funds from the execution layer fee recipient to River and return the delta in the balance\\n    function _pullELFees() internal override returns (uint256) {\\n        address elFeeRecipient = ELFeeRecipientAddress.get();\\n        if (elFeeRecipient == address(0)) {\\n            return 0;\\n        }\\n        uint256 initialBalance = address(this).balance;\\n        IELFeeRecipient(elFeeRecipient).pullELFees();\\n        uint256 collectedELFees = address(this).balance - initialBalance;\\n        emit PulledELFees(collectedELFees);\\n        return collectedELFees;\\n    }\\n\\n    /// @notice Handler called whenever the balance of ETH handled by the system increases. Splits funds between operators and treasury.\\n    /// @param _amount Additional eth received\\n    function _onEarnings(uint256 _amount) internal override {\\n        uint256 currentTotalSupply = _totalSupply();\\n        if (currentTotalSupply == 0) {\\n            revert ZeroMintedShares();\\n        }\\n        uint256 globalFee = GlobalFee.get();\\n        uint256 numerator = _amount * currentTotalSupply * globalFee;\\n        uint256 denominator = (_assetBalance() * BASE) - (_amount * globalFee);\\n        uint256 sharesToMint = denominator == 0 ? 0 : (numerator / denominator);\\n\\n        uint256 operatorRewards = (sharesToMint * OperatorRewardsShare.get()) / BASE;\\n\\n        uint256 mintedRewards = _rewardOperators(operatorRewards);\\n\\n        _mintRawShares(TreasuryAddress.get(), sharesToMint - mintedRewards);\\n    }\\n\\n    /// @notice Handler called whenever the total balance of ETH is requested\\n    function _assetBalance() internal view override returns (uint256) {\\n        uint256 beaconValidatorCount = BeaconValidatorCount.get();\\n        uint256 depositedValidatorCount = DepositedValidatorCount.get();\\n        if (beaconValidatorCount < depositedValidatorCount) {\\n            return\\n                BeaconValidatorBalanceSum.get() +\\n                address(this).balance +\\n                (depositedValidatorCount - beaconValidatorCount) *\\n                DepositManagerV1.DEPOSIT_SIZE;\\n        } else {\\n            return BeaconValidatorBalanceSum.get() + address(this).balance;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf57049e8895765545a7c74bdc7cd4d57badf665bdf8d63caffe87ae8646c0c3b\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/DepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IDepositContract.sol\\\";\\n\\nimport \\\"../libraries/BytesLib.sol\\\";\\nimport \\\"../libraries/Uint256Lib.sol\\\";\\n\\nimport \\\"../state/river/DepositContractAddress.sol\\\";\\nimport \\\"../state/river/WithdrawalCredentials.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\n\\n/// @title Deposit Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the interactions with the official deposit contract, funding all validators\\n/// @dev _onValidatorKeyRequest must be overriden.\\nabstract contract DepositManagerV1 {\\n    event FundedValidatorKey(bytes publicKey);\\n\\n    error NotEnoughFunds();\\n    error InconsistentPublicKeys();\\n    error InconsistentSignatures();\\n    error NoAvailableValidatorKeys();\\n    error InvalidPublicKeyCount();\\n    error InvalidSignatureCount();\\n    error InvalidWithdrawalCredentials();\\n\\n    uint256 public constant PUBLIC_KEY_LENGTH = 48;\\n    uint256 public constant SIGNATURE_LENGTH = 96;\\n    uint256 public constant DEPOSIT_SIZE = 32 ether;\\n\\n    /// @notice Initializer to set the deposit contract address and the withdrawal credentials to use\\n    /// @param _depositContractAddress The address of the deposit contract\\n    /// @param _withdrawalCredentials The withdrawal credentials to apply to all deposits\\n    function initDepositManagerV1(address _depositContractAddress, bytes32 _withdrawalCredentials) internal {\\n        DepositContractAddress.set(IDepositContract(_depositContractAddress));\\n\\n        WithdrawalCredentials.set(_withdrawalCredentials);\\n    }\\n\\n    /// @notice Retrieve the withdrawal credentials\\n    function getWithdrawalCredentials() external view returns (bytes32) {\\n        return WithdrawalCredentials.get();\\n    }\\n\\n    /// @notice Internal helper to retrieve validator keys ready to be funded\\n    /// @dev Must be overriden with an implementation that provides keyCount or less keys upon call\\n    /// @param _keyCount The amount of keys (or less) to return.\\n    function _getNextValidators(uint256 _keyCount)\\n        internal\\n        virtual\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n\\n    /// @notice Deposits current balance to the Consensus Layer by batches of 32 ETH\\n    /// @param _maxCount The maximum amount of validator keys to fund\\n    function depositToConsensusLayer(uint256 _maxCount) external {\\n        uint256 validatorsToDeposit = Uint256Lib.min(address(this).balance / DEPOSIT_SIZE, _maxCount);\\n\\n        if (validatorsToDeposit == 0) {\\n            revert NotEnoughFunds();\\n        }\\n\\n        (bytes[] memory publicKeys, bytes[] memory signatures) = _getNextValidators(validatorsToDeposit);\\n\\n        uint256 receivedPublicKeyCount = publicKeys.length;\\n\\n        if (receivedPublicKeyCount == 0) {\\n            revert NoAvailableValidatorKeys();\\n        }\\n\\n        if (receivedPublicKeyCount > validatorsToDeposit) {\\n            revert InvalidPublicKeyCount();\\n        }\\n\\n        uint256 receivedSignatureCount = signatures.length;\\n\\n        if (receivedSignatureCount != receivedPublicKeyCount) {\\n            revert InvalidSignatureCount();\\n        }\\n\\n        bytes32 withdrawalCredentials = WithdrawalCredentials.get();\\n\\n        if (withdrawalCredentials == 0) {\\n            revert InvalidWithdrawalCredentials();\\n        }\\n\\n        for (uint256 idx = 0; idx < receivedPublicKeyCount; ) {\\n            _depositValidator(publicKeys[idx], signatures[idx], withdrawalCredentials);\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        DepositedValidatorCount.set(DepositedValidatorCount.get() + receivedPublicKeyCount);\\n    }\\n\\n    /// @notice Deposits 32 ETH to the official Deposit contract\\n    /// @param _publicKey The public key of the validator\\n    /// @param _signature The signature provided by the operator\\n    /// @param _withdrawalCredentials The withdrawal credentials provided by River\\n    function _depositValidator(\\n        bytes memory _publicKey,\\n        bytes memory _signature,\\n        bytes32 _withdrawalCredentials\\n    ) internal {\\n        if (_publicKey.length != PUBLIC_KEY_LENGTH) {\\n            revert InconsistentPublicKeys();\\n        }\\n\\n        if (_signature.length != SIGNATURE_LENGTH) {\\n            revert InconsistentSignatures();\\n        }\\n        uint256 value = DEPOSIT_SIZE;\\n\\n        uint256 depositAmount = value / 1000000000 wei;\\n\\n        bytes32 pubkeyRoot = sha256(BytesLib.pad64(_publicKey));\\n        bytes32 signatureRoot = sha256(\\n            abi.encodePacked(\\n                sha256(BytesLib.slice(_signature, 0, 64)),\\n                sha256(BytesLib.pad64(BytesLib.slice(_signature, 64, SIGNATURE_LENGTH - 64)))\\n            )\\n        );\\n\\n        bytes32 depositDataRoot = sha256(\\n            abi.encodePacked(\\n                sha256(abi.encodePacked(pubkeyRoot, _withdrawalCredentials)),\\n                sha256(abi.encodePacked(Uint256Lib.toLittleEndian64(depositAmount), signatureRoot))\\n            )\\n        );\\n\\n        uint256 targetBalance = address(this).balance - value;\\n\\n        DepositContractAddress.get().deposit{value: value}(\\n            _publicKey,\\n            abi.encodePacked(_withdrawalCredentials),\\n            _signature,\\n            depositDataRoot\\n        );\\n        require(address(this).balance == targetBalance, \\\"EXPECTING_DEPOSIT_TO_HAPPEN\\\");\\n        emit FundedValidatorKey(_publicKey);\\n    }\\n\\n    /// @notice Get the deposited validator count (the count of deposits made by the contract)\\n    function getDepositedValidatorCount() external view returns (uint256 depositedValidatorCount) {\\n        depositedValidatorCount = DepositedValidatorCount.get();\\n    }\\n}\\n\",\"keccak256\":\"0x9910f75474552cfc91b3bcb0fca78c06d1992916e0a05a6c099440974704d7d0\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/OperatorsManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"../libraries/Uint256Lib.sol\\\";\\nimport \\\"../libraries/LibOwnable.sol\\\";\\n\\nimport \\\"../state/river/Operators.sol\\\";\\nimport \\\"../state/river/ValidatorKeys.sol\\\";\\n\\n/// @title Operators Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the operator and key list\\ncontract OperatorsManagerV1 {\\n    error OperatorAlreadyExists(string name);\\n    error InactiveOperator(uint256 index);\\n    error InvalidFundedKeyDeletionAttempt();\\n    error InvalidUnsortedIndexes();\\n    error InvalidArrayLengths();\\n    error InvalidEmptyArray();\\n    error InvalidKeyCount();\\n    error InvalidPublicKeysLength();\\n    error InvalidSignatureLength();\\n    error InvalidIndexOutOfBounds();\\n    error OperatorLimitTooHigh(uint256 limit, uint256 keyCount);\\n\\n    event AddedOperator(uint256 indexed index, string name, address operatorAddress, address feeRecipientAddress);\\n    event SetOperatorStatus(uint256 indexed index, bool active);\\n    event SetOperatorLimit(uint256 indexed index, uint256 newLimit);\\n    event SetOperatorStoppedValidatorCount(uint256 indexed index, uint256 newStoppedValidatorCount);\\n    event SetOperatorFeeRecipientAddress(uint256 indexed index, address newOperatorAddress);\\n    event SetOperatorAddress(uint256 indexed index, address newOperatorAddress);\\n    event SetOperatorName(uint256 indexed name, string newName);\\n    event AddedValidatorKeys(uint256 indexed index, bytes publicKeys);\\n    event RemovedValidatorKey(uint256 indexed index, bytes publicKey);\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() virtual {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents the call from working if the operator is not active\\n    /// @param _index The name identifying the operator\\n    modifier active(uint256 _index) {\\n        if (!Operators.getByIndex(_index).active) {\\n            revert InactiveOperator(_index);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents anyone except the admin or the given operator fee recipient to make the call. Also checks if operator is active\\n    /// @param _index The name identifying the operator\\n    modifier operatorFeeRecipientOrAdmin(uint256 _index) {\\n        if (msg.sender == LibOwnable._getAdmin()) {\\n            _;\\n            return;\\n        }\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n        if (!operator.active) {\\n            revert InactiveOperator(_index);\\n        }\\n        if (msg.sender != operator.feeRecipient) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents anyone except the admin or the given operator to make the call. Also checks if operator is active\\n    /// @param _index The name identifying the operator\\n    modifier operatorOrAdmin(uint256 _index) {\\n        if (msg.sender == LibOwnable._getAdmin()) {\\n            _;\\n            return;\\n        }\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n        if (!operator.active) {\\n            revert InactiveOperator(_index);\\n        }\\n        if (msg.sender != operator.operator) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Retrieve the operator details from the operator name\\n    /// @param _name Name of the operator\\n    function getOperatorDetails(string calldata _name) external view returns (int256 _index, address _operatorAddress) {\\n        _index = Operators.indexOf(_name);\\n        _operatorAddress = Operators.get(_name).operator;\\n    }\\n\\n    /// @notice Adds an operator to the registry\\n    /// @dev Only callable by the administrator\\n    /// @param _name The name identifying the operator\\n    /// @param _operator The address representing the operator, receiving the rewards\\n    /// @param _feeRecipient The address where the rewards are sent\\n    function addOperator(\\n        string calldata _name,\\n        address _operator,\\n        address _feeRecipient\\n    ) external onlyAdmin {\\n        if (Operators.exists(_name)) {\\n            revert OperatorAlreadyExists(_name);\\n        }\\n\\n        Operators.Operator memory newOperator = Operators.Operator({\\n            active: true,\\n            operator: _operator,\\n            feeRecipient: _feeRecipient,\\n            name: _name,\\n            limit: 0,\\n            funded: 0,\\n            keys: 0,\\n            stopped: 0\\n        });\\n\\n        uint256 operatorIndex = Operators.set(_name, newOperator);\\n\\n        emit AddedOperator(operatorIndex, newOperator.name, newOperator.operator, newOperator.feeRecipient);\\n    }\\n\\n    /// @notice Changes the operator address of an operator\\n    /// @dev Only callable by the administrator or the previous operator address\\n    /// @param _index The operator index\\n    /// @param _newOperatorAddress The new address of the operator\\n    function setOperatorAddress(uint256 _index, address _newOperatorAddress) external operatorOrAdmin(_index) {\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        operator.operator = _newOperatorAddress;\\n\\n        emit SetOperatorAddress(_index, _newOperatorAddress);\\n    }\\n\\n    /// @notice Changes the operator fee recipient address\\n    /// @dev Only callable by the administrator or the previous operator fee recipient address\\n    /// @param _index The operator index\\n    /// @param _newOperatorFeeRecipientAddress The new fee recipient address of the operator\\n    function setOperatorFeeRecipientAddress(uint256 _index, address _newOperatorFeeRecipientAddress)\\n        external\\n        operatorFeeRecipientOrAdmin(_index)\\n    {\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        operator.feeRecipient = _newOperatorFeeRecipientAddress;\\n\\n        emit SetOperatorFeeRecipientAddress(_index, _newOperatorFeeRecipientAddress);\\n    }\\n\\n    /// @notice Changes the operator name\\n    /// @dev Only callable by the administrator or the operator\\n    /// @dev No name conflict can exist\\n    /// @param _index The operator index\\n    /// @param _newName The new operator name\\n    function setOperatorName(uint256 _index, string calldata _newName) external operatorOrAdmin(_index) {\\n        if (Operators.exists(_newName) == true) {\\n            revert OperatorAlreadyExists(_newName);\\n        }\\n\\n        Operators.setOperatorName(_index, _newName);\\n\\n        emit SetOperatorName(_index, _newName);\\n    }\\n\\n    /// @notice Changes the operator status\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStatus The new status of the operator\\n    function setOperatorStatus(uint256 _index, bool _newStatus) external onlyAdmin {\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        operator.active = _newStatus;\\n\\n        emit SetOperatorStatus(_index, _newStatus);\\n    }\\n\\n    /// @notice Changes the operator stopped validator cound\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStoppedValidatorCount The new stopped validator count of the operator\\n    function setOperatorStoppedValidatorCount(uint256 _index, uint256 _newStoppedValidatorCount) external onlyAdmin {\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        if (_newStoppedValidatorCount > operator.funded) {\\n            revert Errors.InvalidArgument();\\n        }\\n\\n        operator.stopped = _newStoppedValidatorCount;\\n\\n        emit SetOperatorStoppedValidatorCount(_index, operator.stopped);\\n    }\\n\\n    /// @notice Changes the operator staking limit\\n    /// @dev Only callable by the administrator\\n    /// @dev The limit cannot exceed the total key count of the operator\\n    /// @dev The _indexes and _newLimits must have the same length.\\n    /// @dev Each limit value is applied to the operator index at the same index in the _indexes array.\\n    /// @param _operatorIndexes The operator indexes\\n    /// @param _newLimits The new staking limit of the operators\\n    function setOperatorLimits(uint256[] calldata _operatorIndexes, uint256[] calldata _newLimits) external onlyAdmin {\\n        if (_operatorIndexes.length != _newLimits.length) {\\n            revert InvalidArrayLengths();\\n        }\\n        if (_operatorIndexes.length == 0) {\\n            revert InvalidEmptyArray();\\n        }\\n        for (uint256 idx = 0; idx < _operatorIndexes.length; ) {\\n            Operators.Operator storage operator = Operators.getByIndex(_operatorIndexes[idx]);\\n            if (_newLimits[idx] > operator.keys) {\\n                revert OperatorLimitTooHigh(_newLimits[idx], operator.keys);\\n            }\\n\\n            operator.limit = _newLimits[idx];\\n\\n            emit SetOperatorLimit(_operatorIndexes[idx], operator.limit);\\n\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n    }\\n\\n    /// @notice Adds new keys for an operator\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @param _index The operator index\\n    /// @param _keyCount The amount of keys provided\\n    /// @param _publicKeys Public keys of the validator, concatenated\\n    /// @param _signatures Signatures of the validator keys, concatenated\\n    function addValidators(\\n        uint256 _index,\\n        uint256 _keyCount,\\n        bytes calldata _publicKeys,\\n        bytes calldata _signatures\\n    ) external operatorOrAdmin(_index) {\\n        if (_keyCount == 0) {\\n            revert InvalidKeyCount();\\n        }\\n\\n        if (_publicKeys.length != _keyCount * ValidatorKeys.PUBLIC_KEY_LENGTH) {\\n            revert InvalidPublicKeysLength();\\n        }\\n\\n        if (_signatures.length != _keyCount * ValidatorKeys.SIGNATURE_LENGTH) {\\n            revert InvalidSignatureLength();\\n        }\\n\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        for (uint256 idx = 0; idx < _keyCount; ) {\\n            bytes memory publicKey = BytesLib.slice(\\n                _publicKeys,\\n                idx * ValidatorKeys.PUBLIC_KEY_LENGTH,\\n                ValidatorKeys.PUBLIC_KEY_LENGTH\\n            );\\n            bytes memory signature = BytesLib.slice(\\n                _signatures,\\n                idx * ValidatorKeys.SIGNATURE_LENGTH,\\n                ValidatorKeys.SIGNATURE_LENGTH\\n            );\\n            ValidatorKeys.set(_index, operator.keys + idx, publicKey, signature);\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        operator.keys += _keyCount;\\n\\n        emit AddedValidatorKeys(_index, _publicKeys);\\n    }\\n\\n    /// @notice Remove validator keys\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @dev The indexes must be provided sorted in decreasing order, otherwise the method will revert\\n    /// @dev The operator limit will be set to the lowest deleted key index\\n    /// @param _index The operator index\\n    /// @param _indexes The indexes of the keys to remove\\n    function removeValidators(uint256 _index, uint256[] calldata _indexes) external operatorOrAdmin(_index) {\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        if (_indexes.length == 0) {\\n            revert InvalidKeyCount();\\n        }\\n\\n        for (uint256 idx = 0; idx < _indexes.length; ) {\\n            uint256 keyIndex = _indexes[idx];\\n\\n            if (keyIndex < operator.funded) {\\n                revert InvalidFundedKeyDeletionAttempt();\\n            }\\n\\n            if (keyIndex >= operator.keys) {\\n                revert InvalidIndexOutOfBounds();\\n            }\\n\\n            if (idx > 0 && _indexes[idx] >= _indexes[idx - 1]) {\\n                revert InvalidUnsortedIndexes();\\n            }\\n\\n            uint256 lastKeyIndex = operator.keys - 1;\\n            (bytes memory removedPublicKey, ) = ValidatorKeys.get(_index, keyIndex);\\n            (bytes memory lastPublicKey, bytes memory lastSignature) = ValidatorKeys.get(_index, lastKeyIndex);\\n            ValidatorKeys.set(_index, keyIndex, lastPublicKey, lastSignature);\\n            ValidatorKeys.set(_index, lastKeyIndex, new bytes(0), new bytes(0));\\n            operator.keys -= 1;\\n            emit RemovedValidatorKey(_index, removedPublicKey);\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        if (_indexes[_indexes.length - 1] < operator.limit) {\\n            operator.limit = _indexes[_indexes.length - 1];\\n        }\\n    }\\n\\n    /// @notice Get operator details by name\\n    /// @param _name The name identifying the operator\\n    function getOperatorByName(string calldata _name) external view returns (Operators.Operator memory) {\\n        return Operators.get(_name);\\n    }\\n\\n    /// @notice Get operator details\\n    /// @param _index The index of the operator\\n    function getOperator(uint256 _index) external view returns (Operators.Operator memory) {\\n        return Operators.getByIndex(_index);\\n    }\\n\\n    /// @notice Get operator count\\n    function getOperatorCount() external view returns (uint256) {\\n        return Operators.getCount();\\n    }\\n\\n    /// @notice Get the details of a validator\\n    /// @param _operatorIndex The index of the operator\\n    /// @param _validatorIndex The index of the validator\\n    function getValidator(uint256 _operatorIndex, uint256 _validatorIndex)\\n        external\\n        view\\n        returns (\\n            bytes memory publicKey,\\n            bytes memory signature,\\n            bool funded\\n        )\\n    {\\n        (publicKey, signature) = ValidatorKeys.get(_operatorIndex, _validatorIndex);\\n        funded = _validatorIndex < Operators.getByIndex(_operatorIndex).funded;\\n    }\\n\\n    /// @notice Internal utility to concatenate bytes arrays together\\n    function _concatenateByteArrays(bytes[] memory arr1, bytes[] memory arr2)\\n        internal\\n        pure\\n        returns (bytes[] memory res)\\n    {\\n        res = new bytes[](arr1.length + arr2.length);\\n        for (uint256 idx = 0; idx < arr1.length; ) {\\n            res[idx] = arr1[idx];\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        for (uint256 idx = 0; idx < arr2.length; ) {\\n            res[idx + arr1.length] = arr2[idx];\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n    }\\n\\n    /// @notice Handler called whenever a deposit to the consensus layer is made. Should retrieve _requestedAmount or lower keys\\n    /// @param _requestedAmount Amount of keys required. Contract is expected to send _requestedAmount or lower.\\n    function _getNextValidatorsFromActiveOperators(uint256 _requestedAmount)\\n        internal\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        Operators.CachedOperator[] memory operators = Operators.getAllFundable();\\n\\n        if (operators.length == 0) {\\n            return (new bytes[](0), new bytes[](0));\\n        }\\n\\n        uint256 selectedOperatorIndex = 0;\\n        for (uint256 idx = 1; idx < operators.length; ) {\\n            if (\\n                operators[idx].funded - operators[idx].stopped <\\n                operators[selectedOperatorIndex].funded - operators[selectedOperatorIndex].stopped\\n            ) {\\n                selectedOperatorIndex = idx;\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        uint256 selectedOperatorAvailableKeys = Uint256Lib.min(\\n            operators[selectedOperatorIndex].keys,\\n            operators[selectedOperatorIndex].limit\\n        ) - operators[selectedOperatorIndex].funded;\\n\\n        if (selectedOperatorAvailableKeys == 0) {\\n            return (new bytes[](0), new bytes[](0));\\n        }\\n\\n        Operators.Operator storage operator = Operators.get(operators[selectedOperatorIndex].name);\\n        if (selectedOperatorAvailableKeys >= _requestedAmount) {\\n            (publicKeys, signatures) = ValidatorKeys.getKeys(\\n                operators[selectedOperatorIndex].index,\\n                operators[selectedOperatorIndex].funded,\\n                _requestedAmount\\n            );\\n            operator.funded += _requestedAmount;\\n        } else {\\n            (publicKeys, signatures) = ValidatorKeys.getKeys(\\n                operators[selectedOperatorIndex].index,\\n                operators[selectedOperatorIndex].funded,\\n                selectedOperatorAvailableKeys\\n            );\\n            operator.funded += selectedOperatorAvailableKeys;\\n            (\\n                bytes[] memory additionalPublicKeys,\\n                bytes[] memory additionalSignatures\\n            ) = _getNextValidatorsFromActiveOperators(_requestedAmount - selectedOperatorAvailableKeys);\\n            publicKeys = _concatenateByteArrays(publicKeys, additionalPublicKeys);\\n            signatures = _concatenateByteArrays(signatures, additionalSignatures);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c88306898385d6ae572c7d19d3eee76ec646f2870d8b5270e3c8c23b010fbcc\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/OracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"../libraries/LibOwnable.sol\\\";\\n\\nimport \\\"../state/river/OracleAddress.sol\\\";\\nimport \\\"../state/river/LastOracleRoundId.sol\\\";\\nimport \\\"../state/river/BeaconValidatorBalanceSum.sol\\\";\\nimport \\\"../state/river/BeaconValidatorCount.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\n\\n/// @title Oracle Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the inputs provided by the oracle\\nabstract contract OracleManagerV1 {\\n    event BeaconDataUpdate(uint256 validatorCount, uint256 validatorBalanceSum, bytes32 roundId);\\n\\n    error InvalidValidatorCountReport(uint256 _providedValidatorCount, uint256 _depositedValidatorCount);\\n\\n    /// @notice Handler called if the delta between the last and new validator balance sum is positive\\n    /// @dev Must be overriden\\n    /// @param _profits The positive increase in the validator balance sum (staking rewards)\\n    function _onEarnings(uint256 _profits) internal virtual;\\n\\n    function _pullELFees() internal virtual returns (uint256);\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() virtual {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Set the initial oracle address\\n    /// @param _oracle Address of the oracle\\n    function initOracleManagerV1(address _oracle) internal {\\n        OracleAddress.set(_oracle);\\n    }\\n\\n    /// @notice Sets the validator count and validator balance sum reported by the oracle\\n    /// @dev Can only be called by the oracle address\\n    /// @param _validatorCount The number of active validators on the consensus layer\\n    /// @param _validatorBalanceSum The validator balance sum of the active validators on the consensus layer\\n    /// @param _roundId An identifier for this update\\n    function setBeaconData(\\n        uint256 _validatorCount,\\n        uint256 _validatorBalanceSum,\\n        bytes32 _roundId\\n    ) external {\\n        if (msg.sender != OracleAddress.get()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n\\n        if (_validatorCount > DepositedValidatorCount.get()) {\\n            revert InvalidValidatorCountReport(_validatorCount, DepositedValidatorCount.get());\\n        }\\n\\n        uint256 newValidators = _validatorCount - BeaconValidatorCount.get();\\n        uint256 previousValidatorBalanceSum = BeaconValidatorBalanceSum.get() + (newValidators * 32 ether);\\n\\n        BeaconValidatorBalanceSum.set(_validatorBalanceSum);\\n        BeaconValidatorCount.set(_validatorCount);\\n        LastOracleRoundId.set(_roundId);\\n\\n        uint256 executionLayerFees = _pullELFees();\\n\\n        if (previousValidatorBalanceSum < _validatorBalanceSum + executionLayerFees) {\\n            _onEarnings((_validatorBalanceSum + executionLayerFees) - previousValidatorBalanceSum);\\n        }\\n\\n        emit BeaconDataUpdate(_validatorCount, _validatorBalanceSum, _roundId);\\n    }\\n\\n    /// @notice Get Oracle address\\n    function getOracle() external view returns (address oracle) {\\n        oracle = OracleAddress.get();\\n    }\\n\\n    /// @notice Set Oracle address\\n    /// @param _oracleAddress Address of the oracle\\n    function setOracle(address _oracleAddress) external onlyAdmin {\\n        OracleAddress.set(_oracleAddress);\\n    }\\n\\n    /// @notice Get Beacon validator balance sum\\n    function getBeaconValidatorBalanceSum() external view returns (uint256 beaconValidatorBalanceSum) {\\n        beaconValidatorBalanceSum = BeaconValidatorBalanceSum.get();\\n    }\\n\\n    /// @notice Get Beacon validator count (the amount of validator reported by the oracles)\\n    function getBeaconValidatorCount() external view returns (uint256 beaconValidatorCount) {\\n        beaconValidatorCount = BeaconValidatorCount.get();\\n    }\\n}\\n\",\"keccak256\":\"0x53adf18f9ed456b7418c6d3a55223c5b897f298aa4bc33b05bde0aca42ad74b6\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/SharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\n\\nimport \\\"../state/river/Shares.sol\\\";\\nimport \\\"../state/river/SharesPerOwner.sol\\\";\\nimport \\\"../state/shared/ApprovalsPerOwner.sol\\\";\\n\\n/// @title Shares Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the shares of the depositor and the rebasing effect depending on the oracle data\\nabstract contract SharesManagerV1 is IERC20 {\\n    error BalanceTooLow();\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n    error NullTransfer();\\n\\n    /// @notice Internal hook triggered on the external transfer call\\n    /// @param _from Address of the sender\\n    /// @param _to Address of the recipient\\n    function _onTransfer(address _from, address _to) internal view virtual;\\n\\n    /// @notice Internal method to override to provide the total underlying asset balance\\n    function _assetBalance() internal view virtual returns (uint256);\\n\\n    /// @notice Modifier used to ensure that the transfer is allowed by using the internal hook to perform internal checks\\n    /// @param _from Address of the sender\\n    /// @param _to Address of the recipient\\n    modifier transferAllowed(address _from, address _to) {\\n        _onTransfer(_from, _to);\\n        _;\\n    }\\n\\n    /// @notice Modifier used to ensure the amount transferred is not 0\\n    /// @param _value Amount to check\\n    modifier isNotZero(uint256 _value) {\\n        if (_value == 0) {\\n            revert NullTransfer();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier used to ensure that the sender has enough funds for the transfer\\n    /// @param _owner Address of the sender\\n    /// @param _value Value that is required to be sent\\n    modifier hasFunds(address _owner, uint256 _value) {\\n        if (_balanceOf(_owner) < _value) {\\n            revert BalanceTooLow();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Retrieve the token name\\n    function name() external pure returns (string memory) {\\n        return \\\"River Ether\\\";\\n    }\\n\\n    /// @notice Retrieve the token symbol\\n    function symbol() external pure returns (string memory) {\\n        return \\\"lsETH\\\";\\n    }\\n\\n    /// @notice Retrieve the decimal count\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @notice Retrieve the total token supply\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /// @notice Retrieve the total underlying asset supply\\n    function totalUnderlyingSupply() external view returns (uint256) {\\n        return _assetBalance();\\n    }\\n\\n    /// @notice Retrieve the balance of an account\\n    /// @param _owner Address to be checked\\n    function balanceOf(address _owner) external view returns (uint256 balance) {\\n        return _balanceOf(_owner);\\n    }\\n\\n    /// @notice Retrieve the underlying asset balance of an account\\n    /// @param _owner Address to be checked\\n    function balanceOfUnderlying(address _owner) public view returns (uint256 balance) {\\n        return _balanceFromShares(SharesPerOwner.get(_owner));\\n    }\\n\\n    function underlyingBalanceFromShares(uint256 shares) external view returns (uint256) {\\n        return _balanceFromShares(shares);\\n    }\\n\\n    function sharesFromUnderlyingBalance(uint256 underlyingBalance) external view returns (uint256) {\\n        return _sharesFromBalance(underlyingBalance);\\n    }\\n\\n    /// @notice Retrieve the allowance value for a spender\\n    /// @notice _owner Address that issued the allowance\\n    /// @notice _spender Address that received the allowance\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining) {\\n        return ApprovalsPerOwner.get(_owner, _spender);\\n    }\\n\\n    /// @notice Performs a transfer from the message sender to the provided account\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount to be sent\\n    function transfer(address _to, uint256 _value)\\n        external\\n        transferAllowed(msg.sender, _to)\\n        isNotZero(_value)\\n        hasFunds(msg.sender, _value)\\n        returns (bool)\\n    {\\n        return _transfer(msg.sender, _to, _value);\\n    }\\n\\n    /// @notice Performs a transfer between two recipients\\n    /// @dev If the specified _from argument is the message sender, behaves like a regular transfer\\n    /// @dev If the specified _from argument is not the message sender, checks that the message sender has been given enough allowance\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount to be sent\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external transferAllowed(_from, _to) isNotZero(_value) hasFunds(_from, _value) returns (bool) {\\n        if (_from != msg.sender) {\\n            uint256 currentAllowance = ApprovalsPerOwner.get(_from, msg.sender);\\n            if (currentAllowance < _value) {\\n                revert AllowanceTooLow(_from, msg.sender, currentAllowance, _value);\\n            }\\n            ApprovalsPerOwner.set(_from, msg.sender, currentAllowance - _value);\\n        }\\n        return _transfer(_from, _to, _value);\\n    }\\n\\n    /// @notice Approves an account for future spendings\\n    /// @dev An approved account can use transferFrom to transfer funds on behalf of the token owner\\n    /// @param _spender Address that is allowed to spend the tokens\\n    /// @param _value The allowed amount, will override previous value\\n    function approve(address _spender, uint256 _value) external returns (bool success) {\\n        ApprovalsPerOwner.set(msg.sender, _spender, _value);\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /// @notice Internal utility to retrieve the total supply of tokens\\n    function _totalSupply() internal view returns (uint256) {\\n        return Shares.get();\\n    }\\n\\n    /// @notice Internal utility to perform an unchecked transfer\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount to be sent\\n    function _transfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal returns (bool) {\\n        SharesPerOwner.set(_from, SharesPerOwner.get(_from) - _value);\\n        SharesPerOwner.set(_to, SharesPerOwner.get(_to) + _value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /// @notice Internal utility to retrieve the underlying asset balance for the given shares\\n    /// @param _shares Amount of shares to convert\\n    function _balanceFromShares(uint256 _shares) internal view returns (uint256) {\\n        uint256 _totalSharesValue = Shares.get();\\n\\n        if (_totalSharesValue == 0) {\\n            return 0;\\n        }\\n\\n        return ((_shares * _assetBalance())) / _totalSharesValue;\\n    }\\n\\n    /// @notice Internal utility to retrieve the shares count for a given underlying asset amount\\n    /// @param _balance Amount of underlying asset balance to convert\\n    function _sharesFromBalance(uint256 _balance) internal view returns (uint256) {\\n        uint256 _totalSharesValue = Shares.get();\\n\\n        if (_totalSharesValue == 0) {\\n            return 0;\\n        }\\n\\n        return (_balance * _totalSharesValue) / _assetBalance();\\n    }\\n\\n    /// @notice Internal utility to mint shares for the specified user\\n    /// @dev This method assumes that funds received are now part of the _assetBalance()\\n    /// @param _owner Account that should receive the new shares\\n    /// @param _underlyingAssetValue Value of underlying asset received, to convert into shares\\n    function _mintShares(address _owner, uint256 _underlyingAssetValue) internal {\\n        uint256 assetBalance = _assetBalance();\\n        uint256 oldTotalAssetBalance = _assetBalance() - _underlyingAssetValue;\\n\\n        if (oldTotalAssetBalance == 0) {\\n            _mintRawShares(_owner, assetBalance);\\n        } else {\\n            uint256 sharesToMint = (_underlyingAssetValue * _totalSupply()) / oldTotalAssetBalance;\\n            _mintRawShares(_owner, sharesToMint);\\n        }\\n    }\\n\\n    /// @notice Internal utility to mint shares without any conversion, and emits a mint Transfer event\\n    /// @param _owner Account that should receive the new shares\\n    /// @param _value Amount of shares to mint\\n    function _mintRawShares(address _owner, uint256 _value) internal {\\n        Shares.set(Shares.get() + _value);\\n        SharesPerOwner.set(_owner, SharesPerOwner.get(_owner) + _value);\\n        emit Transfer(address(0), _owner, _value);\\n    }\\n\\n    /// @notice Internal utility to retrieve the amount of shares per owner\\n    /// @param _owner Account to be checked\\n    function _balanceOf(address _owner) internal view returns (uint256 balance) {\\n        return SharesPerOwner.get(_owner);\\n    }\\n}\\n\",\"keccak256\":\"0x91dfacb7c8070f7d3bc53c5f818b6b0d0bb367302dd7dcb72dab00a511a2db64\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/TransferManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Errors.sol\\\";\\n\\n/// @title Transfer Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the inbound transfers cases or the explicit submissions\\nabstract contract TransferManagerV1 {\\n    event UserDeposit(address indexed depositor, address indexed recipient, uint256 amount);\\n\\n    error EmptyDeposit();\\n    error EmptyDonation();\\n\\n    /// @notice Handler called whenever a user has sent funds to the contract\\n    /// @dev Must be overriden\\n    /// @param _depositor Address that made the deposit\\n    /// @param _recipient Address that receives the minted shares\\n    /// @param _amount Amount deposited\\n    function _onDeposit(\\n        address _depositor,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal virtual;\\n\\n    /// @notice Internal utility calling the deposit handler and emitting the deposit details\\n    function _deposit(address _recipient) internal {\\n        if (msg.value == 0) {\\n            revert EmptyDeposit();\\n        }\\n\\n        _onDeposit(msg.sender, _recipient, msg.value);\\n\\n        emit UserDeposit(msg.sender, _recipient, msg.value);\\n    }\\n\\n    /// @notice Returns the amount of pending ETH\\n    function getPendingEth() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /// @notice Explicit deposit method to mint on msg.sender\\n    function deposit() external payable {\\n        _deposit(msg.sender);\\n    }\\n\\n    /// @notice Explicit deposit method to mint on msg.sender and transfer to _recipient\\n    /// @param _recipient Address receiving the minted lsETH\\n    function depositAndTransfer(address _recipient) external payable {\\n        _deposit(_recipient);\\n    }\\n\\n    /// @notice Implicit deposit method, when the user performs a regular transfer to the contract\\n    receive() external payable {\\n        _deposit(msg.sender);\\n    }\\n\\n    /// @notice Invalid call, when the user sends a transaction with a data payload but no method matched\\n    fallback() external payable {\\n        revert Errors.InvalidCall();\\n    }\\n}\\n\",\"keccak256\":\"0x13980e0fcffb13841ad49c6fa9600cf492d52298d8bbb72be807091bc7c5063e\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAllowlist.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IAllowlist {\\n    function onlyAllowed(address _account, uint256 _mask) external view;\\n\\n    function isAllowed(address _account, uint256 _mask) external view returns (bool);\\n\\n    function isDenied(address _account) external view returns (bool);\\n\\n    function hasPermission(address _account, uint256 _mask) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd5440a1469cf4d82cd11ba2a630d435f72732b75a75b7cc4578b3079a4869e0a\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IDepositContract.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IDepositContract {\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawalCredentials,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa5b1f77965814e1cc883111cb2909bf58647c401d03ada85b95a65cf54f8b029\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IELFeeRecipient.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IELFeeRecipient {\\n    function pullELFees() external;\\n}\\n\",\"keccak256\":\"0xd79d2225df6aa365a738b63091ffa1783b79c42bdae5e9172660bb4143750ce3\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool success);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n}\\n\",\"keccak256\":\"0x3fdc46f7b30b29d3b9d540ba1b06cfaede61a7c6ce31c8fe434a9af6f411a920\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRiverELFeeInput.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IRiverELFeeInput {\\n    function sendELFees() external payable;\\n}\\n\",\"keccak256\":\"0xd314a0fdfcafda2f86a3f0c57ee4fcf9249cb45e962fa114efe678d801aef24a\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/BytesLib.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary BytesLib {\\n    function pad64(bytes memory _b) internal pure returns (bytes memory) {\\n        assert(_b.length >= 32 && _b.length <= 64);\\n        if (64 == _b.length) return _b;\\n\\n        bytes memory zero32 = new bytes(32);\\n        assembly {\\n            mstore(add(zero32, 0x20), 0)\\n        }\\n\\n        if (32 == _b.length) return BytesLib.concat(_b, zero32);\\n        else return BytesLib.concat(_b, BytesLib.slice(zero32, 0, uint256(64) - _b.length));\\n    }\\n\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xb7520fc078933f9e1db774a3040baee1f915a70475d76e4731f6ef34d386e8f9\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    error Unauthorized(address caller);\\n    error InvalidCall();\\n    error InvalidArgument();\\n    error InvalidZeroAddress();\\n}\\n\",\"keccak256\":\"0xb212763b0c7e4f4addfb85d863c616469be04e2d43e2431e9ef6da5d47f07436\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\nimport \\\"../state/shared/PendingAdministratorAddress.sol\\\";\\n\\nlibrary LibOwnable {\\n    function _setAdmin(address newAdmin) internal {\\n        AdministratorAddress.set(newAdmin);\\n    }\\n\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n\\n    function _setPendingAdmin(address newAdmin) internal {\\n        PendingAdministratorAddress.set(newAdmin);\\n    }\\n\\n    function _getPendingAdmin() internal view returns (address) {\\n        return PendingAdministratorAddress.get();\\n    }\\n}\\n\",\"keccak256\":\"0x41156e3a841b426dd1d3a8b7a82cb88065974a3c812bb47481b3acce56798247\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/Uint256Lib.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Uint256Lib {\\n    function toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n        result = 0;\\n        uint256 temp_value = _value;\\n        for (uint256 i = 0; i < 8; ) {\\n            result = (result << 8) | (temp_value & 0xFF);\\n            temp_value >>= 8;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        assert(0 == temp_value); // fully converted\\n        result <<= (24 * 8);\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256 max) {\\n        return (a > b ? b : a);\\n    }\\n}\\n\",\"keccak256\":\"0x2aa084b0e29d9ed4f447bd20590e848c87e64410eb8711ce0755ad38d64b525b\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x52ccf1daa33de9c72831e0d7458928c37ca7b5f8d8f732114095edeb81339920\",\"license\":\"MIT\"},\"contracts/src/state/river/AllowlistAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\nimport \\\"../../interfaces/IAllowlist.sol\\\";\\n\\nlibrary AllowlistAddress {\\n    bytes32 internal constant ALLOWLIST_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowlistAddress\\\")) - 1);\\n\\n    function get() internal view returns (IAllowlist) {\\n        return IAllowlist(UnstructuredStorage.getStorageAddress(ALLOWLIST_ADDRESS_SLOT));\\n    }\\n\\n    function set(address newValue) internal {\\n        if (newValue == address(0)) {\\n            revert Errors.InvalidZeroAddress();\\n        }\\n        UnstructuredStorage.setStorageAddress(ALLOWLIST_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x0c59d61425da8c18f6e53f6da984e31c5babdfdbcf2b1644aeaf4bbcbbba3bed\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/BeaconValidatorBalanceSum.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary BeaconValidatorBalanceSum {\\n    bytes32 internal constant VALIDATOR_BALANCE_SUM_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.beaconValidatorBalanceSum\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(VALIDATOR_BALANCE_SUM_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(VALIDATOR_BALANCE_SUM_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x48995ea16b0e6fa95c74fe37fccb5b1240f697bad7e36bbce1547abedacfae4a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/BeaconValidatorCount.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary BeaconValidatorCount {\\n    bytes32 internal constant BEACON_VALIDATOR_COUNT_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.beaconValidatorCount\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(BEACON_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(BEACON_VALIDATOR_COUNT_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x866375c8488248156dd37fe77873e45c3dfa5b82f3d67952c564bb9771cbd177\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DepositContractAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../interfaces/IDepositContract.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary DepositContractAddress {\\n    bytes32 internal constant DEPOSIT_CONTRACT_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositContractAddress\\\")) - 1);\\n\\n    function get() internal view returns (IDepositContract) {\\n        return IDepositContract(UnstructuredStorage.getStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT));\\n    }\\n\\n    function set(IDepositContract newValue) internal {\\n        if (address(newValue) == address(0)) {\\n            revert Errors.InvalidZeroAddress();\\n        }\\n        return UnstructuredStorage.setStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT, address(newValue));\\n    }\\n}\\n\",\"keccak256\":\"0x44afddb642f7965745def7b72147ba71e40e58e2947258d24dc0db272843e28a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DepositedValidatorCount.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary DepositedValidatorCount {\\n    bytes32 internal constant DEPOSITED_VALIDATOR_COUNT_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositedValidatorCount\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x60cc15ed3078f7faf654c5ff5ddd8444fe7fb9cdded552cc754e474d79507a40\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/ELFeeRecipientAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary ELFeeRecipientAddress {\\n    bytes32 internal constant EL_FEE_RECIPIENT_ADDRESS =\\n        bytes32(uint256(keccak256(\\\"river.state.elFeeRecipientAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(EL_FEE_RECIPIENT_ADDRESS);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(EL_FEE_RECIPIENT_ADDRESS, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xbcbeda6c91d05c7afd1b6652ed50e75f8e89ab15515fc949cb5631c335da45e1\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/GlobalFee.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary GlobalFee {\\n    bytes32 internal constant GLOBAL_FEE_SLOT = bytes32(uint256(keccak256(\\\"river.state.globalFee\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(GLOBAL_FEE_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(GLOBAL_FEE_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xbe84f50b90b7e0afe2b85593493ca950ebaf60b5ce00206cf31e6dcdfa9dffe0\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/LastOracleRoundId.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary LastOracleRoundId {\\n    bytes32 internal constant LAST_ORACLE_ROUND_ID_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.lastOracleRoundId\\\")) - 1);\\n\\n    function get() internal view returns (bytes32) {\\n        return UnstructuredStorage.getStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT);\\n    }\\n\\n    function set(bytes32 newValue) internal {\\n        UnstructuredStorage.setStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x9cd4be635b16daef58d101f2655ae3c8c3b6907f84a2d77ef47aa43089531548\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/OperatorRewardsShare.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary OperatorRewardsShare {\\n    bytes32 internal constant OPERATOR_REWARDS_SHARE_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.operatorRewardsShare\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(OPERATOR_REWARDS_SHARE_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(OPERATOR_REWARDS_SHARE_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xe0d3789bdd6dd1963e3ec312e123a699af70aca4aae51c151e367e9d784a958d\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/Operators.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/Errors.sol\\\";\\n\\nlibrary Operators {\\n    bytes32 internal constant OPERATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.operators\\\")) - 1);\\n\\n    bytes32 internal constant OPERATORS_MAPPING_SLOT = bytes32(uint256(keccak256(\\\"river.state.operatorsMapping\\\")) - 1);\\n\\n    struct Operator {\\n        bool active;\\n        string name;\\n        address operator;\\n        address feeRecipient;\\n        uint256 limit;\\n        uint256 funded;\\n        uint256 keys;\\n        uint256 stopped;\\n    }\\n\\n    struct CachedOperator {\\n        bool active;\\n        string name;\\n        address operator;\\n        address feeRecipient;\\n        uint256 limit;\\n        uint256 funded;\\n        uint256 keys;\\n        uint256 stopped;\\n        uint256 index;\\n    }\\n\\n    struct OperatorResolution {\\n        bool active;\\n        uint256 index;\\n    }\\n\\n    struct SlotOperator {\\n        Operator[] value;\\n    }\\n\\n    struct SlotOperatorMapping {\\n        mapping(string => OperatorResolution) value;\\n    }\\n\\n    error OperatorNotFound(string name);\\n    error OperatorNotFoundAtIndex(uint256 index);\\n\\n    function _getOperatorIndex(string memory name) internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n\\n        if (!opm.value[name].active) {\\n            revert OperatorNotFound(name);\\n        }\\n\\n        return opm.value[name].index;\\n    }\\n\\n    function _getOperatorActive(string memory name) internal view returns (bool) {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n        return opm.value[name].active;\\n    }\\n\\n    function _setOperatorIndex(\\n        string memory name,\\n        bool active,\\n        uint256 index\\n    ) internal {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n        opm.value[name] = OperatorResolution({active: active, index: index});\\n    }\\n\\n    function exists(string memory name) internal view returns (bool) {\\n        return _getOperatorActive(name);\\n    }\\n\\n    function indexOf(string memory name) internal view returns (int256) {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n\\n        if (!opm.value[name].active) {\\n            return -1;\\n        }\\n\\n        return int256(opm.value[name].index);\\n    }\\n\\n    function get(string memory name) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n        uint256 index = _getOperatorIndex(name);\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[index];\\n    }\\n\\n    function getByIndex(uint256 index) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (r.value.length <= index) {\\n            revert OperatorNotFoundAtIndex(index);\\n        }\\n\\n        return r.value[index];\\n    }\\n\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    function _hasFundableKeys(Operators.Operator memory operator) internal pure returns (bool) {\\n        return (operator.active &&\\n            operator.keys > operator.funded - operator.stopped &&\\n            operator.limit > operator.funded - operator.stopped);\\n    }\\n\\n    function getAllActive() internal view returns (Operator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n\\n        for (uint256 idx = 0; idx < r.value.length; ) {\\n            if (r.value[idx].active) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        Operator[] memory activeOperators = new Operator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < r.value.length; ) {\\n            if (r.value[idx].active) {\\n                activeOperators[activeIdx] = r.value[idx];\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    function getAllFundable() internal view returns (CachedOperator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n\\n        for (uint256 idx = 0; idx < r.value.length; ) {\\n            if (_hasFundableKeys(r.value[idx])) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        CachedOperator[] memory activeOperators = new CachedOperator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < r.value.length; ) {\\n            Operator memory op = r.value[idx];\\n            if (_hasFundableKeys(op)) {\\n                activeOperators[activeIdx] = CachedOperator({\\n                    active: op.active,\\n                    name: op.name,\\n                    operator: op.operator,\\n                    feeRecipient: op.feeRecipient,\\n                    limit: op.limit,\\n                    funded: op.funded,\\n                    keys: op.keys,\\n                    stopped: op.stopped,\\n                    index: idx\\n                });\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    function set(string memory name, Operator memory newValue) internal returns (uint256) {\\n        if (newValue.operator == address(0) || newValue.feeRecipient == address(0)) {\\n            revert Errors.InvalidZeroAddress();\\n        }\\n        bool opExists = _getOperatorActive(name);\\n\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (!opExists) {\\n            r.value.push(newValue);\\n            _setOperatorIndex(name, newValue.active, r.value.length - 1);\\n            return (r.value.length - 1);\\n        } else {\\n            uint256 index = _getOperatorIndex(name);\\n            r.value[index] = newValue;\\n            if (opExists != newValue.active) {\\n                _setOperatorIndex(name, newValue.active, index);\\n            }\\n            return (index);\\n        }\\n    }\\n\\n    function setOperatorName(uint256 index, string memory newName) internal {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        string memory oldName = r.value[index].name;\\n        r.value[index].name = newName;\\n\\n        _setOperatorIndex(oldName, false, 0); // set storage to 0\\n        _setOperatorIndex(newName, true, index);\\n    }\\n}\\n\",\"keccak256\":\"0xb3c6688d347d3db72c1e30f8ca27a392514f994a3e5887fdbfc4d7ae71fa6ac7\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/OracleAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\n\\nlibrary OracleAddress {\\n    bytes32 internal constant ORACLE_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.oracleAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ORACLE_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        if (newValue == address(0)) {\\n            revert Errors.InvalidZeroAddress();\\n        }\\n        UnstructuredStorage.setStorageAddress(ORACLE_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xfdd2fd78dd4c45e268b9093864993d56220ab60982a49f7de7af25cbdc8393bf\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/Shares.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Shares {\\n    bytes32 internal constant SHARES_SLOT = bytes32(uint256(keccak256(\\\"river.state.shares\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(SHARES_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(SHARES_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xd928f7e6f42e62ef422e6584cef8dc8a2205b48571f484bf117b423591f82844\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/SharesPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary SharesPerOwner {\\n    bytes32 internal constant SHARES_SLOT = bytes32(uint256(keccak256(\\\"river.state.sharesPerOwner\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(address => uint256) value;\\n    }\\n\\n    function get(address owner) internal view returns (uint256) {\\n        bytes32 slot = SHARES_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[owner];\\n    }\\n\\n    function set(address owner, uint256 newValue) internal {\\n        bytes32 slot = SHARES_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[owner] = newValue;\\n    }\\n}\\n\",\"keccak256\":\"0x7644bec5bc614b545e3b5e8108957528f8030e75f33a05a2aa0b9bc2807eb595\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/TreasuryAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\n\\nlibrary TreasuryAddress {\\n    bytes32 internal constant TREASURY_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.treasuryAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(TREASURY_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        if (newValue == address(0)) {\\n            revert Errors.InvalidZeroAddress();\\n        }\\n        UnstructuredStorage.setStorageAddress(TREASURY_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xb2e10fecd46c3cf5949a1cc47c11f0c472db9e2666617ae2d0e6394c6653799a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/ValidatorKeys.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/BytesLib.sol\\\";\\n\\nlibrary ValidatorKeys {\\n    uint256 internal constant PUBLIC_KEY_LENGTH = 48;\\n    uint256 internal constant SIGNATURE_LENGTH = 96;\\n\\n    error InvalidPublicKey();\\n    error InvalidSignature();\\n\\n    bytes32 internal constant VALIDATOR_KEYS_SLOT = bytes32(uint256(keccak256(\\\"river.state.validatorKeys\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(uint256 => mapping(uint256 => bytes)) value;\\n    }\\n\\n    function get(uint256 operatorIndex, uint256 idx)\\n        internal\\n        view\\n        returns (bytes memory publicKey, bytes memory signature)\\n    {\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        bytes storage entry = r.value[operatorIndex][idx];\\n\\n        publicKey = BytesLib.slice(entry, 0, PUBLIC_KEY_LENGTH);\\n        signature = BytesLib.slice(entry, PUBLIC_KEY_LENGTH, SIGNATURE_LENGTH);\\n    }\\n\\n    function getKeys(\\n        uint256 operatorIndex,\\n        uint256 startIdx,\\n        uint256 amount\\n    ) internal view returns (bytes[] memory publicKey, bytes[] memory signatures) {\\n        publicKey = new bytes[](amount);\\n        signatures = new bytes[](amount);\\n\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        for (uint256 idx = startIdx; idx < startIdx + amount; ) {\\n            bytes memory rawCredentials = r.value[operatorIndex][idx];\\n            publicKey[idx - startIdx] = BytesLib.slice(rawCredentials, 0, PUBLIC_KEY_LENGTH);\\n            signatures[idx - startIdx] = BytesLib.slice(rawCredentials, PUBLIC_KEY_LENGTH, SIGNATURE_LENGTH);\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n    }\\n\\n    function set(\\n        uint256 operatorIndex,\\n        uint256 idx,\\n        bytes memory publicKey,\\n        bytes memory signature\\n    ) internal {\\n        bytes memory concatenatedKeys = BytesLib.concat(publicKey, signature);\\n\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[operatorIndex][idx] = concatenatedKeys;\\n    }\\n}\\n\",\"keccak256\":\"0x5a62f23696cac5777ce19426883a654b53aa0546f31a130b185b649be7a8d711\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/WithdrawalCredentials.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary WithdrawalCredentials {\\n    bytes32 internal constant WITHDRAWAL_CREDENTIALS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.withdrawalCredentials\\\")) - 1);\\n\\n    function get() internal view returns (bytes32) {\\n        return UnstructuredStorage.getStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT);\\n    }\\n\\n    function set(bytes32 newValue) internal {\\n        UnstructuredStorage.setStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x6baf6d6ae9e96c5405384e4708673de5bd5ac45b519eda2253041fc83b0892fd\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary AdministratorAddress {\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x6c103a106ff958994c38f055a316144416df36aeb299ba660e7b8af063931b72\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/ApprovalsPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary ApprovalsPerOwner {\\n    bytes32 internal constant APPROVALS_PER_OWNER_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.approvalsPerOwner\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(address => mapping(address => uint256)) value;\\n    }\\n\\n    function get(address owner, address operator) internal view returns (uint256) {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[owner][operator];\\n    }\\n\\n    function set(\\n        address owner,\\n        address operator,\\n        uint256 newValue\\n    ) internal {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[owner][operator] = newValue;\\n    }\\n}\\n\",\"keccak256\":\"0xcf3ab7ba843246663850deb26b5f6aeabc3b7133d0b0ab26d1578db9811034ef\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/PendingAdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary PendingAdministratorAddress {\\n    bytes32 public constant PENDING_ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.pendingAdministratorAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x5888a98f160df2cc8d51e0352c57ae0491678b9e18c0be0cac5e5f9527aff650\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Version {\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(VERSION_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf90d1ecf583061aa70dc464ec1fde21da6e9309601bcbba38f47d26257a1c656\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Kiln",
    "kind": "dev",
    "methods": {
      "addOperator(string,address,address)": {
        "details": "Only callable by the administrator",
        "params": {
          "_feeRecipient": "The address where the rewards are sent",
          "_name": "The name identifying the operator",
          "_operator": "The address representing the operator, receiving the rewards"
        }
      },
      "addValidators(uint256,uint256,bytes,bytes)": {
        "details": "Only callable by the administrator or the operator address",
        "params": {
          "_index": "The operator index",
          "_keyCount": "The amount of keys provided",
          "_publicKeys": "Public keys of the validator, concatenated",
          "_signatures": "Signatures of the validator keys, concatenated"
        }
      },
      "approve(address,uint256)": {
        "details": "An approved account can use transferFrom to transfer funds on behalf of the token owner",
        "params": {
          "_spender": "Address that is allowed to spend the tokens",
          "_value": "The allowed amount, will override previous value"
        }
      },
      "balanceOf(address)": {
        "params": {
          "_owner": "Address to be checked"
        }
      },
      "balanceOfUnderlying(address)": {
        "params": {
          "_owner": "Address to be checked"
        }
      },
      "depositAndTransfer(address)": {
        "params": {
          "_recipient": "Address receiving the minted lsETH"
        }
      },
      "depositToConsensusLayer(uint256)": {
        "params": {
          "_maxCount": "The maximum amount of validator keys to fund"
        }
      },
      "getOperator(uint256)": {
        "params": {
          "_index": "The index of the operator"
        }
      },
      "getOperatorByName(string)": {
        "params": {
          "_name": "The name identifying the operator"
        }
      },
      "getOperatorDetails(string)": {
        "params": {
          "_name": "Name of the operator"
        }
      },
      "getValidator(uint256,uint256)": {
        "params": {
          "_operatorIndex": "The index of the operator",
          "_validatorIndex": "The index of the validator"
        }
      },
      "initRiverV1(address,address,bytes32,address,address,address,address,uint256,uint256)": {
        "params": {
          "_allowlistAddress": "Address of the allowlist contract",
          "_depositContractAddress": "Address to make Consensus Layer deposits",
          "_elFeeRecipientAddress": "Address that receives the execution layer fees",
          "_globalFee": "Amount retained when the eth balance increases, splitted between the treasury and the operators",
          "_operatorRewardsShare": "Share of the global fee used to reward node operators",
          "_systemAdministratorAddress": "Administrator address",
          "_treasuryAddress": "Address receiving the fee minus the operator share",
          "_withdrawalCredentials": "Credentials to use for every validator deposit"
        }
      },
      "removeValidators(uint256,uint256[])": {
        "details": "Only callable by the administrator or the operator addressThe indexes must be provided sorted in decreasing order, otherwise the method will revertThe operator limit will be set to the lowest deleted key index",
        "params": {
          "_index": "The operator index",
          "_indexes": "The indexes of the keys to remove"
        }
      },
      "setAllowlist(address)": {
        "params": {
          "_newAllowlist": "New address for the allowlist"
        }
      },
      "setBeaconData(uint256,uint256,bytes32)": {
        "details": "Can only be called by the oracle address",
        "params": {
          "_roundId": "An identifier for this update",
          "_validatorBalanceSum": "The validator balance sum of the active validators on the consensus layer",
          "_validatorCount": "The number of active validators on the consensus layer"
        }
      },
      "setELFeeRecipient(address)": {
        "params": {
          "_newELFeeRecipient": "New address for the recipient"
        }
      },
      "setGlobalFee(uint256)": {
        "params": {
          "newFee": "New fee value"
        }
      },
      "setOperatorAddress(uint256,address)": {
        "details": "Only callable by the administrator or the previous operator address",
        "params": {
          "_index": "The operator index",
          "_newOperatorAddress": "The new address of the operator"
        }
      },
      "setOperatorFeeRecipientAddress(uint256,address)": {
        "details": "Only callable by the administrator or the previous operator fee recipient address",
        "params": {
          "_index": "The operator index",
          "_newOperatorFeeRecipientAddress": "The new fee recipient address of the operator"
        }
      },
      "setOperatorLimits(uint256[],uint256[])": {
        "details": "Only callable by the administratorThe limit cannot exceed the total key count of the operatorThe _indexes and _newLimits must have the same length.Each limit value is applied to the operator index at the same index in the _indexes array.",
        "params": {
          "_newLimits": "The new staking limit of the operators",
          "_operatorIndexes": "The operator indexes"
        }
      },
      "setOperatorName(uint256,string)": {
        "details": "Only callable by the administrator or the operatorNo name conflict can exist",
        "params": {
          "_index": "The operator index",
          "_newName": "The new operator name"
        }
      },
      "setOperatorRewardsShare(uint256)": {
        "params": {
          "newOperatorRewardsShare": "New share value"
        }
      },
      "setOperatorStatus(uint256,bool)": {
        "details": "Only callable by the administrator",
        "params": {
          "_index": "The operator index",
          "_newStatus": "The new status of the operator"
        }
      },
      "setOperatorStoppedValidatorCount(uint256,uint256)": {
        "details": "Only callable by the administrator",
        "params": {
          "_index": "The operator index",
          "_newStoppedValidatorCount": "The new stopped validator count of the operator"
        }
      },
      "setOracle(address)": {
        "params": {
          "_oracleAddress": "Address of the oracle"
        }
      },
      "setTreasury(address)": {
        "params": {
          "_newTreasury": "New address for the treasury"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "_to": "Address receiving the tokens",
          "_value": "Amount to be sent"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "If the specified _from argument is the message sender, behaves like a regular transferIf the specified _from argument is not the message sender, checks that the message sender has been given enough allowance",
        "params": {
          "_from": "Address sending the tokens",
          "_to": "Address receiving the tokens",
          "_value": "Amount to be sent"
        }
      },
      "transferOwnership(address)": {
        "params": {
          "_newAdmin": "New address for the admin"
        }
      }
    },
    "title": "River (v1)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Accepts the ownership of the system"
      },
      "addOperator(string,address,address)": {
        "notice": "Adds an operator to the registry"
      },
      "addValidators(uint256,uint256,bytes,bytes)": {
        "notice": "Adds new keys for an operator"
      },
      "allowance(address,address)": {
        "notice": "Retrieve the allowance value for a spender_owner Address that issued the allowance_spender Address that received the allowance"
      },
      "approve(address,uint256)": {
        "notice": "Approves an account for future spendings"
      },
      "balanceOf(address)": {
        "notice": "Retrieve the balance of an account"
      },
      "balanceOfUnderlying(address)": {
        "notice": "Retrieve the underlying asset balance of an account"
      },
      "decimals()": {
        "notice": "Retrieve the decimal count"
      },
      "deposit()": {
        "notice": "Explicit deposit method to mint on msg.sender"
      },
      "depositAndTransfer(address)": {
        "notice": "Explicit deposit method to mint on msg.sender and transfer to _recipient"
      },
      "depositToConsensusLayer(uint256)": {
        "notice": "Deposits current balance to the Consensus Layer by batches of 32 ETH"
      },
      "getAdministrator()": {
        "notice": "Retrieve system administrator address"
      },
      "getAllowlist()": {
        "notice": "Retrieve the allowlist address"
      },
      "getBeaconValidatorBalanceSum()": {
        "notice": "Get Beacon validator balance sum"
      },
      "getBeaconValidatorCount()": {
        "notice": "Get Beacon validator count (the amount of validator reported by the oracles)"
      },
      "getDepositedValidatorCount()": {
        "notice": "Get the deposited validator count (the count of deposits made by the contract)"
      },
      "getELFeeRecipient()": {
        "notice": "Retrieve the execution layer fee recipient"
      },
      "getOperator(uint256)": {
        "notice": "Get operator details"
      },
      "getOperatorByName(string)": {
        "notice": "Get operator details by name"
      },
      "getOperatorCount()": {
        "notice": "Get operator count"
      },
      "getOperatorDetails(string)": {
        "notice": "Retrieve the operator details from the operator name"
      },
      "getOracle()": {
        "notice": "Get Oracle address"
      },
      "getPendingAdministrator()": {
        "notice": "Retrieve system pending administrator address"
      },
      "getPendingEth()": {
        "notice": "Returns the amount of pending ETH"
      },
      "getTreasury()": {
        "notice": "Retrieve the treasury address"
      },
      "getValidator(uint256,uint256)": {
        "notice": "Get the details of a validator"
      },
      "getWithdrawalCredentials()": {
        "notice": "Retrieve the withdrawal credentials"
      },
      "initRiverV1(address,address,bytes32,address,address,address,address,uint256,uint256)": {
        "notice": "Initializes the River system"
      },
      "name()": {
        "notice": "Retrieve the token name"
      },
      "removeValidators(uint256,uint256[])": {
        "notice": "Remove validator keys"
      },
      "sendELFees()": {
        "notice": "Input for execution layer fee earnings"
      },
      "setAllowlist(address)": {
        "notice": "Changes the allowlist address"
      },
      "setBeaconData(uint256,uint256,bytes32)": {
        "notice": "Sets the validator count and validator balance sum reported by the oracle"
      },
      "setELFeeRecipient(address)": {
        "notice": "Changes the execution layer fee recipient"
      },
      "setGlobalFee(uint256)": {
        "notice": "Changes the global fee parameter"
      },
      "setOperatorAddress(uint256,address)": {
        "notice": "Changes the operator address of an operator"
      },
      "setOperatorFeeRecipientAddress(uint256,address)": {
        "notice": "Changes the operator fee recipient address"
      },
      "setOperatorLimits(uint256[],uint256[])": {
        "notice": "Changes the operator staking limit"
      },
      "setOperatorName(uint256,string)": {
        "notice": "Changes the operator name"
      },
      "setOperatorRewardsShare(uint256)": {
        "notice": "Changes the operator rewards share."
      },
      "setOperatorStatus(uint256,bool)": {
        "notice": "Changes the operator status"
      },
      "setOperatorStoppedValidatorCount(uint256,uint256)": {
        "notice": "Changes the operator stopped validator cound"
      },
      "setOracle(address)": {
        "notice": "Set Oracle address"
      },
      "setTreasury(address)": {
        "notice": "Changes the treasury address"
      },
      "symbol()": {
        "notice": "Retrieve the token symbol"
      },
      "totalSupply()": {
        "notice": "Retrieve the total token supply"
      },
      "totalUnderlyingSupply()": {
        "notice": "Retrieve the total underlying asset supply"
      },
      "transfer(address,uint256)": {
        "notice": "Performs a transfer from the message sender to the provided account"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Performs a transfer between two recipients"
      },
      "transferOwnership(address)": {
        "notice": "Changes the admin but waits for new admin approval"
      }
    },
    "notice": "This contract merges all the manager contracts and implements all the virtual methods stitching all components together",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}