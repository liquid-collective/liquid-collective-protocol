{
  "address": "0x52bA1F3e9547a72027E8d825F31f46121018f5aB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "Denied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAlloweeCount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedVersion",
          "type": "uint256"
        }
      ],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MismatchedAlloweeAndStatusCount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "statuses",
          "type": "uint256[]"
        }
      ],
      "name": "ChangedAllowlistStatuses",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_statuses",
          "type": "uint256[]"
        }
      ],
      "name": "allow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllower",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getPermissions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mask",
          "type": "uint256"
        }
      ],
      "name": "hasPermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_allower",
          "type": "address"
        }
      ],
      "name": "initAllowlistV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mask",
          "type": "uint256"
        }
      ],
      "name": "isAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isDenied",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mask",
          "type": "uint256"
        }
      ],
      "name": "onlyAllowed",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAllowerAddress",
          "type": "address"
        }
      ],
      "name": "setAllower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a7e8b7cfa9421ee9211c048b3a0317acddbd7bae78540305ba15f664ff9365d",
  "receipt": {
    "to": null,
    "from": "0x92D7d6DADe15fcF369534cEb8CD1A27f97185ab3",
    "contractAddress": "0x52bA1F3e9547a72027E8d825F31f46121018f5aB",
    "transactionIndex": 28,
    "gasUsed": "532372",
    "logsBloom": "0x
    "blockHash": "0x03867f77c31a224c234086aee0e8c66ca33af755c46eaf63616c92b3afefbd59",
    "transactionHash": "0x1a7e8b7cfa9421ee9211c048b3a0317acddbd7bae78540305ba15f664ff9365d",
    "logs": [],
    "blockNumber": 7463554,
    "cumulativeGasUsed": "19772778",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "34fe570511577a99672ba6468afacb98",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"Denied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAlloweeCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchedAlloweeAndStatusCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"statuses\",\"type\":\"uint256[]\"}],\"name\":\"ChangedAllowlistStatuses\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_statuses\",\"type\":\"uint256[]\"}],\"name\":\"allow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPermissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allower\",\"type\":\"address\"}],\"name\":\"initAllowlistV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isDenied\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"onlyAllowed\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAllowerAddress\",\"type\":\"address\"}],\"name\":\"setAllower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kiln\",\"kind\":\"dev\",\"methods\":{\"allow(address[],uint256[])\":{\"params\":{\"_accounts\":\"Accounts with statuses to edit\",\"_statuses\":\"Allowlist statuses for each account, in the same order as _accounts\"}},\"getPermissions(address)\":{\"params\":{\"_account\":\"Recipient to verify\"}},\"hasPermission(address,uint256)\":{\"params\":{\"_account\":\"Recipient to verify\",\"_mask\":\"Combination of permissions to verify\"}},\"initAllowlistV1(address,address)\":{\"params\":{\"_admin\":\"Address of the Allowlist administrator\",\"_allower\":\"Address of the allower\"}},\"isAllowed(address,uint256)\":{\"params\":{\"_account\":\"Recipient to verify\",\"_mask\":\"Combination of permissions to verify\"}},\"isDenied(address)\":{\"params\":{\"_account\":\"Recipient to verify\"}},\"onlyAllowed(address,uint256)\":{\"params\":{\"_account\":\"Recipient to verify\",\"_mask\":\"Combination of permissions to verify\"}},\"setAllower(address)\":{\"params\":{\"_newAllowerAddress\":\"New address allowed to edit the allowlist\"}}},\"title\":\"Allowlist (v1)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allow(address[],uint256[])\":{\"notice\":\"Sets the allowlisting status for one or more accounts\"},\"getAllower()\":{\"notice\":\"Retrieves the allower address\"},\"getPermissions(address)\":{\"notice\":\"This method retrieves the raw permission value\"},\"hasPermission(address,uint256)\":{\"notice\":\"This method returns true if the user has the expected permission         ignoring any deny list membership\"},\"initAllowlistV1(address,address)\":{\"notice\":\"Initializes the allowlist\"},\"isAllowed(address,uint256)\":{\"notice\":\"This method returns true if the user has the expected permission and         is not in the deny list\"},\"isDenied(address)\":{\"notice\":\"This method returns true if the user is in the deny list\"},\"onlyAllowed(address,uint256)\":{\"notice\":\"This method should be used as a modifier and is expected to revert         if the user hasn't got the required permission or if the user is         in the deny list.\"},\"setAllower(address)\":{\"notice\":\"Changes the allower address\"}},\"notice\":\"This contract handles the list of allowed recipients.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/Allowlist.1.sol\":\"AllowlistV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/Allowlist.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./libraries/LibOwnable.sol\\\";\\nimport \\\"./interfaces/IRiverOracleInput.sol\\\";\\n\\nimport \\\"./state/allowlist/AllowerAddress.sol\\\";\\nimport \\\"./state/allowlist/Allowlist.sol\\\";\\n\\n/// @title Allowlist (v1)\\n/// @author Kiln\\n/// @notice This contract handles the list of allowed recipients.\\ncontract AllowlistV1 is Initializable {\\n    event ChangedAllowlistStatuses(address[] indexed accounts, uint256[] statuses);\\n\\n    error InvalidAlloweeCount();\\n    error Denied(address _account);\\n    error Unauthorized(address _account);\\n    error MismatchedAlloweeAndStatusCount();\\n\\n    uint256 internal constant DENY_MASK = 0x1 << 255;\\n\\n    /// @notice Initializes the allowlist\\n    /// @param _admin Address of the Allowlist administrator\\n    /// @param _allower Address of the allower\\n    function initAllowlistV1(address _admin, address _allower) external init(0) {\\n        LibOwnable._setAdmin(_admin);\\n        AllowerAddress.set(_allower);\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() virtual {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Changes the allower address\\n    /// @param _newAllowerAddress New address allowed to edit the allowlist\\n    function setAllower(address _newAllowerAddress) external onlyAdmin {\\n        AllowerAddress.set(_newAllowerAddress);\\n    }\\n\\n    /// @notice Retrieves the allower address\\n    function getAllower() external view returns (address) {\\n        return AllowerAddress.get();\\n    }\\n\\n    /// @notice Sets the allowlisting status for one or more accounts\\n    /// @param _accounts Accounts with statuses to edit\\n    /// @param _statuses Allowlist statuses for each account, in the same order as _accounts\\n    function allow(address[] calldata _accounts, uint256[] calldata _statuses) external {\\n        if (msg.sender != AllowerAddress.get() && msg.sender != AdministratorAddress.get()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n\\n        if (_accounts.length == 0) {\\n            revert InvalidAlloweeCount();\\n        }\\n\\n        if (_accounts.length != _statuses.length) {\\n            revert MismatchedAlloweeAndStatusCount();\\n        }\\n\\n        for (uint256 i = 0; i < _accounts.length;) {\\n            Allowlist.set(_accounts[i], _statuses[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit ChangedAllowlistStatuses(_accounts, _statuses);\\n    }\\n\\n    /// @notice This method should be used as a modifier and is expected to revert\\n    ///         if the user hasn't got the required permission or if the user is\\n    ///         in the deny list.\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    function onlyAllowed(address _account, uint256 _mask) external view {\\n        uint256 userPermissions = Allowlist.get(_account);\\n        if (userPermissions & DENY_MASK == DENY_MASK) {\\n            revert Denied(_account);\\n        }\\n        if (userPermissions & _mask != _mask) {\\n            revert Unauthorized(_account);\\n        }\\n    }\\n\\n    /// @notice This method returns true if the user has the expected permission and\\n    ///         is not in the deny list\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    function isAllowed(address _account, uint256 _mask) external view returns (bool) {\\n        uint256 userPermissions = Allowlist.get(_account);\\n        if (userPermissions & DENY_MASK == DENY_MASK) {\\n            return false;\\n        }\\n        return userPermissions & _mask == _mask;\\n    }\\n\\n    /// @notice This method returns true if the user is in the deny list\\n    /// @param _account Recipient to verify\\n    function isDenied(address _account) external view returns (bool) {\\n        return Allowlist.get(_account) & DENY_MASK == DENY_MASK;\\n    }\\n\\n    /// @notice This method returns true if the user has the expected permission\\n    ///         ignoring any deny list membership\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    function hasPermission(address _account, uint256 _mask) external view returns (bool) {\\n        return Allowlist.get(_account) & _mask == _mask;\\n    }\\n\\n    /// @notice This method retrieves the raw permission value\\n    /// @param _account Recipient to verify\\n    function getPermissions(address _account) external view returns (uint256) {\\n        return Allowlist.get(_account);\\n    }\\n}\\n\",\"keccak256\":\"0xd3c98b8abc809f12714ce2c8fcd508adb29c0e67d07aa4b68efd723bb278d323\",\"license\":\"BUSL-1.1\"},\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\ncontract Initializable {\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    modifier init(uint256 version) {\\n        if (version != Version.get()) {\\n            revert InvalidInitialization(version, Version.get());\\n        }\\n        Version.set(version + 1); // prevents reentrency on the called method\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc93555f4bd660f91e565f20753e0d3a01e783e673bc0209d0d1e33c7b6941053\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRiverOracleInput.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IRiverOracleInput {\\n    function setBeaconData(uint256 _validatorCount, uint256 _validatorBalanceSum, bytes32 _roundId) external;\\n}\\n\",\"keccak256\":\"0x5645de22ea585d33d30326c9a5b7a3e39355cd19a9ca14e7ee6ce00852e48945\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    error Unauthorized(address caller);\\n    error InvalidCall();\\n    error InvalidArgument();\\n    error InvalidZeroAddress();\\n}\\n\",\"keccak256\":\"0xb212763b0c7e4f4addfb85d863c616469be04e2d43e2431e9ef6da5d47f07436\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\nimport \\\"../state/shared/PendingAdministratorAddress.sol\\\";\\n\\nlibrary LibOwnable {\\n    function _setAdmin(address newAdmin) internal {\\n        AdministratorAddress.set(newAdmin);\\n    }\\n\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n\\n    function _setPendingAdmin(address newAdmin) internal {\\n        PendingAdministratorAddress.set(newAdmin);\\n    }\\n\\n    function _getPendingAdmin() internal view returns (address) {\\n        return PendingAdministratorAddress.get();\\n    }\\n}\\n\",\"keccak256\":\"0x41156e3a841b426dd1d3a8b7a82cb88065974a3c812bb47481b3acce56798247\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x52ccf1daa33de9c72831e0d7458928c37ca7b5f8d8f732114095edeb81339920\",\"license\":\"MIT\"},\"contracts/src/state/allowlist/AllowerAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\n\\nlibrary AllowerAddress {\\n    bytes32 internal constant ALLOWER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowerAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ALLOWER_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        if (newValue == address(0)) {\\n            revert Errors.InvalidZeroAddress();\\n        }\\n        UnstructuredStorage.setStorageAddress(ALLOWER_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xe416a9040effab4aca0abb731faf276c6d172d415f104ba30dfd893f567a3e84\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/allowlist/Allowlist.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Allowlist {\\n    bytes32 internal constant ALLOWLIST_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowlist\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(address => uint256) value;\\n    }\\n\\n    function get(address account) internal view returns (uint256) {\\n        bytes32 slot = ALLOWLIST_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[account];\\n    }\\n\\n    function set(address account, uint256 status) internal {\\n        bytes32 slot = ALLOWLIST_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[account] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x5e9e8221908bc75cb519a2ae49855a8f1006d3056248690d55894c75c2e62c4c\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary AdministratorAddress {\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x6c103a106ff958994c38f055a316144416df36aeb299ba660e7b8af063931b72\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/PendingAdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary PendingAdministratorAddress {\\n    bytes32 public constant PENDING_ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.pendingAdministratorAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x5888a98f160df2cc8d51e0352c57ae0491678b9e18c0be0cac5e5f9527aff650\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Version {\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(VERSION_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf90d1ecf583061aa70dc464ec1fde21da6e9309601bcbba38f47d26257a1c656\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506108ab806100206000396000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c806307a4000814610088578063160a7925146100a65780634679a9e1146100c75780635a409102146100dc5780636e8cac11146100ef5780638d944fd914610102578063e580d99414610125578063e838dfbb14610138578063f8350ed01461014b575b600080fd5b61009061015e565b60405161009d9190610637565b60405180910390f35b6100b96100b4366004610667565b61016d565b60405190815260200161009d565b6100da6100d5366004610667565b61017e565b005b6100da6100ea366004610689565b6101ce565b6100da6100fd3660046106b3565b61022d565b610115610110366004610689565b61028d565b604051901515815260200161009d565b6100da610133366004610732565b6102a3565b610115610146366004610667565b6103f6565b610115610159366004610689565b61040f565b6000610168610440565b905090565b600061017882610474565b92915050565b6101866104c2565b6001600160a01b0316336001600160a01b0316146101c2573360405163472511eb60e11b81526004016101b99190610637565b60405180910390fd5b6101cb816104cc565b50565b60006101d983610474565b9050600160ff1b8082161415610204578260405163e7d05e2760e01b81526004016101b99190610637565b8182821614610228578260405163472511eb60e11b81526004016101b99190610637565b505050565b6000610237610526565b81146102685780610246610526565b604051631cfd276760e31b8152600481019290925260248201526044016101b9565b61027b6102768260016107b4565b610556565b61028483610584565b610228826104cc565b6000818261029a85610474565b16149392505050565b6102ab610440565b6001600160a01b0316336001600160a01b0316141580156102e557506102cf61058d565b6001600160a01b0316336001600160a01b031614155b15610305573360405163472511eb60e11b81526004016101b99190610637565b8261032357604051631ac3cbdf60e21b815260040160405180910390fd5b8281146103435760405163b7c599df60e01b815260040160405180910390fd5b60005b8381101561039e57610396858583818110610363576103636107cc565b90506020020160208101906103789190610667565b84848481811061038a5761038a6107cc565b905060200201356105bd565b600101610346565b5083836040516103af9291906107e2565b60405180910390207f4caf22f66c30786a07375d69e72415b42a7c7b79774bb0cf692f166bcc08f86b83836040516103e8929190610822565b60405180910390a250505050565b6000600160ff1b8061040784610474565b161492915050565b60008061041b84610474565b9050600160ff1b8082161415610435576000915050610178565b821690911492915050565b600061016861047060017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b8061085e565b5490565b6000806104a260017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a413561085e565b6001600160a01b0390931660009081526020939093525050604090205490565b600061016861058d565b6001600160a01b0381166104f35760405163f6b2911f60e01b815260040160405180910390fd5b6101cb61052160017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b8061085e565b829055565b600061016861047060017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd61085e565b6101cb61052160017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd61085e565b6101cb81610609565b600061016861047060017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb11361085e565b60006105ea60017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a413561085e565b6001600160a01b03909316600090815260209390935250604090912055565b6101cb61052160017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb11361085e565b6001600160a01b0391909116815260200190565b80356001600160a01b038116811461066257600080fd5b919050565b60006020828403121561067957600080fd5b6106828261064b565b9392505050565b6000806040838503121561069c57600080fd5b6106a58361064b565b946020939093013593505050565b600080604083850312156106c657600080fd5b6106cf8361064b565b91506106dd6020840161064b565b90509250929050565b60008083601f8401126106f857600080fd5b50813567ffffffffffffffff81111561071057600080fd5b6020830191508360208260051b850101111561072b57600080fd5b9250929050565b6000806000806040858703121561074857600080fd5b843567ffffffffffffffff8082111561076057600080fd5b61076c888389016106e6565b9096509450602087013591508082111561078557600080fd5b50610792878288016106e6565b95989497509550505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156107c7576107c761079e565b500190565b634e487b7160e01b600052603260045260246000fd5b60008184825b85811015610817576001600160a01b036108018361064b565b16835260209283019291909101906001016107e8565b509095945050505050565b6020808252810182905260006001600160fb1b0383111561084257600080fd5b8260051b80856040850137600092016040019182525092915050565b6000828210156108705761087061079e565b50039056fea2646970667358221220695bd32ba6c4b72b2cfbb6d432b3ac278da253090f7bdfb2ce26378dfe2a28c264736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100835760003560e01c806307a4000814610088578063160a7925146100a65780634679a9e1146100c75780635a409102146100dc5780636e8cac11146100ef5780638d944fd914610102578063e580d99414610125578063e838dfbb14610138578063f8350ed01461014b575b600080fd5b61009061015e565b60405161009d9190610637565b60405180910390f35b6100b96100b4366004610667565b61016d565b60405190815260200161009d565b6100da6100d5366004610667565b61017e565b005b6100da6100ea366004610689565b6101ce565b6100da6100fd3660046106b3565b61022d565b610115610110366004610689565b61028d565b604051901515815260200161009d565b6100da610133366004610732565b6102a3565b610115610146366004610667565b6103f6565b610115610159366004610689565b61040f565b6000610168610440565b905090565b600061017882610474565b92915050565b6101866104c2565b6001600160a01b0316336001600160a01b0316146101c2573360405163472511eb60e11b81526004016101b99190610637565b60405180910390fd5b6101cb816104cc565b50565b60006101d983610474565b9050600160ff1b8082161415610204578260405163e7d05e2760e01b81526004016101b99190610637565b8182821614610228578260405163472511eb60e11b81526004016101b99190610637565b505050565b6000610237610526565b81146102685780610246610526565b604051631cfd276760e31b8152600481019290925260248201526044016101b9565b61027b6102768260016107b4565b610556565b61028483610584565b610228826104cc565b6000818261029a85610474565b16149392505050565b6102ab610440565b6001600160a01b0316336001600160a01b0316141580156102e557506102cf61058d565b6001600160a01b0316336001600160a01b031614155b15610305573360405163472511eb60e11b81526004016101b99190610637565b8261032357604051631ac3cbdf60e21b815260040160405180910390fd5b8281146103435760405163b7c599df60e01b815260040160405180910390fd5b60005b8381101561039e57610396858583818110610363576103636107cc565b90506020020160208101906103789190610667565b84848481811061038a5761038a6107cc565b905060200201356105bd565b600101610346565b5083836040516103af9291906107e2565b60405180910390207f4caf22f66c30786a07375d69e72415b42a7c7b79774bb0cf692f166bcc08f86b83836040516103e8929190610822565b60405180910390a250505050565b6000600160ff1b8061040784610474565b161492915050565b60008061041b84610474565b9050600160ff1b8082161415610435576000915050610178565b821690911492915050565b600061016861047060017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b8061085e565b5490565b6000806104a260017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a413561085e565b6001600160a01b0390931660009081526020939093525050604090205490565b600061016861058d565b6001600160a01b0381166104f35760405163f6b2911f60e01b815260040160405180910390fd5b6101cb61052160017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b8061085e565b829055565b600061016861047060017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd61085e565b6101cb61052160017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd61085e565b6101cb81610609565b600061016861047060017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb11361085e565b60006105ea60017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a413561085e565b6001600160a01b03909316600090815260209390935250604090912055565b6101cb61052160017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb11361085e565b6001600160a01b0391909116815260200190565b80356001600160a01b038116811461066257600080fd5b919050565b60006020828403121561067957600080fd5b6106828261064b565b9392505050565b6000806040838503121561069c57600080fd5b6106a58361064b565b946020939093013593505050565b600080604083850312156106c657600080fd5b6106cf8361064b565b91506106dd6020840161064b565b90509250929050565b60008083601f8401126106f857600080fd5b50813567ffffffffffffffff81111561071057600080fd5b6020830191508360208260051b850101111561072b57600080fd5b9250929050565b6000806000806040858703121561074857600080fd5b843567ffffffffffffffff8082111561076057600080fd5b61076c888389016106e6565b9096509450602087013591508082111561078557600080fd5b50610792878288016106e6565b95989497509550505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156107c7576107c761079e565b500190565b634e487b7160e01b600052603260045260246000fd5b60008184825b85811015610817576001600160a01b036108018361064b565b16835260209283019291909101906001016107e8565b509095945050505050565b6020808252810182905260006001600160fb1b0383111561084257600080fd5b8260051b80856040850137600092016040019182525092915050565b6000828210156108705761087061079e565b50039056fea2646970667358221220695bd32ba6c4b72b2cfbb6d432b3ac278da253090f7bdfb2ce26378dfe2a28c264736f6c634300080a0033",
  "devdoc": {
    "author": "Kiln",
    "kind": "dev",
    "methods": {
      "allow(address[],uint256[])": {
        "params": {
          "_accounts": "Accounts with statuses to edit",
          "_statuses": "Allowlist statuses for each account, in the same order as _accounts"
        }
      },
      "getPermissions(address)": {
        "params": {
          "_account": "Recipient to verify"
        }
      },
      "hasPermission(address,uint256)": {
        "params": {
          "_account": "Recipient to verify",
          "_mask": "Combination of permissions to verify"
        }
      },
      "initAllowlistV1(address,address)": {
        "params": {
          "_admin": "Address of the Allowlist administrator",
          "_allower": "Address of the allower"
        }
      },
      "isAllowed(address,uint256)": {
        "params": {
          "_account": "Recipient to verify",
          "_mask": "Combination of permissions to verify"
        }
      },
      "isDenied(address)": {
        "params": {
          "_account": "Recipient to verify"
        }
      },
      "onlyAllowed(address,uint256)": {
        "params": {
          "_account": "Recipient to verify",
          "_mask": "Combination of permissions to verify"
        }
      },
      "setAllower(address)": {
        "params": {
          "_newAllowerAddress": "New address allowed to edit the allowlist"
        }
      }
    },
    "title": "Allowlist (v1)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allow(address[],uint256[])": {
        "notice": "Sets the allowlisting status for one or more accounts"
      },
      "getAllower()": {
        "notice": "Retrieves the allower address"
      },
      "getPermissions(address)": {
        "notice": "This method retrieves the raw permission value"
      },
      "hasPermission(address,uint256)": {
        "notice": "This method returns true if the user has the expected permission         ignoring any deny list membership"
      },
      "initAllowlistV1(address,address)": {
        "notice": "Initializes the allowlist"
      },
      "isAllowed(address,uint256)": {
        "notice": "This method returns true if the user has the expected permission and         is not in the deny list"
      },
      "isDenied(address)": {
        "notice": "This method returns true if the user is in the deny list"
      },
      "onlyAllowed(address,uint256)": {
        "notice": "This method should be used as a modifier and is expected to revert         if the user hasn't got the required permission or if the user is         in the deny list."
      },
      "setAllower(address)": {
        "notice": "Changes the allower address"
      }
    },
    "notice": "This contract handles the list of allowed recipients.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}