{
  "address": "0x173E0A10A44e06dA4cdb767dbe7C1A01F5dDa73e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidRevokedVestingScheduleEnd",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "msg",
          "type": "string"
        }
      ],
      "name": "InvalidVestingScheduleParameter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsufficientVestingScheduleCreatorBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VestingScheduleIsLocked",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "VestingScheduleNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "VestingScheduleNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VestingScheduleNotRevocable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VestingScheduleNotRevocableInPast",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroReleasableAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CreatedVestingSchedule",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldDelegatee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newDelegatee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "DelegatedVestingEscrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releasedAmount",
          "type": "uint256"
        }
      ],
      "name": "ReleasedVestingSchedule",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "returnedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEnd",
          "type": "uint256"
        }
      ],
      "name": "RevokedVestingSchedule",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "pos",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fromBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint224",
              "name": "votes",
              "type": "uint224"
            }
          ],
          "internalType": "struct ERC20VotesUpgradeable.Checkpoint",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "computeVestingReleasableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "computeVestingVestedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_start",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_cliffDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_duration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_periodDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_lockDuration",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "_revocable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegatee",
          "type": "address"
        }
      ],
      "name": "createVestingSchedule",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_delegatee",
          "type": "address"
        }
      ],
      "name": "delegateVestingEscrow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPastTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPastVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getVestingSchedule",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "start",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "end",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "cliffDuration",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lockDuration",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "duration",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "periodDuration",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "releasedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct VestingSchedulesV2.VestingSchedule",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVestingScheduleCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "initTLCV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrateVestingSchedules",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "releaseVestingSchedule",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_end",
          "type": "uint64"
        }
      ],
      "name": "revokeVestingSchedule",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "vestingEscrow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x66769a07228b75914dee0e66bdf4408bdd99d861b61bf2360e9ed14806d11773",
  "receipt": {
    "to": null,
    "from": "0x341C40B94bF2afBFa42573cB78f16Ee15a056238",
    "contractAddress": "0x173E0A10A44e06dA4cdb767dbe7C1A01F5dDa73e",
    "transactionIndex": 53,
    "gasUsed": "3259408",
    "logsBloom": "0x
    "blockHash": "0xe6eb7539640bedb777ca6c76a3aea600aa431d77dd9489b31fbe1b28829992da",
    "transactionHash": "0x66769a07228b75914dee0e66bdf4408bdd99d861b61bf2360e9ed14806d11773",
    "logs": [
      {
        "transactionIndex": 53,
        "blockNumber": 9097127,
        "transactionHash": "0x66769a07228b75914dee0e66bdf4408bdd99d861b61bf2360e9ed14806d11773",
        "address": "0x173E0A10A44e06dA4cdb767dbe7C1A01F5dDa73e",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 103,
        "blockHash": "0xe6eb7539640bedb777ca6c76a3aea600aa431d77dd9489b31fbe1b28829992da"
      }
    ],
    "blockNumber": 9097127,
    "cumulativeGasUsed": "24804891",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "93b960a67e23979aa87ba4074b00c1d8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidRevokedVestingScheduleEnd\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"InvalidVestingScheduleParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsufficientVestingScheduleCreatorBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VestingScheduleIsLocked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"VestingScheduleNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"VestingScheduleNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VestingScheduleNotRevocable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VestingScheduleNotRevocableInPast\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroReleasableAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CreatedVestingSchedule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDelegatee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDelegatee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"DelegatedVestingEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"name\":\"ReleasedVestingSchedule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEnd\",\"type\":\"uint256\"}],\"name\":\"RevokedVestingSchedule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"internalType\":\"struct ERC20VotesUpgradeable.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"computeVestingReleasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"computeVestingVestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_start\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_cliffDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_periodDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_lockDuration\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_revocable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"}],\"name\":\"createVestingSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"}],\"name\":\"delegateVestingEscrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getVestingSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"end\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"periodDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct VestingSchedulesV2.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingScheduleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"initTLCV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateVestingSchedules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"releaseVestingSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_end\",\"type\":\"uint64\"}],\"name\":\"revokeVestingSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"vestingEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alluvial\",\"errors\":{\"Unauthorized(address)\":[{\"params\":{\"caller\":\"Address performing the call\"}}],\"VestingScheduleNotFound(uint256)\":[{\"params\":{\"index\":\"vesting schedule index\"}},{\"params\":{\"index\":\"vesting schedule index\"}}]},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"checkpoints(address,uint32)\":{\"details\":\"Get the `pos`-th checkpoint for `account`.\"},\"computeVestingReleasableAmount(uint256)\":{\"params\":{\"_index\":\"index of the vesting schedule\"},\"returns\":{\"_0\":\"amount of releasable tokens\"}},\"computeVestingVestedAmount(uint256)\":{\"params\":{\"_index\":\"index of the vesting schedule\"},\"returns\":{\"_0\":\"amount of vested tokens\"}},\"createVestingSchedule(uint64,uint32,uint32,uint32,uint32,bool,uint256,address,address)\":{\"details\":\"As vesting schedules can be created in the past, this means that you should be careful when creating a vesting schedule and what duration parametersyou use as this contract would allow creating a vesting schedule in the past and even a vesting schedule that has already ended.\",\"params\":{\"_amount\":\"amount of token attributed by the vesting schedule\",\"_beneficiary\":\"address of the beneficiary of the tokens\",\"_cliffDuration\":\"duration to vesting cliff (in seconds)\",\"_delegatee\":\"address to delegate escrow voting power to\",\"_duration\":\"total vesting schedule duration after which all tokens are vested (in seconds)\",\"_lockDuration\":\"duration during which tokens are locked (in seconds)\",\"_periodDuration\":\"duration of a period after which new tokens unlock (in seconds)\",\"_revocable\":\"whether the vesting schedule is revocable or not\",\"_start\":\"start time of the vesting\"},\"returns\":{\"_0\":\"index of the created vesting schedule\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"delegate(address)\":{\"details\":\"Delegate votes from the sender to `delegatee`.\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates votes from signer to `delegatee`\"},\"delegateVestingEscrow(uint256,address)\":{\"params\":{\"_delegatee\":\"address to delegate the token to\",\"_index\":\"index of the vesting schedule\"},\"returns\":{\"_0\":\"True on success\"}},\"delegates(address)\":{\"details\":\"Get the address `account` is currently delegating to.\"},\"getPastTotalSupply(uint256)\":{\"details\":\"Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances. It is but NOT the sum of all the delegated votes! Requirements: - `blockNumber` must have been already mined\"},\"getPastVotes(address,uint256)\":{\"details\":\"Retrieve the number of votes for `account` at the end of `blockNumber`. Requirements: - `blockNumber` must have been already mined\"},\"getVestingSchedule(uint256)\":{\"details\":\"The vesting schedule structure represents a static configuration used to compute the desiredvesting details of a beneficiary at all times. The values won't change even after tokens are released.The only dynamic field of the structure is end, and is updated whenever a vesting schedule is revoked\",\"params\":{\"_index\":\"Index of the vesting schedule\"}},\"getVestingScheduleCount()\":{\"returns\":{\"_0\":\"count of vesting schedules\"}},\"getVotes(address)\":{\"details\":\"Gets the current votes balance for `account`\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initTLCV1(address)\":{\"params\":{\"_account\":\"The initial account to grant all the minted tokens\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"numCheckpoints(address)\":{\"details\":\"Get number of checkpoints for `account`.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"releaseVestingSchedule(uint256)\":{\"params\":{\"_index\":\"Index of the vesting schedule to release\"},\"returns\":{\"_0\":\"released amount\"}},\"revokeVestingSchedule(uint256,uint64)\":{\"params\":{\"_end\":\"End date for the schedule\",\"_index\":\"Index of the vesting schedule to revoke\"},\"returns\":{\"_0\":\"amount returned to the vesting schedule creator\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"vestingEscrow(uint256)\":{\"params\":{\"_index\":\"Index of the vesting schedule\"},\"returns\":{\"_0\":\"address of the escrow\"}}},\"title\":\"TLC (v1)\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidRevokedVestingScheduleEnd()\":[{\"notice\":\"Attempt to revoke a vesting schedule with an invalid end parameter\"}],\"InvalidVestingScheduleParameter(string)\":[{\"notice\":\"Invalid parameter for a vesting schedule\"}],\"InvalidZeroAddress()\":[{\"notice\":\"The address is zero\"}],\"Unauthorized(address)\":[{\"notice\":\"The operator is unauthorized for the caller\"}],\"UnsufficientVestingScheduleCreatorBalance()\":[{\"notice\":\"Vesting schedule creator has unsufficient balance to create vesting schedule\"}],\"VestingScheduleIsLocked()\":[{\"notice\":\"The vesting schedule is locked\"}],\"VestingScheduleNotFound(uint256)\":[{\"notice\":\"The VestingSchedule was not found\"},{\"notice\":\"The VestingSchedule was not found\"}],\"VestingScheduleNotRevocable()\":[{\"notice\":\"The vesting schedule is not revocable\"}],\"VestingScheduleNotRevocableInPast()\":[{\"notice\":\"Attempt to revoke a schedule in the past\"}],\"ZeroReleasableAmount()\":[{\"notice\":\"No token to release\"}]},\"events\":{\"CreatedVestingSchedule(uint256,address,address,uint256)\":{\"notice\":\"A new vesting schedule has been created\"},\"DelegatedVestingEscrow(uint256,address,address,address)\":{\"notice\":\"Vesting escrow has been delegated\"},\"ReleasedVestingSchedule(uint256,uint256)\":{\"notice\":\"Vesting schedule has been released\"},\"RevokedVestingSchedule(uint256,uint256,uint256)\":{\"notice\":\"Vesting schedule has been revoked\"}},\"kind\":\"user\",\"methods\":{\"computeVestingReleasableAmount(uint256)\":{\"notice\":\"Computes the releasable amount of tokens for a vesting schedule.\"},\"computeVestingVestedAmount(uint256)\":{\"notice\":\"Computes the vested amount of tokens for a vesting schedule.\"},\"constructor\":{\"notice\":\"Disables implementation initialization\"},\"createVestingSchedule(uint64,uint32,uint32,uint32,uint32,bool,uint256,address,address)\":{\"notice\":\"Creates a new vesting scheduleThere may delay between the time a user should start vesting tokens and the time the vesting schedule is actually created on the contract.Typically a user joins the Liquid Collective but some weeks pass before the user gets all legal agreements in place and signed for thetoken grant emission to happen. In this case, the vesting schedule created for the token grant would start on the join date which is in the past.\"},\"delegateVestingEscrow(uint256,address)\":{\"notice\":\"Delegate vesting escrowed tokens\"},\"getVestingSchedule(uint256)\":{\"notice\":\"Get vesting schedule\"},\"getVestingScheduleCount()\":{\"notice\":\"Get count of vesting schedules\"},\"initTLCV1(address)\":{\"notice\":\"Initializes the TLC Token\"},\"migrateVestingSchedules()\":{\"notice\":\"Migrates the vesting schedule state structures\"},\"releaseVestingSchedule(uint256)\":{\"notice\":\"Release vesting scheduleWhen tokens are released from the escrow, the delegated address of the escrow will see its voting power decrease.The beneficiary has to make sure its delegation parameters are set properly to be able to use/delegate the voting power of its balance.\"},\"revokeVestingSchedule(uint256,uint64)\":{\"notice\":\"Revoke vesting schedule\"},\"vestingEscrow(uint256)\":{\"notice\":\"Get the address of the escrow for a vesting schedule\"}},\"notice\":\"The TLC token has a max supply of 1,000,000,000 and 18 decimal places.Upon deployment, all minted tokens are send to account provided at construction, in charge of creating the vesting schedulesThe contract is based on ERC20Votes by OpenZeppelin. Users need to delegate their voting power to someone or themselves to be able to vote.The contract contains vesting logics allowing vested users to still be able to delegate their voting power while their tokens are held in an escrow\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/TLC.1.sol\":\"TLCV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/TLC.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./components/ERC20VestableVotesUpgradeable.1.sol\\\";\\nimport \\\"./interfaces/ITLC.1.sol\\\";\\n\\n/// @title TLC (v1)\\n/// @author Alluvial\\n/// @notice The TLC token has a max supply of 1,000,000,000 and 18 decimal places.\\n/// @notice Upon deployment, all minted tokens are send to account provided at construction, in charge of creating the vesting schedules\\n/// @notice The contract is based on ERC20Votes by OpenZeppelin. Users need to delegate their voting power to someone or themselves to be able to vote.\\n/// @notice The contract contains vesting logics allowing vested users to still be able to delegate their voting power while their tokens are held in an escrow\\ncontract TLCV1 is ERC20VestableVotesUpgradeableV1, ITLCV1 {\\n    // Token information\\n    string internal constant NAME = \\\"Liquid Collective\\\";\\n    string internal constant SYMBOL = \\\"TLC\\\";\\n\\n    // Initial supply of token minted\\n    uint256 internal constant INITIAL_SUPPLY = 1_000_000_000e18; // 1 billion TLC\\n\\n    /// @notice Disables implementation initialization\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @inheritdoc ITLCV1\\n    function initTLCV1(address _account) external initializer {\\n        LibSanitize._notZeroAddress(_account);\\n        __ERC20Permit_init(NAME);\\n        __ERC20_init(NAME, SYMBOL);\\n        _mint(_account, INITIAL_SUPPLY);\\n    }\\n\\n    /// @inheritdoc ITLCV1\\n    function migrateVestingSchedules() external reinitializer(2) {\\n        ERC20VestableVotesUpgradeableV1.migrateVestingSchedulesFromV1ToV2();\\n    }\\n}\\n\",\"keccak256\":\"0x1b1ee20b94e83ff86d5ce9aa7d4468fea3f5c0094c3ab7236e9373b9ae70076d\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/ERC20VestableVotesUpgradeable.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20VotesUpgradeable.sol\\\";\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/components/IERC20VestableVotesUpgradeable.1.sol\\\";\\n\\nimport \\\"../state/tlc/VestingSchedules.2.sol\\\";\\n\\nimport \\\"../libraries/LibSanitize.sol\\\";\\nimport \\\"../libraries/LibUint256.sol\\\";\\n\\n/// @title ERC20VestableVotesUpgradeableV1\\n/// @author Alluvial\\n/// @notice This is an ERC20 extension that\\n/// @notice   - can be used as source of vote power (inherited from OpenZeppelin ERC20VotesUpgradeable)\\n/// @notice   - can delegate vote power from an account to another account (inherited from OpenZeppelin ERC20VotesUpgradeable)\\n/// @notice   - can manage token vestings: ownership is progressively transferred to a beneficiary according to a vesting schedule\\n/// @notice   - keeps a history (checkpoints) of each account's vote power\\n/// @notice\\n/// @notice Notes from OpenZeppelin [ERC20VotesUpgradeable](https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/extensions/ERC20VotesUpgradeable.sol)\\n/// @notice   - vote power can be delegated either by calling the {delegate} function, or by providing a signature to be used with {delegateBySig}\\n/// @notice   - keeps a history (checkpoints) of each account's vote power\\n/// @notice   - power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n/// @notice   - by default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n/// @notice requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n/// @notice\\n/// @notice Notes about token vesting\\n/// @notice   - any token holder can call the method {createVestingSchedule} in order to transfer tokens to a beneficiary according to a vesting schedule. When\\n/// @notice     creating a vesting schedule, tokens are transferred to an escrow that holds the token while the vesting progresses. Voting power of the escrowed token is delegated to the\\n/// @notice     beneficiary or a delegatee account set by the vesting schedule creator\\n/// @notice   - the schedule beneficiary call {releaseVestingSchedule} to get vested tokens transferred from escrow\\n/// @notice   - the schedule creator can revoke a revocable schedule by calling {revokeVestingSchedule} in which case the non-vested tokens are transfered from the escrow back to the creator\\n/// @notice   - the schedule beneficiary can delegate escrow voting power to any account by calling {delegateVestingEscrow}\\n/// @notice\\n/// @notice Vesting schedule attributes are\\n/// @notice   - start : start time of the vesting period\\n/// @notice   - cliff duration: duration before which first tokens gets ownable\\n/// @notice   - total duration: duration of the entire vesting (sum of all vesting period durations)\\n/// @notice   - period duration: duration of a single period of vesting\\n/// @notice   - lock duration: duration before tokens gets unlocked. can exceed the duration of the vesting chedule\\n/// @notice   - amount: amount of tokens granted by the vesting schedule\\n/// @notice   - beneficiary: beneficiary of tokens after they are releaseVestingScheduled\\n/// @notice   - revocable: whether the schedule can be revoked\\n/// @notice\\n/// @notice Vesting schedule\\n/// @notice   - if currentTime < cliff: vestedToken = 0\\n/// @notice   - if cliff <= currentTime < end: vestedToken = (vestedPeriodCount(currentTime) * periodDuration * amount) / totalDuration\\n/// @notice   - if end < currentTime: vestedToken = amount\\n/// @notice\\n/// @notice Remark: After cliff new tokens get vested at the end of each period\\n/// @notice\\n/// @notice Vested token & lock period\\n/// @notice   - a vested token is a token that will be eventually releasable from the escrow to the beneficiary once the lock period is over\\n/// @notice   - lock period prevents beneficiary from releasing vested tokens before the lock period ends. Vested tokens\\n/// @notice will eventually be releasable once the lock period is over\\n/// @notice\\n/// @notice Example: Joe gets a vesting starting on Jan 1st 2022 with duration of 1 year and a lock period of 2 years.\\n/// @notice On Jan 1st 2023, Joe will have all tokens vested but can not yet release it due to the lock period.\\n/// @notice On Jan 1st 2024, lock period is over and Joe can release all tokens.\\nabstract contract ERC20VestableVotesUpgradeableV1 is\\n    Initializable,\\n    IERC20VestableVotesUpgradeableV1,\\n    ERC20VotesUpgradeable\\n{\\n    // internal used to compute the address of the escrow\\n    bytes32 internal constant ESCROW = bytes32(uint256(keccak256(\\\"escrow\\\")) - 1);\\n\\n    function __ERC20VestableVotes_init() internal onlyInitializing {}\\n\\n    function __ERC20VestableVotes_init_unchained() internal onlyInitializing {}\\n\\n    /// @notice This method migrates the state of the vesting schedules from V1 to V2\\n    /// @dev This method should be used if deployment with the old version using V1 state models is upgraded\\n    function migrateVestingSchedulesFromV1ToV2() internal {\\n        if (VestingSchedulesV2.getCount() == 0) {\\n            uint256 existingV1VestingSchedules = VestingSchedulesV1.getCount();\\n            for (uint256 idx; idx < existingV1VestingSchedules;) {\\n                uint256 scheduleAmount = VestingSchedulesV1.get(idx).amount;\\n                uint256 releasedAmount =\\n                    scheduleAmount - LibUint256.min(balanceOf(_deterministicVestingEscrow(idx)), scheduleAmount);\\n                VestingSchedulesV2.migrateVestingScheduleFromV1(idx, releasedAmount);\\n                unchecked {\\n                    ++idx;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IERC20VestableVotesUpgradeableV1\\n    function getVestingSchedule(uint256 _index) external view returns (VestingSchedulesV2.VestingSchedule memory) {\\n        return VestingSchedulesV2.get(_index);\\n    }\\n\\n    /// @inheritdoc IERC20VestableVotesUpgradeableV1\\n    function getVestingScheduleCount() external view returns (uint256) {\\n        return VestingSchedulesV2.getCount();\\n    }\\n\\n    /// @inheritdoc IERC20VestableVotesUpgradeableV1\\n    function vestingEscrow(uint256 _index) external view returns (address) {\\n        return _deterministicVestingEscrow(_index);\\n    }\\n\\n    /// @inheritdoc IERC20VestableVotesUpgradeableV1\\n    function computeVestingReleasableAmount(uint256 _index) external view returns (uint256) {\\n        VestingSchedulesV2.VestingSchedule memory vestingSchedule = VestingSchedulesV2.get(_index);\\n\\n        uint256 time = _getCurrentTime();\\n        if (time < (vestingSchedule.start + vestingSchedule.lockDuration)) {\\n            return 0;\\n        }\\n\\n        return _computeVestingReleasableAmount(vestingSchedule, time);\\n    }\\n\\n    /// @inheritdoc IERC20VestableVotesUpgradeableV1\\n    function computeVestingVestedAmount(uint256 _index) external view returns (uint256) {\\n        VestingSchedulesV2.VestingSchedule memory vestingSchedule = VestingSchedulesV2.get(_index);\\n        return _computeVestedAmount(vestingSchedule, LibUint256.min(_getCurrentTime(), vestingSchedule.end));\\n    }\\n\\n    /// @inheritdoc IERC20VestableVotesUpgradeableV1\\n    function createVestingSchedule(\\n        uint64 _start,\\n        uint32 _cliffDuration,\\n        uint32 _duration,\\n        uint32 _periodDuration,\\n        uint32 _lockDuration,\\n        bool _revocable,\\n        uint256 _amount,\\n        address _beneficiary,\\n        address _delegatee\\n    ) external returns (uint256) {\\n        return _createVestingSchedule(\\n            msg.sender,\\n            _beneficiary,\\n            _delegatee,\\n            _start,\\n            _cliffDuration,\\n            _duration,\\n            _periodDuration,\\n            _lockDuration,\\n            _revocable,\\n            _amount\\n        );\\n    }\\n\\n    /// @inheritdoc IERC20VestableVotesUpgradeableV1\\n    function revokeVestingSchedule(uint256 _index, uint64 _end) external returns (uint256) {\\n        return _revokeVestingSchedule(_index, _end);\\n    }\\n\\n    /// @inheritdoc IERC20VestableVotesUpgradeableV1\\n    function releaseVestingSchedule(uint256 _index) external returns (uint256) {\\n        return _releaseVestingSchedule(_index);\\n    }\\n\\n    /// @inheritdoc IERC20VestableVotesUpgradeableV1\\n    function delegateVestingEscrow(uint256 _index, address _delegatee) external returns (bool) {\\n        return _delegateVestingEscrow(_index, _delegatee);\\n    }\\n\\n    /// @notice Creates a new vesting schedule\\n    /// @param _creator creator of the token vesting\\n    /// @param _beneficiary beneficiary of tokens after they are releaseVestingScheduled\\n    /// @param _delegatee address of the delegate escrowed tokens votes to (if address(0) then it defaults to the beneficiary)\\n    /// @param _start start time of the vesting period\\n    /// @param _cliffDuration duration before which first tokens gets ownable\\n    /// @param _duration duration of the entire vesting (sum of all vesting period durations)\\n    /// @param _periodDuration duration of a single period of vesting\\n    /// @param _lockDuration duration before tokens gets unlocked. can exceed the duration of the vesting chedule\\n    /// @param _revocable whether the schedule can be revoked\\n    /// @param _amount amount of tokens granted by the vesting schedule\\n    /// @return index of the created vesting schedule\\n    function _createVestingSchedule(\\n        address _creator,\\n        address _beneficiary,\\n        address _delegatee,\\n        uint64 _start,\\n        uint32 _cliffDuration,\\n        uint32 _duration,\\n        uint32 _periodDuration,\\n        uint32 _lockDuration,\\n        bool _revocable,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        if (balanceOf(_creator) < _amount) {\\n            revert UnsufficientVestingScheduleCreatorBalance();\\n        }\\n\\n        // validate schedule parameters\\n        if (_beneficiary == address(0)) {\\n            revert InvalidVestingScheduleParameter(\\\"Vesting schedule beneficiary must be non zero address\\\");\\n        }\\n\\n        if (_duration == 0) {\\n            revert InvalidVestingScheduleParameter(\\\"Vesting schedule duration must be > 0\\\");\\n        }\\n\\n        if (_amount == 0) {\\n            revert InvalidVestingScheduleParameter(\\\"Vesting schedule amount must be > 0\\\");\\n        }\\n\\n        if (_periodDuration == 0) {\\n            revert InvalidVestingScheduleParameter(\\\"Vesting schedule period must be > 0\\\");\\n        }\\n\\n        if (_duration % _periodDuration > 0) {\\n            revert InvalidVestingScheduleParameter(\\\"Vesting schedule duration must split in exact periods\\\");\\n        }\\n\\n        if (_cliffDuration % _periodDuration > 0) {\\n            revert InvalidVestingScheduleParameter(\\\"Vesting schedule cliff duration must split in exact periods\\\");\\n        }\\n\\n        if (_cliffDuration > _duration) {\\n            revert InvalidVestingScheduleParameter(\\n                \\\"Vesting schedule duration must be greater than or equal to the cliff duration\\\"\\n            );\\n        }\\n\\n        if ((_amount * _periodDuration) / _duration == 0) {\\n            revert InvalidVestingScheduleParameter(\\\"Vesting schedule amount too low for duration and period\\\");\\n        }\\n\\n        // if input start time is 0 then default to the current block time\\n        if (_start == 0) {\\n            _start = uint64(block.timestamp);\\n        }\\n\\n        // create new vesting schedule\\n        VestingSchedulesV2.VestingSchedule memory vestingSchedule = VestingSchedulesV2.VestingSchedule({\\n            start: _start,\\n            end: _start + _duration,\\n            lockDuration: _lockDuration,\\n            cliffDuration: _cliffDuration,\\n            duration: _duration,\\n            periodDuration: _periodDuration,\\n            amount: _amount,\\n            creator: _creator,\\n            beneficiary: _beneficiary,\\n            revocable: _revocable,\\n            releasedAmount: 0\\n        });\\n        uint256 index = VestingSchedulesV2.push(vestingSchedule) - 1;\\n\\n        // compute escrow address that will hold the token during the vesting\\n        address escrow = _deterministicVestingEscrow(index);\\n\\n        // transfer tokens to the escrow\\n        _transfer(_creator, escrow, _amount);\\n\\n        // delegate escrow tokens\\n        if (_delegatee == address(0)) {\\n            // default delegatee to beneficiary address\\n            _delegate(escrow, _beneficiary);\\n        } else {\\n            _delegate(escrow, _delegatee);\\n        }\\n\\n        emit CreatedVestingSchedule(index, _creator, _beneficiary, _amount);\\n\\n        return index;\\n    }\\n\\n    /// @notice Revoke vesting schedule\\n    /// @param _index Index of the vesting schedule to revoke\\n    /// @param _end End date for the schedule\\n    /// @return returnedAmount amount returned to the vesting schedule creator\\n    function _revokeVestingSchedule(uint256 _index, uint64 _end) internal returns (uint256) {\\n        if (_end == 0) {\\n            // if end time is 0 then default to current block time\\n            _end = uint64(block.timestamp);\\n        } else if (_end < block.timestamp) {\\n            revert VestingScheduleNotRevocableInPast();\\n        }\\n\\n        VestingSchedulesV2.VestingSchedule storage vestingSchedule = VestingSchedulesV2.get(_index);\\n        if (!vestingSchedule.revocable) {\\n            revert VestingScheduleNotRevocable();\\n        }\\n\\n        // revoked end date MUST be after vesting schedule start and before current end\\n        if ((_end < vestingSchedule.start) || (vestingSchedule.end < _end)) {\\n            revert InvalidRevokedVestingScheduleEnd();\\n        }\\n\\n        // only creator can revoke vesting schedule\\n        if (vestingSchedule.creator != msg.sender) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n\\n        // return tokens that will never be vested to creator\\n        uint256 vestedAmountAtOldEnd = _computeVestedAmount(vestingSchedule, vestingSchedule.end);\\n        uint256 vestedAmountAtNewEnd = _computeVestedAmount(vestingSchedule, _end);\\n        uint256 returnedAmount = vestedAmountAtOldEnd - vestedAmountAtNewEnd;\\n        if (returnedAmount > 0) {\\n            address escrow = _deterministicVestingEscrow(_index);\\n            _transfer(escrow, vestingSchedule.creator, returnedAmount);\\n        }\\n\\n        // set schedule end\\n        vestingSchedule.end = uint64(_end);\\n\\n        emit RevokedVestingSchedule(_index, returnedAmount, _end);\\n\\n        return returnedAmount;\\n    }\\n\\n    /// @notice Release vesting schedule\\n    /// @param _index Index of the vesting schedule to release\\n    /// @return released amount\\n    function _releaseVestingSchedule(uint256 _index) internal returns (uint256) {\\n        VestingSchedulesV2.VestingSchedule storage vestingSchedule = VestingSchedulesV2.get(_index);\\n\\n        // only beneficiary can release\\n        if (msg.sender != vestingSchedule.beneficiary) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n\\n        uint256 time = _getCurrentTime();\\n        if (time < (vestingSchedule.start + vestingSchedule.lockDuration)) {\\n            // before lock no tokens can be vested\\n            revert VestingScheduleIsLocked();\\n        }\\n\\n        // compute releasable amount\\n        uint256 releasableAmount = _computeVestingReleasableAmount(vestingSchedule, time);\\n        if (releasableAmount == 0) {\\n            revert ZeroReleasableAmount();\\n        }\\n\\n        address escrow = _deterministicVestingEscrow(_index);\\n\\n        // transfer all releasable token to the beneficiary\\n        _transfer(escrow, vestingSchedule.beneficiary, releasableAmount);\\n\\n        // increase released amount as per the release\\n        vestingSchedule.releasedAmount += releasableAmount;\\n\\n        emit ReleasedVestingSchedule(_index, releasableAmount);\\n\\n        return releasableAmount;\\n    }\\n\\n    /// @notice Delegate vesting escrowed tokens\\n    /// @param _index index of the vesting schedule\\n    /// @param _delegatee address to delegate the token to\\n    /// @return True on success\\n    function _delegateVestingEscrow(uint256 _index, address _delegatee) internal returns (bool) {\\n        VestingSchedulesV2.VestingSchedule storage vestingSchedule = VestingSchedulesV2.get(_index);\\n\\n        // only beneficiary can delegate\\n        if (msg.sender != vestingSchedule.beneficiary) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n\\n        // update delegatee\\n        address escrow = _deterministicVestingEscrow(_index);\\n        address oldDelegatee = delegates(escrow);\\n        _delegate(escrow, _delegatee);\\n\\n        emit DelegatedVestingEscrow(_index, oldDelegatee, _delegatee, vestingSchedule.beneficiary);\\n\\n        return true;\\n    }\\n\\n    /// @notice Internal utility to compute the unique escrow deterministic address\\n    /// @param _index index of the vesting schedule\\n    /// @return escrow The deterministic escrow address for the vesting schedule index\\n    function _deterministicVestingEscrow(uint256 _index) internal view returns (address escrow) {\\n        bytes32 hash = keccak256(abi.encodePacked(address(this), ESCROW, _index));\\n        return address(uint160(uint256(hash)));\\n    }\\n\\n    /// @notice Computes the releasable amount of tokens for a vesting schedule.\\n    /// @param _vestingSchedule vesting schedule to compute releasable tokens for\\n    /// @param _time time to compute the releasable amount at\\n    /// @return amount of release tokens\\n    function _computeVestingReleasableAmount(VestingSchedulesV2.VestingSchedule memory _vestingSchedule, uint256 _time)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 releasedAmount = _vestingSchedule.releasedAmount;\\n\\n        if (_time > _vestingSchedule.end) {\\n            _time = _vestingSchedule.end;\\n        }\\n\\n        uint256 vestedAmount = _computeVestedAmount(_vestingSchedule, _time);\\n        if (vestedAmount > releasedAmount) {\\n            unchecked {\\n                return vestedAmount - releasedAmount;\\n            }\\n        }\\n\\n        return 0;\\n    }\\n\\n    /// @notice Computes the vested amount of tokens for a vesting schedule.\\n    /// @param _vestingSchedule vesting schedule to compute vested tokens for\\n    /// @param _time time to compute the vested amount at\\n    /// @return amount of release tokens\\n    function _computeVestedAmount(VestingSchedulesV2.VestingSchedule memory _vestingSchedule, uint256 _time)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_time < _vestingSchedule.start + _vestingSchedule.cliffDuration) {\\n            // pre-cliff no tokens have been vested\\n            return 0;\\n        } else if (_time >= _vestingSchedule.start + _vestingSchedule.duration) {\\n            // post vesting all tokens have been vested\\n            return _vestingSchedule.amount;\\n        } else {\\n            uint256 timeFromStart = _time - _vestingSchedule.start;\\n\\n            // compute tokens vested for completly elapsed periods\\n            uint256 vestedDuration = timeFromStart - timeFromStart % _vestingSchedule.periodDuration;\\n\\n            return (vestedDuration * _vestingSchedule.amount) / _vestingSchedule.duration;\\n        }\\n    }\\n\\n    /// @notice Returns current time\\n    /// @return The current time\\n    function _getCurrentTime() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x35be4cad7d9fedacfc98df0ec19322d6aec048a27cc3709c08622addd690c037\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/ITLC.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/governance/utils/IVotesUpgradeable.sol\\\";\\n\\nimport \\\"./components/IERC20VestableVotesUpgradeable.1.sol\\\";\\n\\n/// @title TLC Interface (v1)\\n/// @author Alluvial\\n/// @notice TLC token interface\\ninterface ITLCV1 is IERC20VestableVotesUpgradeableV1, IVotesUpgradeable, IERC20Upgradeable {\\n    /// @notice Initializes the TLC Token\\n    /// @param _account The initial account to grant all the minted tokens\\n    function initTLCV1(address _account) external;\\n\\n    /// @notice Migrates the vesting schedule state structures\\n    function migrateVestingSchedules() external;\\n}\\n\",\"keccak256\":\"0xb98269fdaa85f40b23a23e769ef23aa16a265d579f91b777fdf8186b4d1969be\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IERC20VestableVotesUpgradeable.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../state/tlc/VestingSchedules.2.sol\\\";\\n\\n/// @title ERC20 Vestable Votes Upgradeable Interface(v1)\\n/// @author Alluvial\\n/// @notice This interface exposes methods to manage vestings\\ninterface IERC20VestableVotesUpgradeableV1 {\\n    /// @notice A new vesting schedule has been created\\n    /// @param index Vesting schedule index\\n    /// @param creator Creator of the vesting schedule\\n    /// @param beneficiary Vesting beneficiary address\\n    /// @param amount Vesting schedule amount\\n    event CreatedVestingSchedule(uint256 index, address indexed creator, address indexed beneficiary, uint256 amount);\\n\\n    /// @notice Vesting schedule has been released\\n    /// @param index Vesting schedule index\\n    /// @param releasedAmount Amount of tokens released to the beneficiary\\n    event ReleasedVestingSchedule(uint256 index, uint256 releasedAmount);\\n\\n    /// @notice Vesting schedule has been revoked\\n    /// @param index Vesting schedule index\\n    /// @param returnedAmount Amount of tokens returned to the creator\\n    /// @param newEnd New end timestamp after revoke action\\n    event RevokedVestingSchedule(uint256 index, uint256 returnedAmount, uint256 newEnd);\\n\\n    /// @notice Vesting escrow has been delegated\\n    /// @param index Vesting schedule index\\n    /// @param oldDelegatee old delegatee\\n    /// @param newDelegatee new delegatee\\n    /// @param beneficiary vesting schedule beneficiary\\n    event DelegatedVestingEscrow(\\n        uint256 index, address indexed oldDelegatee, address indexed newDelegatee, address indexed beneficiary\\n    );\\n\\n    /// @notice Vesting schedule creator has unsufficient balance to create vesting schedule\\n    error UnsufficientVestingScheduleCreatorBalance();\\n\\n    /// @notice Invalid parameter for a vesting schedule\\n    error InvalidVestingScheduleParameter(string msg);\\n\\n    /// @notice Attempt to revoke a schedule in the past\\n    error VestingScheduleNotRevocableInPast();\\n\\n    /// @notice The vesting schedule is not revocable\\n    error VestingScheduleNotRevocable();\\n\\n    /// @notice The vesting schedule is locked\\n    error VestingScheduleIsLocked();\\n\\n    /// @notice Attempt to revoke a vesting schedule with an invalid end parameter\\n    error InvalidRevokedVestingScheduleEnd();\\n\\n    /// @notice No token to release\\n    error ZeroReleasableAmount();\\n\\n    /// @notice Get vesting schedule\\n    /// @dev The vesting schedule structure represents a static configuration used to compute the desired\\n    /// @dev vesting details of a beneficiary at all times. The values won't change even after tokens are released.\\n    /// @dev The only dynamic field of the structure is end, and is updated whenever a vesting schedule is revoked\\n    /// @param _index Index of the vesting schedule\\n    function getVestingSchedule(uint256 _index) external view returns (VestingSchedulesV2.VestingSchedule memory);\\n\\n    /// @notice Get count of vesting schedules\\n    /// @return count of vesting schedules\\n    function getVestingScheduleCount() external view returns (uint256);\\n\\n    /// @notice Get the address of the escrow for a vesting schedule\\n    /// @param _index Index of the vesting schedule\\n    /// @return address of the escrow\\n    function vestingEscrow(uint256 _index) external view returns (address);\\n\\n    /// @notice Computes the releasable amount of tokens for a vesting schedule.\\n    /// @param _index index of the vesting schedule\\n    /// @return amount of releasable tokens\\n    function computeVestingReleasableAmount(uint256 _index) external view returns (uint256);\\n\\n    /// @notice Computes the vested amount of tokens for a vesting schedule.\\n    /// @param _index index of the vesting schedule\\n    /// @return amount of vested tokens\\n    function computeVestingVestedAmount(uint256 _index) external view returns (uint256);\\n\\n    /// @notice Creates a new vesting schedule\\n    /// @notice There may delay between the time a user should start vesting tokens and the time the vesting schedule is actually created on the contract.\\n    /// @notice Typically a user joins the Liquid Collective but some weeks pass before the user gets all legal agreements in place and signed for the\\n    /// @notice token grant emission to happen. In this case, the vesting schedule created for the token grant would start on the join date which is in the past.\\n    /// @dev As vesting schedules can be created in the past, this means that you should be careful when creating a vesting schedule and what duration parameters\\n    /// @dev you use as this contract would allow creating a vesting schedule in the past and even a vesting schedule that has already ended.\\n    /// @param _start start time of the vesting\\n    /// @param _cliffDuration duration to vesting cliff (in seconds)\\n    /// @param _duration total vesting schedule duration after which all tokens are vested (in seconds)\\n    /// @param _periodDuration duration of a period after which new tokens unlock (in seconds)\\n    /// @param _lockDuration duration during which tokens are locked (in seconds)\\n    /// @param _revocable whether the vesting schedule is revocable or not\\n    /// @param _amount amount of token attributed by the vesting schedule\\n    /// @param _beneficiary address of the beneficiary of the tokens\\n    /// @param _delegatee address to delegate escrow voting power to\\n    /// @return index of the created vesting schedule\\n    function createVestingSchedule(\\n        uint64 _start,\\n        uint32 _cliffDuration,\\n        uint32 _duration,\\n        uint32 _periodDuration,\\n        uint32 _lockDuration,\\n        bool _revocable,\\n        uint256 _amount,\\n        address _beneficiary,\\n        address _delegatee\\n    ) external returns (uint256);\\n\\n    /// @notice Revoke vesting schedule\\n    /// @param _index Index of the vesting schedule to revoke\\n    /// @param _end End date for the schedule\\n    /// @return returnedAmount amount returned to the vesting schedule creator\\n    function revokeVestingSchedule(uint256 _index, uint64 _end) external returns (uint256 returnedAmount);\\n\\n    /// @notice Release vesting schedule\\n    /// @notice When tokens are released from the escrow, the delegated address of the escrow will see its voting power decrease.\\n    /// @notice The beneficiary has to make sure its delegation parameters are set properly to be able to use/delegate the voting power of its balance.\\n    /// @param _index Index of the vesting schedule to release\\n    /// @return released amount\\n    function releaseVestingSchedule(uint256 _index) external returns (uint256);\\n\\n    /// @notice Delegate vesting escrowed tokens\\n    /// @param _index index of the vesting schedule\\n    /// @param _delegatee address to delegate the token to\\n    /// @return True on success\\n    function delegateVestingEscrow(uint256 _index, address _delegatee) external returns (bool);\\n}\\n\",\"keccak256\":\"0x63ab246e214a26b37f6684528524f66aa095ce831a2905bcd6abf0e3c570131e\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibBasisPoints.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Lib Basis Points\\n/// @notice Holds the basis points max value\\nlibrary LibBasisPoints {\\n    /// @notice The max value for basis points (represents 100%)\\n    uint256 internal constant BASIS_POINTS_MAX = 10_000;\\n}\\n\",\"keccak256\":\"0x97228a01dcd48f033555e3a44f9be37fb474a1b027f703f28097d539808f1c6c\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibErrors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Errors\\n/// @notice Library of common errors\\nlibrary LibErrors {\\n    /// @notice The operator is unauthorized for the caller\\n    /// @param caller Address performing the call\\n    error Unauthorized(address caller);\\n\\n    /// @notice The call was invalid\\n    error InvalidCall();\\n\\n    /// @notice The argument was invalid\\n    error InvalidArgument();\\n\\n    /// @notice The address is zero\\n    error InvalidZeroAddress();\\n\\n    /// @notice The string is empty\\n    error InvalidEmptyString();\\n\\n    /// @notice The fee is invalid\\n    error InvalidFee();\\n}\\n\",\"keccak256\":\"0x7bdbd4ada124723fa08e2088405ba0bf4453beb23d84f4af09e894e06e751f33\",\"license\":\"MIT\"},\"contracts/src/libraries/LibSanitize.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./LibErrors.sol\\\";\\nimport \\\"./LibBasisPoints.sol\\\";\\n\\n/// @title Lib Sanitize\\n/// @notice Utilities to sanitize input values\\nlibrary LibSanitize {\\n    /// @notice Reverts if address is 0\\n    /// @param _address Address to check\\n    function _notZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert LibErrors.InvalidZeroAddress();\\n        }\\n    }\\n\\n    /// @notice Reverts if string is empty\\n    /// @param _string String to check\\n    function _notEmptyString(string memory _string) internal pure {\\n        if (bytes(_string).length == 0) {\\n            revert LibErrors.InvalidEmptyString();\\n        }\\n    }\\n\\n    /// @notice Reverts if fee is invalid\\n    /// @param _fee Fee to check\\n    function _validFee(uint256 _fee) internal pure {\\n        if (_fee > LibBasisPoints.BASIS_POINTS_MAX) {\\n            revert LibErrors.InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8aeeb866c4657a96c8b4c006340c7996d15a6f0044b730c276bc3ba8d5bcd48\",\"license\":\"MIT\"},\"contracts/src/libraries/LibUint256.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Uint256\\n/// @notice Utilities to perform uint operations\\nlibrary LibUint256 {\\n    /// @notice Converts a value to little endian (64 bits)\\n    /// @param _value The value to convert\\n    /// @return result The converted value\\n    function toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n        result = 0;\\n        uint256 tempValue = _value;\\n        result = tempValue & 0xFF;\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        assert(0 == tempValue); // fully converted\\n        result <<= (24 * 8);\\n    }\\n\\n    /// @notice Returns the minimum value\\n    /// @param _a First value\\n    /// @param _b Second value\\n    /// @return Smallest value between _a and _b\\n    function min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a > _b ? _b : _a);\\n    }\\n\\n    /// @notice Returns the max value\\n    /// @param _a First value\\n    /// @param _b Second value\\n    /// @return Highest value between _a and _b\\n    function max(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a < _b ? _b : _a);\\n    }\\n\\n    /// @notice Performs a ceiled division\\n    /// @param _a Numerator\\n    /// @param _b Denominator\\n    /// @return ceil(_a / _b)\\n    function ceil(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a / _b) + (_a % _b > 0 ? 1 : 0);\\n    }\\n}\\n\",\"keccak256\":\"0xdf3adb82d2cb4392cc687c910fb1874e148d29fdf2f3a187213d349a0f95e399\",\"license\":\"MIT\"},\"contracts/src/state/tlc/VestingSchedules.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title VestingSchedulesV1 Storage\\n/// @notice Utility to manage VestingSchedulesV1 in storage\\nlibrary VestingSchedulesV1 {\\n    /// @notice Storage slot of the Vesting Schedules\\n    bytes32 internal constant VESTING_SCHEDULES_SLOT =\\n        bytes32(uint256(keccak256(\\\"erc20VestableVotes.state.schedules\\\")) - 1);\\n\\n    struct VestingSchedule {\\n        // start time of the vesting period\\n        uint64 start;\\n        // date at which the vesting is ended\\n        // initially it is equal to start+duration then to revoke date in case of revoke\\n        uint64 end;\\n        // duration before which first tokens gets ownable\\n        uint32 cliffDuration;\\n        // duration before tokens gets unlocked. can exceed the duration of the vesting chedule\\n        uint32 lockDuration;\\n        // duration of the entire vesting (sum of all vesting period durations)\\n        uint32 duration;\\n        // duration of a single period of vesting\\n        uint32 periodDuration;\\n        // amount of tokens granted by the vesting schedule\\n        uint256 amount;\\n        // creator of the token vesting\\n        address creator;\\n        // beneficiary of tokens after they are releaseVestingScheduled\\n        address beneficiary;\\n        // whether the schedule can be revoked\\n        bool revocable;\\n    }\\n\\n    /// @notice The structure at the storage slot\\n    struct SlotVestingSchedule {\\n        /// @custom:attribute Array containing all the vesting schedules\\n        VestingSchedule[] value;\\n    }\\n\\n    /// @notice The VestingSchedule was not found\\n    /// @param index vesting schedule index\\n    error VestingScheduleNotFound(uint256 index);\\n\\n    /// @notice Retrieve the vesting schedule in storage\\n    /// @param _index index of the vesting schedule\\n    /// @return the vesting schedule\\n    function get(uint256 _index) internal view returns (VestingSchedule storage) {\\n        bytes32 slot = VESTING_SCHEDULES_SLOT;\\n\\n        SlotVestingSchedule storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (r.value.length <= _index) {\\n            revert VestingScheduleNotFound(_index);\\n        }\\n\\n        return r.value[_index];\\n    }\\n\\n    /// @notice Get vesting schedule count in storage\\n    /// @return The count of vesting schedule in storage\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = VESTING_SCHEDULES_SLOT;\\n\\n        SlotVestingSchedule storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Add a new vesting schedule in storage\\n    /// @param _newSchedule new vesting schedule to create\\n    /// @return The size of the vesting schedule array after the operation\\n    function push(VestingSchedule memory _newSchedule) internal returns (uint256) {\\n        bytes32 slot = VESTING_SCHEDULES_SLOT;\\n\\n        SlotVestingSchedule storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_newSchedule);\\n\\n        return r.value.length;\\n    }\\n}\\n\",\"keccak256\":\"0x3fb926f0a0b18da686b3bd612f8a2d32fdcc912d8daab8963551a0583486688a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/tlc/VestingSchedules.2.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./VestingSchedules.1.sol\\\";\\n\\n/// @title VestingSchedulesV2 Storage\\n/// @notice Utility to manage VestingSchedulesV2 in storage\\nlibrary VestingSchedulesV2 {\\n    /// @notice Storage slot of the Vesting Schedules (note the slot is different from v1)\\n    bytes32 internal constant VESTING_SCHEDULES_SLOT =\\n        bytes32(uint256(keccak256(\\\"erc20VestableVotes.state.v2.schedules\\\")) - 1);\\n\\n    struct VestingSchedule {\\n        // start time of the vesting period\\n        uint64 start;\\n        // date at which the vesting is ended\\n        // initially it is equal to start+duration then to revoke date in case of revoke\\n        uint64 end;\\n        // duration before which first tokens gets ownable\\n        uint32 cliffDuration;\\n        // duration before tokens gets unlocked. can exceed the duration of the vesting chedule\\n        uint32 lockDuration;\\n        // duration of the entire vesting (sum of all vesting period durations)\\n        uint32 duration;\\n        // duration of a single period of vesting\\n        uint32 periodDuration;\\n        // amount of tokens granted by the vesting schedule\\n        uint256 amount;\\n        // creator of the token vesting\\n        address creator;\\n        // beneficiary of tokens after they are releaseVestingScheduled\\n        address beneficiary;\\n        // whether the schedule can be revoked\\n        bool revocable;\\n        // amount of released tokens\\n        uint256 releasedAmount;\\n    }\\n\\n    /// @notice The structure at the storage slot\\n    struct SlotVestingSchedule {\\n        /// @custom:attribute Array containing all the vesting schedules\\n        VestingSchedule[] value;\\n    }\\n\\n    /// @notice The VestingSchedule was not found\\n    /// @param index vesting schedule index\\n    error VestingScheduleNotFound(uint256 index);\\n\\n    /// @notice Retrieve the vesting schedule in storage\\n    /// @param _index index of the vesting schedule\\n    /// @return the vesting schedule\\n    function get(uint256 _index) internal view returns (VestingSchedule storage) {\\n        bytes32 slot = VESTING_SCHEDULES_SLOT;\\n\\n        SlotVestingSchedule storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (r.value.length <= _index) {\\n            revert VestingScheduleNotFound(_index);\\n        }\\n\\n        return r.value[_index];\\n    }\\n\\n    /// @notice Get vesting schedule count in storage\\n    /// @return The count of vesting schedule in storage\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = VESTING_SCHEDULES_SLOT;\\n\\n        SlotVestingSchedule storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Add a new vesting schedule in storage\\n    /// @param _newSchedule new vesting schedule to create\\n    /// @return The size of the vesting schedule array after the operation\\n    function push(VestingSchedule memory _newSchedule) internal returns (uint256) {\\n        bytes32 slot = VESTING_SCHEDULES_SLOT;\\n\\n        SlotVestingSchedule storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_newSchedule);\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Migrate a VestingSchedule from v1 to v2\\n    /// @notice Takes a VestingSchedule in v1 format in stores it in v2 format\\n    /// @param _index of the schedule in v1 to be migrated\\n    /// @param _releasedAmount The released amount to keep in storage\\n    /// @return The index of the created schedule in v2 format\\n    function migrateVestingScheduleFromV1(uint256 _index, uint256 _releasedAmount) internal returns (uint256) {\\n        VestingSchedulesV1.VestingSchedule memory scheduleV1 = VestingSchedulesV1.get(_index);\\n        VestingSchedulesV2.VestingSchedule memory scheduleV2 = VestingSchedulesV2.VestingSchedule({\\n            start: scheduleV1.start,\\n            end: scheduleV1.end,\\n            lockDuration: scheduleV1.lockDuration,\\n            cliffDuration: scheduleV1.cliffDuration,\\n            duration: scheduleV1.duration,\\n            periodDuration: scheduleV1.periodDuration,\\n            amount: scheduleV1.amount,\\n            creator: scheduleV1.creator,\\n            beneficiary: scheduleV1.beneficiary,\\n            revocable: scheduleV1.revocable,\\n            releasedAmount: _releasedAmount\\n        });\\n\\n        return push(scheduleV2) - 1;\\n    }\\n}\\n\",\"keccak256\":\"0x64de61d739eeb48583f7f446d13cea9c7c27d28943d6492be67c6b8bca08406b\",\"license\":\"BUSL-1.1\"},\"openzeppelin-contracts-upgradeable/contracts/governance/utils/IVotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotesUpgradeable {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe8e2d2f70db1913260634f710cc057d669b06eccf4dca27e18b79c3bbb101da6\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x6c2b54ec184943843041ab77f61988b5060f6f03acbfe92cdc125f95f00891da\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x17aff86be546601617585e91fd98aad74cf39f1be65d8eb6f93b7f3c30181275\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20VotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Votes.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-ERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/math/MathUpgradeable.sol\\\";\\nimport \\\"../../../governance/utils/IVotesUpgradeable.sol\\\";\\nimport \\\"../../../utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n *\\n * _Available since v4.2._\\n */\\nabstract contract ERC20VotesUpgradeable is Initializable, IVotesUpgradeable, ERC20PermitUpgradeable {\\n    function __ERC20Votes_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Votes_init_unchained() internal onlyInitializing {\\n    }\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCastUpgradeable.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual override returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view virtual override returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\\n     * It is but NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) public view virtual override returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\\n        //\\n        // Initially we check if the block is recent to narrow the search range.\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\\n        // the same.\\n        uint256 length = ckpts.length;\\n\\n        uint256 low = 0;\\n        uint256 high = length;\\n\\n        if (length > 5) {\\n            uint256 mid = length - MathUpgradeable.sqrt(length);\\n            if (_unsafeAccess(ckpts, mid).fromBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n            if (_unsafeAccess(ckpts, mid).fromBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : _unsafeAccess(ckpts, high - 1).votes;\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual override {\\n        _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSAUpgradeable.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"ERC20Votes: invalid nonce\\\");\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\\n     */\\n    function _maxSupply() internal view virtual returns (uint224) {\\n        return type(uint224).max;\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been increased.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        require(totalSupply() <= _maxSupply(), \\\"ERC20Votes: total supply risks overflowing votes\\\");\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been decreased.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        super._burn(account, amount);\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {DelegateVotesChanged} event.\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n\\n        Checkpoint memory oldCkpt = pos == 0 ? Checkpoint(0, 0) : _unsafeAccess(ckpts, pos - 1);\\n\\n        oldWeight = oldCkpt.votes;\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0 && oldCkpt.fromBlock == block.number) {\\n            _unsafeAccess(ckpts, pos - 1).votes = SafeCastUpgradeable.toUint224(newWeight);\\n        } else {\\n            ckpts.push(Checkpoint({fromBlock: SafeCastUpgradeable.toUint32(block.number), votes: SafeCastUpgradeable.toUint224(newWeight)}));\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    function _unsafeAccess(Checkpoint[] storage ckpts, uint256 pos) private pure returns (Checkpoint storage result) {\\n        assembly {\\n            mstore(0, ckpts.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x03befa50481894aab56652ab943718c8b4de1f8bc0668d2f0fbdd61fff23e5ef\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xea49d64cd4c5556e61f1edc117cc74f2e69f14b524386ef6a336a58794191b34\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8313972e73a49ff9a8c2dee0b9a07a3585bc4d077bd8a9670ebdd76ff390177\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x0c2ac2e8ea31517e8a807e6fe8a3cf6de47ae76a5e8ed8ca60a209efa12aab69\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xba55137b57f58e805ab97462fbfc7e4b66c093a6813e29cc3f5d1569d39c27cf\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x5c04e814be62473d494fb8884c56327d98237df4d77668a4ab979ace139ff204\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf6fc9552edefce9c1c324064496374107ab29105e57595b484decb35cb257e3c\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x97492b57e5b560f87038328e8a09a365acf85184399457f68d15d82520dca34b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61397c80620000f46000396000f3fe608060405234801561001057600080fd5b50600436106101bb5760003560e01c806370a08231116100fa578063a457c2d71161009d578063a457c2d714610396578063a9059cbb146103a9578063beb8f883146103bc578063c3cda520146103dc578063d505accf146103ef578063dd62ed3e14610402578063decc722414610415578063f0519be014610428578063f1127ed81461043b57600080fd5b806370a08231146103145780637ecebe00146103275780638e539e8c1461033a5780638fb8ad841461034d5780639295ccec1461036057806395d89b41146103685780639ab24eb014610370578063a33773f61461038357600080fd5b80633644e515116101625780633644e5151461027057806339509351146102785780633a46b1a81461028b578063574d91831461029e578063587cde1e146102b157806359facefd146102d15780635c19a95c146102d95780636fcfff45146102ec57600080fd5b806306fdde03146101c0578063095ea7b3146101de57806318160ddd1461020157806323b872dd1461021357806323dd35b41461022657806328766ffd1461023957806329c9093b1461024e578063313ce56714610261575b600080fd5b6101c8610478565b6040516101d591906132b8565b60405180910390f35b6101f16101ec366004613329565b61050a565b60405190151581526020016101d5565b6035545b6040519081526020016101d5565b6101f1610221366004613353565b610524565b6101f161023436600461338f565b610548565b61024c6102473660046133bb565b61055b565b005b61020561025c3660046133d6565b6106c6565b604051601281526020016101d5565b61020561079c565b6101f1610286366004613329565b6107ab565b610205610299366004613329565b6107cd565b6102056102ac3660046133d6565b610810565b6102c46102bf3660046133bb565b61081b565b6040516101d591906133ef565b61024c610839565b61024c6102e73660046133bb565b6108d7565b6102ff6102fa3660046133bb565b6108e4565b60405163ffffffff90911681526020016101d5565b6102056103223660046133bb565b610906565b6102056103353660046133bb565b610921565b6102056103483660046133d6565b61093f565b61020561035b3660046133d6565b61096b565b610205610a67565b6101c8610a71565b61020561037e3660046133bb565b610a80565b61020561039136600461342e565b610b06565b6101f16103a4366004613329565b610b28565b6101f16103b7366004613329565b610ba3565b6103cf6103ca3660046133d6565b610bb1565b6040516101d591906134d6565b61024c6103ea3660046135cc565b610ccb565b61024c6103fd366004613624565b610dfd565b61020561041036600461368e565b610f61565b6102c46104233660046133d6565b610f8c565b6102056104363660046136b8565b610f97565b61044e6104493660046136db565b610fa3565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016101d5565b60606036805461048790613705565b80601f01602080910402602001604051908101604052809291908181526020018280546104b390613705565b80156105005780601f106104d557610100808354040283529160200191610500565b820191906000526020600020905b8154815290600101906020018083116104e357829003601f168201915b5050505050905090565b600033610518818585611026565b60019150505b92915050565b60003361053285828561114a565b61053d8585856111c4565b506001949350505050565b60006105548383611375565b9392505050565b600054610100900460ff161580801561057b5750600054600160ff909116105b806105955750303b158015610595575060005460ff166001145b6105ba5760405162461bcd60e51b81526004016105b19061373a565b60405180910390fd5b6000805460ff1916600117905580156105dd576000805461ff0019166101001790555b6105e68261142f565b610618604051806040016040528060118152602001704c697175696420436f6c6c65637469766560781b815250611456565b610666604051806040016040528060118152602001704c697175696420436f6c6c65637469766560781b81525060405180604001604052806003815260200162544c4360e81b8152506114a0565b61067c826b033b2e3c9fd0803ce80000006114d1565b80156106c2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6000806106d28361155b565b604080516101608101825282546001600160401b038082168352600160401b82041660208301819052600160801b820463ffffffff90811694840194909452600160a01b80830485166060850152600160c01b830485166080850152600160e01b90920490931660a0830152600184015460c083015260028401546001600160a01b0390811660e084015260038501549081166101008401520460ff1615156101208201526004909201546101408301529091506105549082906107979042906115cc565b6115e1565b60006107a66116b2565b905090565b6000336105188185856107be8383610f61565b6107c8919061379e565b611026565b60004382106107ee5760405162461bcd60e51b81526004016105b1906137b6565b6001600160a01b038316600090815260cd60205260409020610554908361172d565b600061051e82611823565b6001600160a01b03908116600090815260cc60205260409020541690565b600054600290610100900460ff1615801561085b575060005460ff8083169116105b6108775760405162461bcd60e51b81526004016105b19061373a565b6000805461ffff191660ff831617610100179055610893611a0f565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b6108e13382611a80565b50565b6001600160a01b038116600090815260cd602052604081205461051e90611b00565b6001600160a01b031660009081526033602052604090205490565b6001600160a01b03811660009081526099602052604081205461051e565b60004382106109605760405162461bcd60e51b81526004016105b1906137b6565b61051e60ce8361172d565b6000806109778361155b565b604080516101608101825282546001600160401b03808216808452600160401b83049091166020840152600160801b820463ffffffff90811694840194909452600160a01b808304851660608501819052600160c01b840486166080860152600160e01b90930490941660a0840152600185015460c084015260028501546001600160a01b0390811660e085015260038601549081166101008501529390930460ff16151561012083015260049093015461014082015292504291610a3b916137ed565b6001600160401b0316811015610a55575060009392505050565b610a5f8282611b69565b949350505050565b60006107a6611bc2565b60606037805461048790613705565b6001600160a01b038116600090815260cd60205260408120548015610af3576001600160a01b038316600090815260cd60205260409020610ac2600183613818565b81548110610ad257610ad261382f565b600091825260209091200154600160201b90046001600160e01b0316610af6565b60005b6001600160e01b03169392505050565b6000610b1a3384848d8d8d8d8d8d8d611be5565b9a9950505050505050505050565b60003381610b368286610f61565b905083811015610b965760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016105b1565b61053d8286868403611026565b6000336105188185856111c4565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810191909152610c138261155b565b604080516101608101825282546001600160401b038082168352600160401b8204166020830152600160801b810463ffffffff90811693830193909352600160a01b80820484166060840152600160c01b820484166080840152600160e01b90910490921660a0820152600183015460c082015260028301546001600160a01b0390811660e083015260038401549081166101008301529190910460ff16151561012082015260049091015461014082015292915050565b83421115610d1b5760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e6174757265206578706972656400000060448201526064016105b1565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090610d9590610d8d9060a00160405160208183030381529060405280519060200120612141565b85858561218f565b9050610da0816121b7565b8614610dea5760405162461bcd60e51b81526020600482015260196024820152784552433230566f7465733a20696e76616c6964206e6f6e636560381b60448201526064016105b1565b610df48188611a80565b50505050505050565b83421115610e4d5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016105b1565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610e7c8c6121b7565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610ed782612141565b90506000610ee78287878761218f565b9050896001600160a01b0316816001600160a01b031614610f4a5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016105b1565b610f558a8a8a611026565b50505050505050505050565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b600061051e826121da565b60006105548383612254565b60408051808201909152600080825260208201526001600160a01b038316600090815260cd60205260409020805463ffffffff8416908110610fe757610fe761382f565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b0316918101919091529392505050565b6001600160a01b0383166110885760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105b1565b6001600160a01b0382166110e95760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105b1565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006111568484610f61565b905060001981146111be57818110156111b15760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016105b1565b6111be8484848403611026565b50505050565b6001600160a01b0383166112285760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105b1565b6001600160a01b03821661128a5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105b1565b6001600160a01b038316600090815260336020526040902054818110156113025760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016105b1565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906113629086815260200190565b60405180910390a36111be848484612582565b6000806113818461155b565b60038101549091506001600160a01b031633146113b3573360405163472511eb60e11b81526004016105b191906133ef565b60006113be856121da565b905060006113cb8261081b565b90506113d78286611a80565b60038301546040518781526001600160a01b039182169187811691908416907ff59662617e9c4f8707dff52c85bd8f49f665073ba5fffb29c2a55ebf58e7a75e9060200160405180910390a450600195945050505050565b6001600160a01b0381166108e15760405163f6b2911f60e01b815260040160405180910390fd5b600054610100900460ff1661147d5760405162461bcd60e51b81526004016105b190613845565b6108e181604051806040016040528060018152602001603160f81b81525061259d565b600054610100900460ff166114c75760405162461bcd60e51b81526004016105b190613845565b6106c282826125de565b6114db828261262c565b6035546001600160e01b03101561154d5760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b60648201526084016105b1565b6111be60ce6126f583612701565b6000806115776001600080516020613927833981519152613818565b8054909150819084106115a05760405163ad7d6e0960e01b8152600481018590526024016105b1565b8060000184815481106115b5576115b561382f565b906000526020600020906005020192505050919050565b60008183116115db5782610554565b50919050565b6000826040015163ffffffff1683600001516115fd91906137ed565b6001600160401b03168210156116155750600061051e565b6080830151835161162c9163ffffffff16906137ed565b6001600160401b03168210611646575060c082015161051e565b825160009061165e906001600160401b031684613818565b905060008460a0015163ffffffff168261167891906138a6565b6116829083613818565b9050846080015163ffffffff168560c001518261169f91906138ba565b6116a991906138d9565b9250505061051e565b60006107a67f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6116e160655490565b6066546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b81546000908181600581111561178757600061174884612852565b6117529085613818565b600088815260209020909150869082015463ffffffff16111561177757809150611785565b61178281600161379e565b92505b505b808210156117d457600061179b8383612937565b600088815260209020909150869082015463ffffffff1611156117c0578091506117ce565b6117cb81600161379e565b92505b50611787565b801561180d576117f7866117e9600184613818565b600091825260209091200190565b54600160201b90046001600160e01b0316611810565b60005b6001600160e01b03169695505050505050565b60008061182f8361155b565b60038101549091506001600160a01b03163314611861573360405163472511eb60e11b81526004016105b191906133ef565b8054429061188590600160a01b810463ffffffff16906001600160401b03166137ed565b6001600160401b03168110156118ae5760405163fad681e760e01b815260040160405180910390fd5b604080516101608101825283546001600160401b038082168352600160401b8204166020830152600160801b810463ffffffff90811693830193909352600160a01b80820484166060840152600160c01b820484166080840152600160e01b90910490921660a0820152600184015460c082015260028401546001600160a01b0390811660e083015260038501549081166101008301529190910460ff161515610120820152600483015461014082015260009061196c9083611b69565b90508061198c57604051630fe6b58b60e41b815260040160405180910390fd5b6000611997866121da565b60038501549091506119b49082906001600160a01b0316846111c4565b818460040160008282546119c8919061379e565b909155505060408051878152602081018490527f8e54a80e4adf22e5669cda627d76c97a21b0a2a54fab3b48b1b38b97b29580f0910160405180910390a150949350505050565b611a17611bc2565b611a7e576000611a25612952565b905060005b818110156106c2576000611a3d82612980565b6001015490506000611a5a611a54610322856121da565b836115cc565b611a649083613818565b9050611a708382612a03565b508260010192505050611a2a565b565b6000611a8b8361081b565b90506000611a9884610906565b6001600160a01b03858116600081815260cc602052604080822080546001600160a01b031916898616908117909155905194955093928616927f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46111be828483612c6c565b600063ffffffff821115611b655760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016105b1565b5090565b6101408201516020830151600091906001600160401b0316831115611b995783602001516001600160401b031692505b6000611ba585856115e1565b905081811115611bb75703905061051e565b506000949350505050565b600080611bde6001600080516020613927833981519152613818565b5492915050565b600081611bf18c610906565b1015611c1057604051633464861d60e21b815260040160405180910390fd5b6001600160a01b038a16611c8557604051630d63fe3160e31b815260206004820152603560248201527f56657374696e67207363686564756c652062656e6566696369617279206d757360448201527474206265206e6f6e207a65726f206164647265737360581b60648201526084016105b1565b63ffffffff8616611ce757604051630d63fe3160e31b815260206004820152602560248201527f56657374696e67207363686564756c65206475726174696f6e206d7573742062604482015264065203e20360dc1b60648201526084016105b1565b81611d4157604051630d63fe3160e31b815260206004820152602360248201527f56657374696e67207363686564756c6520616d6f756e74206d7573742062652060448201526203e20360ec1b60648201526084016105b1565b63ffffffff8516611da157604051630d63fe3160e31b815260206004820152602360248201527f56657374696e67207363686564756c6520706572696f64206d7573742062652060448201526203e20360ec1b60648201526084016105b1565b6000611dad86886138ed565b63ffffffff161115611e2057604051630d63fe3160e31b815260206004820152603560248201527f56657374696e67207363686564756c65206475726174696f6e206d7573742073604482015274706c697420696e20657861637420706572696f647360581b60648201526084016105b1565b6000611e2c86896138ed565b63ffffffff161115611ea757604051630d63fe3160e31b815260206004820152603b60248201527f56657374696e67207363686564756c6520636c696666206475726174696f6e2060448201527f6d7573742073706c697420696e20657861637420706572696f6473000000000060648201526084016105b1565b8563ffffffff168763ffffffff161115611f4057604051630d63fe3160e31b815260206004820152604d60248201527f56657374696e67207363686564756c65206475726174696f6e206d757374206260448201527f652067726561746572207468616e206f7220657175616c20746f20746865206360648201526c3634b33310323ab930ba34b7b760991b608482015260a4016105b1565b8563ffffffff168563ffffffff1683611f5991906138ba565b611f6391906138d9565b611fd057604051630d63fe3160e31b815260206004820152603760248201527f56657374696e67207363686564756c6520616d6f756e7420746f6f206c6f7720604482015276199bdc88191d5c985d1a5bdb88185b99081c195c9a5bd9604a1b60648201526084016105b1565b6001600160401b038816611fe2574297505b60006040518061016001604052808a6001600160401b031681526020018863ffffffff168b61201191906137ed565b6001600160401b031681526020018963ffffffff1681526020018663ffffffff1681526020018863ffffffff1681526020018763ffffffff1681526020018481526020018d6001600160a01b031681526020018c6001600160a01b031681526020018515158152602001600081525090506000600161208f83612da9565b6120999190613818565b905060006120a6826121da565b90506120b38e82876111c4565b6001600160a01b038c166120d0576120cb818e611a80565b6120da565b6120da818d611a80565b8c6001600160a01b03168e6001600160a01b03167fb0274f4a20cdf2005bb6a28aab72868f144d56c0828753a0f6edc7a62ef131b18488604051612128929190918252602082015260400190565b60405180910390a3509c9b505050505050505050505050565b600061051e61214e6116b2565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006121a087878787612f06565b915091506121ad81612fc0565b5095945050505050565b6001600160a01b0316600090815260996020526040902080546001810190915590565b6000803061220960017f5c24c10d65ac9aa9e0f7f63d96fe83c89107fae52b4ef778334c906c1ec5c1ed613818565b60405160609290921b6bffffffffffffffffffffffff1916602083015260348201526054810184905260740160408051601f1981840301815291905280516020909101209392505050565b60006001600160401b03821661226c57429150612296565b42826001600160401b03161015612296576040516317518afb60e11b815260040160405180910390fd5b60006122a18461155b565b6003810154909150600160a01b900460ff166122d0576040516341a76da360e01b815260040160405180910390fd5b80546001600160401b0390811690841610806122ff575080546001600160401b03808516600160401b90920416105b1561231d57604051635178474560e11b815260040160405180910390fd5b60028101546001600160a01b0316331461234c573360405163472511eb60e11b81526004016105b191906133ef565b604080516101608101825282546001600160401b038082168352600160401b82041660208301819052600160801b820463ffffffff90811694840194909452600160a01b80830485166060850152600160c01b830485166080850152600160e01b90920490931660a0830152600184015460c083015260028401546001600160a01b0390811660e084015260038501549081166101008401520460ff161515610120820152600483015461014082015260009161240991906115e1565b604080516101608101825284546001600160401b038082168352600160401b820481166020840152600160801b820463ffffffff90811694840194909452600160a01b80830485166060850152600160c01b830485166080850152600160e01b90920490931660a0830152600186015460c083015260028601546001600160a01b0390811660e084015260038701549081166101008401520460ff16151561012082015260048501546101408201529192506000916124c99187166115e1565b905060006124d78284613818565b905080156125095760006124ea886121da565b60028601549091506125079082906001600160a01b0316846111c4565b505b835467ffffffffffffffff60401b1916600160401b6001600160401b0388169081029190911785556040805189815260208101849052908101919091527f2c802be755370b3a250faf14516cb3480b47417d4c12d7fa0ff3ee0b937d99e99060600160405180910390a19695505050505050565b505050565b61257d61258e8461081b565b6125978461081b565b83612c6c565b600054610100900460ff166125c45760405162461bcd60e51b81526004016105b190613845565b815160209283012081519190920120606591909155606655565b600054610100900460ff166126055760405162461bcd60e51b81526004016105b190613845565b8151612618906036906020850190613228565b50805161257d906037906020840190613228565b6001600160a01b0382166126825760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105b1565b8060356000828254612694919061379e565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36106c260008383612582565b6000610554828461379e565b8254600090819081811561274d5761271e876117e9600185613818565b60408051808201909152905463ffffffff81168252600160201b90046001600160e01b03166020820152612762565b60408051808201909152600080825260208201525b905080602001516001600160e01b0316935061278284868863ffffffff16565b925060008211801561279a5750805163ffffffff1643145b156127de576127a883613109565b6127b7886117e9600186613818565b80546001600160e01b0392909216600160201b0263ffffffff909216919091179055612848565b8660405180604001604052806127f343611b00565b63ffffffff16815260200161280786613109565b6001600160e01b039081169091528254600181018455600093845260209384902083519490930151909116600160201b0263ffffffff909316929092179101555b5050935093915050565b60008161286157506000919050565b6000600161286e84613172565b901c6001901b9050600181848161288757612887613890565b048201901c9050600181848161289f5761289f613890565b048201901c905060018184816128b7576128b7613890565b048201901c905060018184816128cf576128cf613890565b048201901c905060018184816128e7576128e7613890565b048201901c905060018184816128ff576128ff613890565b048201901c9050600181848161291757612917613890565b048201901c90506105548182858161293157612931613890565b04613206565b600061294660028484186138d9565b6105549084841661379e565b600080611bde60017ff828a756855b22b2018e6c442f4e4296eacda2c58e90fa4824ff32229d084d62613818565b6000806129ae60017ff828a756855b22b2018e6c442f4e4296eacda2c58e90fa4824ff32229d084d62613818565b8054909150819084106129d75760405163ad7d6e0960e01b8152600481018590526024016105b1565b8060000184815481106129ec576129ec61382f565b906000526020600020906004020192505050919050565b600080612a0f84612980565b604051806101400160405290816000820160009054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016000820160089054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016000820160109054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160149054906101000a900460ff1615151515815250509050600060405180610160016040528083600001516001600160401b0316815260200183602001516001600160401b03168152602001836040015163ffffffff168152602001836060015163ffffffff168152602001836080015163ffffffff1681526020018360a0015163ffffffff1681526020018360c0015181526020018360e001516001600160a01b031681526020018361010001516001600160a01b03168152602001836101200151151581526020018581525090506001612c5982612da9565b612c639190613818565b95945050505050565b816001600160a01b0316836001600160a01b031614158015612c8e5750600081115b1561257d576001600160a01b03831615612d1c576001600160a01b038316600090815260cd602052604081208190612cc99061321c85612701565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612d11929190918252602082015260400190565b60405180910390a250505b6001600160a01b0382161561257d576001600160a01b038216600090815260cd602052604081208190612d52906126f585612701565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612d9a929190918252602082015260400190565b60405180910390a25050505050565b600080612dc56001600080516020613927833981519152613818565b80546001808201835560008381526020908190208751600590940201805491880151604089015160608a015160808b015160a08c01516001600160401b039889166001600160801b031990971696909617600160401b98909416979097029290921767ffffffffffffffff60801b1916600160801b63ffffffff9283160263ffffffff60a01b191617600160a01b9282168302176001600160c01b0316600160c01b968216969096026001600160e01b031695909517600160e01b959093169490940291909117815560c08701519181019190915560e08601516002820180546001600160a01b0319166001600160a01b039283161790556101008701516003830180546101208a0151929093166001600160a81b031990931692909217901515909302929092179091556101409094015160049094019390935550505490565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115612f335750600090506003612fb7565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612f87573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612fb057600060019250925050612fb7565b9150600090505b94509492505050565b6000816004811115612fd457612fd4613910565b1415612fdd5750565b6001816004811115612ff157612ff1613910565b141561303a5760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b60448201526064016105b1565b600281600481111561304e5761304e613910565b141561309c5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105b1565b60038160048111156130b0576130b0613910565b14156108e15760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105b1565b60006001600160e01b03821115611b655760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b60648201526084016105b1565b600080608083901c1561318757608092831c92015b604083901c1561319957604092831c92015b602083901c156131ab57602092831c92015b601083901c156131bd57601092831c92015b600883901c156131cf57600892831c92015b600483901c156131e157600492831c92015b600283901c156131f357600292831c92015b600183901c1561051e5760010192915050565b60008183106132155781610554565b5090919050565b60006105548284613818565b82805461323490613705565b90600052602060002090601f016020900481019282613256576000855561329c565b82601f1061326f57805160ff191683800117855561329c565b8280016001018555821561329c579182015b8281111561329c578251825591602001919060010190613281565b50611b659291505b80821115611b6557600081556001016132a4565b600060208083528351808285015260005b818110156132e5578581018301518582016040015282016132c9565b818111156132f7576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461332457600080fd5b919050565b6000806040838503121561333c57600080fd5b6133458361330d565b946020939093013593505050565b60008060006060848603121561336857600080fd5b6133718461330d565b925061337f6020850161330d565b9150604084013590509250925092565b600080604083850312156133a257600080fd5b823591506133b26020840161330d565b90509250929050565b6000602082840312156133cd57600080fd5b6105548261330d565b6000602082840312156133e857600080fd5b5035919050565b6001600160a01b0391909116815260200190565b80356001600160401b038116811461332457600080fd5b803563ffffffff8116811461332457600080fd5b60008060008060008060008060006101208a8c03121561344d57600080fd5b6134568a613403565b985061346460208b0161341a565b975061347260408b0161341a565b965061348060608b0161341a565b955061348e60808b0161341a565b945060a08a013580151581146134a357600080fd5b935060c08a013592506134b860e08b0161330d565b91506134c76101008b0161330d565b90509295985092959850929598565b81516001600160401b031681526101608101602083015161350260208401826001600160401b03169052565b50604083015161351a604084018263ffffffff169052565b506060830151613532606084018263ffffffff169052565b50608083015161354a608084018263ffffffff169052565b5060a083015161356260a084018263ffffffff169052565b5060c083015160c083015260e083015161358760e08401826001600160a01b03169052565b50610100838101516001600160a01b0316908301526101208084015115159083015261014092830151929091019190915290565b803560ff8116811461332457600080fd5b60008060008060008060c087890312156135e557600080fd5b6135ee8761330d565b9550602087013594506040870135935061360a606088016135bb565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a03121561363f57600080fd5b6136488861330d565b96506136566020890161330d565b95506040880135945060608801359350613672608089016135bb565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156136a157600080fd5b6136aa8361330d565b91506133b26020840161330d565b600080604083850312156136cb57600080fd5b823591506133b260208401613403565b600080604083850312156136ee57600080fd5b6136f78361330d565b91506133b26020840161341a565b600181811c9082168061371957607f821691505b602082108114156115db57634e487b7160e01b600052602260045260246000fd5b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082198211156137b1576137b1613788565b500190565b6020808252601f908201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604082015260600190565b60006001600160401b0380831681851680830382111561380f5761380f613788565b01949350505050565b60008282101561382a5761382a613788565b500390565b634e487b7160e01b600052603260045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b6000826138b5576138b5613890565b500690565b60008160001904831182151516156138d4576138d4613788565b500290565b6000826138e8576138e8613890565b500490565b600063ffffffff8084168061390457613904613890565b92169190910692915050565b634e487b7160e01b600052602160045260246000fdfe64404627f9392c993df73912dbfb24528266190d015c31a2a5dcf19d4c62184da2646970667358221220c9fa20cbe1cad9b0b2cd61866d4b5f38acc91b73384603776c10cec403ceefe964736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101bb5760003560e01c806370a08231116100fa578063a457c2d71161009d578063a457c2d714610396578063a9059cbb146103a9578063beb8f883146103bc578063c3cda520146103dc578063d505accf146103ef578063dd62ed3e14610402578063decc722414610415578063f0519be014610428578063f1127ed81461043b57600080fd5b806370a08231146103145780637ecebe00146103275780638e539e8c1461033a5780638fb8ad841461034d5780639295ccec1461036057806395d89b41146103685780639ab24eb014610370578063a33773f61461038357600080fd5b80633644e515116101625780633644e5151461027057806339509351146102785780633a46b1a81461028b578063574d91831461029e578063587cde1e146102b157806359facefd146102d15780635c19a95c146102d95780636fcfff45146102ec57600080fd5b806306fdde03146101c0578063095ea7b3146101de57806318160ddd1461020157806323b872dd1461021357806323dd35b41461022657806328766ffd1461023957806329c9093b1461024e578063313ce56714610261575b600080fd5b6101c8610478565b6040516101d591906132b8565b60405180910390f35b6101f16101ec366004613329565b61050a565b60405190151581526020016101d5565b6035545b6040519081526020016101d5565b6101f1610221366004613353565b610524565b6101f161023436600461338f565b610548565b61024c6102473660046133bb565b61055b565b005b61020561025c3660046133d6565b6106c6565b604051601281526020016101d5565b61020561079c565b6101f1610286366004613329565b6107ab565b610205610299366004613329565b6107cd565b6102056102ac3660046133d6565b610810565b6102c46102bf3660046133bb565b61081b565b6040516101d591906133ef565b61024c610839565b61024c6102e73660046133bb565b6108d7565b6102ff6102fa3660046133bb565b6108e4565b60405163ffffffff90911681526020016101d5565b6102056103223660046133bb565b610906565b6102056103353660046133bb565b610921565b6102056103483660046133d6565b61093f565b61020561035b3660046133d6565b61096b565b610205610a67565b6101c8610a71565b61020561037e3660046133bb565b610a80565b61020561039136600461342e565b610b06565b6101f16103a4366004613329565b610b28565b6101f16103b7366004613329565b610ba3565b6103cf6103ca3660046133d6565b610bb1565b6040516101d591906134d6565b61024c6103ea3660046135cc565b610ccb565b61024c6103fd366004613624565b610dfd565b61020561041036600461368e565b610f61565b6102c46104233660046133d6565b610f8c565b6102056104363660046136b8565b610f97565b61044e6104493660046136db565b610fa3565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016101d5565b60606036805461048790613705565b80601f01602080910402602001604051908101604052809291908181526020018280546104b390613705565b80156105005780601f106104d557610100808354040283529160200191610500565b820191906000526020600020905b8154815290600101906020018083116104e357829003601f168201915b5050505050905090565b600033610518818585611026565b60019150505b92915050565b60003361053285828561114a565b61053d8585856111c4565b506001949350505050565b60006105548383611375565b9392505050565b600054610100900460ff161580801561057b5750600054600160ff909116105b806105955750303b158015610595575060005460ff166001145b6105ba5760405162461bcd60e51b81526004016105b19061373a565b60405180910390fd5b6000805460ff1916600117905580156105dd576000805461ff0019166101001790555b6105e68261142f565b610618604051806040016040528060118152602001704c697175696420436f6c6c65637469766560781b815250611456565b610666604051806040016040528060118152602001704c697175696420436f6c6c65637469766560781b81525060405180604001604052806003815260200162544c4360e81b8152506114a0565b61067c826b033b2e3c9fd0803ce80000006114d1565b80156106c2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6000806106d28361155b565b604080516101608101825282546001600160401b038082168352600160401b82041660208301819052600160801b820463ffffffff90811694840194909452600160a01b80830485166060850152600160c01b830485166080850152600160e01b90920490931660a0830152600184015460c083015260028401546001600160a01b0390811660e084015260038501549081166101008401520460ff1615156101208201526004909201546101408301529091506105549082906107979042906115cc565b6115e1565b60006107a66116b2565b905090565b6000336105188185856107be8383610f61565b6107c8919061379e565b611026565b60004382106107ee5760405162461bcd60e51b81526004016105b1906137b6565b6001600160a01b038316600090815260cd60205260409020610554908361172d565b600061051e82611823565b6001600160a01b03908116600090815260cc60205260409020541690565b600054600290610100900460ff1615801561085b575060005460ff8083169116105b6108775760405162461bcd60e51b81526004016105b19061373a565b6000805461ffff191660ff831617610100179055610893611a0f565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b6108e13382611a80565b50565b6001600160a01b038116600090815260cd602052604081205461051e90611b00565b6001600160a01b031660009081526033602052604090205490565b6001600160a01b03811660009081526099602052604081205461051e565b60004382106109605760405162461bcd60e51b81526004016105b1906137b6565b61051e60ce8361172d565b6000806109778361155b565b604080516101608101825282546001600160401b03808216808452600160401b83049091166020840152600160801b820463ffffffff90811694840194909452600160a01b808304851660608501819052600160c01b840486166080860152600160e01b90930490941660a0840152600185015460c084015260028501546001600160a01b0390811660e085015260038601549081166101008501529390930460ff16151561012083015260049093015461014082015292504291610a3b916137ed565b6001600160401b0316811015610a55575060009392505050565b610a5f8282611b69565b949350505050565b60006107a6611bc2565b60606037805461048790613705565b6001600160a01b038116600090815260cd60205260408120548015610af3576001600160a01b038316600090815260cd60205260409020610ac2600183613818565b81548110610ad257610ad261382f565b600091825260209091200154600160201b90046001600160e01b0316610af6565b60005b6001600160e01b03169392505050565b6000610b1a3384848d8d8d8d8d8d8d611be5565b9a9950505050505050505050565b60003381610b368286610f61565b905083811015610b965760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016105b1565b61053d8286868403611026565b6000336105188185856111c4565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810191909152610c138261155b565b604080516101608101825282546001600160401b038082168352600160401b8204166020830152600160801b810463ffffffff90811693830193909352600160a01b80820484166060840152600160c01b820484166080840152600160e01b90910490921660a0820152600183015460c082015260028301546001600160a01b0390811660e083015260038401549081166101008301529190910460ff16151561012082015260049091015461014082015292915050565b83421115610d1b5760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e6174757265206578706972656400000060448201526064016105b1565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090610d9590610d8d9060a00160405160208183030381529060405280519060200120612141565b85858561218f565b9050610da0816121b7565b8614610dea5760405162461bcd60e51b81526020600482015260196024820152784552433230566f7465733a20696e76616c6964206e6f6e636560381b60448201526064016105b1565b610df48188611a80565b50505050505050565b83421115610e4d5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016105b1565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610e7c8c6121b7565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610ed782612141565b90506000610ee78287878761218f565b9050896001600160a01b0316816001600160a01b031614610f4a5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016105b1565b610f558a8a8a611026565b50505050505050505050565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b600061051e826121da565b60006105548383612254565b60408051808201909152600080825260208201526001600160a01b038316600090815260cd60205260409020805463ffffffff8416908110610fe757610fe761382f565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b0316918101919091529392505050565b6001600160a01b0383166110885760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105b1565b6001600160a01b0382166110e95760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105b1565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006111568484610f61565b905060001981146111be57818110156111b15760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016105b1565b6111be8484848403611026565b50505050565b6001600160a01b0383166112285760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105b1565b6001600160a01b03821661128a5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105b1565b6001600160a01b038316600090815260336020526040902054818110156113025760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016105b1565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906113629086815260200190565b60405180910390a36111be848484612582565b6000806113818461155b565b60038101549091506001600160a01b031633146113b3573360405163472511eb60e11b81526004016105b191906133ef565b60006113be856121da565b905060006113cb8261081b565b90506113d78286611a80565b60038301546040518781526001600160a01b039182169187811691908416907ff59662617e9c4f8707dff52c85bd8f49f665073ba5fffb29c2a55ebf58e7a75e9060200160405180910390a450600195945050505050565b6001600160a01b0381166108e15760405163f6b2911f60e01b815260040160405180910390fd5b600054610100900460ff1661147d5760405162461bcd60e51b81526004016105b190613845565b6108e181604051806040016040528060018152602001603160f81b81525061259d565b600054610100900460ff166114c75760405162461bcd60e51b81526004016105b190613845565b6106c282826125de565b6114db828261262c565b6035546001600160e01b03101561154d5760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b60648201526084016105b1565b6111be60ce6126f583612701565b6000806115776001600080516020613927833981519152613818565b8054909150819084106115a05760405163ad7d6e0960e01b8152600481018590526024016105b1565b8060000184815481106115b5576115b561382f565b906000526020600020906005020192505050919050565b60008183116115db5782610554565b50919050565b6000826040015163ffffffff1683600001516115fd91906137ed565b6001600160401b03168210156116155750600061051e565b6080830151835161162c9163ffffffff16906137ed565b6001600160401b03168210611646575060c082015161051e565b825160009061165e906001600160401b031684613818565b905060008460a0015163ffffffff168261167891906138a6565b6116829083613818565b9050846080015163ffffffff168560c001518261169f91906138ba565b6116a991906138d9565b9250505061051e565b60006107a67f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6116e160655490565b6066546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b81546000908181600581111561178757600061174884612852565b6117529085613818565b600088815260209020909150869082015463ffffffff16111561177757809150611785565b61178281600161379e565b92505b505b808210156117d457600061179b8383612937565b600088815260209020909150869082015463ffffffff1611156117c0578091506117ce565b6117cb81600161379e565b92505b50611787565b801561180d576117f7866117e9600184613818565b600091825260209091200190565b54600160201b90046001600160e01b0316611810565b60005b6001600160e01b03169695505050505050565b60008061182f8361155b565b60038101549091506001600160a01b03163314611861573360405163472511eb60e11b81526004016105b191906133ef565b8054429061188590600160a01b810463ffffffff16906001600160401b03166137ed565b6001600160401b03168110156118ae5760405163fad681e760e01b815260040160405180910390fd5b604080516101608101825283546001600160401b038082168352600160401b8204166020830152600160801b810463ffffffff90811693830193909352600160a01b80820484166060840152600160c01b820484166080840152600160e01b90910490921660a0820152600184015460c082015260028401546001600160a01b0390811660e083015260038501549081166101008301529190910460ff161515610120820152600483015461014082015260009061196c9083611b69565b90508061198c57604051630fe6b58b60e41b815260040160405180910390fd5b6000611997866121da565b60038501549091506119b49082906001600160a01b0316846111c4565b818460040160008282546119c8919061379e565b909155505060408051878152602081018490527f8e54a80e4adf22e5669cda627d76c97a21b0a2a54fab3b48b1b38b97b29580f0910160405180910390a150949350505050565b611a17611bc2565b611a7e576000611a25612952565b905060005b818110156106c2576000611a3d82612980565b6001015490506000611a5a611a54610322856121da565b836115cc565b611a649083613818565b9050611a708382612a03565b508260010192505050611a2a565b565b6000611a8b8361081b565b90506000611a9884610906565b6001600160a01b03858116600081815260cc602052604080822080546001600160a01b031916898616908117909155905194955093928616927f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46111be828483612c6c565b600063ffffffff821115611b655760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016105b1565b5090565b6101408201516020830151600091906001600160401b0316831115611b995783602001516001600160401b031692505b6000611ba585856115e1565b905081811115611bb75703905061051e565b506000949350505050565b600080611bde6001600080516020613927833981519152613818565b5492915050565b600081611bf18c610906565b1015611c1057604051633464861d60e21b815260040160405180910390fd5b6001600160a01b038a16611c8557604051630d63fe3160e31b815260206004820152603560248201527f56657374696e67207363686564756c652062656e6566696369617279206d757360448201527474206265206e6f6e207a65726f206164647265737360581b60648201526084016105b1565b63ffffffff8616611ce757604051630d63fe3160e31b815260206004820152602560248201527f56657374696e67207363686564756c65206475726174696f6e206d7573742062604482015264065203e20360dc1b60648201526084016105b1565b81611d4157604051630d63fe3160e31b815260206004820152602360248201527f56657374696e67207363686564756c6520616d6f756e74206d7573742062652060448201526203e20360ec1b60648201526084016105b1565b63ffffffff8516611da157604051630d63fe3160e31b815260206004820152602360248201527f56657374696e67207363686564756c6520706572696f64206d7573742062652060448201526203e20360ec1b60648201526084016105b1565b6000611dad86886138ed565b63ffffffff161115611e2057604051630d63fe3160e31b815260206004820152603560248201527f56657374696e67207363686564756c65206475726174696f6e206d7573742073604482015274706c697420696e20657861637420706572696f647360581b60648201526084016105b1565b6000611e2c86896138ed565b63ffffffff161115611ea757604051630d63fe3160e31b815260206004820152603b60248201527f56657374696e67207363686564756c6520636c696666206475726174696f6e2060448201527f6d7573742073706c697420696e20657861637420706572696f6473000000000060648201526084016105b1565b8563ffffffff168763ffffffff161115611f4057604051630d63fe3160e31b815260206004820152604d60248201527f56657374696e67207363686564756c65206475726174696f6e206d757374206260448201527f652067726561746572207468616e206f7220657175616c20746f20746865206360648201526c3634b33310323ab930ba34b7b760991b608482015260a4016105b1565b8563ffffffff168563ffffffff1683611f5991906138ba565b611f6391906138d9565b611fd057604051630d63fe3160e31b815260206004820152603760248201527f56657374696e67207363686564756c6520616d6f756e7420746f6f206c6f7720604482015276199bdc88191d5c985d1a5bdb88185b99081c195c9a5bd9604a1b60648201526084016105b1565b6001600160401b038816611fe2574297505b60006040518061016001604052808a6001600160401b031681526020018863ffffffff168b61201191906137ed565b6001600160401b031681526020018963ffffffff1681526020018663ffffffff1681526020018863ffffffff1681526020018763ffffffff1681526020018481526020018d6001600160a01b031681526020018c6001600160a01b031681526020018515158152602001600081525090506000600161208f83612da9565b6120999190613818565b905060006120a6826121da565b90506120b38e82876111c4565b6001600160a01b038c166120d0576120cb818e611a80565b6120da565b6120da818d611a80565b8c6001600160a01b03168e6001600160a01b03167fb0274f4a20cdf2005bb6a28aab72868f144d56c0828753a0f6edc7a62ef131b18488604051612128929190918252602082015260400190565b60405180910390a3509c9b505050505050505050505050565b600061051e61214e6116b2565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006121a087878787612f06565b915091506121ad81612fc0565b5095945050505050565b6001600160a01b0316600090815260996020526040902080546001810190915590565b6000803061220960017f5c24c10d65ac9aa9e0f7f63d96fe83c89107fae52b4ef778334c906c1ec5c1ed613818565b60405160609290921b6bffffffffffffffffffffffff1916602083015260348201526054810184905260740160408051601f1981840301815291905280516020909101209392505050565b60006001600160401b03821661226c57429150612296565b42826001600160401b03161015612296576040516317518afb60e11b815260040160405180910390fd5b60006122a18461155b565b6003810154909150600160a01b900460ff166122d0576040516341a76da360e01b815260040160405180910390fd5b80546001600160401b0390811690841610806122ff575080546001600160401b03808516600160401b90920416105b1561231d57604051635178474560e11b815260040160405180910390fd5b60028101546001600160a01b0316331461234c573360405163472511eb60e11b81526004016105b191906133ef565b604080516101608101825282546001600160401b038082168352600160401b82041660208301819052600160801b820463ffffffff90811694840194909452600160a01b80830485166060850152600160c01b830485166080850152600160e01b90920490931660a0830152600184015460c083015260028401546001600160a01b0390811660e084015260038501549081166101008401520460ff161515610120820152600483015461014082015260009161240991906115e1565b604080516101608101825284546001600160401b038082168352600160401b820481166020840152600160801b820463ffffffff90811694840194909452600160a01b80830485166060850152600160c01b830485166080850152600160e01b90920490931660a0830152600186015460c083015260028601546001600160a01b0390811660e084015260038701549081166101008401520460ff16151561012082015260048501546101408201529192506000916124c99187166115e1565b905060006124d78284613818565b905080156125095760006124ea886121da565b60028601549091506125079082906001600160a01b0316846111c4565b505b835467ffffffffffffffff60401b1916600160401b6001600160401b0388169081029190911785556040805189815260208101849052908101919091527f2c802be755370b3a250faf14516cb3480b47417d4c12d7fa0ff3ee0b937d99e99060600160405180910390a19695505050505050565b505050565b61257d61258e8461081b565b6125978461081b565b83612c6c565b600054610100900460ff166125c45760405162461bcd60e51b81526004016105b190613845565b815160209283012081519190920120606591909155606655565b600054610100900460ff166126055760405162461bcd60e51b81526004016105b190613845565b8151612618906036906020850190613228565b50805161257d906037906020840190613228565b6001600160a01b0382166126825760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105b1565b8060356000828254612694919061379e565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36106c260008383612582565b6000610554828461379e565b8254600090819081811561274d5761271e876117e9600185613818565b60408051808201909152905463ffffffff81168252600160201b90046001600160e01b03166020820152612762565b60408051808201909152600080825260208201525b905080602001516001600160e01b0316935061278284868863ffffffff16565b925060008211801561279a5750805163ffffffff1643145b156127de576127a883613109565b6127b7886117e9600186613818565b80546001600160e01b0392909216600160201b0263ffffffff909216919091179055612848565b8660405180604001604052806127f343611b00565b63ffffffff16815260200161280786613109565b6001600160e01b039081169091528254600181018455600093845260209384902083519490930151909116600160201b0263ffffffff909316929092179101555b5050935093915050565b60008161286157506000919050565b6000600161286e84613172565b901c6001901b9050600181848161288757612887613890565b048201901c9050600181848161289f5761289f613890565b048201901c905060018184816128b7576128b7613890565b048201901c905060018184816128cf576128cf613890565b048201901c905060018184816128e7576128e7613890565b048201901c905060018184816128ff576128ff613890565b048201901c9050600181848161291757612917613890565b048201901c90506105548182858161293157612931613890565b04613206565b600061294660028484186138d9565b6105549084841661379e565b600080611bde60017ff828a756855b22b2018e6c442f4e4296eacda2c58e90fa4824ff32229d084d62613818565b6000806129ae60017ff828a756855b22b2018e6c442f4e4296eacda2c58e90fa4824ff32229d084d62613818565b8054909150819084106129d75760405163ad7d6e0960e01b8152600481018590526024016105b1565b8060000184815481106129ec576129ec61382f565b906000526020600020906004020192505050919050565b600080612a0f84612980565b604051806101400160405290816000820160009054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016000820160089054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016000820160109054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160149054906101000a900460ff1615151515815250509050600060405180610160016040528083600001516001600160401b0316815260200183602001516001600160401b03168152602001836040015163ffffffff168152602001836060015163ffffffff168152602001836080015163ffffffff1681526020018360a0015163ffffffff1681526020018360c0015181526020018360e001516001600160a01b031681526020018361010001516001600160a01b03168152602001836101200151151581526020018581525090506001612c5982612da9565b612c639190613818565b95945050505050565b816001600160a01b0316836001600160a01b031614158015612c8e5750600081115b1561257d576001600160a01b03831615612d1c576001600160a01b038316600090815260cd602052604081208190612cc99061321c85612701565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612d11929190918252602082015260400190565b60405180910390a250505b6001600160a01b0382161561257d576001600160a01b038216600090815260cd602052604081208190612d52906126f585612701565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612d9a929190918252602082015260400190565b60405180910390a25050505050565b600080612dc56001600080516020613927833981519152613818565b80546001808201835560008381526020908190208751600590940201805491880151604089015160608a015160808b015160a08c01516001600160401b039889166001600160801b031990971696909617600160401b98909416979097029290921767ffffffffffffffff60801b1916600160801b63ffffffff9283160263ffffffff60a01b191617600160a01b9282168302176001600160c01b0316600160c01b968216969096026001600160e01b031695909517600160e01b959093169490940291909117815560c08701519181019190915560e08601516002820180546001600160a01b0319166001600160a01b039283161790556101008701516003830180546101208a0151929093166001600160a81b031990931692909217901515909302929092179091556101409094015160049094019390935550505490565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115612f335750600090506003612fb7565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612f87573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612fb057600060019250925050612fb7565b9150600090505b94509492505050565b6000816004811115612fd457612fd4613910565b1415612fdd5750565b6001816004811115612ff157612ff1613910565b141561303a5760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b60448201526064016105b1565b600281600481111561304e5761304e613910565b141561309c5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105b1565b60038160048111156130b0576130b0613910565b14156108e15760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105b1565b60006001600160e01b03821115611b655760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b60648201526084016105b1565b600080608083901c1561318757608092831c92015b604083901c1561319957604092831c92015b602083901c156131ab57602092831c92015b601083901c156131bd57601092831c92015b600883901c156131cf57600892831c92015b600483901c156131e157600492831c92015b600283901c156131f357600292831c92015b600183901c1561051e5760010192915050565b60008183106132155781610554565b5090919050565b60006105548284613818565b82805461323490613705565b90600052602060002090601f016020900481019282613256576000855561329c565b82601f1061326f57805160ff191683800117855561329c565b8280016001018555821561329c579182015b8281111561329c578251825591602001919060010190613281565b50611b659291505b80821115611b6557600081556001016132a4565b600060208083528351808285015260005b818110156132e5578581018301518582016040015282016132c9565b818111156132f7576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461332457600080fd5b919050565b6000806040838503121561333c57600080fd5b6133458361330d565b946020939093013593505050565b60008060006060848603121561336857600080fd5b6133718461330d565b925061337f6020850161330d565b9150604084013590509250925092565b600080604083850312156133a257600080fd5b823591506133b26020840161330d565b90509250929050565b6000602082840312156133cd57600080fd5b6105548261330d565b6000602082840312156133e857600080fd5b5035919050565b6001600160a01b0391909116815260200190565b80356001600160401b038116811461332457600080fd5b803563ffffffff8116811461332457600080fd5b60008060008060008060008060006101208a8c03121561344d57600080fd5b6134568a613403565b985061346460208b0161341a565b975061347260408b0161341a565b965061348060608b0161341a565b955061348e60808b0161341a565b945060a08a013580151581146134a357600080fd5b935060c08a013592506134b860e08b0161330d565b91506134c76101008b0161330d565b90509295985092959850929598565b81516001600160401b031681526101608101602083015161350260208401826001600160401b03169052565b50604083015161351a604084018263ffffffff169052565b506060830151613532606084018263ffffffff169052565b50608083015161354a608084018263ffffffff169052565b5060a083015161356260a084018263ffffffff169052565b5060c083015160c083015260e083015161358760e08401826001600160a01b03169052565b50610100838101516001600160a01b0316908301526101208084015115159083015261014092830151929091019190915290565b803560ff8116811461332457600080fd5b60008060008060008060c087890312156135e557600080fd5b6135ee8761330d565b9550602087013594506040870135935061360a606088016135bb565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a03121561363f57600080fd5b6136488861330d565b96506136566020890161330d565b95506040880135945060608801359350613672608089016135bb565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156136a157600080fd5b6136aa8361330d565b91506133b26020840161330d565b600080604083850312156136cb57600080fd5b823591506133b260208401613403565b600080604083850312156136ee57600080fd5b6136f78361330d565b91506133b26020840161341a565b600181811c9082168061371957607f821691505b602082108114156115db57634e487b7160e01b600052602260045260246000fd5b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082198211156137b1576137b1613788565b500190565b6020808252601f908201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604082015260600190565b60006001600160401b0380831681851680830382111561380f5761380f613788565b01949350505050565b60008282101561382a5761382a613788565b500390565b634e487b7160e01b600052603260045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b6000826138b5576138b5613890565b500690565b60008160001904831182151516156138d4576138d4613788565b500290565b6000826138e8576138e8613890565b500490565b600063ffffffff8084168061390457613904613890565b92169190910692915050565b634e487b7160e01b600052602160045260246000fdfe64404627f9392c993df73912dbfb24528266190d015c31a2a5dcf19d4c62184da2646970667358221220c9fa20cbe1cad9b0b2cd61866d4b5f38acc91b73384603776c10cec403ceefe964736f6c634300080a0033",
  "devdoc": {
    "author": "Alluvial",
    "errors": {
      "Unauthorized(address)": [
        {
          "params": {
            "caller": "Address performing the call"
          }
        }
      ],
      "VestingScheduleNotFound(uint256)": [
        {
          "params": {
            "index": "vesting schedule index"
          }
        },
        {
          "params": {
            "index": "vesting schedule index"
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "checkpoints(address,uint32)": {
        "details": "Get the `pos`-th checkpoint for `account`."
      },
      "computeVestingReleasableAmount(uint256)": {
        "params": {
          "_index": "index of the vesting schedule"
        },
        "returns": {
          "_0": "amount of releasable tokens"
        }
      },
      "computeVestingVestedAmount(uint256)": {
        "params": {
          "_index": "index of the vesting schedule"
        },
        "returns": {
          "_0": "amount of vested tokens"
        }
      },
      "createVestingSchedule(uint64,uint32,uint32,uint32,uint32,bool,uint256,address,address)": {
        "details": "As vesting schedules can be created in the past, this means that you should be careful when creating a vesting schedule and what duration parametersyou use as this contract would allow creating a vesting schedule in the past and even a vesting schedule that has already ended.",
        "params": {
          "_amount": "amount of token attributed by the vesting schedule",
          "_beneficiary": "address of the beneficiary of the tokens",
          "_cliffDuration": "duration to vesting cliff (in seconds)",
          "_delegatee": "address to delegate escrow voting power to",
          "_duration": "total vesting schedule duration after which all tokens are vested (in seconds)",
          "_lockDuration": "duration during which tokens are locked (in seconds)",
          "_periodDuration": "duration of a period after which new tokens unlock (in seconds)",
          "_revocable": "whether the vesting schedule is revocable or not",
          "_start": "start time of the vesting"
        },
        "returns": {
          "_0": "index of the created vesting schedule"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "delegate(address)": {
        "details": "Delegate votes from the sender to `delegatee`."
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Delegates votes from signer to `delegatee`"
      },
      "delegateVestingEscrow(uint256,address)": {
        "params": {
          "_delegatee": "address to delegate the token to",
          "_index": "index of the vesting schedule"
        },
        "returns": {
          "_0": "True on success"
        }
      },
      "delegates(address)": {
        "details": "Get the address `account` is currently delegating to."
      },
      "getPastTotalSupply(uint256)": {
        "details": "Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances. It is but NOT the sum of all the delegated votes! Requirements: - `blockNumber` must have been already mined"
      },
      "getPastVotes(address,uint256)": {
        "details": "Retrieve the number of votes for `account` at the end of `blockNumber`. Requirements: - `blockNumber` must have been already mined"
      },
      "getVestingSchedule(uint256)": {
        "details": "The vesting schedule structure represents a static configuration used to compute the desiredvesting details of a beneficiary at all times. The values won't change even after tokens are released.The only dynamic field of the structure is end, and is updated whenever a vesting schedule is revoked",
        "params": {
          "_index": "Index of the vesting schedule"
        }
      },
      "getVestingScheduleCount()": {
        "returns": {
          "_0": "count of vesting schedules"
        }
      },
      "getVotes(address)": {
        "details": "Gets the current votes balance for `account`"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initTLCV1(address)": {
        "params": {
          "_account": "The initial account to grant all the minted tokens"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "details": "See {IERC20Permit-nonces}."
      },
      "numCheckpoints(address)": {
        "details": "Get number of checkpoints for `account`."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "See {IERC20Permit-permit}."
      },
      "releaseVestingSchedule(uint256)": {
        "params": {
          "_index": "Index of the vesting schedule to release"
        },
        "returns": {
          "_0": "released amount"
        }
      },
      "revokeVestingSchedule(uint256,uint64)": {
        "params": {
          "_end": "End date for the schedule",
          "_index": "Index of the vesting schedule to revoke"
        },
        "returns": {
          "_0": "amount returned to the vesting schedule creator"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "vestingEscrow(uint256)": {
        "params": {
          "_index": "Index of the vesting schedule"
        },
        "returns": {
          "_0": "address of the escrow"
        }
      }
    },
    "title": "TLC (v1)",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidRevokedVestingScheduleEnd()": [
        {
          "notice": "Attempt to revoke a vesting schedule with an invalid end parameter"
        }
      ],
      "InvalidVestingScheduleParameter(string)": [
        {
          "notice": "Invalid parameter for a vesting schedule"
        }
      ],
      "InvalidZeroAddress()": [
        {
          "notice": "The address is zero"
        }
      ],
      "Unauthorized(address)": [
        {
          "notice": "The operator is unauthorized for the caller"
        }
      ],
      "UnsufficientVestingScheduleCreatorBalance()": [
        {
          "notice": "Vesting schedule creator has unsufficient balance to create vesting schedule"
        }
      ],
      "VestingScheduleIsLocked()": [
        {
          "notice": "The vesting schedule is locked"
        }
      ],
      "VestingScheduleNotFound(uint256)": [
        {
          "notice": "The VestingSchedule was not found"
        },
        {
          "notice": "The VestingSchedule was not found"
        }
      ],
      "VestingScheduleNotRevocable()": [
        {
          "notice": "The vesting schedule is not revocable"
        }
      ],
      "VestingScheduleNotRevocableInPast()": [
        {
          "notice": "Attempt to revoke a schedule in the past"
        }
      ],
      "ZeroReleasableAmount()": [
        {
          "notice": "No token to release"
        }
      ]
    },
    "events": {
      "CreatedVestingSchedule(uint256,address,address,uint256)": {
        "notice": "A new vesting schedule has been created"
      },
      "DelegatedVestingEscrow(uint256,address,address,address)": {
        "notice": "Vesting escrow has been delegated"
      },
      "ReleasedVestingSchedule(uint256,uint256)": {
        "notice": "Vesting schedule has been released"
      },
      "RevokedVestingSchedule(uint256,uint256,uint256)": {
        "notice": "Vesting schedule has been revoked"
      }
    },
    "kind": "user",
    "methods": {
      "computeVestingReleasableAmount(uint256)": {
        "notice": "Computes the releasable amount of tokens for a vesting schedule."
      },
      "computeVestingVestedAmount(uint256)": {
        "notice": "Computes the vested amount of tokens for a vesting schedule."
      },
      "constructor": {
        "notice": "Disables implementation initialization"
      },
      "createVestingSchedule(uint64,uint32,uint32,uint32,uint32,bool,uint256,address,address)": {
        "notice": "Creates a new vesting scheduleThere may delay between the time a user should start vesting tokens and the time the vesting schedule is actually created on the contract.Typically a user joins the Liquid Collective but some weeks pass before the user gets all legal agreements in place and signed for thetoken grant emission to happen. In this case, the vesting schedule created for the token grant would start on the join date which is in the past."
      },
      "delegateVestingEscrow(uint256,address)": {
        "notice": "Delegate vesting escrowed tokens"
      },
      "getVestingSchedule(uint256)": {
        "notice": "Get vesting schedule"
      },
      "getVestingScheduleCount()": {
        "notice": "Get count of vesting schedules"
      },
      "initTLCV1(address)": {
        "notice": "Initializes the TLC Token"
      },
      "migrateVestingSchedules()": {
        "notice": "Migrates the vesting schedule state structures"
      },
      "releaseVestingSchedule(uint256)": {
        "notice": "Release vesting scheduleWhen tokens are released from the escrow, the delegated address of the escrow will see its voting power decrease.The beneficiary has to make sure its delegation parameters are set properly to be able to use/delegate the voting power of its balance."
      },
      "revokeVestingSchedule(uint256,uint64)": {
        "notice": "Revoke vesting schedule"
      },
      "vestingEscrow(uint256)": {
        "notice": "Get the address of the escrow for a vesting schedule"
      }
    },
    "notice": "The TLC token has a max supply of 1,000,000,000 and 18 decimal places.Upon deployment, all minted tokens are send to account provided at construction, in charge of creating the vesting schedulesThe contract is based on ERC20Votes by OpenZeppelin. Users need to delegate their voting power to someone or themselves to be able to vote.The contract contains vesting logics allowing vested users to still be able to delegate their voting power while their tokens are held in an escrow",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19589,
        "contract": "contracts/src/TLC.1.sol:TLCV1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 19592,
        "contract": "contracts/src/TLC.1.sol:TLCV1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 21735,
        "contract": "contracts/src/TLC.1.sol:TLCV1",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 19770,
        "contract": "contracts/src/TLC.1.sol:TLCV1",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 19776,
        "contract": "contracts/src/TLC.1.sol:TLCV1",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 19778,
        "contract": "contracts/src/TLC.1.sol:TLCV1",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 19780,
        "contract": "contracts/src/TLC.1.sol:TLCV1",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 19782,
        "contract": "contracts/src/TLC.1.sol:TLCV1",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 20362,
        "contract": "contracts/src/TLC.1.sol:TLCV1",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 22355,
        "contract": "contracts/src/TLC.1.sol:TLCV1",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "101",
        "type": "t_bytes32"
      },
      {
        "astId": 22357,
        "contract": "contracts/src/TLC.1.sol:TLCV1",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "102",
        "type": "t_bytes32"
      },
      {
        "astId": 22495,
        "contract": "contracts/src/TLC.1.sol:TLCV1",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 21209,
        "contract": "contracts/src/TLC.1.sol:TLCV1",
        "label": "_nonces",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_struct(Counter)21742_storage)"
      },
      {
        "astId": 21217,
        "contract": "contracts/src/TLC.1.sol:TLCV1",
        "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
        "offset": 0,
        "slot": "154",
        "type": "t_bytes32"
      },
      {
        "astId": 21373,
        "contract": "contracts/src/TLC.1.sol:TLCV1",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 20482,
        "contract": "contracts/src/TLC.1.sol:TLCV1",
        "label": "_delegates",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 20488,
        "contract": "contracts/src/TLC.1.sol:TLCV1",
        "label": "_checkpoints",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)20473_storage)dyn_storage)"
      },
      {
        "astId": 20492,
        "contract": "contracts/src/TLC.1.sol:TLCV1",
        "label": "_totalSupplyCheckpoints",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_struct(Checkpoint)20473_storage)dyn_storage"
      },
      {
        "astId": 21157,
        "contract": "contracts/src/TLC.1.sol:TLCV1",
        "label": "__gap",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_uint256)47_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Checkpoint)20473_storage)dyn_storage": {
        "base": "t_struct(Checkpoint)20473_storage",
        "encoding": "dynamic_array",
        "label": "struct ERC20VotesUpgradeable.Checkpoint[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(Checkpoint)20473_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Checkpoint)20473_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Counter)21742_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CountersUpgradeable.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)21742_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Checkpoint)20473_storage": {
        "encoding": "inplace",
        "label": "struct ERC20VotesUpgradeable.Checkpoint",
        "members": [
          {
            "astId": 20470,
            "contract": "contracts/src/TLC.1.sol:TLCV1",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 20472,
            "contract": "contracts/src/TLC.1.sol:TLCV1",
            "label": "votes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Counter)21742_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 21741,
            "contract": "contracts/src/TLC.1.sol:TLCV1",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}