{
    "address": "0x3ecCAdA3e11c1Cc3e9B5a53176A67cc3ABDD3E46",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_operator",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_allowance",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "AllowanceTooLow",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "BalanceTooLow",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "Denied",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "EmptyDeposit",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "ErrorOnDeposit",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InconsistentPublicKeys",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InconsistentSignatures",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidArgument",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidCall",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidFee",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "version",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "expectedVersion",
                    "type": "uint256"
                }
            ],
            "name": "InvalidInitialization",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidPublicKeyCount",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidSignatureCount",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "providedValidatorCount",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "depositedValidatorCount",
                    "type": "uint256"
                }
            ],
            "name": "InvalidValidatorCountReport",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidWithdrawalCredentials",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidZeroAddress",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "NoAvailableValidatorKeys",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "NotEnoughFunds",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "NullTransfer",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "SliceOutOfBounds",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "SliceOverflow",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "caller",
                    "type": "address"
                }
            ],
            "name": "Unauthorized",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                }
            ],
            "name": "UnauthorizedTransfer",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "ZeroMintedShares",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "validatorCount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "validatorTotalBalance",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "bytes32",
                    "name": "roundId",
                    "type": "bytes32"
                }
            ],
            "name": "ConsensusLayerDataUpdate",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "bytes",
                    "name": "publicKey",
                    "type": "bytes"
                }
            ],
            "name": "FundedValidatorKey",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "version",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "bytes",
                    "name": "cdata",
                    "type": "bytes"
                }
            ],
            "name": "Initialize",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "PulledELFees",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_collector",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_oldTotalUnderlyingBalance",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_oldTotalSupply",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_newTotalUnderlyingBalance",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_newTotalSupply",
                    "type": "uint256"
                }
            ],
            "name": "RewardsEarned",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "SetAdmin",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "allowlist",
                    "type": "address"
                }
            ],
            "name": "SetAllowlist",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "collector",
                    "type": "address"
                }
            ],
            "name": "SetCollector",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "depositContract",
                    "type": "address"
                }
            ],
            "name": "SetDepositContractAddress",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "elFeeRecipient",
                    "type": "address"
                }
            ],
            "name": "SetELFeeRecipient",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "fee",
                    "type": "uint256"
                }
            ],
            "name": "SetGlobalFee",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "operatorRegistry",
                    "type": "address"
                }
            ],
            "name": "SetOperatorsRegistry",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "oracleAddress",
                    "type": "address"
                }
            ],
            "name": "SetOracle",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "pendingAdmin",
                    "type": "address"
                }
            ],
            "name": "SetPendingAdmin",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "bytes32",
                    "name": "withdrawalCredentials",
                    "type": "bytes32"
                }
            ],
            "name": "SetWithdrawalCredentials",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "depositor",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "recipient",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "UserDeposit",
            "type": "event"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "DEPOSIT_SIZE",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "PUBLIC_KEY_LENGTH",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "SIGNATURE_LENGTH",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "acceptAdmin",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_spender",
                    "type": "address"
                }
            ],
            "name": "allowance",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "balanceOfUnderlying",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "decimals",
            "outputs": [
                {
                    "internalType": "uint8",
                    "name": "",
                    "type": "uint8"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_subtractableValue",
                    "type": "uint256"
                }
            ],
            "name": "decreaseAllowance",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "deposit",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_recipient",
                    "type": "address"
                }
            ],
            "name": "depositAndTransfer",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_maxCount",
                    "type": "uint256"
                }
            ],
            "name": "depositToConsensusLayer",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getAdmin",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getAllowlist",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getBalanceToDeposit",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getCLValidatorCount",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getCLValidatorTotalBalance",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getCollector",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getDepositedValidatorCount",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getELFeeRecipient",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getGlobalFee",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOperatorsRegistry",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOracle",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPendingAdmin",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getWithdrawalCredentials",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_additionalValue",
                    "type": "uint256"
                }
            ],
            "name": "increaseAllowance",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_depositContractAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_elFeeRecipientAddress",
                    "type": "address"
                },
                {
                    "internalType": "bytes32",
                    "name": "_withdrawalCredentials",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "_oracleAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_systemAdministratorAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_allowlistAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_operatorRegistryAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_collectorAddress",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_globalFee",
                    "type": "uint256"
                }
            ],
            "name": "initRiverV1",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_newAdmin",
                    "type": "address"
                }
            ],
            "name": "proposeAdmin",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "sendELFees",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_newAllowlist",
                    "type": "address"
                }
            ],
            "name": "setAllowlist",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_newCollector",
                    "type": "address"
                }
            ],
            "name": "setCollector",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_validatorCount",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_validatorTotalBalance",
                    "type": "uint256"
                },
                {
                    "internalType": "bytes32",
                    "name": "_roundId",
                    "type": "bytes32"
                },
                {
                    "internalType": "uint256",
                    "name": "_maxIncrease",
                    "type": "uint256"
                }
            ],
            "name": "setConsensusLayerData",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_newELFeeRecipient",
                    "type": "address"
                }
            ],
            "name": "setELFeeRecipient",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "newFee",
                    "type": "uint256"
                }
            ],
            "name": "setGlobalFee",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_oracleAddress",
                    "type": "address"
                }
            ],
            "name": "setOracle",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_underlyingAssetAmount",
                    "type": "uint256"
                }
            ],
            "name": "sharesFromUnderlyingBalance",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalUnderlyingSupply",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "transfer",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_shares",
                    "type": "uint256"
                }
            ],
            "name": "underlyingBalanceFromShares",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_operator",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_allowance",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "AllowanceTooLow",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "BalanceTooLow",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "Denied",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "EmptyDeposit",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "ErrorOnDeposit",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InconsistentPublicKeys",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InconsistentSignatures",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidArgument",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidCall",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidFee",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "version",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "expectedVersion",
                    "type": "uint256"
                }
            ],
            "name": "InvalidInitialization",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidPublicKeyCount",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidSignatureCount",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "providedValidatorCount",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "depositedValidatorCount",
                    "type": "uint256"
                }
            ],
            "name": "InvalidValidatorCountReport",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidWithdrawalCredentials",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidZeroAddress",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "NoAvailableValidatorKeys",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "NotEnoughFunds",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "NullTransfer",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "SliceOutOfBounds",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "SliceOverflow",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "caller",
                    "type": "address"
                }
            ],
            "name": "Unauthorized",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                }
            ],
            "name": "UnauthorizedTransfer",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "ZeroMintedShares",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "validatorCount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "validatorTotalBalance",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "bytes32",
                    "name": "roundId",
                    "type": "bytes32"
                }
            ],
            "name": "ConsensusLayerDataUpdate",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "bytes",
                    "name": "publicKey",
                    "type": "bytes"
                }
            ],
            "name": "FundedValidatorKey",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "version",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "bytes",
                    "name": "cdata",
                    "type": "bytes"
                }
            ],
            "name": "Initialize",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "PulledELFees",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_collector",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_oldTotalUnderlyingBalance",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_oldTotalSupply",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_newTotalUnderlyingBalance",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_newTotalSupply",
                    "type": "uint256"
                }
            ],
            "name": "RewardsEarned",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "SetAdmin",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "allowlist",
                    "type": "address"
                }
            ],
            "name": "SetAllowlist",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "collector",
                    "type": "address"
                }
            ],
            "name": "SetCollector",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "depositContract",
                    "type": "address"
                }
            ],
            "name": "SetDepositContractAddress",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "elFeeRecipient",
                    "type": "address"
                }
            ],
            "name": "SetELFeeRecipient",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "fee",
                    "type": "uint256"
                }
            ],
            "name": "SetGlobalFee",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "operatorRegistry",
                    "type": "address"
                }
            ],
            "name": "SetOperatorsRegistry",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "oracleAddress",
                    "type": "address"
                }
            ],
            "name": "SetOracle",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "pendingAdmin",
                    "type": "address"
                }
            ],
            "name": "SetPendingAdmin",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "bytes32",
                    "name": "withdrawalCredentials",
                    "type": "bytes32"
                }
            ],
            "name": "SetWithdrawalCredentials",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "depositor",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "recipient",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "UserDeposit",
            "type": "event"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "DEPOSIT_SIZE",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "PUBLIC_KEY_LENGTH",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "SIGNATURE_LENGTH",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "acceptAdmin",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_spender",
                    "type": "address"
                }
            ],
            "name": "allowance",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "balanceOfUnderlying",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "decimals",
            "outputs": [
                {
                    "internalType": "uint8",
                    "name": "",
                    "type": "uint8"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_subtractableValue",
                    "type": "uint256"
                }
            ],
            "name": "decreaseAllowance",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "deposit",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_recipient",
                    "type": "address"
                }
            ],
            "name": "depositAndTransfer",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_maxCount",
                    "type": "uint256"
                }
            ],
            "name": "depositToConsensusLayer",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getAdmin",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getAllowlist",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getBalanceToDeposit",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getCLValidatorCount",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getCLValidatorTotalBalance",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getCollector",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getDepositedValidatorCount",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getELFeeRecipient",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getGlobalFee",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOperatorsRegistry",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOracle",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPendingAdmin",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getWithdrawalCredentials",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_additionalValue",
                    "type": "uint256"
                }
            ],
            "name": "increaseAllowance",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_depositContractAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_elFeeRecipientAddress",
                    "type": "address"
                },
                {
                    "internalType": "bytes32",
                    "name": "_withdrawalCredentials",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "_oracleAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_systemAdministratorAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_allowlistAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_operatorRegistryAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_collectorAddress",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_globalFee",
                    "type": "uint256"
                }
            ],
            "name": "initRiverV1",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_newAdmin",
                    "type": "address"
                }
            ],
            "name": "proposeAdmin",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "sendELFees",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_newAllowlist",
                    "type": "address"
                }
            ],
            "name": "setAllowlist",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_newCollector",
                    "type": "address"
                }
            ],
            "name": "setCollector",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_validatorCount",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_validatorTotalBalance",
                    "type": "uint256"
                },
                {
                    "internalType": "bytes32",
                    "name": "_roundId",
                    "type": "bytes32"
                },
                {
                    "internalType": "uint256",
                    "name": "_maxIncrease",
                    "type": "uint256"
                }
            ],
            "name": "setConsensusLayerData",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_newELFeeRecipient",
                    "type": "address"
                }
            ],
            "name": "setELFeeRecipient",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "newFee",
                    "type": "uint256"
                }
            ],
            "name": "setGlobalFee",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_oracleAddress",
                    "type": "address"
                }
            ],
            "name": "setOracle",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_underlyingAssetAmount",
                    "type": "uint256"
                }
            ],
            "name": "sharesFromUnderlyingBalance",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalUnderlyingSupply",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "transfer",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_shares",
                    "type": "uint256"
                }
            ],
            "name": "underlyingBalanceFromShares",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_operator",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_allowance",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "AllowanceTooLow",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "BalanceTooLow",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "Denied",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "EmptyDeposit",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "ErrorOnDeposit",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InconsistentPublicKeys",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InconsistentSignatures",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidArgument",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidCall",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidEmptyString",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidFee",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "version",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "expectedVersion",
                    "type": "uint256"
                }
            ],
            "name": "InvalidInitialization",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidPublicKeyCount",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidSignatureCount",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "providedValidatorCount",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "depositedValidatorCount",
                    "type": "uint256"
                }
            ],
            "name": "InvalidValidatorCountReport",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidWithdrawalCredentials",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidZeroAddress",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "NoAvailableValidatorKeys",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "NotEnoughFunds",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "NullTransfer",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "SliceOutOfBounds",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "SliceOverflow",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "caller",
                    "type": "address"
                }
            ],
            "name": "Unauthorized",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                }
            ],
            "name": "UnauthorizedTransfer",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "ZeroMintedShares",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "validatorCount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "validatorTotalBalance",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "bytes32",
                    "name": "roundId",
                    "type": "bytes32"
                }
            ],
            "name": "ConsensusLayerDataUpdate",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "bytes",
                    "name": "publicKey",
                    "type": "bytes"
                }
            ],
            "name": "FundedValidatorKey",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "version",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "bytes",
                    "name": "cdata",
                    "type": "bytes"
                }
            ],
            "name": "Initialize",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "PulledCoverageFunds",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "PulledELFees",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_collector",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_oldTotalUnderlyingBalance",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_oldTotalSupply",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_newTotalUnderlyingBalance",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_newTotalSupply",
                    "type": "uint256"
                }
            ],
            "name": "RewardsEarned",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "SetAdmin",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "allowlist",
                    "type": "address"
                }
            ],
            "name": "SetAllowlist",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "collector",
                    "type": "address"
                }
            ],
            "name": "SetCollector",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "coverageFund",
                    "type": "address"
                }
            ],
            "name": "SetCoverageFund",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "depositContract",
                    "type": "address"
                }
            ],
            "name": "SetDepositContractAddress",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "elFeeRecipient",
                    "type": "address"
                }
            ],
            "name": "SetELFeeRecipient",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "fee",
                    "type": "uint256"
                }
            ],
            "name": "SetGlobalFee",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "string",
                    "name": "metadataURI",
                    "type": "string"
                }
            ],
            "name": "SetMetadataURI",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "operatorRegistry",
                    "type": "address"
                }
            ],
            "name": "SetOperatorsRegistry",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "oracleAddress",
                    "type": "address"
                }
            ],
            "name": "SetOracle",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "pendingAdmin",
                    "type": "address"
                }
            ],
            "name": "SetPendingAdmin",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "bytes32",
                    "name": "withdrawalCredentials",
                    "type": "bytes32"
                }
            ],
            "name": "SetWithdrawalCredentials",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "depositor",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "recipient",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "UserDeposit",
            "type": "event"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "DEPOSIT_SIZE",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "PUBLIC_KEY_LENGTH",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "SIGNATURE_LENGTH",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "acceptAdmin",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_spender",
                    "type": "address"
                }
            ],
            "name": "allowance",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "balanceOfUnderlying",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "decimals",
            "outputs": [
                {
                    "internalType": "uint8",
                    "name": "",
                    "type": "uint8"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_subtractableValue",
                    "type": "uint256"
                }
            ],
            "name": "decreaseAllowance",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "deposit",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_recipient",
                    "type": "address"
                }
            ],
            "name": "depositAndTransfer",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_maxCount",
                    "type": "uint256"
                }
            ],
            "name": "depositToConsensusLayer",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getAdmin",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getAllowlist",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getBalanceToDeposit",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getCLValidatorCount",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getCLValidatorTotalBalance",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getCollector",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getCoverageFund",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getDepositedValidatorCount",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getELFeeRecipient",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getGlobalFee",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getMetadataURI",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOperatorsRegistry",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOracle",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPendingAdmin",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getWithdrawalCredentials",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_additionalValue",
                    "type": "uint256"
                }
            ],
            "name": "increaseAllowance",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_depositContractAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_elFeeRecipientAddress",
                    "type": "address"
                },
                {
                    "internalType": "bytes32",
                    "name": "_withdrawalCredentials",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "_oracleAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_systemAdministratorAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_allowlistAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_operatorRegistryAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_collectorAddress",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_globalFee",
                    "type": "uint256"
                }
            ],
            "name": "initRiverV1",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_newAdmin",
                    "type": "address"
                }
            ],
            "name": "proposeAdmin",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "sendCoverageFunds",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "sendELFees",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_newAllowlist",
                    "type": "address"
                }
            ],
            "name": "setAllowlist",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_newCollector",
                    "type": "address"
                }
            ],
            "name": "setCollector",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_validatorCount",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_validatorTotalBalance",
                    "type": "uint256"
                },
                {
                    "internalType": "bytes32",
                    "name": "_roundId",
                    "type": "bytes32"
                },
                {
                    "internalType": "uint256",
                    "name": "_maxIncrease",
                    "type": "uint256"
                }
            ],
            "name": "setConsensusLayerData",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_newCoverageFund",
                    "type": "address"
                }
            ],
            "name": "setCoverageFund",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_newELFeeRecipient",
                    "type": "address"
                }
            ],
            "name": "setELFeeRecipient",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "newFee",
                    "type": "uint256"
                }
            ],
            "name": "setGlobalFee",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "string",
                    "name": "_metadataURI",
                    "type": "string"
                }
            ],
            "name": "setMetadataURI",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_oracleAddress",
                    "type": "address"
                }
            ],
            "name": "setOracle",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_underlyingAssetAmount",
                    "type": "uint256"
                }
            ],
            "name": "sharesFromUnderlyingBalance",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalUnderlyingSupply",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "transfer",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_shares",
                    "type": "uint256"
                }
            ],
            "name": "underlyingBalanceFromShares",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_logic",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "__admin",
                    "type": "address"
                },
                {
                    "internalType": "bytes",
                    "name": "_data",
                    "type": "bytes"
                }
            ],
            "stateMutability": "payable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "CallWhenPaused",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "previousAdmin",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "newAdmin",
                    "type": "address"
                }
            ],
            "name": "AdminChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "beacon",
                    "type": "address"
                }
            ],
            "name": "BeaconUpgraded",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "Paused",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "Unpaused",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "implementation",
                    "type": "address"
                }
            ],
            "name": "Upgraded",
            "type": "event"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "admin",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "admin_",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newAdmin",
                    "type": "address"
                }
            ],
            "name": "changeAdmin",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "implementation",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "implementation_",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "pause",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "paused",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "unpause",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newImplementation",
                    "type": "address"
                }
            ],
            "name": "upgradeTo",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newImplementation",
                    "type": "address"
                },
                {
                    "internalType": "bytes",
                    "name": "data",
                    "type": "bytes"
                }
            ],
            "name": "upgradeToAndCall",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0x76f4bf604130b9ebd76bb429509b87052bed7775c0d46e1f2fb9a2b7068c8ee7",
    "receipt": {
        "to": null,
        "from": "0x959FD7Ef9089B7142B6B908Dc3A8af7Aa8ff0FA1",
        "contractAddress": "0x3ecCAdA3e11c1Cc3e9B5a53176A67cc3ABDD3E46",
        "transactionIndex": 38,
        "gasUsed": "969068",
        "logsBloom": "0x
        "blockHash": "0x5104e802129716aaae75c70d20b1d5b66b09b33cdbcb47b1f45a323959d8c541",
        "transactionHash": "0x76f4bf604130b9ebd76bb429509b87052bed7775c0d46e1f2fb9a2b7068c8ee7",
        "logs": [
            {
                "transactionIndex": 38,
                "blockNumber": 7685807,
                "transactionHash": "0x76f4bf604130b9ebd76bb429509b87052bed7775c0d46e1f2fb9a2b7068c8ee7",
                "address": "0x3ecCAdA3e11c1Cc3e9B5a53176A67cc3ABDD3E46",
                "topics": [
                    "0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b",
                    "0x00000000000000000000000031a2297fc5715b59ec09941c2beca511a3fcb470"
                ],
                "data": "0x",
                "logIndex": 131,
                "blockHash": "0x5104e802129716aaae75c70d20b1d5b66b09b33cdbcb47b1f45a323959d8c541"
            },
            {
                "transactionIndex": 38,
                "blockNumber": 7685807,
                "transactionHash": "0x76f4bf604130b9ebd76bb429509b87052bed7775c0d46e1f2fb9a2b7068c8ee7",
                "address": "0x3ecCAdA3e11c1Cc3e9B5a53176A67cc3ABDD3E46",
                "topics": [
                    "0x5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a1",
                    "0x000000000000000000000000585cd8e3ac1258c35b22ce489590ef25eaffeeea"
                ],
                "data": "0x",
                "logIndex": 132,
                "blockHash": "0x5104e802129716aaae75c70d20b1d5b66b09b33cdbcb47b1f45a323959d8c541"
            },
            {
                "transactionIndex": 38,
                "blockNumber": 7685807,
                "transactionHash": "0x76f4bf604130b9ebd76bb429509b87052bed7775c0d46e1f2fb9a2b7068c8ee7",
                "address": "0x3ecCAdA3e11c1Cc3e9B5a53176A67cc3ABDD3E46",
                "topics": [
                    "0x0cc5437d7c9c1d9eab549acbb533eea3e9868e9443dd75309ed5820b33a3774e",
                    "0x000000000000000000000000892d14b50cc7a8278fa254a63b6c5b8b1a110ff1"
                ],
                "data": "0x",
                "logIndex": 133,
                "blockHash": "0x5104e802129716aaae75c70d20b1d5b66b09b33cdbcb47b1f45a323959d8c541"
            },
            {
                "transactionIndex": 38,
                "blockNumber": 7685807,
                "transactionHash": "0x76f4bf604130b9ebd76bb429509b87052bed7775c0d46e1f2fb9a2b7068c8ee7",
                "address": "0x3ecCAdA3e11c1Cc3e9B5a53176A67cc3ABDD3E46",
                "topics": [
                    "0xbd533e726baaf59b36f3914d950053f7e78f527057c97cd3f0043257fc0fc884"
                ],
                "data": "0x00000000000000000000000000000000000000000000000000000000000004e2",
                "logIndex": 134,
                "blockHash": "0x5104e802129716aaae75c70d20b1d5b66b09b33cdbcb47b1f45a323959d8c541"
            },
            {
                "transactionIndex": 38,
                "blockNumber": 7685807,
                "transactionHash": "0x76f4bf604130b9ebd76bb429509b87052bed7775c0d46e1f2fb9a2b7068c8ee7",
                "address": "0x3ecCAdA3e11c1Cc3e9B5a53176A67cc3ABDD3E46",
                "topics": [
                    "0x1da4c245099590dc40be61880c9b97792f3694d970acc1e67ac0e6cc90f3780d",
                    "0x0000000000000000000000005654f8dffe80ca9fa270540c44f230ceeb0ea3bb"
                ],
                "data": "0x",
                "logIndex": 135,
                "blockHash": "0x5104e802129716aaae75c70d20b1d5b66b09b33cdbcb47b1f45a323959d8c541"
            },
            {
                "transactionIndex": 38,
                "blockNumber": 7685807,
                "transactionHash": "0x76f4bf604130b9ebd76bb429509b87052bed7775c0d46e1f2fb9a2b7068c8ee7",
                "address": "0x3ecCAdA3e11c1Cc3e9B5a53176A67cc3ABDD3E46",
                "topics": [
                    "0x30f015a5d3c72c0a9414538199baa022323a483fa9e4ba2cd581596cf8ca0424",
                    "0x000000000000000000000000e7b74d98d46a8e0979b0342172a3a4890f852558"
                ],
                "data": "0x",
                "logIndex": 136,
                "blockHash": "0x5104e802129716aaae75c70d20b1d5b66b09b33cdbcb47b1f45a323959d8c541"
            },
            {
                "transactionIndex": 38,
                "blockNumber": 7685807,
                "transactionHash": "0x76f4bf604130b9ebd76bb429509b87052bed7775c0d46e1f2fb9a2b7068c8ee7",
                "address": "0x3ecCAdA3e11c1Cc3e9B5a53176A67cc3ABDD3E46",
                "topics": [
                    "0xffc0721ef0563a1b0a51a0dc92113025f33ca434ada9ee3eebff2f385d2a8f9a",
                    "0x000000000000000000000000f06bed337f29cb856b072dc8d57a2c22fb2ec2cb"
                ],
                "data": "0x",
                "logIndex": 137,
                "blockHash": "0x5104e802129716aaae75c70d20b1d5b66b09b33cdbcb47b1f45a323959d8c541"
            },
            {
                "transactionIndex": 38,
                "blockNumber": 7685807,
                "transactionHash": "0x76f4bf604130b9ebd76bb429509b87052bed7775c0d46e1f2fb9a2b7068c8ee7",
                "address": "0x3ecCAdA3e11c1Cc3e9B5a53176A67cc3ABDD3E46",
                "topics": [
                    "0x00043cf7635f276413ae358250286a479a631abd9d74d57d4aa0bb87ebc7d117",
                    "0x000000000000000000000000ff50ed3d0ec03ac01d4c79aad74928bff48a7b2b"
                ],
                "data": "0x",
                "logIndex": 138,
                "blockHash": "0x5104e802129716aaae75c70d20b1d5b66b09b33cdbcb47b1f45a323959d8c541"
            },
            {
                "transactionIndex": 38,
                "blockNumber": 7685807,
                "transactionHash": "0x76f4bf604130b9ebd76bb429509b87052bed7775c0d46e1f2fb9a2b7068c8ee7",
                "address": "0x3ecCAdA3e11c1Cc3e9B5a53176A67cc3ABDD3E46",
                "topics": [
                    "0x4c86ba184ea1a1558f84835ca34f6d67e222e8ee5cc4f324b8861dda4cf1740c"
                ],
                "data": "0x01000000000000000000000040a369dd92f043a6782f4d071f9d2ba22b4ea14d",
                "logIndex": 139,
                "blockHash": "0x5104e802129716aaae75c70d20b1d5b66b09b33cdbcb47b1f45a323959d8c541"
            },
            {
                "transactionIndex": 38,
                "blockNumber": 7685807,
                "transactionHash": "0x76f4bf604130b9ebd76bb429509b87052bed7775c0d46e1f2fb9a2b7068c8ee7",
                "address": "0x3ecCAdA3e11c1Cc3e9B5a53176A67cc3ABDD3E46",
                "topics": [
                    "0xd3b5d1e0ffaeff528910f3663f0adace7694ab8241d58e17a91351ced2e08031",
                    "0x000000000000000000000000088050c58ae0f447d52674ac58e20dd2fb68e2da"
                ],
                "data": "0x",
                "logIndex": 140,
                "blockHash": "0x5104e802129716aaae75c70d20b1d5b66b09b33cdbcb47b1f45a323959d8c541"
            },
            {
                "transactionIndex": 38,
                "blockNumber": 7685807,
                "transactionHash": "0x76f4bf604130b9ebd76bb429509b87052bed7775c0d46e1f2fb9a2b7068c8ee7",
                "address": "0x3ecCAdA3e11c1Cc3e9B5a53176A67cc3ABDD3E46",
                "topics": [
                    "0x1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a71"
                ],
                "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000124281a3122000000000000000000000000ff50ed3d0ec03ac01d4c79aad74928bff48a7b2b0000000000000000000000005654f8dffe80ca9fa270540c44f230ceeb0ea3bb01000000000000000000000040a369dd92f043a6782f4d071f9d2ba22b4ea14d000000000000000000000000088050c58ae0f447d52674ac58e20dd2fb68e2da000000000000000000000000585cd8e3ac1258c35b22ce489590ef25eaffeeea000000000000000000000000e7b74d98d46a8e0979b0342172a3a4890f852558000000000000000000000000f06bed337f29cb856b072dc8d57a2c22fb2ec2cb000000000000000000000000892d14b50cc7a8278fa254a63b6c5b8b1a110ff100000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000",
                "logIndex": 141,
                "blockHash": "0x5104e802129716aaae75c70d20b1d5b66b09b33cdbcb47b1f45a323959d8c541"
            },
            {
                "transactionIndex": 38,
                "blockNumber": 7685807,
                "transactionHash": "0x76f4bf604130b9ebd76bb429509b87052bed7775c0d46e1f2fb9a2b7068c8ee7",
                "address": "0x3ecCAdA3e11c1Cc3e9B5a53176A67cc3ABDD3E46",
                "topics": [
                    "0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f"
                ],
                "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067bc791a7ea5a98ddcecbbf6580ae1bb310f5d9b",
                "logIndex": 142,
                "blockHash": "0x5104e802129716aaae75c70d20b1d5b66b09b33cdbcb47b1f45a323959d8c541"
            }
        ],
        "blockNumber": 7685807,
        "cumulativeGasUsed": "20209756",
        "status": 1,
        "byzantium": true
    },
    "args": [
        "0x31a2297fc5715b59EC09941c2beca511a3fCB470",
        "0x67bc791A7EA5A98DDcEcBbF6580aE1BB310F5d9B",
        "0x281a3122000000000000000000000000ff50ed3d0ec03ac01d4c79aad74928bff48a7b2b0000000000000000000000005654f8dffe80ca9fa270540c44f230ceeb0ea3bb01000000000000000000000040a369dd92f043a6782f4d071f9d2ba22b4ea14d000000000000000000000000088050c58ae0f447d52674ac58e20dd2fb68e2da000000000000000000000000585cd8e3ac1258c35b22ce489590ef25eaffeeea000000000000000000000000e7b74d98d46a8e0979b0342172a3a4890f852558000000000000000000000000f06bed337f29cb856b072dc8d57a2c22fb2ec2cb000000000000000000000000892d14b50cc7a8278fa254a63b6c5b8b1a110ff100000000000000000000000000000000000000000000000000000000000004e2"
    ],
    "numDeployments": 1,
    "solcInputHash": "803b991b13fc3eb82937205601e77786",
    "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallWhenPaused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kiln\",\"events\":{\"Paused(address)\":{\"params\":{\"admin\":\"The admin at the time of the pause event\"}},\"Unpaused(address)\":{\"params\":{\"admin\":\"The admin at the time of the unpause event\"}}},\"kind\":\"dev\",\"methods\":{\"admin()\":{\"details\":\"Returns the current admin. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\"},\"changeAdmin(address)\":{\"details\":\"Changes the admin of the proxy. Emits an {AdminChanged} event. NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\"},\"constructor\":{\"details\":\"The Admin of the proxy should not be the same as theadmin on the implementation logics. The admin here isthe only account allowed to perform calls on the proxy(the calls are never delegated to the implementation)\",\"params\":{\"__admin\":\"Address of the admin in charge of the proxy\",\"_data\":\"Calldata for an atomic initialization\",\"_logic\":\"Address of the implementation\"}},\"implementation()\":{\"details\":\"Returns the current implementation. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\"},\"pause()\":{\"details\":\"Pauses system\"},\"paused()\":{\"details\":\"Retrieves Paused state\",\"returns\":{\"_0\":\"Paused state\"}},\"unpause()\":{\"details\":\"Unpauses system\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy. NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy, and then call a function from the new implementation as specified by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract. NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\"}},\"title\":\"TUPProxy (Transparent Upgradeable Pausable Proxy)\",\"version\":1},\"userdoc\":{\"errors\":{\"CallWhenPaused()\":[{\"notice\":\"A call happened while the system was paused\"}]},\"events\":{\"Paused(address)\":{\"notice\":\"The system is now paused\"},\"Unpaused(address)\":{\"notice\":\"The system is now unpaused\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract extends the Transparent Upgradeable proxy and adds a system wide pause feature.         When the system is paused, the fallback will fail no matter what calls are made.         Address Zero is allowed to perform calls even if paused to allow view calls made         from RPC providers to properly work.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/TUPProxy.sol\":\"TUPProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/TUPProxy.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\n/// @title TUPProxy (Transparent Upgradeable Pausable Proxy)\\n/// @author Kiln\\n/// @notice This contract extends the Transparent Upgradeable proxy and adds a system wide pause feature.\\n///         When the system is paused, the fallback will fail no matter what calls are made.\\n///         Address Zero is allowed to perform calls even if paused to allow view calls made\\n///         from RPC providers to properly work.\\ncontract TUPProxy is TransparentUpgradeableProxy {\\n    /// @notice Storage slot of the pause status value\\n    bytes32 private constant _PAUSE_SLOT = bytes32(uint256(keccak256(\\\"river.tupproxy.pause\\\")) - 1);\\n\\n    /// @notice A call happened while the system was paused\\n    error CallWhenPaused();\\n\\n    /// @notice The system is now paused\\n    /// @param admin The admin at the time of the pause event\\n    event Paused(address admin);\\n\\n    /// @notice The system is now unpaused\\n    /// @param admin The admin at the time of the unpause event\\n    event Unpaused(address admin);\\n\\n    /// @dev The Admin of the proxy should not be the same as the\\n    /// @dev admin on the implementation logics. The admin here is\\n    /// @dev the only account allowed to perform calls on the proxy\\n    /// @dev (the calls are never delegated to the implementation)\\n    /// @param _logic Address of the implementation\\n    /// @param __admin Address of the admin in charge of the proxy\\n    /// @param _data Calldata for an atomic initialization\\n    constructor(address _logic, address __admin, bytes memory _data)\\n        payable\\n        TransparentUpgradeableProxy(_logic, __admin, _data)\\n    {}\\n\\n    /// @dev Retrieves Paused state\\n    /// @return Paused state\\n    function paused() external ifAdmin returns (bool) {\\n        return StorageSlot.getBooleanSlot(_PAUSE_SLOT).value;\\n    }\\n\\n    /// @dev Pauses system\\n    function pause() external ifAdmin {\\n        StorageSlot.getBooleanSlot(_PAUSE_SLOT).value = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /// @dev Unpauses system\\n    function unpause() external ifAdmin {\\n        StorageSlot.getBooleanSlot(_PAUSE_SLOT).value = false;\\n        emit Unpaused(msg.sender);\\n    }\\n\\n    /// @dev Overrides the fallback method to check if system is not paused before\\n    /// @dev Address Zero is allowed to perform calls even if system is paused. This allows\\n    /// view functions to be called when the system is paused as rpc providers can easily\\n    /// set the sender address to zero.\\n    function _beforeFallback() internal override {\\n        if (!StorageSlot.getBooleanSlot(_PAUSE_SLOT).value || msg.sender == address(0)) {\\n            super._beforeFallback();\\n        } else {\\n            revert CallWhenPaused();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x35bd93df3a77dae6301c8c0011d32f89efe3715fa2bdef7f2ad364949b7da6cb\",\"license\":\"BUSL-1.1\"},\"openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x608060405234801561001057600080fd5b50613616806100206000396000f3fe6080604052600436106102a25760003560e01c80635639671511610165578063a457c2d7116100cc578063d046815611610085578063d046815614610787578063d0e30db01461079c578063d4970524146107a4578063dd62ed3e146107ac578063efd60347146107cc578063f79c3f02146107d4578063fb5b82d0146107f4576102b2565b8063a457c2d7146106ea578063a9059cbb1461070a578063ac232bde1461072a578063bf15af561461073d578063c5eff3d014610752578063cc48cd3114610767576102b2565b80637adbf9731161011e5780637adbf97314610648578063833b1fce1461066857806386a92af71461067d57806387f2adfb1461069257806395d89b41146106a75780639b498e26146106d5576102b2565b8063563967151461059e57806358bf3c7f146105b35780636e9960c3146105d357806370a08231146105e8578063750521f514610608578063799a195414610628576102b2565b80631bcbfaba1161020957806336bf3325116101c257806336bf332514610502578063395093511461051f5780633af9e6691461053f57806346425ef01461055f5780635022820114610574578063540bc5ea14610589576102b2565b80631bcbfaba1461045c57806323b872dd14610471578063281a312214610491578063291206f6146104b15780632cb562e1146104d1578063313ce567146104e6576102b2565b80631311cf8d1161025b5780631311cf8d146103b057806313d86aed146103d0578063143a08d4146103f0578063147bf6c4146104055780631546962b1461042557806318160ddd14610447576102b2565b8063020f086e146102cb57806304843a17146102eb57806306fdde0314610313578063095ea7b3146103565780630e18b68114610386578063107d7fa01461039b576102b2565b366102b2576102b033610814565b005b60405163574b16a760e11b815260040160405180910390fd5b3480156102d757600080fd5b506102b06102e6366004612f96565b61089b565b3480156102f757600080fd5b5061030061091f565b6040519081526020015b60405180910390f35b34801561031f57600080fd5b50604080518082019091526011815270098d2e2ead2c840a6e8c2d6cac8408aa89607b1b60208201525b60405161030a9190613009565b34801561036257600080fd5b5061037661037136600461301c565b61092e565b604051901515815260200161030a565b34801561039257600080fd5b506102b0610944565b3480156103a757600080fd5b5061030061099b565b3480156103bc57600080fd5b506102b06103cb366004612f96565b6109a5565b3480156103dc57600080fd5b506102b06103eb366004613046565b610a20565b3480156103fc57600080fd5b50610300610bd9565b34801561041157600080fd5b506102b0610420366004612f96565b610be3565b34801561043157600080fd5b5061043a610c2a565b60405161030a919061305f565b34801561045357600080fd5b50610300610c34565b34801561046857600080fd5b50610300610c3e565b34801561047d57600080fd5b5061037661048c366004613073565b610c48565b34801561049d57600080fd5b506102b06104ac3660046130af565b610cfb565b3480156104bd57600080fd5b506102b06104cc366004613046565b610edd565b3480156104dd57600080fd5b5061043a610f58565b3480156104f257600080fd5b506040516012815260200161030a565b34801561050e57600080fd5b506103006801bc16d674ec80000081565b34801561052b57600080fd5b5061037661053a36600461301c565b610f62565b34801561054b57600080fd5b5061030061055a366004612f96565b610f83565b34801561056b57600080fd5b50610300610f9c565b34801561058057600080fd5b5061043a610fa6565b34801561059557600080fd5b50610300606081565b3480156105aa57600080fd5b50610300610fb0565b3480156105bf57600080fd5b506102b06105ce366004612f96565b610fba565b3480156105df57600080fd5b5061043a611035565b3480156105f457600080fd5b50610300610603366004612f96565b61103f565b34801561061457600080fd5b506102b06106233660046131b8565b61104a565b34801561063457600080fd5b50610300610643366004613046565b6110c6565b34801561065457600080fd5b506102b0610663366004612f96565b6110d1565b34801561067457600080fd5b5061043a61114c565b34801561068957600080fd5b50610349611156565b34801561069e57600080fd5b50610300611160565b3480156106b357600080fd5b50604080518082019091526005815264098e68aa8960db1b6020820152610349565b3480156106e157600080fd5b5061043a61116a565b3480156106f657600080fd5b5061037661070536600461301c565b611174565b34801561071657600080fd5b5061037661072536600461301c565b611190565b6102b0610738366004612f96565b61122f565b34801561074957600080fd5b50610300603081565b34801561075e57600080fd5b5061043a611241565b34801561077357600080fd5b506102b0610782366004613238565b61124b565b34801561079357600080fd5b5061043a61140b565b6102b0611415565b6102b061141e565b3480156107b857600080fd5b506103006107c736600461326a565b611459565b6102b061146c565b3480156107e057600080fd5b506103006107ef366004613046565b611474565b34801561080057600080fd5b506102b061080f366004612f96565b61147f565b34610832576040516395b66fe960e01b815260040160405180910390fd5b61084d3461083e6114fa565b61084891906132b3565b61152e565b610858338234611561565b6040513481526001600160a01b0382169033907f3bc57f469ad6d10d7723ea226cd22bd2b9e527def2b529f6ab44645a166895829060200160405180910390a350565b6108a36116fb565b6001600160a01b0316336001600160a01b0316146108df573360405163472511eb60e11b81526004016108d6919061305f565b60405180910390fd5b6108e881611705565b6040516001600160a01b038216907f67b26a33f305cc027b2d45b2f6f418793afcd3e22f7376afa7be068ce18604e890600090a250565b60006109296114fa565b905090565b600061093b33848461173c565b50600192915050565b61094c6117ab565b6001600160a01b0316336001600160a01b03161461097f573360405163472511eb60e11b81526004016108d6919061305f565b61098f61098a6117ab565b6117b5565b61099960006117fe565b565b600061092961183e565b6109ad6116fb565b6001600160a01b0316336001600160a01b0316146109e0573360405163472511eb60e11b81526004016108d6919061305f565b6109e98161186e565b6040516001600160a01b038216907f1da4c245099590dc40be61880c9b97792f3694d970acc1e67ac0e6cc90f3780d90600090a250565b610a286118a5565b6001600160a01b0316336001600160a01b031614610a5b573360405163472511eb60e11b81526004016108d6919061305f565b6000610a656114fa565b90506000610a85610a7f6801bc16d674ec800000846132cb565b846118af565b905080610aa557604051631036b5ad60e31b815260040160405180910390fd5b600080610ab1836118c4565b8151919350915080610ad65760405163200149ad60e21b815260040160405180910390fd5b83811115610af757604051635993bd5760e01b815260040160405180910390fd5b8151818114610b19576040516322e5ce4360e21b815260040160405180910390fd5b6000610b2361194c565b905080610b4357604051639be7315960e01b815260040160405180910390fd5b60005b83811015610b9357610b8b868281518110610b6357610b636132ed565b6020026020010151868381518110610b7d57610b7d6132ed565b60200260200101518461197c565b600101610b46565b50610bb4610baa846801bc16d674ec800000613303565b6108489089613322565b610bcf83610bc0611e04565b610bca91906132b3565b611e34565b5050505050505050565b6000610929611e62565b610beb6116fb565b6001600160a01b0316336001600160a01b031614610c1e573360405163472511eb60e11b81526004016108d6919061305f565b610c27816117fe565b50565b6000610929611edc565b6000610929611f0c565b6000610929611f16565b60008383610c568282611f46565b8380610c75576040516336b216db60e21b815260040160405180910390fd5b868580610c8183612072565b1015610ca0576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b038816610cd957604051637617407560e11b81526001600160a01b038a166004820152600060248201526044016108d6565b610ce3898861207d565b610cee8989896120e3565b9998505050505050505050565b6000610d05612171565b8114610d365780610d14612171565b604051631cfd276760e31b8152600481019290925260248201526044016108d6565b610d49610d448260016132b3565b6121a1565b610d52866117b5565b610d5b836121cf565b6040516001600160a01b038416907f0cc5437d7c9c1d9eab549acbb533eea3e9868e9443dd75309ed5820b33a3774e90600090a2610d9882612206565b6040518281527fbd533e726baaf59b36f3914d950053f7e78f527057c97cd3f0043257fc0fc8849060200160405180910390a1610dd48961186e565b6040516001600160a01b038a16907f1da4c245099590dc40be61880c9b97792f3694d970acc1e67ac0e6cc90f3780d90600090a2610e118561223d565b6040516001600160a01b038616907f30f015a5d3c72c0a9414538199baa022323a483fa9e4ba2cd581596cf8ca042490600090a2610e4e84612274565b6040516001600160a01b038516907fffc0721ef0563a1b0a51a0dc92113025f33ca434ada9ee3eebff2f385d2a8f9a90600090a2610e8c8a896122ab565b610e958761110c565b7f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610ec993929190613339565b60405180910390a150505050505050505050565b610ee56116fb565b6001600160a01b0316336001600160a01b031614610f18573360405163472511eb60e11b81526004016108d6919061305f565b610f2181612206565b6040518181527fbd533e726baaf59b36f3914d950053f7e78f527057c97cd3f0043257fc0fc884906020015b60405180910390a150565b6000610929612327565b600061093b338484610f743388612357565b610f7e91906132b3565b61173c565b6000610f96610f91836123af565b6123fd565b92915050565b6000610929612435565b6000610929612465565b600061092961194c565b610fc26116fb565b6001600160a01b0316336001600160a01b031614610ff5573360405163472511eb60e11b81526004016108d6919061305f565b610ffe8161223d565b6040516001600160a01b038216907f30f015a5d3c72c0a9414538199baa022323a483fa9e4ba2cd581596cf8ca042490600090a250565b60006109296116fb565b6000610f9682612072565b6110526116fb565b6001600160a01b0316336001600160a01b031614611085573360405163472511eb60e11b81526004016108d6919061305f565b61108e81612495565b611097816124b4565b7f8d2df192dd17edf92a7964b78aa322f3d717b2ab9de00651bee32bbc4c5da63a81604051610f4d9190613009565b6000610f96826124fe565b6110d96118a5565b6001600160a01b0316336001600160a01b03161461110c573360405163472511eb60e11b81526004016108d6919061305f565b6111158161252b565b6040516001600160a01b038216907fd3b5d1e0ffaeff528910f3663f0adace7694ab8241d58e17a91351ced2e0803190600090a250565b6000610929612562565b6060610929612592565b6000610929611e04565b6000610929612658565b600061093b3384846111863388612357565b610f7e9190613322565b6000338361119e8282611f46565b83806111bd576040516336b216db60e21b815260040160405180910390fd5b3385806111c983612072565b10156111e8576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b03881661121857604051637617407560e11b8152336004820152600060248201526044016108d6565b6112233389896120e3565b98975050505050505050565b61123881612688565b610c2781610814565b60006109296126af565b611253612562565b6001600160a01b0316336001600160a01b031614611286573360405163472511eb60e11b81526004016108d6919061305f565b61128e611e04565b8411156112c0578361129e611e04565b6040516376179ac560e01b8152600481019290925260248201526044016108d6565b60006112ca61183e565b6112d49086613322565b905060006112eb826801bc16d674ec800000613303565b6112f3612435565b6112fd91906132b3565b9050611308856126df565b6113118661270d565b61131a8461273b565b60008561132783866132b3565b111561134d5761134a8661133b84876132b3565b6113459190613322565b612769565b90505b858161135984876132b3565b6113639190613322565b111561139357611391868261137885886132b3565b6113829190613322565b61138c9190613322565b612832565b505b61139d81876132b3565b8210156113c1576113c1826113b283896132b3565b6113bc9190613322565b612904565b60408051888152602081018890529081018690527f25d7358447891786a139ae7149548f3232a8c95f2ea6065c69c5bd7c39cd386c9060600160405180910390a150505050505050565b60006109296117ab565b61099933610814565b611426611edc565b6001600160a01b0316336001600160a01b031614610999573360405163472511eb60e11b81526004016108d6919061305f565b60006114658383612357565b9392505050565b611426612327565b6000610f96826123fd565b6114876116fb565b6001600160a01b0316336001600160a01b0316146114ba573360405163472511eb60e11b81526004016108d6919061305f565b6114c3816121cf565b6040516001600160a01b038216907f0cc5437d7c9c1d9eab549acbb533eea3e9868e9443dd75309ed5820b33a3774e90600090a250565b600061092961152a60017f2b6136e423ab70d76431e2a635e877e16ea2dd9a895e054ad7f35f89d6c7b711613322565b5490565b610c2761155c60017f2b6136e423ab70d76431e2a635e877e16ea2dd9a895e054ad7f35f89d6c7b711613322565b829055565b600061156d8483612a36565b905060006115796126af565b9050836001600160a01b0316856001600160a01b031614156115fa57604051632d20488160e11b81526001600160a01b03868116600483015260016024830152821690635a4091029060440160006040518083038186803b1580156115dd57600080fd5b505afa1580156115f1573d6000803e3d6000fd5b505050506116f4565b604051632d20488160e11b81526001600160a01b03868116600483015260016024830152821690635a4091029060440160006040518083038186803b15801561164257600080fd5b505afa158015611656573d6000803e3d6000fd5b505060405163e838dfbb60e01b81526001600160a01b038416925063e838dfbb915061168690879060040161305f565b602060405180830381865afa1580156116a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c7919061336f565b156116e7578360405163e7d05e2760e01b81526004016108d6919061305f565b6116f28585846120e3565b505b5050505050565b6000610929612a95565b61170e81612688565b610c2761155c60017ff4271262f3552a4108cde54dc75061de8de495709221d793b126e448522d6a80613322565b61174583612688565b61174e82612688565b611759838383612ac5565b816001600160a01b0316836001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161179e91815260200190565b60405180910390a3505050565b6000610929612b1c565b6117be81612688565b6117c781612b4c565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b61180781612b55565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b600061092961152a60017f0f1e7733641e4d843128fea0d2ec90d3d06a40b0fe244ff603d8c1aa200dc0f9613322565b61187781612688565b610c2761155c60017f8e9e2a1d30fed357d8a000c1131fc77ed65d2052918caf1ccc6eb1e7af3d13b6613322565b6000610929611035565b60008183116118be5782611465565b50919050565b6060806118cf612658565b6001600160a01b031663a1947323846040518263ffffffff1660e01b81526004016118fc91815260200190565b6000604051808303816000875af115801561191b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119439190810190613460565b91509150915091565b600061092961152a60017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42613322565b603083511461199e5760405163050cb55360e41b815260040160405180910390fd5b60608251146119c05760405163408ebd3960e01b815260040160405180910390fd5b6801bc16d674ec80000060006119da633b9aca00836132cb565b90506000600286600060801b6040516020016119f79291906134c4565b60408051601f1981840301815290829052611a11916134f3565b602060405180830381855afa158015611a2e573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611a51919061350f565b90506000600280611a658860006040612b5e565b604051611a7291906134f3565b602060405180830381855afa158015611a8f573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611ab2919061350f565b6002611aca896040611ac5816060613322565b612b5e565b604051611add9190600090602001613528565b60408051601f1981840301815290829052611af7916134f3565b602060405180830381855afa158015611b14573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611b37919061350f565b60408051602081019390935282015260600160408051601f1981840301815290829052611b63916134f3565b602060405180830381855afa158015611b80573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611ba3919061350f565b905060006002808488604051602001611bc6929190918252602082015260400190565b60408051601f1981840301815290829052611be0916134f3565b602060405180830381855afa158015611bfd573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611c20919061350f565b6002611c2b87612c21565b604080516020810192909252810186905260600160408051601f1981840301815290829052611c59916134f3565b602060405180830381855afa158015611c76573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611c99919061350f565b60408051602081019390935282015260600160408051601f1981840301815290829052611cc5916134f3565b602060405180830381855afa158015611ce2573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611d05919061350f565b90506000611d138647613322565b9050611d1d612c8e565b6001600160a01b03166322895118878b8a604051602001611d4091815260200190565b6040516020818303038152906040528c876040518663ffffffff1660e01b8152600401611d70949392919061354a565b6000604051808303818588803b158015611d8957600080fd5b505af1158015611d9d573d6000803e3d6000fd5b5050505050804714611dc257604051638051a6bb60e01b815260040160405180910390fd5b7f11553d182c6d24df901ccbb837d640c1ee9994876a88dccc8ddfd7ebab9b6ce189604051611df19190613009565b60405180910390a1505050505050505050565b600061092961152a60017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8613322565b610c2761155c60017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8613322565b600080611e6d61183e565b90506000611e79611e04565b905080821015611ecc576801bc16d674ec800000611e978383613322565b611ea19190613303565b611ea96114fa565b611eb1612435565b611ebb91906132b3565b611ec591906132b3565b9250505090565b611ed46114fa565b611ebb612435565b600061092961152a60017ff4271262f3552a4108cde54dc75061de8de495709221d793b126e448522d6a80613322565b6000610929612cbe565b600061092961152a60017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37613322565b6000611f506126af565b60405163e838dfbb60e01b81529091506001600160a01b0382169063e838dfbb90611f7f90869060040161305f565b602060405180830381865afa158015611f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc0919061336f565b15611fe0578260405163e7d05e2760e01b81526004016108d6919061305f565b60405163e838dfbb60e01b81526001600160a01b0382169063e838dfbb9061200c90859060040161305f565b602060405180830381865afa158015612029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204d919061336f565b1561206d578160405163e7d05e2760e01b81526004016108d6919061305f565b505050565b6000610f96826123af565b60006120898333612357565b9050818110156120cb57604051637b936de360e01b81526001600160a01b038416600482015233602482015260448101829052606481018390526084016108d6565b600019811461206d5761206d8333610f7e8585613322565b600061210284836120f3876123af565b6120fd9190613322565b612cee565b61211a8383612110866123af565b6120fd91906132b3565b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161215f91815260200190565b60405180910390a35060019392505050565b600061092961152a60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd613322565b610c2761155c60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd613322565b6121d881612688565b610c2761155c60017f082b6d18de7b10e438e6b1002141db737519cb4ceed679bc815e3aac00cd2227613322565b61220f81612d3a565b610c2761155c60017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37613322565b61224681612688565b610c2761155c60017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780613322565b61227d81612688565b610c2761155c60017f3f075dea7ef99b1e5db245018e5e4ed8d2a0d93953f5932b2176bef59bd69061613322565b6122b482612d5d565b6040516001600160a01b038316907e043cf7635f276413ae358250286a479a631abd9d74d57d4aa0bb87ebc7d11790600090a26122f081612d94565b6040518181527f4c86ba184ea1a1558f84835ca34f6d67e222e8ee5cc4f324b8861dda4cf1740c9060200160405180910390a15050565b600061092961152a60017f8e9e2a1d30fed357d8a000c1131fc77ed65d2052918caf1ccc6eb1e7af3d13b6613322565b60008061238560017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847613322565b6001600160a01b039485166000908152602091825260408082209590961681529390525050205490565b6000806123dd60017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838613322565b6001600160a01b0390931660009081526020939093525050604090205490565b600080612408612cbe565b9050806124185750600092915050565b80612421611e62565b61242b9085613303565b61146591906132cb565b600061092961152a60017ffedfd2c285a57fb23bf45a3fe9ac02d36a76ebb72801b1c8aaf553d74e9d4653613322565b600061092961152a60017f082b6d18de7b10e438e6b1002141db737519cb4ceed679bc815e3aac00cd2227613322565b8051610c2757604051638d46fe0560e01b815260040160405180910390fd5b60006124e160017fb63f3482ec84cb93d74a71645ad2e9e896fa02723e42170b4aad20a4bed6cdd6613322565b825190915081906124f89082906020860190612ee1565b50505050565b600080612509612cbe565b9050806125195750600092915050565b612521611e62565b61242b8285613303565b61253481612688565b610c2761155c60017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb613322565b600061092961152a60017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb613322565b606060006125c160017fb63f3482ec84cb93d74a71645ad2e9e896fa02723e42170b4aad20a4bed6cdd6613322565b8054909150819081906125d390613595565b80601f01602080910402602001604051908101604052809291908181526020018280546125ff90613595565b801561264c5780601f106126215761010080835404028352916020019161264c565b820191906000526020600020905b81548152906001019060200180831161262f57829003601f168201915b50505050509250505090565b600061092961152a60017f3f075dea7ef99b1e5db245018e5e4ed8d2a0d93953f5932b2176bef59bd69061613322565b6001600160a01b038116610c275760405163f6b2911f60e01b815260040160405180910390fd5b600061092961152a60017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780613322565b610c2761155c60017ffedfd2c285a57fb23bf45a3fe9ac02d36a76ebb72801b1c8aaf553d74e9d4653613322565b610c2761155c60017f0f1e7733641e4d843128fea0d2ec90d3d06a40b0fe244ff603d8c1aa200dc0f9613322565b610c2761155c60017fd7f2d45e512a86049f7a113657b39731b6b558609584243063a52cd31a8eb529613322565b600080612774612327565b60405163c8a6dfd360e01b81526004810185905290915047906001600160a01b0383169063c8a6dfd390602401600060405180830381600087803b1580156127bb57600080fd5b505af11580156127cf573d6000803e3d6000fd5b50505050600081476127e19190613322565b9050801561282a576127f58161083e6114fa565b6040518181527fda841d3042d792e2509a333b9dcbd4b3dd9b9047d382011f8788fab90ca7e3c7906020015b60405180910390a15b949350505050565b60008061283d611edc565b90506001600160a01b0381166128565750600092915050565b604051638ede6b6b60e01b81526004810184905247906001600160a01b03831690638ede6b6b90602401600060405180830381600087803b15801561289a57600080fd5b505af11580156128ae573d6000803e3d6000fd5b50505050600081476128c09190613322565b9050801561282a576128d48161083e6114fa565b6040518181527fd500b67e5bd8019c0af744cadeec120d1b5e3d3a3a011f18cf182aa4c97947b690602001612821565b600061290e611f0c565b90508061292e57604051630d35acd760e21b815260040160405180910390fd5b6000612938611e62565b90506000612944611f16565b90506000816129538587613303565b61295d9190613303565b9050600061296b8387613303565b61297761271086613303565b6129819190613322565b90506000811561299a5761299582846132cb565b61299d565b60005b90508015612a2d5760006129af612465565b90506129bb8183612de0565b60006129c5611f0c565b905060006129d38a89613322565b60408051828152602081018c90529081018a9052606081018490529091506001600160a01b038416907f3d1669e813a9845c288f0e1f642a4343a451103b87886d12de37e63b39bbd9429060800160405180910390a25050505b50505050505050565b60008082612a42611e62565b612a4c9190613322565b905080612a6557829150612a608484612de0565b612a8e565b80612a6e611f0c565b612a789085613303565b612a8291906132cb565b9150612a8e8483612de0565b5092915050565b600061092961152a60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113613322565b6000612af260017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847613322565b6001600160a01b039485166000908152602091825260408082209590961681529390525091902055565b600061092961152a60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281613322565b610c2781612e4e565b610c2781612e85565b60608182601f011015612b84576040516323d5783d60e11b815260040160405180910390fd5b612b8e82846132b3565b84511015612baf57604051633b99b53d60e01b815260040160405180910390fd5b606082158015612bce5760405191506000825260208201604052612c18565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612c07578051835260209283019201612bef565b5050858452601f01601f1916604052505b50949350505050565b603881901c60ff908116603083901c8216602884901c8316602085901c8416601886901c8516601087901c8616600888811c9790971688881b61ff001617871b17861b17851b17841b17831b1790911b17604082901c8015612c8557612c856135ca565b5060c01b919050565b600061092961152a60017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260613322565b600061092961152a60017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b613322565b6000612d1b60017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838613322565b6001600160a01b03909316600090815260209390935250604090912055565b612710811115610c27576040516358d620b360e01b815260040160405180910390fd5b612d6681612688565b610c2761155c60017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260613322565b80612db25760405163a9cb9e0d60e01b815260040160405180910390fd5b610c2761155c60017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42613322565b612dfb81612dec612cbe565b612df691906132b3565b612eb3565b612e098282612110856123af565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b612e5781612688565b610c2761155c60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113613322565b610c2761155c60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281613322565b610c2761155c60017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b613322565b828054612eed90613595565b90600052602060002090601f016020900481019282612f0f5760008555612f55565b82601f10612f2857805160ff1916838001178555612f55565b82800160010185558215612f55579182015b82811115612f55578251825591602001919060010190612f3a565b50612f61929150612f65565b5090565b5b80821115612f615760008155600101612f66565b80356001600160a01b0381168114612f9157600080fd5b919050565b600060208284031215612fa857600080fd5b61146582612f7a565b60005b83811015612fcc578181015183820152602001612fb4565b838111156124f85750506000910152565b60008151808452612ff5816020860160208601612fb1565b601f01601f19169290920160200192915050565b6020815260006114656020830184612fdd565b6000806040838503121561302f57600080fd5b61303883612f7a565b946020939093013593505050565b60006020828403121561305857600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60008060006060848603121561308857600080fd5b61309184612f7a565b925061309f60208501612f7a565b9150604084013590509250925092565b60008060008060008060008060006101208a8c0312156130ce57600080fd5b6130d78a612f7a565b98506130e560208b01612f7a565b975060408a013596506130fa60608b01612f7a565b955061310860808b01612f7a565b945061311660a08b01612f7a565b935061312460c08b01612f7a565b925061313260e08b01612f7a565b91506101008a013590509295985092959850929598565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561318857613188613149565b604052919050565b600067ffffffffffffffff8211156131aa576131aa613149565b50601f01601f191660200190565b6000602082840312156131ca57600080fd5b813567ffffffffffffffff8111156131e157600080fd5b8201601f810184136131f257600080fd5b803561320561320082613190565b61315f565b81815285602083850101111561321a57600080fd5b81602084016020830137600091810160200191909152949350505050565b6000806000806080858703121561324e57600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561327d57600080fd5b61328683612f7a565b915061329460208401612f7a565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b600082198211156132c6576132c661329d565b500190565b6000826132e857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561331d5761331d61329d565b500290565b6000828210156133345761333461329d565b500390565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b60006020828403121561338157600080fd5b8151801515811461146557600080fd5b600082601f8301126133a257600080fd5b8151602067ffffffffffffffff808311156133bf576133bf613149565b8260051b6133ce83820161315f565b93845285810183019383810190888611156133e857600080fd5b84880192505b85831015611223578251848111156134065760008081fd5b8801603f81018a136134185760008081fd5b85810151604061342a61320083613190565b8281528c8284860101111561343f5760008081fd5b61344e838a8301848701612fb1565b855250505091840191908401906133ee565b6000806040838503121561347357600080fd5b825167ffffffffffffffff8082111561348b57600080fd5b61349786838701613391565b935060208501519150808211156134ad57600080fd5b506134ba85828601613391565b9150509250929050565b600083516134d6818460208801612fb1565b6001600160801b0319939093169190920190815260100192915050565b60008251613505818460208701612fb1565b9190910192915050565b60006020828403121561352157600080fd5b5051919050565b6000835161353a818460208801612fb1565b9190910191825250602001919050565b60808152600061355d6080830187612fdd565b828103602084015261356f8187612fdd565b905082810360408401526135838186612fdd565b91505082606083015295945050505050565b600181811c908216806135a957607f821691505b602082108114156118be57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052600160045260246000fdfea2646970667358221220970321c783abf715e67020d8e4b80f54819b7eacd341ba3f4ceafe86e46d3bd764736f6c634300080a0033",
    "deployedBytecode": "0x6080604052600436106102a25760003560e01c80635639671511610165578063a457c2d7116100cc578063d046815611610085578063d046815614610787578063d0e30db01461079c578063d4970524146107a4578063dd62ed3e146107ac578063efd60347146107cc578063f79c3f02146107d4578063fb5b82d0146107f4576102b2565b8063a457c2d7146106ea578063a9059cbb1461070a578063ac232bde1461072a578063bf15af561461073d578063c5eff3d014610752578063cc48cd3114610767576102b2565b80637adbf9731161011e5780637adbf97314610648578063833b1fce1461066857806386a92af71461067d57806387f2adfb1461069257806395d89b41146106a75780639b498e26146106d5576102b2565b8063563967151461059e57806358bf3c7f146105b35780636e9960c3146105d357806370a08231146105e8578063750521f514610608578063799a195414610628576102b2565b80631bcbfaba1161020957806336bf3325116101c257806336bf332514610502578063395093511461051f5780633af9e6691461053f57806346425ef01461055f5780635022820114610574578063540bc5ea14610589576102b2565b80631bcbfaba1461045c57806323b872dd14610471578063281a312214610491578063291206f6146104b15780632cb562e1146104d1578063313ce567146104e6576102b2565b80631311cf8d1161025b5780631311cf8d146103b057806313d86aed146103d0578063143a08d4146103f0578063147bf6c4146104055780631546962b1461042557806318160ddd14610447576102b2565b8063020f086e146102cb57806304843a17146102eb57806306fdde0314610313578063095ea7b3146103565780630e18b68114610386578063107d7fa01461039b576102b2565b366102b2576102b033610814565b005b60405163574b16a760e11b815260040160405180910390fd5b3480156102d757600080fd5b506102b06102e6366004612f96565b61089b565b3480156102f757600080fd5b5061030061091f565b6040519081526020015b60405180910390f35b34801561031f57600080fd5b50604080518082019091526011815270098d2e2ead2c840a6e8c2d6cac8408aa89607b1b60208201525b60405161030a9190613009565b34801561036257600080fd5b5061037661037136600461301c565b61092e565b604051901515815260200161030a565b34801561039257600080fd5b506102b0610944565b3480156103a757600080fd5b5061030061099b565b3480156103bc57600080fd5b506102b06103cb366004612f96565b6109a5565b3480156103dc57600080fd5b506102b06103eb366004613046565b610a20565b3480156103fc57600080fd5b50610300610bd9565b34801561041157600080fd5b506102b0610420366004612f96565b610be3565b34801561043157600080fd5b5061043a610c2a565b60405161030a919061305f565b34801561045357600080fd5b50610300610c34565b34801561046857600080fd5b50610300610c3e565b34801561047d57600080fd5b5061037661048c366004613073565b610c48565b34801561049d57600080fd5b506102b06104ac3660046130af565b610cfb565b3480156104bd57600080fd5b506102b06104cc366004613046565b610edd565b3480156104dd57600080fd5b5061043a610f58565b3480156104f257600080fd5b506040516012815260200161030a565b34801561050e57600080fd5b506103006801bc16d674ec80000081565b34801561052b57600080fd5b5061037661053a36600461301c565b610f62565b34801561054b57600080fd5b5061030061055a366004612f96565b610f83565b34801561056b57600080fd5b50610300610f9c565b34801561058057600080fd5b5061043a610fa6565b34801561059557600080fd5b50610300606081565b3480156105aa57600080fd5b50610300610fb0565b3480156105bf57600080fd5b506102b06105ce366004612f96565b610fba565b3480156105df57600080fd5b5061043a611035565b3480156105f457600080fd5b50610300610603366004612f96565b61103f565b34801561061457600080fd5b506102b06106233660046131b8565b61104a565b34801561063457600080fd5b50610300610643366004613046565b6110c6565b34801561065457600080fd5b506102b0610663366004612f96565b6110d1565b34801561067457600080fd5b5061043a61114c565b34801561068957600080fd5b50610349611156565b34801561069e57600080fd5b50610300611160565b3480156106b357600080fd5b50604080518082019091526005815264098e68aa8960db1b6020820152610349565b3480156106e157600080fd5b5061043a61116a565b3480156106f657600080fd5b5061037661070536600461301c565b611174565b34801561071657600080fd5b5061037661072536600461301c565b611190565b6102b0610738366004612f96565b61122f565b34801561074957600080fd5b50610300603081565b34801561075e57600080fd5b5061043a611241565b34801561077357600080fd5b506102b0610782366004613238565b61124b565b34801561079357600080fd5b5061043a61140b565b6102b0611415565b6102b061141e565b3480156107b857600080fd5b506103006107c736600461326a565b611459565b6102b061146c565b3480156107e057600080fd5b506103006107ef366004613046565b611474565b34801561080057600080fd5b506102b061080f366004612f96565b61147f565b34610832576040516395b66fe960e01b815260040160405180910390fd5b61084d3461083e6114fa565b61084891906132b3565b61152e565b610858338234611561565b6040513481526001600160a01b0382169033907f3bc57f469ad6d10d7723ea226cd22bd2b9e527def2b529f6ab44645a166895829060200160405180910390a350565b6108a36116fb565b6001600160a01b0316336001600160a01b0316146108df573360405163472511eb60e11b81526004016108d6919061305f565b60405180910390fd5b6108e881611705565b6040516001600160a01b038216907f67b26a33f305cc027b2d45b2f6f418793afcd3e22f7376afa7be068ce18604e890600090a250565b60006109296114fa565b905090565b600061093b33848461173c565b50600192915050565b61094c6117ab565b6001600160a01b0316336001600160a01b03161461097f573360405163472511eb60e11b81526004016108d6919061305f565b61098f61098a6117ab565b6117b5565b61099960006117fe565b565b600061092961183e565b6109ad6116fb565b6001600160a01b0316336001600160a01b0316146109e0573360405163472511eb60e11b81526004016108d6919061305f565b6109e98161186e565b6040516001600160a01b038216907f1da4c245099590dc40be61880c9b97792f3694d970acc1e67ac0e6cc90f3780d90600090a250565b610a286118a5565b6001600160a01b0316336001600160a01b031614610a5b573360405163472511eb60e11b81526004016108d6919061305f565b6000610a656114fa565b90506000610a85610a7f6801bc16d674ec800000846132cb565b846118af565b905080610aa557604051631036b5ad60e31b815260040160405180910390fd5b600080610ab1836118c4565b8151919350915080610ad65760405163200149ad60e21b815260040160405180910390fd5b83811115610af757604051635993bd5760e01b815260040160405180910390fd5b8151818114610b19576040516322e5ce4360e21b815260040160405180910390fd5b6000610b2361194c565b905080610b4357604051639be7315960e01b815260040160405180910390fd5b60005b83811015610b9357610b8b868281518110610b6357610b636132ed565b6020026020010151868381518110610b7d57610b7d6132ed565b60200260200101518461197c565b600101610b46565b50610bb4610baa846801bc16d674ec800000613303565b6108489089613322565b610bcf83610bc0611e04565b610bca91906132b3565b611e34565b5050505050505050565b6000610929611e62565b610beb6116fb565b6001600160a01b0316336001600160a01b031614610c1e573360405163472511eb60e11b81526004016108d6919061305f565b610c27816117fe565b50565b6000610929611edc565b6000610929611f0c565b6000610929611f16565b60008383610c568282611f46565b8380610c75576040516336b216db60e21b815260040160405180910390fd5b868580610c8183612072565b1015610ca0576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b038816610cd957604051637617407560e11b81526001600160a01b038a166004820152600060248201526044016108d6565b610ce3898861207d565b610cee8989896120e3565b9998505050505050505050565b6000610d05612171565b8114610d365780610d14612171565b604051631cfd276760e31b8152600481019290925260248201526044016108d6565b610d49610d448260016132b3565b6121a1565b610d52866117b5565b610d5b836121cf565b6040516001600160a01b038416907f0cc5437d7c9c1d9eab549acbb533eea3e9868e9443dd75309ed5820b33a3774e90600090a2610d9882612206565b6040518281527fbd533e726baaf59b36f3914d950053f7e78f527057c97cd3f0043257fc0fc8849060200160405180910390a1610dd48961186e565b6040516001600160a01b038a16907f1da4c245099590dc40be61880c9b97792f3694d970acc1e67ac0e6cc90f3780d90600090a2610e118561223d565b6040516001600160a01b038616907f30f015a5d3c72c0a9414538199baa022323a483fa9e4ba2cd581596cf8ca042490600090a2610e4e84612274565b6040516001600160a01b038516907fffc0721ef0563a1b0a51a0dc92113025f33ca434ada9ee3eebff2f385d2a8f9a90600090a2610e8c8a896122ab565b610e958761110c565b7f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610ec993929190613339565b60405180910390a150505050505050505050565b610ee56116fb565b6001600160a01b0316336001600160a01b031614610f18573360405163472511eb60e11b81526004016108d6919061305f565b610f2181612206565b6040518181527fbd533e726baaf59b36f3914d950053f7e78f527057c97cd3f0043257fc0fc884906020015b60405180910390a150565b6000610929612327565b600061093b338484610f743388612357565b610f7e91906132b3565b61173c565b6000610f96610f91836123af565b6123fd565b92915050565b6000610929612435565b6000610929612465565b600061092961194c565b610fc26116fb565b6001600160a01b0316336001600160a01b031614610ff5573360405163472511eb60e11b81526004016108d6919061305f565b610ffe8161223d565b6040516001600160a01b038216907f30f015a5d3c72c0a9414538199baa022323a483fa9e4ba2cd581596cf8ca042490600090a250565b60006109296116fb565b6000610f9682612072565b6110526116fb565b6001600160a01b0316336001600160a01b031614611085573360405163472511eb60e11b81526004016108d6919061305f565b61108e81612495565b611097816124b4565b7f8d2df192dd17edf92a7964b78aa322f3d717b2ab9de00651bee32bbc4c5da63a81604051610f4d9190613009565b6000610f96826124fe565b6110d96118a5565b6001600160a01b0316336001600160a01b03161461110c573360405163472511eb60e11b81526004016108d6919061305f565b6111158161252b565b6040516001600160a01b038216907fd3b5d1e0ffaeff528910f3663f0adace7694ab8241d58e17a91351ced2e0803190600090a250565b6000610929612562565b6060610929612592565b6000610929611e04565b6000610929612658565b600061093b3384846111863388612357565b610f7e9190613322565b6000338361119e8282611f46565b83806111bd576040516336b216db60e21b815260040160405180910390fd5b3385806111c983612072565b10156111e8576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b03881661121857604051637617407560e11b8152336004820152600060248201526044016108d6565b6112233389896120e3565b98975050505050505050565b61123881612688565b610c2781610814565b60006109296126af565b611253612562565b6001600160a01b0316336001600160a01b031614611286573360405163472511eb60e11b81526004016108d6919061305f565b61128e611e04565b8411156112c0578361129e611e04565b6040516376179ac560e01b8152600481019290925260248201526044016108d6565b60006112ca61183e565b6112d49086613322565b905060006112eb826801bc16d674ec800000613303565b6112f3612435565b6112fd91906132b3565b9050611308856126df565b6113118661270d565b61131a8461273b565b60008561132783866132b3565b111561134d5761134a8661133b84876132b3565b6113459190613322565b612769565b90505b858161135984876132b3565b6113639190613322565b111561139357611391868261137885886132b3565b6113829190613322565b61138c9190613322565b612832565b505b61139d81876132b3565b8210156113c1576113c1826113b283896132b3565b6113bc9190613322565b612904565b60408051888152602081018890529081018690527f25d7358447891786a139ae7149548f3232a8c95f2ea6065c69c5bd7c39cd386c9060600160405180910390a150505050505050565b60006109296117ab565b61099933610814565b611426611edc565b6001600160a01b0316336001600160a01b031614610999573360405163472511eb60e11b81526004016108d6919061305f565b60006114658383612357565b9392505050565b611426612327565b6000610f96826123fd565b6114876116fb565b6001600160a01b0316336001600160a01b0316146114ba573360405163472511eb60e11b81526004016108d6919061305f565b6114c3816121cf565b6040516001600160a01b038216907f0cc5437d7c9c1d9eab549acbb533eea3e9868e9443dd75309ed5820b33a3774e90600090a250565b600061092961152a60017f2b6136e423ab70d76431e2a635e877e16ea2dd9a895e054ad7f35f89d6c7b711613322565b5490565b610c2761155c60017f2b6136e423ab70d76431e2a635e877e16ea2dd9a895e054ad7f35f89d6c7b711613322565b829055565b600061156d8483612a36565b905060006115796126af565b9050836001600160a01b0316856001600160a01b031614156115fa57604051632d20488160e11b81526001600160a01b03868116600483015260016024830152821690635a4091029060440160006040518083038186803b1580156115dd57600080fd5b505afa1580156115f1573d6000803e3d6000fd5b505050506116f4565b604051632d20488160e11b81526001600160a01b03868116600483015260016024830152821690635a4091029060440160006040518083038186803b15801561164257600080fd5b505afa158015611656573d6000803e3d6000fd5b505060405163e838dfbb60e01b81526001600160a01b038416925063e838dfbb915061168690879060040161305f565b602060405180830381865afa1580156116a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c7919061336f565b156116e7578360405163e7d05e2760e01b81526004016108d6919061305f565b6116f28585846120e3565b505b5050505050565b6000610929612a95565b61170e81612688565b610c2761155c60017ff4271262f3552a4108cde54dc75061de8de495709221d793b126e448522d6a80613322565b61174583612688565b61174e82612688565b611759838383612ac5565b816001600160a01b0316836001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161179e91815260200190565b60405180910390a3505050565b6000610929612b1c565b6117be81612688565b6117c781612b4c565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b61180781612b55565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b600061092961152a60017f0f1e7733641e4d843128fea0d2ec90d3d06a40b0fe244ff603d8c1aa200dc0f9613322565b61187781612688565b610c2761155c60017f8e9e2a1d30fed357d8a000c1131fc77ed65d2052918caf1ccc6eb1e7af3d13b6613322565b6000610929611035565b60008183116118be5782611465565b50919050565b6060806118cf612658565b6001600160a01b031663a1947323846040518263ffffffff1660e01b81526004016118fc91815260200190565b6000604051808303816000875af115801561191b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119439190810190613460565b91509150915091565b600061092961152a60017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42613322565b603083511461199e5760405163050cb55360e41b815260040160405180910390fd5b60608251146119c05760405163408ebd3960e01b815260040160405180910390fd5b6801bc16d674ec80000060006119da633b9aca00836132cb565b90506000600286600060801b6040516020016119f79291906134c4565b60408051601f1981840301815290829052611a11916134f3565b602060405180830381855afa158015611a2e573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611a51919061350f565b90506000600280611a658860006040612b5e565b604051611a7291906134f3565b602060405180830381855afa158015611a8f573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611ab2919061350f565b6002611aca896040611ac5816060613322565b612b5e565b604051611add9190600090602001613528565b60408051601f1981840301815290829052611af7916134f3565b602060405180830381855afa158015611b14573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611b37919061350f565b60408051602081019390935282015260600160408051601f1981840301815290829052611b63916134f3565b602060405180830381855afa158015611b80573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611ba3919061350f565b905060006002808488604051602001611bc6929190918252602082015260400190565b60408051601f1981840301815290829052611be0916134f3565b602060405180830381855afa158015611bfd573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611c20919061350f565b6002611c2b87612c21565b604080516020810192909252810186905260600160408051601f1981840301815290829052611c59916134f3565b602060405180830381855afa158015611c76573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611c99919061350f565b60408051602081019390935282015260600160408051601f1981840301815290829052611cc5916134f3565b602060405180830381855afa158015611ce2573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611d05919061350f565b90506000611d138647613322565b9050611d1d612c8e565b6001600160a01b03166322895118878b8a604051602001611d4091815260200190565b6040516020818303038152906040528c876040518663ffffffff1660e01b8152600401611d70949392919061354a565b6000604051808303818588803b158015611d8957600080fd5b505af1158015611d9d573d6000803e3d6000fd5b5050505050804714611dc257604051638051a6bb60e01b815260040160405180910390fd5b7f11553d182c6d24df901ccbb837d640c1ee9994876a88dccc8ddfd7ebab9b6ce189604051611df19190613009565b60405180910390a1505050505050505050565b600061092961152a60017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8613322565b610c2761155c60017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8613322565b600080611e6d61183e565b90506000611e79611e04565b905080821015611ecc576801bc16d674ec800000611e978383613322565b611ea19190613303565b611ea96114fa565b611eb1612435565b611ebb91906132b3565b611ec591906132b3565b9250505090565b611ed46114fa565b611ebb612435565b600061092961152a60017ff4271262f3552a4108cde54dc75061de8de495709221d793b126e448522d6a80613322565b6000610929612cbe565b600061092961152a60017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37613322565b6000611f506126af565b60405163e838dfbb60e01b81529091506001600160a01b0382169063e838dfbb90611f7f90869060040161305f565b602060405180830381865afa158015611f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc0919061336f565b15611fe0578260405163e7d05e2760e01b81526004016108d6919061305f565b60405163e838dfbb60e01b81526001600160a01b0382169063e838dfbb9061200c90859060040161305f565b602060405180830381865afa158015612029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204d919061336f565b1561206d578160405163e7d05e2760e01b81526004016108d6919061305f565b505050565b6000610f96826123af565b60006120898333612357565b9050818110156120cb57604051637b936de360e01b81526001600160a01b038416600482015233602482015260448101829052606481018390526084016108d6565b600019811461206d5761206d8333610f7e8585613322565b600061210284836120f3876123af565b6120fd9190613322565b612cee565b61211a8383612110866123af565b6120fd91906132b3565b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161215f91815260200190565b60405180910390a35060019392505050565b600061092961152a60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd613322565b610c2761155c60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd613322565b6121d881612688565b610c2761155c60017f082b6d18de7b10e438e6b1002141db737519cb4ceed679bc815e3aac00cd2227613322565b61220f81612d3a565b610c2761155c60017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37613322565b61224681612688565b610c2761155c60017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780613322565b61227d81612688565b610c2761155c60017f3f075dea7ef99b1e5db245018e5e4ed8d2a0d93953f5932b2176bef59bd69061613322565b6122b482612d5d565b6040516001600160a01b038316907e043cf7635f276413ae358250286a479a631abd9d74d57d4aa0bb87ebc7d11790600090a26122f081612d94565b6040518181527f4c86ba184ea1a1558f84835ca34f6d67e222e8ee5cc4f324b8861dda4cf1740c9060200160405180910390a15050565b600061092961152a60017f8e9e2a1d30fed357d8a000c1131fc77ed65d2052918caf1ccc6eb1e7af3d13b6613322565b60008061238560017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847613322565b6001600160a01b039485166000908152602091825260408082209590961681529390525050205490565b6000806123dd60017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838613322565b6001600160a01b0390931660009081526020939093525050604090205490565b600080612408612cbe565b9050806124185750600092915050565b80612421611e62565b61242b9085613303565b61146591906132cb565b600061092961152a60017ffedfd2c285a57fb23bf45a3fe9ac02d36a76ebb72801b1c8aaf553d74e9d4653613322565b600061092961152a60017f082b6d18de7b10e438e6b1002141db737519cb4ceed679bc815e3aac00cd2227613322565b8051610c2757604051638d46fe0560e01b815260040160405180910390fd5b60006124e160017fb63f3482ec84cb93d74a71645ad2e9e896fa02723e42170b4aad20a4bed6cdd6613322565b825190915081906124f89082906020860190612ee1565b50505050565b600080612509612cbe565b9050806125195750600092915050565b612521611e62565b61242b8285613303565b61253481612688565b610c2761155c60017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb613322565b600061092961152a60017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb613322565b606060006125c160017fb63f3482ec84cb93d74a71645ad2e9e896fa02723e42170b4aad20a4bed6cdd6613322565b8054909150819081906125d390613595565b80601f01602080910402602001604051908101604052809291908181526020018280546125ff90613595565b801561264c5780601f106126215761010080835404028352916020019161264c565b820191906000526020600020905b81548152906001019060200180831161262f57829003601f168201915b50505050509250505090565b600061092961152a60017f3f075dea7ef99b1e5db245018e5e4ed8d2a0d93953f5932b2176bef59bd69061613322565b6001600160a01b038116610c275760405163f6b2911f60e01b815260040160405180910390fd5b600061092961152a60017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780613322565b610c2761155c60017ffedfd2c285a57fb23bf45a3fe9ac02d36a76ebb72801b1c8aaf553d74e9d4653613322565b610c2761155c60017f0f1e7733641e4d843128fea0d2ec90d3d06a40b0fe244ff603d8c1aa200dc0f9613322565b610c2761155c60017fd7f2d45e512a86049f7a113657b39731b6b558609584243063a52cd31a8eb529613322565b600080612774612327565b60405163c8a6dfd360e01b81526004810185905290915047906001600160a01b0383169063c8a6dfd390602401600060405180830381600087803b1580156127bb57600080fd5b505af11580156127cf573d6000803e3d6000fd5b50505050600081476127e19190613322565b9050801561282a576127f58161083e6114fa565b6040518181527fda841d3042d792e2509a333b9dcbd4b3dd9b9047d382011f8788fab90ca7e3c7906020015b60405180910390a15b949350505050565b60008061283d611edc565b90506001600160a01b0381166128565750600092915050565b604051638ede6b6b60e01b81526004810184905247906001600160a01b03831690638ede6b6b90602401600060405180830381600087803b15801561289a57600080fd5b505af11580156128ae573d6000803e3d6000fd5b50505050600081476128c09190613322565b9050801561282a576128d48161083e6114fa565b6040518181527fd500b67e5bd8019c0af744cadeec120d1b5e3d3a3a011f18cf182aa4c97947b690602001612821565b600061290e611f0c565b90508061292e57604051630d35acd760e21b815260040160405180910390fd5b6000612938611e62565b90506000612944611f16565b90506000816129538587613303565b61295d9190613303565b9050600061296b8387613303565b61297761271086613303565b6129819190613322565b90506000811561299a5761299582846132cb565b61299d565b60005b90508015612a2d5760006129af612465565b90506129bb8183612de0565b60006129c5611f0c565b905060006129d38a89613322565b60408051828152602081018c90529081018a9052606081018490529091506001600160a01b038416907f3d1669e813a9845c288f0e1f642a4343a451103b87886d12de37e63b39bbd9429060800160405180910390a25050505b50505050505050565b60008082612a42611e62565b612a4c9190613322565b905080612a6557829150612a608484612de0565b612a8e565b80612a6e611f0c565b612a789085613303565b612a8291906132cb565b9150612a8e8483612de0565b5092915050565b600061092961152a60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113613322565b6000612af260017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847613322565b6001600160a01b039485166000908152602091825260408082209590961681529390525091902055565b600061092961152a60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281613322565b610c2781612e4e565b610c2781612e85565b60608182601f011015612b84576040516323d5783d60e11b815260040160405180910390fd5b612b8e82846132b3565b84511015612baf57604051633b99b53d60e01b815260040160405180910390fd5b606082158015612bce5760405191506000825260208201604052612c18565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612c07578051835260209283019201612bef565b5050858452601f01601f1916604052505b50949350505050565b603881901c60ff908116603083901c8216602884901c8316602085901c8416601886901c8516601087901c8616600888811c9790971688881b61ff001617871b17861b17851b17841b17831b1790911b17604082901c8015612c8557612c856135ca565b5060c01b919050565b600061092961152a60017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260613322565b600061092961152a60017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b613322565b6000612d1b60017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838613322565b6001600160a01b03909316600090815260209390935250604090912055565b612710811115610c27576040516358d620b360e01b815260040160405180910390fd5b612d6681612688565b610c2761155c60017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260613322565b80612db25760405163a9cb9e0d60e01b815260040160405180910390fd5b610c2761155c60017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42613322565b612dfb81612dec612cbe565b612df691906132b3565b612eb3565b612e098282612110856123af565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b612e5781612688565b610c2761155c60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113613322565b610c2761155c60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281613322565b610c2761155c60017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b613322565b828054612eed90613595565b90600052602060002090601f016020900481019282612f0f5760008555612f55565b82601f10612f2857805160ff1916838001178555612f55565b82800160010185558215612f55579182015b82811115612f55578251825591602001919060010190612f3a565b50612f61929150612f65565b5090565b5b80821115612f615760008155600101612f66565b80356001600160a01b0381168114612f9157600080fd5b919050565b600060208284031215612fa857600080fd5b61146582612f7a565b60005b83811015612fcc578181015183820152602001612fb4565b838111156124f85750506000910152565b60008151808452612ff5816020860160208601612fb1565b601f01601f19169290920160200192915050565b6020815260006114656020830184612fdd565b6000806040838503121561302f57600080fd5b61303883612f7a565b946020939093013593505050565b60006020828403121561305857600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60008060006060848603121561308857600080fd5b61309184612f7a565b925061309f60208501612f7a565b9150604084013590509250925092565b60008060008060008060008060006101208a8c0312156130ce57600080fd5b6130d78a612f7a565b98506130e560208b01612f7a565b975060408a013596506130fa60608b01612f7a565b955061310860808b01612f7a565b945061311660a08b01612f7a565b935061312460c08b01612f7a565b925061313260e08b01612f7a565b91506101008a013590509295985092959850929598565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561318857613188613149565b604052919050565b600067ffffffffffffffff8211156131aa576131aa613149565b50601f01601f191660200190565b6000602082840312156131ca57600080fd5b813567ffffffffffffffff8111156131e157600080fd5b8201601f810184136131f257600080fd5b803561320561320082613190565b61315f565b81815285602083850101111561321a57600080fd5b81602084016020830137600091810160200191909152949350505050565b6000806000806080858703121561324e57600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561327d57600080fd5b61328683612f7a565b915061329460208401612f7a565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b600082198211156132c6576132c661329d565b500190565b6000826132e857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561331d5761331d61329d565b500290565b6000828210156133345761333461329d565b500390565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b60006020828403121561338157600080fd5b8151801515811461146557600080fd5b600082601f8301126133a257600080fd5b8151602067ffffffffffffffff808311156133bf576133bf613149565b8260051b6133ce83820161315f565b93845285810183019383810190888611156133e857600080fd5b84880192505b85831015611223578251848111156134065760008081fd5b8801603f81018a136134185760008081fd5b85810151604061342a61320083613190565b8281528c8284860101111561343f5760008081fd5b61344e838a8301848701612fb1565b855250505091840191908401906133ee565b6000806040838503121561347357600080fd5b825167ffffffffffffffff8082111561348b57600080fd5b61349786838701613391565b935060208501519150808211156134ad57600080fd5b506134ba85828601613391565b9150509250929050565b600083516134d6818460208801612fb1565b6001600160801b0319939093169190920190815260100192915050565b60008251613505818460208701612fb1565b9190910192915050565b60006020828403121561352157600080fd5b5051919050565b6000835161353a818460208801612fb1565b9190910191825250602001919050565b60808152600061355d6080830187612fdd565b828103602084015261356f8187612fdd565b905082810360408401526135838186612fdd565b91505082606083015295945050505050565b600181811c908216806135a957607f821691505b602082108114156118be57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052600160045260246000fdfea2646970667358221220970321c783abf715e67020d8e4b80f54819b7eacd341ba3f4ceafe86e46d3bd764736f6c634300080a0033",
    "devdoc": {
        "author": "Kiln",
        "events": {
            "Paused(address)": {
                "params": {
                    "admin": "The admin at the time of the pause event"
                }
            },
            "Unpaused(address)": {
                "params": {
                    "admin": "The admin at the time of the unpause event"
                }
            }
        },
        "kind": "dev",
        "methods": {
            "admin()": {
                "details": "Returns the current admin. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`"
            },
            "changeAdmin(address)": {
                "details": "Changes the admin of the proxy. Emits an {AdminChanged} event. NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}."
            },
            "constructor": {
                "details": "The Admin of the proxy should not be the same as theadmin on the implementation logics. The admin here isthe only account allowed to perform calls on the proxy(the calls are never delegated to the implementation)",
                "params": {
                    "__admin": "Address of the admin in charge of the proxy",
                    "_data": "Calldata for an atomic initialization",
                    "_logic": "Address of the implementation"
                }
            },
            "implementation()": {
                "details": "Returns the current implementation. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`"
            },
            "pause()": {
                "details": "Pauses system"
            },
            "paused()": {
                "details": "Retrieves Paused state",
                "returns": {
                    "_0": "Paused state"
                }
            },
            "unpause()": {
                "details": "Unpauses system"
            },
            "upgradeTo(address)": {
                "details": "Upgrade the implementation of the proxy. NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}."
            },
            "upgradeToAndCall(address,bytes)": {
                "details": "Upgrade the implementation of the proxy, and then call a function from the new implementation as specified by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract. NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}."
            }
        },
        "title": "TUPProxy (Transparent Upgradeable Pausable Proxy)",
        "version": 1
    },
    "userdoc": {
        "errors": {
            "CallWhenPaused()": [
                {
                    "notice": "A call happened while the system was paused"
                }
            ]
        },
        "events": {
            "Paused(address)": {
                "notice": "The system is now paused"
            },
            "Unpaused(address)": {
                "notice": "The system is now unpaused"
            }
        },
        "kind": "user",
        "methods": {},
        "notice": "This contract extends the Transparent Upgradeable proxy and adds a system wide pause feature.         When the system is paused, the fallback will fail no matter what calls are made.         Address Zero is allowed to perform calls even if paused to allow view calls made         from RPC providers to properly work.",
        "version": 1
    },
    "storageLayout": {
        "storage": [],
        "types": null
    },
    "implementations": {
        "names": [
            "RiverV1_Implementation_0_2_2.json",
            "RiverV1_Implementation_0_4_0.json",
            "RiverV1_Implementation_0_5_0.json"
        ],
        "transactionHash": [
            "0xb1aec45c6a8b6a0dd2fde3b3745716696c79039363c881ad32b00409a6bae80c",
            "0x2b9594e64a3491705bb6d094ed84357f6b44f7c42f7104e2b9395b64770af0ed",
            "0xb634334f6719f75252af87c45e32ce3faf6a67a6640739b6e9bfaca89c486d1d"
        ],
        "receipt": [
            {
                "to": null,
                "from": "0x959FD7Ef9089B7142B6B908Dc3A8af7Aa8ff0FA1",
                "contractAddress": "0x31a2297fc5715b59EC09941c2beca511a3fCB470",
                "transactionIndex": 44,
                "gasUsed": "2728165",
                "logsBloom": "0x
                "blockHash": "0x093b9945ddb67eadc616d999980bf40badd15a1d636ea2dba144162feff400a2",
                "transactionHash": "0xb1aec45c6a8b6a0dd2fde3b3745716696c79039363c881ad32b00409a6bae80c",
                "logs": [],
                "blockNumber": 7685806,
                "cumulativeGasUsed": "14696011",
                "status": 1,
                "byzantium": true
            },
            {
                "to": null,
                "from": "0x341C40B94bF2afBFa42573cB78f16Ee15a056238",
                "contractAddress": "0x4a32c40b843608C9e8124537c7B8083f204aD382",
                "transactionIndex": 10,
                "gasUsed": "2724917",
                "logsBloom": "0x
                "blockHash": "0x1e65568a905cc21f8ef067303af1f332bec80057d2853b1fb8615d3fd9f51315",
                "transactionHash": "0x2b9594e64a3491705bb6d094ed84357f6b44f7c42f7104e2b9395b64770af0ed",
                "logs": [],
                "blockNumber": 7709010,
                "cumulativeGasUsed": "7776970",
                "status": 1,
                "byzantium": true
            },
            {
                "to": null,
                "from": "0x341C40B94bF2afBFa42573cB78f16Ee15a056238",
                "contractAddress": "0x7C0C0ab9032413ffB1982c937A62B6997Eae8304",
                "transactionIndex": 32,
                "gasUsed": "3043063",
                "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "blockHash": "0xd73616de7b35dc79fa9c63ef40b7c77626342803e3e5e58c83b98348332abc9b",
                "transactionHash": "0xb634334f6719f75252af87c45e32ce3faf6a67a6640739b6e9bfaca89c486d1d",
                "logs": [],
                "blockNumber": 8060050,
                "cumulativeGasUsed": "10994833",
                "status": 1,
                "byzantium": true
            }
        ],
        "args": [
            [],
            [],
            []
        ],
        "numDeployments": [
            1,
            1,
            1
        ],
        "solcInputHash": [
            "656663a520c7d1a8fa475138c7426bea",
            "d46223a1947b2b7fbc79fc0dfd1c596b",
            "3fdb9e1163d88d42993a4de988d05361"
        ],
        "metadata": [
            "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"AllowanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Denied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorOnDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentPublicKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicKeyCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"providedValidatorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"InvalidValidatorCountReport\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawalCredentials\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAvailableValidatorKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"UnauthorizedTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroMintedShares\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorTotalBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"roundId\",\"type\":\"bytes32\"}],\"name\":\"ConsensusLayerDataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"FundedValidatorKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"cdata\",\"type\":\"bytes\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PulledELFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldTotalUnderlyingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalUnderlyingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"RewardsEarned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"allowlist\",\"type\":\"address\"}],\"name\":\"SetAllowlist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"SetCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositContract\",\"type\":\"address\"}],\"name\":\"SetDepositContractAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"elFeeRecipient\",\"type\":\"address\"}],\"name\":\"SetELFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetGlobalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorRegistry\",\"type\":\"address\"}],\"name\":\"SetOperatorsRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"SetOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"SetPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawalCredentials\",\"type\":\"bytes32\"}],\"name\":\"SetWithdrawalCredentials\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserDeposit\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEPOSIT_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_KEY_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNATURE_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractableValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"depositAndTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCount\",\"type\":\"uint256\"}],\"name\":\"depositToConsensusLayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowlist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceToDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCLValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCLValidatorTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositedValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getELFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorsRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalCredentials\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_additionalValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_elFeeRecipientAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_withdrawalCredentials\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_systemAdministratorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowlistAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operatorRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collectorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_globalFee\",\"type\":\"uint256\"}],\"name\":\"initRiverV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"proposeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendELFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAllowlist\",\"type\":\"address\"}],\"name\":\"setAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCollector\",\"type\":\"address\"}],\"name\":\"setCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorTotalBalance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_roundId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maxIncrease\",\"type\":\"uint256\"}],\"name\":\"setConsensusLayerData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newELFeeRecipient\",\"type\":\"address\"}],\"name\":\"setELFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setGlobalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_underlyingAssetAmount\",\"type\":\"uint256\"}],\"name\":\"sharesFromUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlyingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"underlyingBalanceFromShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kiln\",\"errors\":{\"AllowanceTooLow(address,address,uint256,uint256)\":[{\"params\":{\"_allowance\":\"Current allowance\",\"_from\":\"Account where funds are sent from\",\"_operator\":\"Account attempting the transfer\",\"_value\":\"Requested transfer value in shares\"}}],\"Denied(address)\":[{\"params\":{\"account\":\"The account that was denied\"}}],\"InvalidInitialization(uint256,uint256)\":[{\"params\":{\"expectedVersion\":\"The version that was expected\",\"version\":\"The version that was attempting to be initialized\"}}],\"InvalidValidatorCountReport(uint256,uint256)\":[{\"params\":{\"depositedValidatorCount\":\"The number of deposits performed by the system\",\"providedValidatorCount\":\"The received validator count value\"}}],\"Unauthorized(address)\":[{\"params\":{\"caller\":\"Addres performing the call\"}}],\"UnauthorizedTransfer(address,address)\":[{\"params\":{\"_from\":\"Account sending the funds in the invalid transfer\",\"_to\":\"Account receiving the funds in the invalid transfer\"}}]},\"kind\":\"dev\",\"methods\":{\"acceptAdmin()\":{\"details\":\"Only callable by the pending admin. Resets the pending admin if succesful.\"},\"allowance(address,address)\":{\"params\":{\"_owner\":\"Address that issued the allowance\",\"_spender\":\"Address that received the allowance\"},\"returns\":{\"_0\":\"The allowance in shares for a given spender\"}},\"approve(address,uint256)\":{\"details\":\"An approved account can use transferFrom to transfer funds on behalf of the token owner\",\"params\":{\"_spender\":\"Address that is allowed to spend the tokens\",\"_value\":\"The allowed amount in shares, will override previous value\"},\"returns\":{\"_0\":\"True if success\"}},\"balanceOf(address)\":{\"params\":{\"_owner\":\"Address to be checked\"},\"returns\":{\"_0\":\"The balance of the account in shares\"}},\"balanceOfUnderlying(address)\":{\"params\":{\"_owner\":\"Address to be checked\"},\"returns\":{\"_0\":\"The underlying balance of the account\"}},\"decimals()\":{\"returns\":{\"_0\":\"The decimal count\"}},\"decreaseAllowance(address,uint256)\":{\"params\":{\"_spender\":\"Spender that receives the allowance\",\"_subtractableValue\":\"Amount of shares to subtract\"},\"returns\":{\"_0\":\"True if success\"}},\"depositAndTransfer(address)\":{\"params\":{\"_recipient\":\"Address receiving the minted LsETH\"}},\"depositToConsensusLayer(uint256)\":{\"params\":{\"_maxCount\":\"The maximum amount of validator keys to fund\"}},\"getAdmin()\":{\"returns\":{\"_0\":\"The admin address\"}},\"getAllowlist()\":{\"returns\":{\"_0\":\"The allowlist address\"}},\"getBalanceToDeposit()\":{\"returns\":{\"_0\":\"The amount of pending ETH\"}},\"getCLValidatorCount()\":{\"returns\":{\"_0\":\"The CL validator count\"}},\"getCLValidatorTotalBalance()\":{\"returns\":{\"_0\":\"The CL Validator total balance\"}},\"getCollector()\":{\"returns\":{\"_0\":\"The collector address\"}},\"getDepositedValidatorCount()\":{\"returns\":{\"_0\":\"The deposited validator count\"}},\"getELFeeRecipient()\":{\"returns\":{\"_0\":\"The execution layer fee recipient address\"}},\"getGlobalFee()\":{\"returns\":{\"_0\":\"The global fee\"}},\"getOperatorsRegistry()\":{\"returns\":{\"_0\":\"The operators registry address\"}},\"getOracle()\":{\"returns\":{\"_0\":\"The oracle address\"}},\"getPendingAdmin()\":{\"returns\":{\"_0\":\"The pending admin address\"}},\"getWithdrawalCredentials()\":{\"returns\":{\"_0\":\"The withdrawal credentials\"}},\"increaseAllowance(address,uint256)\":{\"params\":{\"_additionalValue\":\"Amount of shares to add\",\"_spender\":\"Spender that receives the allowance\"},\"returns\":{\"_0\":\"True if success\"}},\"initRiverV1(address,address,bytes32,address,address,address,address,address,uint256)\":{\"params\":{\"_allowlistAddress\":\"Address of the allowlist contract\",\"_collectorAddress\":\"Address receiving the the global fee on revenue\",\"_depositContractAddress\":\"Address to make Consensus Layer deposits\",\"_elFeeRecipientAddress\":\"Address that receives the execution layer fees\",\"_globalFee\":\"Amount retained when the ETH balance increases and sent to the collector\",\"_operatorRegistryAddress\":\"Address of the operator registry\",\"_oracleAddress\":\"The address of the Oracle contract\",\"_systemAdministratorAddress\":\"Administrator address\",\"_withdrawalCredentials\":\"Credentials to use for every validator deposit\"}},\"name()\":{\"returns\":{\"_0\":\"The token name\"}},\"proposeAdmin(address)\":{\"details\":\"This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.\",\"params\":{\"_newAdmin\":\"New admin address\"}},\"setAllowlist(address)\":{\"params\":{\"_newAllowlist\":\"New address for the allowlist\"}},\"setCollector(address)\":{\"params\":{\"_newCollector\":\"New address for the collector\"}},\"setConsensusLayerData(uint256,uint256,bytes32,uint256)\":{\"details\":\"Can only be called by the oracle addressThe round id is a blackbox value that should only be used to identify unique reportsWhen a report is performed, River computes the amount of fees that can be pulledfrom the execution layer fee recipient. This amount is capped by the max allowedincrease provided during the report.If the total asset balance increases (from the reported total balance and the pulled funds)we then compute the share that must be taken for the collector on the positive delta.The execution layer fees are taken into account here because they are the product ofnode operator's work, just like consensus layer fees, and both should be handled in thesame manner, as a single revenue stream for the users and the collector.\",\"params\":{\"_maxIncrease\":\"The maximum allowed increase in the total balance\",\"_roundId\":\"An identifier for this update\",\"_validatorCount\":\"The number of active validators on the consensus layer\",\"_validatorTotalBalance\":\"The balance sum of the active validators on the consensus layer\"}},\"setELFeeRecipient(address)\":{\"params\":{\"_newELFeeRecipient\":\"New address for the recipient\"}},\"setGlobalFee(uint256)\":{\"params\":{\"newFee\":\"New fee value\"}},\"setOracle(address)\":{\"params\":{\"_oracleAddress\":\"Address of the oracle\"}},\"sharesFromUnderlyingBalance(uint256)\":{\"params\":{\"_underlyingAssetAmount\":\"Amount of underlying asset to convert\"},\"returns\":{\"_0\":\"The amount of shares worth the underlying asset amopunt\"}},\"symbol()\":{\"returns\":{\"_0\":\"The token symbol\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"The total supply in shares\"}},\"totalUnderlyingSupply()\":{\"returns\":{\"_0\":\"The total underlying asset supply\"}},\"transfer(address,uint256)\":{\"params\":{\"_to\":\"Address receiving the tokens\",\"_value\":\"Amount of shares to be sent\"},\"returns\":{\"_0\":\"True if success\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"_from\":\"Address sending the tokens\",\"_to\":\"Address receiving the tokens\",\"_value\":\"Amount of shares to be sent\"},\"returns\":{\"_0\":\"True if success\"}},\"underlyingBalanceFromShares(uint256)\":{\"params\":{\"_shares\":\"Amount of shares to convert\"},\"returns\":{\"_0\":\"The underlying asset balance represented by the shares\"}}},\"title\":\"River (v1)\",\"version\":1},\"userdoc\":{\"errors\":{\"AllowanceTooLow(address,address,uint256,uint256)\":[{\"notice\":\"Allowance too low to perform operation\"}],\"BalanceTooLow()\":[{\"notice\":\"Balance too low to perform operation\"}],\"Denied(address)\":[{\"notice\":\"The access was denied\"}],\"EmptyDeposit()\":[{\"notice\":\"And empty deposit attempt was made\"}],\"ErrorOnDeposit()\":[{\"notice\":\"An error occured during the deposit\"}],\"InconsistentPublicKeys()\":[{\"notice\":\"The length of the BLS Public key is invalid during deposit\"}],\"InconsistentSignatures()\":[{\"notice\":\"The length of the BLS Signature is invalid during deposit\"}],\"InvalidArgument()\":[{\"notice\":\"The argument was invalid\"}],\"InvalidCall()\":[{\"notice\":\"The call was invalid\"}],\"InvalidFee()\":[{\"notice\":\"The fee is invalid\"}],\"InvalidInitialization(uint256,uint256)\":[{\"notice\":\"An error occured during the initialization\"}],\"InvalidPublicKeyCount()\":[{\"notice\":\"The received count of public keys to deposit is invalid\"}],\"InvalidSignatureCount()\":[{\"notice\":\"The received count of signatures to deposit is invalid\"}],\"InvalidValidatorCountReport(uint256,uint256)\":[{\"notice\":\"The reported validator count is invalid\"}],\"InvalidWithdrawalCredentials()\":[{\"notice\":\"The withdrawal credentials value is null\"}],\"InvalidZeroAddress()\":[{\"notice\":\"The address is zero\"}],\"NoAvailableValidatorKeys()\":[{\"notice\":\"The internal key retrieval returned no keys\"}],\"NotEnoughFunds()\":[{\"notice\":\"Not enough funds to deposit one validator\"}],\"NullTransfer()\":[{\"notice\":\"Invalid empty transfer\"}],\"SliceOutOfBounds()\":[{\"notice\":\"The slice is outside of the initial bytes bounds\"}],\"SliceOverflow()\":[{\"notice\":\"The length overflows an uint\"}],\"Unauthorized(address)\":[{\"notice\":\"The operator is unauthorized for the caller\"}],\"UnauthorizedTransfer(address,address)\":[{\"notice\":\"Invalid transfer recipients\"}],\"ZeroMintedShares()\":[{\"notice\":\"The computed amount of shares to mint is 0\"}]},\"events\":{\"ConsensusLayerDataUpdate(uint256,uint256,bytes32)\":{\"notice\":\"The consensus layer data provided by the oracle has been updated\"},\"FundedValidatorKey(bytes)\":{\"notice\":\"A validator key got funded on the deposit contract\"},\"Initialize(uint256,bytes)\":{\"notice\":\"Emitted when the contract is properly initialized\"},\"PulledELFees(uint256)\":{\"notice\":\"Funds have been pulled from the Execution Layer Fee Recipient\"},\"RewardsEarned(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"The system underlying supply increased. This is a snapshot of the balances for accounting purposes\"},\"SetAdmin(address)\":{\"notice\":\"The admin address changed\"},\"SetAllowlist(address)\":{\"notice\":\"The stored Allowlist has been changed\"},\"SetCollector(address)\":{\"notice\":\"The stored Collector has been changed\"},\"SetDepositContractAddress(address)\":{\"notice\":\"The stored deposit contract address changed\"},\"SetELFeeRecipient(address)\":{\"notice\":\"The stored Execution Layer Fee Recipient has been changed\"},\"SetGlobalFee(uint256)\":{\"notice\":\"The stored Global Fee has been changed\"},\"SetOperatorsRegistry(address)\":{\"notice\":\"The stored Operators Registry has been changed\"},\"SetOracle(address)\":{\"notice\":\"The stored oracle address changed\"},\"SetPendingAdmin(address)\":{\"notice\":\"The pending admin address changed\"},\"SetWithdrawalCredentials(bytes32)\":{\"notice\":\"The stored withdrawal credentials changed\"},\"UserDeposit(address,address,uint256)\":{\"notice\":\"User deposited ETH in the system\"}},\"kind\":\"user\",\"methods\":{\"DEPOSIT_SIZE()\":{\"notice\":\"Size of a deposit in ETH\"},\"PUBLIC_KEY_LENGTH()\":{\"notice\":\"Size of a BLS Public key in bytes\"},\"SIGNATURE_LENGTH()\":{\"notice\":\"Size of a BLS Signature in bytes\"},\"acceptAdmin()\":{\"notice\":\"Accept the transfer of ownership\"},\"allowance(address,address)\":{\"notice\":\"Retrieve the allowance value for a spender\"},\"approve(address,uint256)\":{\"notice\":\"Approves an account for future spendings\"},\"balanceOf(address)\":{\"notice\":\"Retrieve the balance of an account\"},\"balanceOfUnderlying(address)\":{\"notice\":\"Retrieve the underlying asset balance of an account\"},\"decimals()\":{\"notice\":\"Retrieve the decimal count\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Decrease allowance to another account\"},\"deposit()\":{\"notice\":\"Explicit deposit method to mint on msg.sender\"},\"depositAndTransfer(address)\":{\"notice\":\"Explicit deposit method to mint on msg.sender and transfer to _recipient\"},\"depositToConsensusLayer(uint256)\":{\"notice\":\"Deposits current balance to the Consensus Layer by batches of 32 ETH\"},\"getAdmin()\":{\"notice\":\"Retrieves the current admin address\"},\"getAllowlist()\":{\"notice\":\"Retrieve the allowlist address\"},\"getBalanceToDeposit()\":{\"notice\":\"Returns the amount of pending ETH\"},\"getCLValidatorCount()\":{\"notice\":\"Get CL validator count (the amount of validator reported by the oracles)\"},\"getCLValidatorTotalBalance()\":{\"notice\":\"Get CL validator total balance\"},\"getCollector()\":{\"notice\":\"Retrieve the collector address\"},\"getDepositedValidatorCount()\":{\"notice\":\"Get the deposited validator count (the count of deposits made by the contract)\"},\"getELFeeRecipient()\":{\"notice\":\"Retrieve the execution layer fee recipient\"},\"getGlobalFee()\":{\"notice\":\"Get the current global fee\"},\"getOperatorsRegistry()\":{\"notice\":\"Retrieve the operators registry\"},\"getOracle()\":{\"notice\":\"Get oracle address\"},\"getPendingAdmin()\":{\"notice\":\"Retrieve the current pending admin address\"},\"getWithdrawalCredentials()\":{\"notice\":\"Retrieve the withdrawal credentials\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Increase allowance to another account\"},\"initRiverV1(address,address,bytes32,address,address,address,address,address,uint256)\":{\"notice\":\"Initializes the River system\"},\"name()\":{\"notice\":\"Retrieve the token name\"},\"proposeAdmin(address)\":{\"notice\":\"Proposes a new address as admin\"},\"sendELFees()\":{\"notice\":\"Input for execution layer fee earnings\"},\"setAllowlist(address)\":{\"notice\":\"Changes the allowlist address\"},\"setCollector(address)\":{\"notice\":\"Changes the collector address\"},\"setConsensusLayerData(uint256,uint256,bytes32,uint256)\":{\"notice\":\"Sets the validator count and validator total balance sum reported by the oracle\"},\"setELFeeRecipient(address)\":{\"notice\":\"Changes the execution layer fee recipient\"},\"setGlobalFee(uint256)\":{\"notice\":\"Changes the global fee parameter\"},\"setOracle(address)\":{\"notice\":\"Set the oracle address\"},\"sharesFromUnderlyingBalance(uint256)\":{\"notice\":\"Retrieve the shares count from an underlying asset amount\"},\"symbol()\":{\"notice\":\"Retrieve the token symbol\"},\"totalSupply()\":{\"notice\":\"Retrieve the total token supply\"},\"totalUnderlyingSupply()\":{\"notice\":\"Retrieve the total underlying asset supply\"},\"transfer(address,uint256)\":{\"notice\":\"Performs a transfer from the message sender to the provided account\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Performs a transfer between two recipients\"},\"underlyingBalanceFromShares(uint256)\":{\"notice\":\"Retrieve the underlying asset balance from an amount of shares\"}},\"notice\":\"This contract merges all the manager contracts and implements all the virtual methods stitching all components together@notice    +---------------------------------------------------------------------+|                                                                     ||                           Consensus Layer                           ||                                                                     || +-------------------+  +-------------------+  +-------------------+ || |                   |  |                   |  |                   | || |  EL Fee Recipient |  |      Oracle       |  |  Deposit Contract | || |                   |  |                   |  |                   | || +---------|---------+  +---------|---------+  +---------|---------+ |+---------------------------------------------------------------------+|         7            |            5         |+-----------------|    |    |-----------------+|    |6   ||    |    |+---------+          +----|----|----|----+            +---------+|         |          |                   |     2      |         ||Operator |          |       River       --------------  User   ||         |          |                   |            |         |+----|----+          +----|---------|----+            +---------+|                    |         ||             4      |         |       3|1     +-------------|         |--------------+|      |                                      ||      |                                      |+------|------|------------+           +-------------|------------+|                          |           |                          ||    Operators Registry    |           |         Allowlist        ||                          |           |                          |+--------------------------+           +--------------------------+@notice      1. Operators are adding BLS Public Keys of validators running in theirinfrastructure.2. User deposit ETH to the system and get shares minted in exchange3. Upon deposit, the system verifies if the User is allowed to depositby querying the Allowlist4. When the system has enough funds to deposit validators, keys are pulledfrom the Operators Registry5. The deposit data is computed and the validators are funded via the officialdeposit contract6. Oracles report the total balance of the running validators and the total countof running validators7. The running validators propose blocks that reward the EL Fee Recipient. The fundsare pulled back in the system.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/River.1.sol\":\"RiverV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/Administrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IAdministrable.sol\\\";\\n\\nimport \\\"./libraries/LibAdministrable.sol\\\";\\nimport \\\"./libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrable\\n/// @author Kiln\\n/// @notice This contract handles the administration of the contracts\\nabstract contract Administrable is IAdministrable {\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() {\\n        if (msg.sender != LibAdministrable._getAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyPendingAdmin() {\\n        if (msg.sender != LibAdministrable._getPendingAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getAdmin() external view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getPendingAdmin() external view returns (address) {\\n        return LibAdministrable._getPendingAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function proposeAdmin(address _newAdmin) external onlyAdmin {\\n        _setPendingAdmin(_newAdmin);\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function acceptAdmin() external onlyPendingAdmin {\\n        _setAdmin(LibAdministrable._getPendingAdmin());\\n        _setPendingAdmin(address(0));\\n    }\\n\\n    /// @notice Internal utility to set the admin address\\n    /// @param _admin Address to set as admin\\n    function _setAdmin(address _admin) internal {\\n        LibSanitize._notZeroAddress(_admin);\\n        LibAdministrable._setAdmin(_admin);\\n        emit SetAdmin(_admin);\\n    }\\n\\n    /// @notice Internal utility to set the pending admin address\\n    /// @param _pendingAdmin Address to set as pending admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        LibAdministrable._setPendingAdmin(_pendingAdmin);\\n        emit SetPendingAdmin(_pendingAdmin);\\n    }\\n\\n    /// @notice Internal utility to retrieve the address of the current admin\\n    /// @return The address of admin\\n    function _getAdmin() internal view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n}\\n\",\"keccak256\":\"0xc9ce727028bc42bf4ea4247dfde9b57a5c36e1820aba5219207aa95c4f035372\",\"license\":\"BUSL-1.1\"},\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\n/// @title Initializable\\n/// @author Kiln\\n/// @notice This contract ensures that initializers are called only once per version\\ncontract Initializable {\\n    /// @notice An error occured during the initialization\\n    /// @param version The version that was attempting to be initialized\\n    /// @param expectedVersion The version that was expected\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    /// @notice Emitted when the contract is properly initialized\\n    /// @param version New version of the contracts\\n    /// @param cdata Complete calldata that was used during the initialization\\n    event Initialize(uint256 version, bytes cdata);\\n\\n    /// @notice Use this modifier on initializers along with a hard-coded version number\\n    /// @param _version Version to initialize\\n    modifier init(uint256 _version) {\\n        if (_version != Version.get()) {\\n            revert InvalidInitialization(_version, Version.get());\\n        }\\n        Version.set(_version + 1); // prevents reentrency on the called method\\n        _;\\n        emit Initialize(_version, msg.data);\\n    }\\n}\\n\",\"keccak256\":\"0xc85d24988a02608db50067c5319e3b42eec8e45726045489bdb8ea1f33e1ce67\",\"license\":\"BUSL-1.1\"},\"contracts/src/River.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IAllowlist.1.sol\\\";\\nimport \\\"./interfaces/IOperatorRegistry.1.sol\\\";\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\nimport \\\"./interfaces/IELFeeRecipient.1.sol\\\";\\n\\nimport \\\"./components/ConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"./components/UserDepositManager.1.sol\\\";\\nimport \\\"./components/SharesManager.1.sol\\\";\\nimport \\\"./components/OracleManager.1.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./Administrable.sol\\\";\\n\\nimport \\\"./state/river/AllowlistAddress.sol\\\";\\nimport \\\"./state/river/OperatorsRegistryAddress.sol\\\";\\nimport \\\"./state/river/CollectorAddress.sol\\\";\\nimport \\\"./state/river/GlobalFee.sol\\\";\\nimport \\\"./state/river/ELFeeRecipientAddress.sol\\\";\\n\\n/// @title River (v1)\\n/// @author Kiln\\n/// @notice This contract merges all the manager contracts and implements all the virtual methods stitching all components together\\n/// @notice\\n/// @notice    +---------------------------------------------------------------------+\\n/// @notice    |                                                                     |\\n/// @notice    |                           Consensus Layer                           |\\n/// @notice    |                                                                     |\\n/// @notice    | +-------------------+  +-------------------+  +-------------------+ |\\n/// @notice    | |                   |  |                   |  |                   | |\\n/// @notice    | |  EL Fee Recipient |  |      Oracle       |  |  Deposit Contract | |\\n/// @notice    | |                   |  |                   |  |                   | |\\n/// @notice    | +---------|---------+  +---------|---------+  +---------|---------+ |\\n/// @notice    +---------------------------------------------------------------------+\\n/// @notice                |         7            |            5         |\\n/// @notice                +-----------------|    |    |-----------------+\\n/// @notice                                  |    |6   |\\n/// @notice                                  |    |    |\\n/// @notice        +---------+          +----|----|----|----+            +---------+\\n/// @notice        |         |          |                   |     2      |         |\\n/// @notice        |Operator |          |       River       --------------  User   |\\n/// @notice        |         |          |                   |            |         |\\n/// @notice        +----|----+          +----|---------|----+            +---------+\\n/// @notice             |                    |         |\\n/// @notice             |             4      |         |       3\\n/// @notice             |1     +-------------|         |--------------+\\n/// @notice             |      |                                      |\\n/// @notice             |      |                                      |\\n/// @notice      +------|------|------------+           +-------------|------------+\\n/// @notice      |                          |           |                          |\\n/// @notice      |    Operators Registry    |           |         Allowlist        |\\n/// @notice      |                          |           |                          |\\n/// @notice      +--------------------------+           +--------------------------+\\n/// @notice\\n/// @notice      1. Operators are adding BLS Public Keys of validators running in their\\n/// @notice         infrastructure.\\n/// @notice      2. User deposit ETH to the system and get shares minted in exchange\\n/// @notice      3. Upon deposit, the system verifies if the User is allowed to deposit\\n/// @notice         by querying the Allowlist\\n/// @notice      4. When the system has enough funds to deposit validators, keys are pulled\\n/// @notice         from the Operators Registry\\n/// @notice      5. The deposit data is computed and the validators are funded via the official\\n/// @notice         deposit contract\\n/// @notice      6. Oracles report the total balance of the running validators and the total count\\n/// @notice         of running validators\\n/// @notice      7. The running validators propose blocks that reward the EL Fee Recipient. The funds\\n/// @notice         are pulled back in the system.\\n/// @notice\\ncontract RiverV1 is\\n    ConsensusLayerDepositManagerV1,\\n    UserDepositManagerV1,\\n    SharesManagerV1,\\n    OracleManagerV1,\\n    Initializable,\\n    Administrable,\\n    IRiverV1\\n{\\n    /// @notice The mask for the deposit right\\n    uint256 internal constant DEPOSIT_MASK = 0x1;\\n\\n    /// @inheritdoc IRiverV1\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _operatorRegistryAddress,\\n        address _collectorAddress,\\n        uint256 _globalFee\\n    ) external init(0) {\\n        _setAdmin(_systemAdministratorAddress);\\n\\n        CollectorAddress.set(_collectorAddress);\\n        emit SetCollector(_collectorAddress);\\n\\n        GlobalFee.set(_globalFee);\\n        emit SetGlobalFee(_globalFee);\\n\\n        ELFeeRecipientAddress.set(_elFeeRecipientAddress);\\n        emit SetELFeeRecipient(_elFeeRecipientAddress);\\n\\n        AllowlistAddress.set(_allowlistAddress);\\n        emit SetAllowlist(_allowlistAddress);\\n\\n        OperatorsRegistryAddress.set(_operatorRegistryAddress);\\n        emit SetOperatorsRegistry(_operatorRegistryAddress);\\n\\n        ConsensusLayerDepositManagerV1.initConsensusLayerDepositManagerV1(\\n            _depositContractAddress, _withdrawalCredentials\\n        );\\n\\n        OracleManagerV1.initOracleManagerV1(_oracleAddress);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getGlobalFee() external view returns (uint256) {\\n        return GlobalFee.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getAllowlist() external view returns (address) {\\n        return AllowlistAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getCollector() external view returns (address) {\\n        return CollectorAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getELFeeRecipient() external view returns (address) {\\n        return ELFeeRecipientAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setGlobalFee(uint256 newFee) external onlyAdmin {\\n        GlobalFee.set(newFee);\\n        emit SetGlobalFee(newFee);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setAllowlist(address _newAllowlist) external onlyAdmin {\\n        AllowlistAddress.set(_newAllowlist);\\n        emit SetAllowlist(_newAllowlist);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setCollector(address _newCollector) external onlyAdmin {\\n        CollectorAddress.set(_newCollector);\\n        emit SetCollector(_newCollector);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setELFeeRecipient(address _newELFeeRecipient) external onlyAdmin {\\n        ELFeeRecipientAddress.set(_newELFeeRecipient);\\n        emit SetELFeeRecipient(_newELFeeRecipient);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getOperatorsRegistry() external view returns (address) {\\n        return OperatorsRegistryAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function sendELFees() external payable {\\n        if (msg.sender != ELFeeRecipientAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n    }\\n\\n    /// @notice Overriden handler to pass the system admin inside components\\n    /// @return The address of the admin\\n    function _getRiverAdmin()\\n        internal\\n        view\\n        override (OracleManagerV1, ConsensusLayerDepositManagerV1)\\n        returns (address)\\n    {\\n        return Administrable._getAdmin();\\n    }\\n\\n    /// @notice Overriden handler called whenever a token transfer is triggered\\n    /// @param _from Token sender\\n    /// @param _to Token receiver\\n    function _onTransfer(address _from, address _to) internal view override {\\n        IAllowlistV1 allowlist = IAllowlistV1(AllowlistAddress.get());\\n        if (allowlist.isDenied(_from)) {\\n            revert Denied(_from);\\n        }\\n        if (allowlist.isDenied(_to)) {\\n            revert Denied(_to);\\n        }\\n    }\\n\\n    /// @notice Overriden handler called whenever a user deposits ETH to the system. Mints the adequate amount of shares.\\n    /// @param _depositor User address that made the deposit\\n    /// @param _amount Amount of ETH deposited\\n    function _onDeposit(address _depositor, address _recipient, uint256 _amount) internal override {\\n        uint256 mintedShares = SharesManagerV1._mintShares(_depositor, _amount);\\n        IAllowlistV1 allowlist = IAllowlistV1(AllowlistAddress.get());\\n        if (_depositor == _recipient) {\\n            allowlist.onlyAllowed(_depositor, DEPOSIT_MASK); // this call reverts if unauthorized or denied\\n        } else {\\n            allowlist.onlyAllowed(_depositor, DEPOSIT_MASK); // this call reverts if unauthorized or denied\\n            if (allowlist.isDenied(_recipient)) {\\n                revert Denied(_recipient);\\n            }\\n            _transfer(_depositor, _recipient, mintedShares);\\n        }\\n    }\\n\\n    /// @notice Overriden handler called whenever a deposit to the consensus layer is made. Should retrieve _requestedAmount or lower keys\\n    /// @param _requestedAmount Amount of keys required. Contract is expected to send _requestedAmount or lower.\\n    /// @return publicKeys Array of fundable public keys\\n    /// @return signatures Array of signatures linked to the public keys\\n    function _getNextValidators(uint256 _requestedAmount)\\n        internal\\n        override\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        return IOperatorsRegistryV1(OperatorsRegistryAddress.get()).pickNextValidators(_requestedAmount);\\n    }\\n\\n    /// @notice Overriden handler to pull funds from the execution layer fee recipient to River and return the delta in the balance\\n    /// @param _max The maximum amount to pull from the execution layer fee recipient\\n    /// @return The amount pulled from the execution layer fee recipient\\n    function _pullELFees(uint256 _max) internal override returns (uint256) {\\n        address elFeeRecipient = ELFeeRecipientAddress.get();\\n        if (elFeeRecipient == address(0)) {\\n            return 0;\\n        }\\n        uint256 initialBalance = address(this).balance;\\n        IELFeeRecipientV1(payable(elFeeRecipient)).pullELFees(_max);\\n        uint256 collectedELFees = address(this).balance - initialBalance;\\n        BalanceToDeposit.set(BalanceToDeposit.get() + collectedELFees);\\n        emit PulledELFees(collectedELFees);\\n        return collectedELFees;\\n    }\\n\\n    /// @notice Overriden handler called whenever the balance of ETH handled by the system increases. Computes the fees paid to the collector\\n    /// @param _amount Additional ETH received\\n    function _onEarnings(uint256 _amount) internal override {\\n        uint256 oldTotalSupply = _totalSupply();\\n        if (oldTotalSupply == 0) {\\n            revert ZeroMintedShares();\\n        }\\n        uint256 newTotalBalance = _assetBalance();\\n        uint256 globalFee = GlobalFee.get();\\n        uint256 numerator = _amount * oldTotalSupply * globalFee;\\n        uint256 denominator = (newTotalBalance * LibBasisPoints.BASIS_POINTS_MAX) - (_amount * globalFee);\\n        uint256 sharesToMint = denominator == 0 ? 0 : (numerator / denominator);\\n\\n        if (sharesToMint > 0) {\\n            address collector = CollectorAddress.get();\\n            _mintRawShares(collector, sharesToMint);\\n            uint256 newTotalSupply = _totalSupply();\\n            uint256 oldTotalBalance = newTotalBalance - _amount;\\n            emit RewardsEarned(collector, oldTotalBalance, oldTotalSupply, newTotalBalance, newTotalSupply);\\n        }\\n    }\\n\\n    /// @notice Overriden handler called whenever the total balance of ETH is requested\\n    /// @return The current total asset balance managed by River\\n    function _assetBalance() internal view override returns (uint256) {\\n        uint256 clValidatorCount = CLValidatorCount.get();\\n        uint256 depositedValidatorCount = DepositedValidatorCount.get();\\n        if (clValidatorCount < depositedValidatorCount) {\\n            return CLValidatorTotalBalance.get() + BalanceToDeposit.get()\\n                + (depositedValidatorCount - clValidatorCount) * ConsensusLayerDepositManagerV1.DEPOSIT_SIZE;\\n        } else {\\n            return CLValidatorTotalBalance.get() + BalanceToDeposit.get();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7d9aa9e9a7b170a0967a48969d94b53720280b650b95ff964b746a75fe703bd\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/ConsensusLayerDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/components/IConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"../interfaces/IDepositContract.sol\\\";\\n\\nimport \\\"../libraries/LibBytes.sol\\\";\\nimport \\\"../libraries/LibUint256.sol\\\";\\n\\nimport \\\"../state/river/DepositContractAddress.sol\\\";\\nimport \\\"../state/river/WithdrawalCredentials.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\nimport \\\"../state/river/BalanceToDeposit.sol\\\";\\n\\n/// @title Consensus Layer Deposit Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the interactions with the official deposit contract, funding all validators\\n/// @notice Whenever a deposit to the consensus layer is requested, this contract computed the amount of keys\\n/// @notice that could be deposited depending on the amount available in the contract. It then tries to retrieve\\n/// @notice validator keys by calling its internal virtual method _getNextValidators. This method should be\\n/// @notice overridden by the implementing contract to provide [0; _keyCount] keys when invoked.\\nabstract contract ConsensusLayerDepositManagerV1 is IConsensusLayerDepositManagerV1 {\\n    /// @notice Size of a BLS Public key in bytes\\n    uint256 public constant PUBLIC_KEY_LENGTH = 48;\\n    /// @notice Size of a BLS Signature in bytes\\n    uint256 public constant SIGNATURE_LENGTH = 96;\\n    /// @notice Size of a deposit in ETH\\n    uint256 public constant DEPOSIT_SIZE = 32 ether;\\n\\n    /// @notice Handler called to retrieve the internal River admin address\\n    /// @dev Must be overriden\\n    function _getRiverAdmin() internal view virtual returns (address);\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin_CDMV1() {\\n        if (msg.sender != _getRiverAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Internal helper to retrieve validator keys ready to be funded\\n    /// @dev Must be overridden\\n    /// @param _keyCount The amount of keys (or less) to return.\\n    function _getNextValidators(uint256 _keyCount)\\n        internal\\n        virtual\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n\\n    /// @notice Initializer to set the deposit contract address and the withdrawal credentials to use\\n    /// @param _depositContractAddress The address of the deposit contract\\n    /// @param _withdrawalCredentials The withdrawal credentials to apply to all deposits\\n    function initConsensusLayerDepositManagerV1(address _depositContractAddress, bytes32 _withdrawalCredentials)\\n        internal\\n    {\\n        DepositContractAddress.set(_depositContractAddress);\\n        emit SetDepositContractAddress(_depositContractAddress);\\n\\n        WithdrawalCredentials.set(_withdrawalCredentials);\\n        emit SetWithdrawalCredentials(_withdrawalCredentials);\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function getBalanceToDeposit() external view returns (uint256) {\\n        return BalanceToDeposit.get();\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function getWithdrawalCredentials() external view returns (bytes32) {\\n        return WithdrawalCredentials.get();\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function getDepositedValidatorCount() external view returns (uint256) {\\n        return DepositedValidatorCount.get();\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function depositToConsensusLayer(uint256 _maxCount) external onlyAdmin_CDMV1 {\\n        uint256 balanceToDeposit = BalanceToDeposit.get();\\n        uint256 keyToDepositCount = LibUint256.min(balanceToDeposit / DEPOSIT_SIZE, _maxCount);\\n\\n        if (keyToDepositCount == 0) {\\n            revert NotEnoughFunds();\\n        }\\n\\n        (bytes[] memory publicKeys, bytes[] memory signatures) = _getNextValidators(keyToDepositCount);\\n\\n        uint256 receivedPublicKeyCount = publicKeys.length;\\n\\n        if (receivedPublicKeyCount == 0) {\\n            revert NoAvailableValidatorKeys();\\n        }\\n\\n        if (receivedPublicKeyCount > keyToDepositCount) {\\n            revert InvalidPublicKeyCount();\\n        }\\n\\n        uint256 receivedSignatureCount = signatures.length;\\n\\n        if (receivedSignatureCount != receivedPublicKeyCount) {\\n            revert InvalidSignatureCount();\\n        }\\n\\n        bytes32 withdrawalCredentials = WithdrawalCredentials.get();\\n\\n        if (withdrawalCredentials == 0) {\\n            revert InvalidWithdrawalCredentials();\\n        }\\n\\n        for (uint256 idx = 0; idx < receivedPublicKeyCount;) {\\n            _depositValidator(publicKeys[idx], signatures[idx], withdrawalCredentials);\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        BalanceToDeposit.set(balanceToDeposit - DEPOSIT_SIZE * receivedPublicKeyCount);\\n        DepositedValidatorCount.set(DepositedValidatorCount.get() + receivedPublicKeyCount);\\n    }\\n\\n    /// @notice Deposits 32 ETH to the official Deposit contract\\n    /// @param _publicKey The public key of the validator\\n    /// @param _signature The signature provided by the operator\\n    /// @param _withdrawalCredentials The withdrawal credentials provided by River\\n    function _depositValidator(bytes memory _publicKey, bytes memory _signature, bytes32 _withdrawalCredentials)\\n        internal\\n    {\\n        if (_publicKey.length != PUBLIC_KEY_LENGTH) {\\n            revert InconsistentPublicKeys();\\n        }\\n\\n        if (_signature.length != SIGNATURE_LENGTH) {\\n            revert InconsistentSignatures();\\n        }\\n        uint256 value = DEPOSIT_SIZE;\\n\\n        uint256 depositAmount = value / 1 gwei;\\n\\n        bytes32 pubkeyRoot = sha256(bytes.concat(_publicKey, bytes16(0)));\\n        bytes32 signatureRoot = sha256(\\n            bytes.concat(\\n                sha256(LibBytes.slice(_signature, 0, 64)),\\n                sha256(bytes.concat(LibBytes.slice(_signature, 64, SIGNATURE_LENGTH - 64), bytes32(0)))\\n            )\\n        );\\n\\n        bytes32 depositDataRoot = sha256(\\n            bytes.concat(\\n                sha256(bytes.concat(pubkeyRoot, _withdrawalCredentials)),\\n                sha256(bytes.concat(bytes32(LibUint256.toLittleEndian64(depositAmount)), signatureRoot))\\n            )\\n        );\\n\\n        uint256 targetBalance = address(this).balance - value;\\n\\n        IDepositContract(DepositContractAddress.get()).deposit{value: value}(\\n            _publicKey, abi.encodePacked(_withdrawalCredentials), _signature, depositDataRoot\\n        );\\n        if (address(this).balance != targetBalance) {\\n            revert ErrorOnDeposit();\\n        }\\n        emit FundedValidatorKey(_publicKey);\\n    }\\n}\\n\",\"keccak256\":\"0xd7701afc7b63fc1cc12b8a74b9d0eb880e3094d4c0f32b866080226d520e2aab\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/OracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/components/IOracleManager.1.sol\\\";\\n\\nimport \\\"../state/river/OracleAddress.sol\\\";\\nimport \\\"../state/river/LastOracleRoundId.sol\\\";\\nimport \\\"../state/river/CLValidatorTotalBalance.sol\\\";\\nimport \\\"../state/river/CLValidatorCount.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\n\\n/// @title Oracle Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the inputs provided by the oracle\\n/// @notice The Oracle contract is plugged to this contract and is in charge of pushing\\n/// @notice data whenever a new report has been deemed valid. The report consists in two\\n/// @notice values: the sum of all balances of all deposited validators and the count of\\n/// @notice validators that have been activated on the consensus layer.\\nabstract contract OracleManagerV1 is IOracleManagerV1 {\\n    /// @notice Handler called if the delta between the last and new validator balance sum is positive\\n    /// @dev Must be overridden\\n    /// @param _profits The positive increase in the validator balance sum (staking rewards)\\n    function _onEarnings(uint256 _profits) internal virtual;\\n\\n    /// @notice Handler called to pull the Execution layer fees from the recipient\\n    /// @dev Must be overridden\\n    /// @param _max The maximum amount to pull inside the system\\n    /// @return The amount pulled inside the system\\n    function _pullELFees(uint256 _max) internal virtual returns (uint256);\\n\\n    /// @notice Handler called to retrieve the system administrator address\\n    /// @dev Must be overridden\\n    /// @return The system administrator address\\n    function _getRiverAdmin() internal view virtual returns (address);\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin_OMV1() {\\n        if (msg.sender != _getRiverAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Set the initial oracle address\\n    /// @param _oracle Address of the oracle\\n    function initOracleManagerV1(address _oracle) internal {\\n        OracleAddress.set(_oracle);\\n        emit SetOracle(_oracle);\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getOracle() external view returns (address) {\\n        return OracleAddress.get();\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getCLValidatorTotalBalance() external view returns (uint256) {\\n        return CLValidatorTotalBalance.get();\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getCLValidatorCount() external view returns (uint256) {\\n        return CLValidatorCount.get();\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function setOracle(address _oracleAddress) external onlyAdmin_OMV1 {\\n        OracleAddress.set(_oracleAddress);\\n        emit SetOracle(_oracleAddress);\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function setConsensusLayerData(\\n        uint256 _validatorCount,\\n        uint256 _validatorTotalBalance,\\n        bytes32 _roundId,\\n        uint256 _maxIncrease\\n    ) external {\\n        if (msg.sender != OracleAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n\\n        if (_validatorCount > DepositedValidatorCount.get()) {\\n            revert InvalidValidatorCountReport(_validatorCount, DepositedValidatorCount.get());\\n        }\\n\\n        uint256 newValidators = _validatorCount - CLValidatorCount.get();\\n        uint256 previousValidatorTotalBalance = CLValidatorTotalBalance.get() + (newValidators * 32 ether);\\n\\n        CLValidatorTotalBalance.set(_validatorTotalBalance);\\n        CLValidatorCount.set(_validatorCount);\\n        LastOracleRoundId.set(_roundId);\\n\\n        uint256 executionLayerFees;\\n\\n        // if there's a margin left for pulling the execution layer fees that would leave our delta under the allowed maxIncrease value, do it\\n        if ((_maxIncrease + previousValidatorTotalBalance) > _validatorTotalBalance) {\\n            executionLayerFees = _pullELFees((_maxIncrease + previousValidatorTotalBalance) - _validatorTotalBalance);\\n        }\\n\\n        if (previousValidatorTotalBalance < _validatorTotalBalance + executionLayerFees) {\\n            _onEarnings((_validatorTotalBalance + executionLayerFees) - previousValidatorTotalBalance);\\n        }\\n\\n        emit ConsensusLayerDataUpdate(_validatorCount, _validatorTotalBalance, _roundId);\\n    }\\n}\\n\",\"keccak256\":\"0xe7765023760ec972a2c39de4fede1c5f390cad12aa7a83acd2d8fe98c98b443d\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/SharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/components/ISharesManager.1.sol\\\";\\n\\nimport \\\"../state/river/Shares.sol\\\";\\nimport \\\"../state/river/SharesPerOwner.sol\\\";\\nimport \\\"../state/shared/ApprovalsPerOwner.sol\\\";\\n\\n/// @title Shares Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the shares of the depositor and the ERC20 interface\\nabstract contract SharesManagerV1 is ISharesManagerV1 {\\n    /// @notice Internal hook triggered on the external transfer call\\n    /// @dev Must be overridden\\n    /// @param _from Address of the sender\\n    /// @param _to Address of the recipient\\n    function _onTransfer(address _from, address _to) internal view virtual;\\n\\n    /// @notice Internal method to override to provide the total underlying asset balance\\n    /// @dev Must be overridden\\n    /// @return The total asset balance of the system\\n    function _assetBalance() internal view virtual returns (uint256);\\n\\n    /// @notice Modifier used to ensure that the transfer is allowed by using the internal hook to perform internal checks\\n    /// @param _from Address of the sender\\n    /// @param _to Address of the recipient\\n    modifier transferAllowed(address _from, address _to) {\\n        _onTransfer(_from, _to);\\n        _;\\n    }\\n\\n    /// @notice Modifier used to ensure the amount transferred is not 0\\n    /// @param _value Amount to check\\n    modifier isNotZero(uint256 _value) {\\n        if (_value == 0) {\\n            revert NullTransfer();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier used to ensure that the sender has enough funds for the transfer\\n    /// @param _owner Address of the sender\\n    /// @param _value Value that is required to be sent\\n    modifier hasFunds(address _owner, uint256 _value) {\\n        if (_balanceOf(_owner) < _value) {\\n            revert BalanceTooLow();\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function name() external pure returns (string memory) {\\n        return \\\"Liquid Staked ETH\\\";\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function symbol() external pure returns (string memory) {\\n        return \\\"LsETH\\\";\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function totalUnderlyingSupply() external view returns (uint256) {\\n        return _assetBalance();\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function balanceOf(address _owner) external view returns (uint256) {\\n        return _balanceOf(_owner);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function balanceOfUnderlying(address _owner) public view returns (uint256) {\\n        return _balanceFromShares(SharesPerOwner.get(_owner));\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function underlyingBalanceFromShares(uint256 _shares) external view returns (uint256) {\\n        return _balanceFromShares(_shares);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function sharesFromUnderlyingBalance(uint256 _underlyingAssetAmount) external view returns (uint256) {\\n        return _sharesFromBalance(_underlyingAssetAmount);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function allowance(address _owner, address _spender) external view returns (uint256) {\\n        return ApprovalsPerOwner.get(_owner, _spender);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function transfer(address _to, uint256 _value)\\n        external\\n        transferAllowed(msg.sender, _to)\\n        isNotZero(_value)\\n        hasFunds(msg.sender, _value)\\n        returns (bool)\\n    {\\n        if (_to == address(0)) {\\n            revert UnauthorizedTransfer(msg.sender, address(0));\\n        }\\n        return _transfer(msg.sender, _to, _value);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        external\\n        transferAllowed(_from, _to)\\n        isNotZero(_value)\\n        hasFunds(_from, _value)\\n        returns (bool)\\n    {\\n        if (_to == address(0)) {\\n            revert UnauthorizedTransfer(_from, address(0));\\n        }\\n        _spendAllowance(_from, _value);\\n        return _transfer(_from, _to, _value);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function approve(address _spender, uint256 _value) external returns (bool) {\\n        ApprovalsPerOwner.set(msg.sender, _spender, _value);\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool) {\\n        uint256 newApprovalValue = ApprovalsPerOwner.get(msg.sender, _spender) + _additionalValue;\\n        ApprovalsPerOwner.set(msg.sender, _spender, newApprovalValue);\\n        emit Approval(msg.sender, _spender, newApprovalValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool) {\\n        uint256 newApprovalValue = ApprovalsPerOwner.get(msg.sender, _spender) - _subtractableValue;\\n        ApprovalsPerOwner.set(msg.sender, _spender, newApprovalValue);\\n        emit Approval(msg.sender, _spender, newApprovalValue);\\n        return true;\\n    }\\n\\n    /// @notice Internal utility to spend the allowance of an account from the message sender\\n    /// @param _from Address owning the allowance\\n    /// @param _value Amount of allowance in shares to spend\\n    function _spendAllowance(address _from, uint256 _value) internal {\\n        uint256 currentAllowance = ApprovalsPerOwner.get(_from, msg.sender);\\n        if (currentAllowance < _value) {\\n            revert AllowanceTooLow(_from, msg.sender, currentAllowance, _value);\\n        }\\n        if (currentAllowance != type(uint256).max) {\\n            ApprovalsPerOwner.set(_from, msg.sender, currentAllowance - _value);\\n        }\\n    }\\n\\n    /// @notice Internal utility to retrieve the total supply of tokens\\n    /// @return The total supply\\n    function _totalSupply() internal view returns (uint256) {\\n        return Shares.get();\\n    }\\n\\n    /// @notice Internal utility to perform an unchecked transfer\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\\n        SharesPerOwner.set(_from, SharesPerOwner.get(_from) - _value);\\n        SharesPerOwner.set(_to, SharesPerOwner.get(_to) + _value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /// @notice Internal utility to retrieve the underlying asset balance for the given shares\\n    /// @param _shares Amount of shares to convert\\n    /// @return The balance from the given shares\\n    function _balanceFromShares(uint256 _shares) internal view returns (uint256) {\\n        uint256 _totalSharesValue = Shares.get();\\n\\n        if (_totalSharesValue == 0) {\\n            return 0;\\n        }\\n\\n        return ((_shares * _assetBalance())) / _totalSharesValue;\\n    }\\n\\n    /// @notice Internal utility to retrieve the shares count for a given underlying asset amount\\n    /// @param _balance Amount of underlying asset balance to convert\\n    /// @return The shares from the given balance\\n    function _sharesFromBalance(uint256 _balance) internal view returns (uint256) {\\n        uint256 _totalSharesValue = Shares.get();\\n\\n        if (_totalSharesValue == 0) {\\n            return 0;\\n        }\\n\\n        return (_balance * _totalSharesValue) / _assetBalance();\\n    }\\n\\n    /// @notice Internal utility to mint shares for the specified user\\n    /// @dev This method assumes that funds received are now part of the _assetBalance()\\n    /// @param _owner Account that should receive the new shares\\n    /// @param _underlyingAssetValue Value of underlying asset received, to convert into shares\\n    /// @return sharesToMint The amnount of minted shares\\n    function _mintShares(address _owner, uint256 _underlyingAssetValue) internal returns (uint256 sharesToMint) {\\n        uint256 oldTotalAssetBalance = _assetBalance() - _underlyingAssetValue;\\n\\n        if (oldTotalAssetBalance == 0) {\\n            sharesToMint = _underlyingAssetValue;\\n            _mintRawShares(_owner, _underlyingAssetValue);\\n        } else {\\n            sharesToMint = (_underlyingAssetValue * _totalSupply()) / oldTotalAssetBalance;\\n            _mintRawShares(_owner, sharesToMint);\\n        }\\n    }\\n\\n    /// @notice Internal utility to mint shares without any conversion, and emits a mint Transfer event\\n    /// @param _owner Account that should receive the new shares\\n    /// @param _value Amount of shares to mint\\n    function _mintRawShares(address _owner, uint256 _value) internal {\\n        Shares.set(Shares.get() + _value);\\n        SharesPerOwner.set(_owner, SharesPerOwner.get(_owner) + _value);\\n        emit Transfer(address(0), _owner, _value);\\n    }\\n\\n    /// @notice Internal utility to retrieve the amount of shares per owner\\n    /// @param _owner Account to be checked\\n    /// @return The balance of the account in shares\\n    function _balanceOf(address _owner) internal view returns (uint256) {\\n        return SharesPerOwner.get(_owner);\\n    }\\n}\\n\",\"keccak256\":\"0x1a722d20051307182fb8369a3f15404af3fd1df4eb251b30193c08f193e60075\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/UserDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/components/IUserDepositManager.1.sol\\\";\\n\\nimport \\\"../libraries/LibSanitize.sol\\\";\\n\\nimport \\\"../state/river/BalanceToDeposit.sol\\\";\\n\\n/// @title User Deposit Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the inbound transfers cases or the explicit submissions\\nabstract contract UserDepositManagerV1 is IUserDepositManagerV1 {\\n    /// @notice Handler called whenever a user has sent funds to the contract\\n    /// @dev Must be overridden\\n    /// @param _depositor Address that made the deposit\\n    /// @param _recipient Address that receives the minted shares\\n    /// @param _amount Amount deposited\\n    function _onDeposit(address _depositor, address _recipient, uint256 _amount) internal virtual;\\n\\n    /// @inheritdoc IUserDepositManagerV1\\n    function deposit() external payable {\\n        _deposit(msg.sender);\\n    }\\n\\n    /// @inheritdoc IUserDepositManagerV1\\n    function depositAndTransfer(address _recipient) external payable {\\n        LibSanitize._notZeroAddress(_recipient);\\n        _deposit(_recipient);\\n    }\\n\\n    /// @inheritdoc IUserDepositManagerV1\\n    receive() external payable {\\n        _deposit(msg.sender);\\n    }\\n\\n    /// @inheritdoc IUserDepositManagerV1\\n    fallback() external payable {\\n        revert LibErrors.InvalidCall();\\n    }\\n\\n    /// @notice Internal utility calling the deposit handler and emitting the deposit details\\n    /// @param _recipient The account receiving the minted shares\\n    function _deposit(address _recipient) internal {\\n        if (msg.value == 0) {\\n            revert EmptyDeposit();\\n        }\\n\\n        BalanceToDeposit.set(BalanceToDeposit.get() + msg.value);\\n\\n        _onDeposit(msg.sender, _recipient, msg.value);\\n\\n        emit UserDeposit(msg.sender, _recipient, msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x1996ead84f73844ce6d8e869a74dfcd78cef629074165bb24e8c0fa1010a5897\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Administrable Interface\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the ownership of the contracts\\ninterface IAdministrable {\\n    /// @notice The pending admin address changed\\n    /// @param pendingAdmin New pending admin address\\n    event SetPendingAdmin(address indexed pendingAdmin);\\n\\n    /// @notice The admin address changed\\n    /// @param admin New admin address\\n    event SetAdmin(address indexed admin);\\n\\n    /// @notice Retrieves the current admin address\\n    /// @return The admin address\\n    function getAdmin() external view returns (address);\\n\\n    /// @notice Retrieve the current pending admin address\\n    /// @return The pending admin address\\n    function getPendingAdmin() external view returns (address);\\n\\n    /// @notice Proposes a new address as admin\\n    /// @dev This security prevents setting an invalid address as an admin. The pending\\n    /// @dev admin has to claim its ownership of the contract, and prove that the new\\n    /// @dev address is able to perform regular transactions.\\n    /// @param _newAdmin New admin address\\n    function proposeAdmin(address _newAdmin) external;\\n\\n    /// @notice Accept the transfer of ownership\\n    /// @dev Only callable by the pending admin. Resets the pending admin if succesful.\\n    function acceptAdmin() external;\\n}\\n\",\"keccak256\":\"0xe45ef81bf9326bac437dcf901eeb80628d5c87d51dcbcf3addb80e834ba7bfea\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAllowlist.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Allowlist Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the list of allowed recipients.\\ninterface IAllowlistV1 {\\n    /// @notice The permissions of several accounts have changed\\n    /// @param accounts List of accounts\\n    /// @param permissions New permissions for each account at the same index\\n    event SetAllowlistPermissions(address[] indexed accounts, uint256[] permissions);\\n\\n    /// @notice The stored allower address has been changed\\n    /// @param allower The new allower address\\n    event SetAllower(address indexed allower);\\n\\n    /// @notice The provided accounts list is empty\\n    error InvalidAlloweeCount();\\n\\n    /// @notice The account is denied access\\n    /// @param _account The denied account\\n    error Denied(address _account);\\n\\n    /// @notice The provided accounts and permissions list have different lengths\\n    error MismatchedAlloweeAndStatusCount();\\n\\n    /// @notice Initializes the allowlist\\n    /// @param _admin Address of the Allowlist administrator\\n    /// @param _allower Address of the allower\\n    function initAllowlistV1(address _admin, address _allower) external;\\n\\n    /// @notice Retrieves the allower address\\n    /// @return The address of the allower\\n    function getAllower() external view returns (address);\\n\\n    /// @notice This method returns true if the user has the expected permission and\\n    ///         is not in the deny list\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    /// @return True if mask is respected and user is allowed\\n    function isAllowed(address _account, uint256 _mask) external view returns (bool);\\n\\n    /// @notice This method returns true if the user is in the deny list\\n    /// @param _account Recipient to verify\\n    /// @return True if user is denied access\\n    function isDenied(address _account) external view returns (bool);\\n\\n    /// @notice This method returns true if the user has the expected permission\\n    ///         ignoring any deny list membership\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    /// @return True if mask is respected\\n    function hasPermission(address _account, uint256 _mask) external view returns (bool);\\n\\n    /// @notice This method retrieves the raw permission value\\n    /// @param _account Recipient to verify\\n    /// @return The raw permissions value of the account\\n    function getPermissions(address _account) external view returns (uint256);\\n\\n    /// @notice This method should be used as a modifier and is expected to revert\\n    ///         if the user hasn't got the required permission or if the user is\\n    ///         in the deny list.\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    function onlyAllowed(address _account, uint256 _mask) external view;\\n\\n    /// @notice Changes the allower address\\n    /// @param _newAllowerAddress New address allowed to edit the allowlist\\n    function setAllower(address _newAllowerAddress) external;\\n\\n    /// @notice Sets the allowlisting status for one or more accounts\\n    /// @dev The permission value is overridden and not updated\\n    /// @param _accounts Accounts with statuses to edit\\n    /// @param _permissions Allowlist permissions for each account, in the same order as _accounts\\n    function allow(address[] calldata _accounts, uint256[] calldata _permissions) external;\\n}\\n\",\"keccak256\":\"0x5adc1d16239b5d210b1779325b85b80435b4e5c0d8d578c6f72c01e98dcf224f\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IDepositContract.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Deposit Contract Interface\\n/// @notice This interface exposes methods to perform validator deposits\\ninterface IDepositContract {\\n    /// @notice Official deposit method to activate a validator on the consensus layer\\n    /// @param pubkey The 48 bytes long BLS Public key representing the validator\\n    /// @param withdrawalCredentials The 32 bytes long withdrawal credentials, configures the withdrawal recipient\\n    /// @param signature The 96 bytes long BLS Signature performed by the pubkey's private key\\n    /// @param depositDataRoot The root hash of the whole deposit data structure\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawalCredentials,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xd6eb6616fcc668e5c00141d60c3d5079dce01a04d2761ad4fe68e13a349d3850\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IELFeeRecipient.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Execution Layer Fee Recipient Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to receive all the execution layer fees from the proposed blocks + bribes\\ninterface IELFeeRecipientV1 {\\n    /// @notice The storage river address has changed\\n    /// @param river The new river address\\n    event SetRiver(address indexed river);\\n\\n    /// @notice The fallback has been triggered\\n    error InvalidCall();\\n\\n    /// @notice Initialize the fee recipient with the required arguments\\n    /// @param _riverAddress Address of River\\n    function initELFeeRecipientV1(address _riverAddress) external;\\n\\n    /// @notice Pulls all the ETH to the River contract\\n    /// @dev Only callable by the River contract\\n    /// @param _maxAmount The maximum amount to pull into the system\\n    function pullELFees(uint256 _maxAmount) external;\\n\\n    /// @notice Ether receiver\\n    receive() external payable;\\n\\n    /// @notice Invalid fallback detector\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x1cbb9895cd2524fdc241c9203fbd796493f613a2c8018acae99ddfd0899a1025\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IOperatorRegistry.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/operatorsRegistry/Operators.sol\\\";\\n\\n/// @title Operators Registry Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the list of operators and their keys\\ninterface IOperatorsRegistryV1 {\\n    /// @notice A new operator has been added to the registry\\n    /// @param index The operator index\\n    /// @param name The operator display name\\n    /// @param operatorAddress The operator address\\n    event AddedOperator(uint256 indexed index, string name, address indexed operatorAddress);\\n\\n    /// @notice The operator status has been changed\\n    /// @param index The operator index\\n    /// @param active True if the operator is active\\n    event SetOperatorStatus(uint256 indexed index, bool active);\\n\\n    /// @notice The operator limit has been changed\\n    /// @param index The operator index\\n    /// @param newLimit The new operator staking limit\\n    event SetOperatorLimit(uint256 indexed index, uint256 newLimit);\\n\\n    /// @notice The operator stopped validator count has been changed\\n    /// @param index The operator index\\n    /// @param newStoppedValidatorCount The new stopped validator count\\n    event SetOperatorStoppedValidatorCount(uint256 indexed index, uint256 newStoppedValidatorCount);\\n\\n    /// @notice The operator address has been changed\\n    /// @param index The operator index\\n    /// @param newOperatorAddress The new operator address\\n    event SetOperatorAddress(uint256 indexed index, address indexed newOperatorAddress);\\n\\n    /// @notice The operator display name has been changed\\n    /// @param index The operator index\\n    /// @param newName The new display name\\n    event SetOperatorName(uint256 indexed index, string newName);\\n\\n    /// @notice The operator or the admin added new validator keys and signatures\\n    /// @dev The public keys and signatures are concatenated\\n    /// @dev A public key is 48 bytes long\\n    /// @dev A signature is 96 bytes long\\n    /// @dev [P1, S1, P2, S2, ..., PN, SN] where N is the bytes length divided by (96 + 48)\\n    /// @param index The operator index\\n    /// @param publicKeysAndSignatures The concatenated public keys and signatures\\n    event AddedValidatorKeys(uint256 indexed index, bytes publicKeysAndSignatures);\\n\\n    /// @notice The operator or the admin removed a public key and its signature from the registry\\n    /// @param index The operator index\\n    /// @param publicKey The BLS public key that has been removed\\n    event RemovedValidatorKey(uint256 indexed index, bytes publicKey);\\n\\n    /// @notice The stored river address has been changed\\n    /// @param river The new river address\\n    event SetRiver(address indexed river);\\n\\n    /// @notice The operator edited its keys after the snapshot block\\n    /// @dev This means that we cannot assume that its key set is checked by the snapshot\\n    /// @dev This happens only if the limit was meant to be increased\\n    /// @param index The operator index\\n    /// @param currentLimit The current operator limit\\n    /// @param newLimit The new operator limit that was attempted to be set\\n    /// @param latestKeysEditBlockNumber The last block number at which the operator changed its keys\\n    /// @param snapshotBlock The block number of the snapshot\\n    event OperatorEditsAfterSnapshot(\\n        uint256 indexed index,\\n        uint256 currentLimit,\\n        uint256 newLimit,\\n        uint256 indexed latestKeysEditBlockNumber,\\n        uint256 indexed snapshotBlock\\n    );\\n\\n    /// @notice The call didn't alter the limit of the operator\\n    /// @param index The operator index\\n    /// @param limit The limit of the operator\\n    event OperatorLimitUnchanged(uint256 indexed index, uint256 limit);\\n\\n    /// @notice The calling operator is inactive\\n    /// @param index The operator index\\n    error InactiveOperator(uint256 index);\\n\\n    /// @notice A funded key deletion has been attempted\\n    error InvalidFundedKeyDeletionAttempt();\\n\\n    /// @notice The index provided are not sorted properly (descending order)\\n    error InvalidUnsortedIndexes();\\n\\n    /// @notice The provided operator and limits array have different lengths\\n    error InvalidArrayLengths();\\n\\n    /// @notice The provided operator and limits array are empty\\n    error InvalidEmptyArray();\\n\\n    /// @notice The provided key count is 0\\n    error InvalidKeyCount();\\n\\n    /// @notice The provided concatenated keys do not have the expected length\\n    error InvalidKeysLength();\\n\\n    /// @notice The index that is removed is out of bounds\\n    error InvalidIndexOutOfBounds();\\n\\n    /// @notice The value for the operator limit is too high\\n    /// @param index The operator index\\n    /// @param limit The new limit provided\\n    /// @param keyCount The operator key count\\n    error OperatorLimitTooHigh(uint256 index, uint256 limit, uint256 keyCount);\\n\\n    /// @notice The value for the limit is too low\\n    /// @param index The operator index\\n    /// @param limit The new limit provided\\n    /// @param fundedKeyCount The operator funded key count\\n    error OperatorLimitTooLow(uint256 index, uint256 limit, uint256 fundedKeyCount);\\n\\n    /// @notice The provided list of operators is not in increasing order\\n    error UnorderedOperatorList();\\n\\n    /// @notice Initializes the operators registry\\n    /// @param _admin Admin in charge of managing operators\\n    /// @param _river Address of River system\\n    function initOperatorsRegistryV1(address _admin, address _river) external;\\n\\n    /// @notice Retrieve the River address\\n    /// @return The address of River\\n    function getRiver() external view returns (address);\\n\\n    /// @notice Get operator details\\n    /// @param _index The index of the operator\\n    /// @return The details of the operator\\n    function getOperator(uint256 _index) external view returns (Operators.Operator memory);\\n\\n    /// @notice Get operator count\\n    /// @return The operator count\\n    function getOperatorCount() external view returns (uint256);\\n\\n    /// @notice Get the details of a validator\\n    /// @param _operatorIndex The index of the operator\\n    /// @param _validatorIndex The index of the validator\\n    /// @return publicKey The public key of the validator\\n    /// @return signature The signature used during deposit\\n    /// @return funded True if validator has been funded\\n    function getValidator(uint256 _operatorIndex, uint256 _validatorIndex)\\n        external\\n        view\\n        returns (bytes memory publicKey, bytes memory signature, bool funded);\\n\\n    /// @notice Retrieve the active operator set\\n    /// @return The list of active operators and their details\\n    function listActiveOperators() external view returns (Operators.Operator[] memory);\\n\\n    /// @notice Adds an operator to the registry\\n    /// @dev Only callable by the administrator\\n    /// @param _name The name identifying the operator\\n    /// @param _operator The address representing the operator, receiving the rewards\\n    /// @return The index of the new operator\\n    function addOperator(string calldata _name, address _operator) external returns (uint256);\\n\\n    /// @notice Changes the operator address of an operator\\n    /// @dev Only callable by the administrator or the previous operator address\\n    /// @param _index The operator index\\n    /// @param _newOperatorAddress The new address of the operator\\n    function setOperatorAddress(uint256 _index, address _newOperatorAddress) external;\\n\\n    /// @notice Changes the operator name\\n    /// @dev Only callable by the administrator or the operator\\n    /// @param _index The operator index\\n    /// @param _newName The new operator name\\n    function setOperatorName(uint256 _index, string calldata _newName) external;\\n\\n    /// @notice Changes the operator status\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStatus The new status of the operator\\n    function setOperatorStatus(uint256 _index, bool _newStatus) external;\\n\\n    /// @notice Changes the operator stopped validator count\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStoppedValidatorCount The new stopped validator count of the operator\\n    function setOperatorStoppedValidatorCount(uint256 _index, uint256 _newStoppedValidatorCount) external;\\n\\n    /// @notice Changes the operator staking limit\\n    /// @dev Only callable by the administrator\\n    /// @dev The operator indexes must be in increasing order and contain no duplicate\\n    /// @dev The limit cannot exceed the total key count of the operator\\n    /// @dev The _indexes and _newLimits must have the same length.\\n    /// @dev Each limit value is applied to the operator index at the same index in the _indexes array.\\n    /// @param _operatorIndexes The operator indexes, in increasing order and duplicate free\\n    /// @param _newLimits The new staking limit of the operators\\n    /// @param _snapshotBlock The block number at which the snapshot was computed\\n    function setOperatorLimits(\\n        uint256[] calldata _operatorIndexes,\\n        uint256[] calldata _newLimits,\\n        uint256 _snapshotBlock\\n    ) external;\\n\\n    /// @notice Adds new keys for an operator\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @param _index The operator index\\n    /// @param _keyCount The amount of keys provided\\n    /// @param _publicKeysAndSignatures Public keys of the validator, concatenated\\n    function addValidators(uint256 _index, uint256 _keyCount, bytes calldata _publicKeysAndSignatures) external;\\n\\n    /// @notice Remove validator keys\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @dev The indexes must be provided sorted in decreasing order and duplicate-free, otherwise the method will revert\\n    /// @dev The operator limit will be set to the lowest deleted key index if the operator's limit wasn't equal to its total key count\\n    /// @dev The operator or the admin cannot remove funded keys\\n    /// @param _index The operator index\\n    /// @param _indexes The indexes of the keys to remove\\n    function removeValidators(uint256 _index, uint256[] calldata _indexes) external;\\n\\n    /// @notice Retrieve validator keys based on operator statuses\\n    /// @param _count Max amount of keys requested\\n    /// @return publicKeys An array of public keys\\n    /// @return signatures An array of signatures linked to the public keys\\n    function pickNextValidators(uint256 _count)\\n        external\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n}\\n\",\"keccak256\":\"0x2fe6c4658ee8e4a462b79636a57f6ba884f4a9f5ef4fe8a6f58e3a6a3674c576\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRiver.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./components/IConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"./components/IOracleManager.1.sol\\\";\\nimport \\\"./components/ISharesManager.1.sol\\\";\\nimport \\\"./components/IUserDepositManager.1.sol\\\";\\n\\n/// @title River Interface (v1)\\n/// @author Kiln\\n/// @notice The main system interface\\ninterface IRiverV1 is IConsensusLayerDepositManagerV1, IUserDepositManagerV1, ISharesManagerV1, IOracleManagerV1 {\\n    /// @notice Funds have been pulled from the Execution Layer Fee Recipient\\n    /// @param amount The amount pulled\\n    event PulledELFees(uint256 amount);\\n\\n    /// @notice The stored Execution Layer Fee Recipient has been changed\\n    /// @param elFeeRecipient The new Execution Layer Fee Recipient\\n    event SetELFeeRecipient(address indexed elFeeRecipient);\\n\\n    /// @notice The stored Collector has been changed\\n    /// @param collector The new Collector\\n    event SetCollector(address indexed collector);\\n\\n    /// @notice The stored Allowlist has been changed\\n    /// @param allowlist The new Allowlist\\n    event SetAllowlist(address indexed allowlist);\\n\\n    /// @notice The stored Global Fee has been changed\\n    /// @param fee The new Global Fee\\n    event SetGlobalFee(uint256 fee);\\n\\n    /// @notice The stored Operators Registry has been changed\\n    /// @param operatorRegistry The new Operators Registry\\n    event SetOperatorsRegistry(address indexed operatorRegistry);\\n\\n    /// @notice The system underlying supply increased. This is a snapshot of the balances for accounting purposes\\n    /// @param _collector The address of the collector during this event\\n    /// @param _oldTotalUnderlyingBalance Old total ETH balance under management by River\\n    /// @param _oldTotalSupply Old total supply in shares\\n    /// @param _newTotalUnderlyingBalance New total ETH balance under management by River\\n    /// @param _newTotalSupply New total supply in shares\\n    event RewardsEarned(\\n        address indexed _collector,\\n        uint256 _oldTotalUnderlyingBalance,\\n        uint256 _oldTotalSupply,\\n        uint256 _newTotalUnderlyingBalance,\\n        uint256 _newTotalSupply\\n    );\\n\\n    /// @notice The computed amount of shares to mint is 0\\n    error ZeroMintedShares();\\n\\n    /// @notice The access was denied\\n    /// @param account The account that was denied\\n    error Denied(address account);\\n\\n    /// @notice Initializes the River system\\n    /// @param _depositContractAddress Address to make Consensus Layer deposits\\n    /// @param _elFeeRecipientAddress Address that receives the execution layer fees\\n    /// @param _withdrawalCredentials Credentials to use for every validator deposit\\n    /// @param _oracleAddress The address of the Oracle contract\\n    /// @param _systemAdministratorAddress Administrator address\\n    /// @param _allowlistAddress Address of the allowlist contract\\n    /// @param _operatorRegistryAddress Address of the operator registry\\n    /// @param _collectorAddress Address receiving the the global fee on revenue\\n    /// @param _globalFee Amount retained when the ETH balance increases and sent to the collector\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _operatorRegistryAddress,\\n        address _collectorAddress,\\n        uint256 _globalFee\\n    ) external;\\n\\n    /// @notice Get the current global fee\\n    /// @return The global fee\\n    function getGlobalFee() external view returns (uint256);\\n\\n    /// @notice Retrieve the allowlist address\\n    /// @return The allowlist address\\n    function getAllowlist() external view returns (address);\\n\\n    /// @notice Retrieve the collector address\\n    /// @return The collector address\\n    function getCollector() external view returns (address);\\n\\n    /// @notice Retrieve the execution layer fee recipient\\n    /// @return The execution layer fee recipient address\\n    function getELFeeRecipient() external view returns (address);\\n\\n    /// @notice Retrieve the operators registry\\n    /// @return The operators registry address\\n    function getOperatorsRegistry() external view returns (address);\\n\\n    /// @notice Changes the global fee parameter\\n    /// @param newFee New fee value\\n    function setGlobalFee(uint256 newFee) external;\\n\\n    /// @notice Changes the allowlist address\\n    /// @param _newAllowlist New address for the allowlist\\n    function setAllowlist(address _newAllowlist) external;\\n\\n    /// @notice Changes the collector address\\n    /// @param _newCollector New address for the collector\\n    function setCollector(address _newCollector) external;\\n\\n    /// @notice Changes the execution layer fee recipient\\n    /// @param _newELFeeRecipient New address for the recipient\\n    function setELFeeRecipient(address _newELFeeRecipient) external;\\n\\n    /// @notice Input for execution layer fee earnings\\n    function sendELFees() external payable;\\n}\\n\",\"keccak256\":\"0xb49107de594a37139c9cd1d1652eb9f119634d97b2ef60e25325d88b3a34766a\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IConsensusLayerDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Consensys Layer Deposit Manager Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the interactions with the official deposit contract\\ninterface IConsensusLayerDepositManagerV1 {\\n    /// @notice A validator key got funded on the deposit contract\\n    /// @param publicKey BLS Public key that got funded\\n    event FundedValidatorKey(bytes publicKey);\\n\\n    /// @notice The stored deposit contract address changed\\n    /// @param depositContract Address of the deposit contract\\n    event SetDepositContractAddress(address indexed depositContract);\\n\\n    /// @notice The stored withdrawal credentials changed\\n    /// @param withdrawalCredentials The withdrawal credentials to use for deposits\\n    event SetWithdrawalCredentials(bytes32 withdrawalCredentials);\\n\\n    /// @notice Not enough funds to deposit one validator\\n    error NotEnoughFunds();\\n\\n    /// @notice The length of the BLS Public key is invalid during deposit\\n    error InconsistentPublicKeys();\\n\\n    /// @notice The length of the BLS Signature is invalid during deposit\\n    error InconsistentSignatures();\\n\\n    /// @notice The internal key retrieval returned no keys\\n    error NoAvailableValidatorKeys();\\n\\n    /// @notice The received count of public keys to deposit is invalid\\n    error InvalidPublicKeyCount();\\n\\n    /// @notice The received count of signatures to deposit is invalid\\n    error InvalidSignatureCount();\\n\\n    /// @notice The withdrawal credentials value is null\\n    error InvalidWithdrawalCredentials();\\n\\n    /// @notice An error occured during the deposit\\n    error ErrorOnDeposit();\\n\\n    /// @notice Returns the amount of pending ETH\\n    /// @return The amount of pending ETH\\n    function getBalanceToDeposit() external view returns (uint256);\\n\\n    /// @notice Retrieve the withdrawal credentials\\n    /// @return The withdrawal credentials\\n    function getWithdrawalCredentials() external view returns (bytes32);\\n\\n    /// @notice Get the deposited validator count (the count of deposits made by the contract)\\n    /// @return The deposited validator count\\n    function getDepositedValidatorCount() external view returns (uint256);\\n\\n    /// @notice Deposits current balance to the Consensus Layer by batches of 32 ETH\\n    /// @param _maxCount The maximum amount of validator keys to fund\\n    function depositToConsensusLayer(uint256 _maxCount) external;\\n}\\n\",\"keccak256\":\"0x2215d3054ece419e846f376e7624094b5ce24b3c72be745a4b5aa4e756c4cb42\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IOracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Oracle Manager (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the inputs provided by the oracle\\ninterface IOracleManagerV1 {\\n    /// @notice The stored oracle address changed\\n    /// @param oracleAddress The new oracle address\\n    event SetOracle(address indexed oracleAddress);\\n\\n    /// @notice The consensus layer data provided by the oracle has been updated\\n    /// @param validatorCount The new count of validators running on the consensus layer\\n    /// @param validatorTotalBalance The new total balance sum of all validators\\n    /// @param roundId Round identifier\\n    event ConsensusLayerDataUpdate(uint256 validatorCount, uint256 validatorTotalBalance, bytes32 roundId);\\n\\n    /// @notice The reported validator count is invalid\\n    /// @param providedValidatorCount The received validator count value\\n    /// @param depositedValidatorCount The number of deposits performed by the system\\n    error InvalidValidatorCountReport(uint256 providedValidatorCount, uint256 depositedValidatorCount);\\n\\n    /// @notice Get oracle address\\n    /// @return The oracle address\\n    function getOracle() external view returns (address);\\n\\n    /// @notice Get CL validator total balance\\n    /// @return The CL Validator total balance\\n    function getCLValidatorTotalBalance() external view returns (uint256);\\n\\n    /// @notice Get CL validator count (the amount of validator reported by the oracles)\\n    /// @return The CL validator count\\n    function getCLValidatorCount() external view returns (uint256);\\n\\n    /// @notice Set the oracle address\\n    /// @param _oracleAddress Address of the oracle\\n    function setOracle(address _oracleAddress) external;\\n\\n    /// @notice Sets the validator count and validator total balance sum reported by the oracle\\n    /// @dev Can only be called by the oracle address\\n    /// @dev The round id is a blackbox value that should only be used to identify unique reports\\n    /// @dev When a report is performed, River computes the amount of fees that can be pulled\\n    /// @dev from the execution layer fee recipient. This amount is capped by the max allowed\\n    /// @dev increase provided during the report.\\n    /// @dev If the total asset balance increases (from the reported total balance and the pulled funds)\\n    /// @dev we then compute the share that must be taken for the collector on the positive delta.\\n    /// @dev The execution layer fees are taken into account here because they are the product of\\n    /// @dev node operator's work, just like consensus layer fees, and both should be handled in the\\n    /// @dev same manner, as a single revenue stream for the users and the collector.\\n    /// @param _validatorCount The number of active validators on the consensus layer\\n    /// @param _validatorTotalBalance The balance sum of the active validators on the consensus layer\\n    /// @param _roundId An identifier for this update\\n    /// @param _maxIncrease The maximum allowed increase in the total balance\\n    function setConsensusLayerData(\\n        uint256 _validatorCount,\\n        uint256 _validatorTotalBalance,\\n        bytes32 _roundId,\\n        uint256 _maxIncrease\\n    ) external;\\n}\\n\",\"keccak256\":\"0x088ff39852e3000fbe31c62da75c41bba38aaf2f2d66f99ba698835b840ef6bc\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/ISharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Shares Manager Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the shares of the depositor and the ERC20 interface\\ninterface ISharesManagerV1 is IERC20 {\\n    /// @notice Balance too low to perform operation\\n    error BalanceTooLow();\\n\\n    /// @notice Allowance too low to perform operation\\n    /// @param _from Account where funds are sent from\\n    /// @param _operator Account attempting the transfer\\n    /// @param _allowance Current allowance\\n    /// @param _value Requested transfer value in shares\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n\\n    /// @notice Invalid empty transfer\\n    error NullTransfer();\\n\\n    /// @notice Invalid transfer recipients\\n    /// @param _from Account sending the funds in the invalid transfer\\n    /// @param _to Account receiving the funds in the invalid transfer\\n    error UnauthorizedTransfer(address _from, address _to);\\n\\n    /// @notice Retrieve the token name\\n    /// @return The token name\\n    function name() external pure returns (string memory);\\n\\n    /// @notice Retrieve the token symbol\\n    /// @return The token symbol\\n    function symbol() external pure returns (string memory);\\n\\n    /// @notice Retrieve the decimal count\\n    /// @return The decimal count\\n    function decimals() external pure returns (uint8);\\n\\n    /// @notice Retrieve the total token supply\\n    /// @return The total supply in shares\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the total underlying asset supply\\n    /// @return The total underlying asset supply\\n    function totalUnderlyingSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The balance of the account in shares\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The underlying balance of the account\\n    function balanceOfUnderlying(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance from an amount of shares\\n    /// @param _shares Amount of shares to convert\\n    /// @return The underlying asset balance represented by the shares\\n    function underlyingBalanceFromShares(uint256 _shares) external view returns (uint256);\\n\\n    /// @notice Retrieve the shares count from an underlying asset amount\\n    /// @param _underlyingAssetAmount Amount of underlying asset to convert\\n    /// @return The amount of shares worth the underlying asset amopunt\\n    function sharesFromUnderlyingBalance(uint256 _underlyingAssetAmount) external view returns (uint256);\\n\\n    /// @notice Retrieve the allowance value for a spender\\n    /// @param _owner Address that issued the allowance\\n    /// @param _spender Address that received the allowance\\n    /// @return The allowance in shares for a given spender\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    /// @notice Performs a transfer from the message sender to the provided account\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Performs a transfer between two recipients\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Approves an account for future spendings\\n    /// @dev An approved account can use transferFrom to transfer funds on behalf of the token owner\\n    /// @param _spender Address that is allowed to spend the tokens\\n    /// @param _value The allowed amount in shares, will override previous value\\n    /// @return True if success\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    /// @notice Increase allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _additionalValue Amount of shares to add\\n    /// @return True if success\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool);\\n\\n    /// @notice Decrease allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _subtractableValue Amount of shares to subtract\\n    /// @return True if success\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool);\\n}\\n\",\"keccak256\":\"0x947debdcf17b72c13c3ca1a840795ed935bde5d4f345e52fa1bed1895212da66\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IUserDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title User Deposit Manager (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the inbound transfers cases or the explicit submissions\\ninterface IUserDepositManagerV1 {\\n    /// @notice User deposited ETH in the system\\n    /// @param depositor Address performing the deposit\\n    /// @param recipient Address receiving the minted shares\\n    /// @param amount Amount in ETH deposited\\n    event UserDeposit(address indexed depositor, address indexed recipient, uint256 amount);\\n\\n    /// @notice And empty deposit attempt was made\\n    error EmptyDeposit();\\n\\n    /// @notice Explicit deposit method to mint on msg.sender\\n    function deposit() external payable;\\n\\n    /// @notice Explicit deposit method to mint on msg.sender and transfer to _recipient\\n    /// @param _recipient Address receiving the minted LsETH\\n    function depositAndTransfer(address _recipient) external payable;\\n\\n    /// @notice Implicit deposit method, when the user performs a regular transfer to the contract\\n    receive() external payable;\\n\\n    /// @notice Invalid call, when the user sends a transaction with a data payload but no method matched\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x1abcda34431bfbb82b6ede5c852f4ece6544cca24616f58cb44ed340df0ef06b\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\nimport \\\"../state/shared/PendingAdministratorAddress.sol\\\";\\n\\n/// @title Lib Administrable\\n/// @author Kiln\\n/// @notice This library handles the admin and pending admin storage vars\\nlibrary LibAdministrable {\\n    /// @notice Retrieve the system admin\\n    /// @return The address of the system admin\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n\\n    /// @notice Retrieve the pending system admin\\n    /// @return The adress of the pending system admin\\n    function _getPendingAdmin() internal view returns (address) {\\n        return PendingAdministratorAddress.get();\\n    }\\n\\n    /// @notice Sets the system admin\\n    /// @param _admin New system admin\\n    function _setAdmin(address _admin) internal {\\n        AdministratorAddress.set(_admin);\\n    }\\n\\n    /// @notice Sets the pending system admin\\n    /// @param _pendingAdmin New pending system admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        PendingAdministratorAddress.set(_pendingAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0xbe4cec02aff69406624f3ab71a19948997aaf74f63e171137f2f3b85bdb7bc3a\",\"license\":\"MIT\"},\"contracts/src/libraries/LibBasisPoints.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Lib Basis Points\\n/// @notice Holds the basis points max value\\nlibrary LibBasisPoints {\\n    /// @notice The max value for basis points (represents 100%)\\n    uint256 internal constant BASIS_POINTS_MAX = 10_000;\\n}\\n\",\"keccak256\":\"0x97228a01dcd48f033555e3a44f9be37fb474a1b027f703f28097d539808f1c6c\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibBytes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Bytes\\n/// @notice This library helps manipulating bytes\\nlibrary LibBytes {\\n    /// @notice The length overflows an uint\\n    error SliceOverflow();\\n\\n    /// @notice The slice is outside of the initial bytes bounds\\n    error SliceOutOfBounds();\\n\\n    /// @notice Slices the provided bytes\\n    /// @param _bytes Bytes to slice\\n    /// @param _start The starting index of the slice\\n    /// @param _length The length of the slice\\n    /// @return The slice of _bytes starting at _start of length _length\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\n        unchecked {\\n            if (_length + 31 < _length) {\\n                revert SliceOverflow();\\n            }\\n        }\\n        if (_bytes.length < _start + _length) {\\n            revert SliceOutOfBounds();\\n        }\\n\\n        bytes memory tempBytes;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } { mstore(mc, mload(cc)) }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xbcc2d6e851fd5e66e5661856fa089fadd69150c75e07978d89faf6ea8d867234\",\"license\":\"MIT\"},\"contracts/src/libraries/LibErrors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Errors\\n/// @notice Library of common errors\\nlibrary LibErrors {\\n    /// @notice The operator is unauthorized for the caller\\n    /// @param caller Addres performing the call\\n    error Unauthorized(address caller);\\n\\n    /// @notice The call was invalid\\n    error InvalidCall();\\n\\n    /// @notice The argument was invalid\\n    error InvalidArgument();\\n\\n    /// @notice The address is zero\\n    error InvalidZeroAddress();\\n\\n    /// @notice The string is empty\\n    error InvalidEmptyString();\\n\\n    /// @notice The fee is invalid\\n    error InvalidFee();\\n}\\n\",\"keccak256\":\"0x76d2ef5b294a8f2e934c3ce286ee77238ae03a35a7507a378659b37db6d18f03\",\"license\":\"MIT\"},\"contracts/src/libraries/LibSanitize.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./LibErrors.sol\\\";\\nimport \\\"./LibBasisPoints.sol\\\";\\n\\n/// @title Lib Sanitize\\n/// @notice Utilities to sanitize input values\\nlibrary LibSanitize {\\n    /// @notice Reverts if address is 0\\n    /// @param _address Address to check\\n    function _notZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert LibErrors.InvalidZeroAddress();\\n        }\\n    }\\n\\n    /// @notice Reverts if string is empty\\n    /// @param _string String to check\\n    function _notEmptyString(string memory _string) internal pure {\\n        if (bytes(_string).length == 0) {\\n            revert LibErrors.InvalidEmptyString();\\n        }\\n    }\\n\\n    /// @notice Reverts if fee is invalid\\n    /// @param _fee Fee to check\\n    function _validFee(uint256 _fee) internal pure {\\n        if (_fee > LibBasisPoints.BASIS_POINTS_MAX) {\\n            revert LibErrors.InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8aeeb866c4657a96c8b4c006340c7996d15a6f0044b730c276bc3ba8d5bcd48\",\"license\":\"MIT\"},\"contracts/src/libraries/LibUint256.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Uint256\\n/// @notice Utilities to perform uint operations\\nlibrary LibUint256 {\\n    /// @notice Converts a value to little endian (64 bits)\\n    /// @param _value The value to convert\\n    /// @return result The converted value\\n    function toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n        result = 0;\\n        uint256 tempValue = _value;\\n        result = tempValue & 0xFF;\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        assert(0 == tempValue); // fully converted\\n        result <<= (24 * 8);\\n    }\\n\\n    /// @notice Returns the minimum value\\n    /// @param _a First value\\n    /// @param _b Second value\\n    /// @return Smallest value between _a and _b\\n    function min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a > _b ? _b : _a);\\n    }\\n}\\n\",\"keccak256\":\"0xac75e924b50fa887249f6435a710d691f25e95973466f4c91ac4f5d49a2ece4a\",\"license\":\"MIT\"},\"contracts/src/libraries/LibUnstructuredStorage.sol\":{\"content\":\"// SPDX-License-Identifier:    MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @title Lib Unstructured Storage\\n/// @notice Utilities to work with unstructured storage\\nlibrary LibUnstructuredStorage {\\n    /// @notice Retrieve a bool value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bool value\\n    function getStorageBool(bytes32 _position) internal view returns (bool data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an address value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The address value\\n    function getStorageAddress(bytes32 _position) internal view returns (address data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve a bytes32 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bytes32 value\\n    function getStorageBytes32(bytes32 _position) internal view returns (bytes32 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an uint256 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The uint256 value\\n    function getStorageUint256(bytes32 _position) internal view returns (uint256 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Sets a bool value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bool value to set\\n    function setStorageBool(bytes32 _position, bool _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an address value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The address value to set\\n    function setStorageAddress(bytes32 _position, address _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets a bytes32 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bytes32 value to set\\n    function setStorageBytes32(bytes32 _position, bytes32 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an uint256 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The uint256 value to set\\n    function setStorageUint256(bytes32 _position, uint256 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8e1a2f0dc18e023e12747355b3c95258d4de698f2bb6196222a1dc92940caa3\",\"license\":\"MIT\"},\"contracts/src/state/operatorsRegistry/Operators.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Operators Storage\\n/// @notice Utility to manage the Operators in storage\\nlibrary Operators {\\n    /// @notice Storage slot of the Operators\\n    bytes32 internal constant OPERATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.operators\\\")) - 1);\\n\\n    /// @notice The Operator structure in storage\\n    struct Operator {\\n        /// @custom:attribute True if the operator is active and allowed to operate on River\\n        bool active;\\n        /// @custom:attribute Display name of the operator\\n        string name;\\n        /// @custom:attribute Address of the operator\\n        address operator;\\n        /// @dev The following values respect this invariant:\\n        /// @dev     keys >= limit >= funded >= stopped\\n\\n        /// @custom:attribute Staking limit of the operator\\n        uint256 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint256 funded;\\n        /// @custom:attribute The total count of keys of the operator\\n        uint256 keys;\\n        /// @custom:attribute The count of stopped validators. Stopped validators are validators\\n        ///                   that exited the consensus layer (voluntary or slashed)\\n        uint256 stopped;\\n        uint256 latestKeysEditBlockNumber;\\n    }\\n\\n    /// @notice The Operator structure when loaded in memory\\n    struct CachedOperator {\\n        /// @custom:attribute True if the operator is active and allowed to operate on River\\n        bool active;\\n        /// @custom:attribute Display name of the operator\\n        string name;\\n        /// @custom:attribute Address of the operator\\n        address operator;\\n        /// @custom:attribute Staking limit of the operator\\n        uint256 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint256 funded;\\n        /// @custom:attribute The total count of keys of the operator\\n        uint256 keys;\\n        /// @custom:attribute The count of stopped validators\\n        uint256 stopped;\\n        /// @custom:attribute The count of stopped validators. Stopped validators are validators\\n        ///                   that exited the consensus layer (voluntary or slashed)\\n        uint256 index;\\n        /// @custom:attribute The amount of picked keys, buffer used before changing funded in storage\\n        uint256 picked;\\n    }\\n\\n    /// @notice The structure at the storage slot\\n    struct SlotOperator {\\n        /// @custom:attribute Array containing all the operators\\n        Operator[] value;\\n    }\\n\\n    /// @notice The operator was not found\\n    /// @param index The provided index\\n    error OperatorNotFound(uint256 index);\\n\\n    /// @notice Retrieve the operator in storage\\n    /// @param _index The index of the operator\\n    /// @return The Operator structure\\n    function get(uint256 _index) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (r.value.length <= _index) {\\n            revert OperatorNotFound(_index);\\n        }\\n\\n        return r.value[_index];\\n    }\\n\\n    /// @notice Retrieve the operator count in storage\\n    /// @return The count of operators in storage\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Retrieve all the active operators\\n    /// @return The list of active operator structures\\n    function getAllActive() internal view returns (Operator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        Operator[] memory activeOperators = new Operator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                activeOperators[activeIdx] = r.value[idx];\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    /// @notice Retrieve all the active and fundable operators\\n    /// @return The list of active and fundable operators\\n    function getAllFundable() internal view returns (CachedOperator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (_hasFundableKeys(r.value[idx])) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        CachedOperator[] memory activeOperators = new CachedOperator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            Operator memory op = r.value[idx];\\n            if (_hasFundableKeys(op)) {\\n                activeOperators[activeIdx] = CachedOperator({\\n                    active: op.active,\\n                    name: op.name,\\n                    operator: op.operator,\\n                    limit: op.limit,\\n                    funded: op.funded,\\n                    keys: op.keys,\\n                    stopped: op.stopped,\\n                    index: idx,\\n                    picked: 0\\n                });\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    /// @notice Add a new operator in storage\\n    /// @param _newOperator Value of the new operator\\n    /// @return The size of the operator array after the operation\\n    function push(Operator memory _newOperator) internal returns (uint256) {\\n        LibSanitize._notZeroAddress(_newOperator.operator);\\n        LibSanitize._notEmptyString(_newOperator.name);\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_newOperator);\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Atomic operation to set the key count and update the latestKeysEditBlockNumber field at the same time\\n    /// @param _index The operator index\\n    /// @param _newKeys The new value for the key count\\n    function setKeys(uint256 _index, uint256 _newKeys) internal {\\n        Operator storage op = get(_index);\\n\\n        op.keys = _newKeys;\\n        op.latestKeysEditBlockNumber = block.number;\\n    }\\n\\n    /// @notice Checks if an operator is active and has fundable keys\\n    /// @param _operator The operator details\\n    /// @return True if active and fundable\\n    function _hasFundableKeys(Operators.Operator memory _operator) internal pure returns (bool) {\\n        return (_operator.active && _operator.limit > _operator.funded);\\n    }\\n}\\n\",\"keccak256\":\"0xded9f69550674563fe324c95487bdf9e6cad7390064209bdce2afde8dad8f0e2\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/AllowlistAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Allowlist Address Storage\\n/// @notice Utility to manage the Allowlist Address in storage\\nlibrary AllowlistAddress {\\n    /// @notice Storage slot of the Allowlist Address\\n    bytes32 internal constant ALLOWLIST_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowlistAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Allowlist Address\\n    /// @return The Allowlist Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ALLOWLIST_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Allowlist Address\\n    /// @param _newValue New Allowlist Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ALLOWLIST_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xe672508958c0fe402a54d0f1fe6709139a8eccc3d702808839a912660867c427\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/BalanceToDeposit.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\nlibrary BalanceToDeposit {\\n    bytes32 internal constant BALANCE_TO_DEPOSIT_SLOT = bytes32(uint256(keccak256(\\\"river.state.balanceToDeposit\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(BALANCE_TO_DEPOSIT_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(BALANCE_TO_DEPOSIT_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x8c8224d1511fa4ad8816e55b28a939c7a69243531c053d876bbdda5aa21b8b7e\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/CLValidatorCount.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Consensus Layer Validator Count Storage\\n/// @notice Utility to manage the Consensus Layer Validator Count in storage\\nlibrary CLValidatorCount {\\n    /// @notice Storage slot of the Consensus Layer Validator Count\\n    bytes32 internal constant CL_VALIDATOR_COUNT_SLOT = bytes32(uint256(keccak256(\\\"river.state.clValidatorCount\\\")) - 1);\\n\\n    /// @notice Retrieve the Consensus Layer Validator Count\\n    /// @return The Consensus Layer Validator Count\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(CL_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    /// @notice Sets the Consensus Layer Validator Count\\n    /// @param _newValue New Consensus Layer Validator Count\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(CL_VALIDATOR_COUNT_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x269674254e7f8dd80cd49f9dc2d73722d55d515a90f0b371379c9705fd08019a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/CLValidatorTotalBalance.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Consensus Layer Validator Total Balance Storage\\n/// @notice Utility to manage the Consensus Layer Validator Total Balance in storage\\nlibrary CLValidatorTotalBalance {\\n    /// @notice Storage slot of the Consensus Layer Validator Total Balance\\n    bytes32 internal constant CL_VALIDATOR_TOTAL_BALANCE_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.clValidatorTotalBalance\\\")) - 1);\\n\\n    /// @notice Retrieve the Consensus Layer Validator Total Balance\\n    /// @return The Consensus Layer Validator Total Balance\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(CL_VALIDATOR_TOTAL_BALANCE_SLOT);\\n    }\\n\\n    /// @notice Sets the Consensus Layer Validator Total Balance\\n    /// @param _newValue New Consensus Layer Validator Total Balance\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(CL_VALIDATOR_TOTAL_BALANCE_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x0ff559b3022c51bca1fd9376cbb8bbf3a3880a6450adfddf0f298b16bd26784a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/CollectorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Collector Address Storage\\n/// @notice Utility to manage the Collector Address in storage\\nlibrary CollectorAddress {\\n    /// @notice Storage slot of the Collector Address\\n    bytes32 internal constant COLLECTOR_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.collectorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Collector Address\\n    /// @return The Collector Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(COLLECTOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Collector Address\\n    /// @param _newValue New Collector Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(COLLECTOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x48c4333c0c6ba2c425fd252763df7a0ccf89b4e9b0c06336ae2835c1c386e8c9\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DepositContractAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Deposit Contract Address Storage\\n/// @notice Utility to manage the Deposit Contract Address in storage\\nlibrary DepositContractAddress {\\n    /// @notice Storage slot of the Deposit Contract Address\\n    bytes32 internal constant DEPOSIT_CONTRACT_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositContractAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Deposit Contract Address\\n    /// @return The Deposit Contract Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Deposit Contract Address\\n    /// @param _newValue New Deposit Contract Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xfb0bc93b1c175e0461de84b3e37d9361765c8599b9c6daec97e5b5e763246516\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DepositedValidatorCount.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Deposited Validator Count Storage\\n/// @notice Utility to manage the Deposited Validator Count in storage\\nlibrary DepositedValidatorCount {\\n    /// @notice Storage slot of the Deposited Validator Count\\n    bytes32 internal constant DEPOSITED_VALIDATOR_COUNT_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositedValidatorCount\\\")) - 1);\\n\\n    /// @notice Retrieve the Deposited Validator Count\\n    /// @return The Deposited Validator Count\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    /// @notice Sets the Deposited Validator Count\\n    /// @param _newValue New Deposited Validator Count\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x3ba204f875f9b521cf584abc94db9ba4fe9cb87a49c47da3892f339fb37cf683\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/ELFeeRecipientAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Execution Layer Fee Recipient Address Storage\\n/// @notice Utility to manage the Execution Layer Fee Recipient Address in storage\\nlibrary ELFeeRecipientAddress {\\n    /// @notice Storage slot of the Execution Layer Fee Recipient Address\\n    bytes32 internal constant EL_FEE_RECIPIENT_ADDRESS =\\n        bytes32(uint256(keccak256(\\\"river.state.elFeeRecipientAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Execution Layer Fee Recipient Address\\n    /// @return The Execution Layer Fee Recipient Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(EL_FEE_RECIPIENT_ADDRESS);\\n    }\\n\\n    /// @notice Sets the Execution Layer Fee Recipient Address\\n    /// @param _newValue New Execution Layer Fee Recipient Address\\n    function set(address _newValue) internal {\\n        LibUnstructuredStorage.setStorageAddress(EL_FEE_RECIPIENT_ADDRESS, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xd937885f53104d9dc9e97db47cbcb611fc6d57629d203433fcdd7d7d3c09ded0\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/GlobalFee.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Global Fee Storage\\n/// @notice Utility to manage the Global Fee in storage\\nlibrary GlobalFee {\\n    /// @notice Storage slot of the Global Fee\\n    bytes32 internal constant GLOBAL_FEE_SLOT = bytes32(uint256(keccak256(\\\"river.state.globalFee\\\")) - 1);\\n\\n    /// @notice Retrieve the Global Fee\\n    /// @return The Global Fee\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(GLOBAL_FEE_SLOT);\\n    }\\n\\n    /// @notice Sets the Global Fee\\n    /// @param _newValue New Global Fee\\n    function set(uint256 _newValue) internal {\\n        LibSanitize._validFee(_newValue);\\n        LibUnstructuredStorage.setStorageUint256(GLOBAL_FEE_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x74f858f1133151fd85ce17150d4084e226cbb6d37396eb903258ea1b50731401\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/LastOracleRoundId.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Last Oracle Round Id Storage\\n/// @notice Utility to manage the Last Oracle Round Id in storage\\nlibrary LastOracleRoundId {\\n    /// @notice Storage slot of the Last Oracle Round Id\\n    bytes32 internal constant LAST_ORACLE_ROUND_ID_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.lastOracleRoundId\\\")) - 1);\\n\\n    /// @notice Retrieve the Last Oracle Round Id\\n    /// @return The Last Oracle Round Id\\n    function get() internal view returns (bytes32) {\\n        return LibUnstructuredStorage.getStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT);\\n    }\\n\\n    /// @notice Sets the Last Oracle Round Id\\n    /// @param _newValue New Last Oracle Round Id\\n    function set(bytes32 _newValue) internal {\\n        LibUnstructuredStorage.setStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xdcbff9faeea8aee1bf267af035e08abe9431e3bf995624b93611e50dbd09e5f4\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/OperatorsRegistryAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Operators Registry Address Storage\\n/// @notice Utility to manage the Operators Registry Address in storage\\nlibrary OperatorsRegistryAddress {\\n    /// @notice Storage slot of the Operators Registry Address\\n    bytes32 internal constant OPERATORS_REGISTRY_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.operatorsRegistryAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Operators Registry Address\\n    /// @return The Operators Registry Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(OPERATORS_REGISTRY_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Operators Registry Address\\n    /// @param _newValue New Operators Registry Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(OPERATORS_REGISTRY_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x4f4ec440487085e8d7cd820fa42770529ae56efc775b6a0764604e089af20fa3\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/OracleAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Oracle Address Storage\\n/// @notice Utility to manage the Oracle Address in storage\\nlibrary OracleAddress {\\n    /// @notice Storage slot of the Oracle Address\\n    bytes32 internal constant ORACLE_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.oracleAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Oracle Address\\n    /// @return The Oracle Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ORACLE_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Oracle Address\\n    /// @param _newValue New Oracle Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ORACLE_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x85b7199ab1d327987121c384209b413cb4e4506a36c583b442abd6f6fa323dd9\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/Shares.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Shares Count Storage\\n/// @notice Utility to manage the Shares Count in storage\\nlibrary Shares {\\n    /// @notice Storage slot of the Shares Count\\n    bytes32 internal constant SHARES_SLOT = bytes32(uint256(keccak256(\\\"river.state.shares\\\")) - 1);\\n\\n    /// @notice Retrieve the Shares Count\\n    /// @return The Shares Count\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(SHARES_SLOT);\\n    }\\n\\n    /// @notice Sets the Shares Count\\n    /// @param _newValue New Shares Count\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(SHARES_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xc56d66f15acf56b321b9c6f41b3845db73d64987b9c62b1d763457768725de8b\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/SharesPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Shares Per Owner Storage\\n/// @notice Utility to manage the Shares Per Owner in storage\\nlibrary SharesPerOwner {\\n    /// @notice Storage slot of the Shares Per Owner\\n    bytes32 internal constant SHARES_PER_OWNER_SLOT = bytes32(uint256(keccak256(\\\"river.state.sharesPerOwner\\\")) - 1);\\n\\n    /// @notice Structure in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from an owner to its share count\\n        mapping(address => uint256) value;\\n    }\\n\\n    /// @notice Retrieve the share count for given owner\\n    /// @param _owner The address to get the balance of\\n    /// @return The amount of shares\\n    function get(address _owner) internal view returns (uint256) {\\n        bytes32 slot = SHARES_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_owner];\\n    }\\n\\n    /// @notice Set the amount of shares for an owner\\n    /// @param _owner The owner of the shares to edit\\n    /// @param _newValue The new shares value for the owner\\n    function set(address _owner, uint256 _newValue) internal {\\n        bytes32 slot = SHARES_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_owner] = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0xc1043c3f40dc90c7de21b938033b8c7492f070e05848d30190e313a55988df5a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/WithdrawalCredentials.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibErrors.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Withdrawal Credentials Storage\\n/// @notice Utility to manage the Withdrawal Credentials in storage\\nlibrary WithdrawalCredentials {\\n    /// @notice Storage slot of the Withdrawal Credentials\\n    bytes32 internal constant WITHDRAWAL_CREDENTIALS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.withdrawalCredentials\\\")) - 1);\\n\\n    /// @notice Retrieve the Withdrawal Credentials\\n    /// @return The Withdrawal Credentials\\n    function get() internal view returns (bytes32) {\\n        return LibUnstructuredStorage.getStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT);\\n    }\\n\\n    /// @notice Sets the Withdrawal Credentials\\n    /// @param _newValue New Withdrawal Credentials\\n    function set(bytes32 _newValue) internal {\\n        if (_newValue == bytes32(0)) {\\n            revert LibErrors.InvalidArgument();\\n        }\\n        LibUnstructuredStorage.setStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xc18e535754adfcbfce56e3b0df37de4ac59b741b70e0b8c3e0dedb36b0266bca\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrator Address Storage\\n/// @notice Utility to manage the Administrator Address in storage\\nlibrary AdministratorAddress {\\n    /// @notice Storage slot of the Administrator Address\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Administrator Address\\n    /// @return The Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Administrator Address\\n    /// @param _newValue New Administrator Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x4f702b4454858199ca8fd15ef1cee63d9dc3d4d8f2ff7a2f859a4e151e46e8ec\",\"license\":\"MIT\"},\"contracts/src/state/shared/ApprovalsPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Approvals Per Owner Storage\\n/// @notice Utility to manage the Approvals Per Owner in storage\\nlibrary ApprovalsPerOwner {\\n    /// @notice Storage slot of the Approvals Per Owner\\n    bytes32 internal constant APPROVALS_PER_OWNER_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.approvalsPerOwner\\\")) - 1);\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from an owner to an operator to the approval amount\\n        mapping(address => mapping(address => uint256)) value;\\n    }\\n\\n    /// @notice Retrieve the approval for an owner to an operator\\n    /// @param _owner The account that gave the approval\\n    /// @param _operator The account receiving the approval\\n    /// @return The value of the approval\\n    function get(address _owner, address _operator) internal view returns (uint256) {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_owner][_operator];\\n    }\\n\\n    /// @notice Set the approval value for an owner to an operator\\n    /// @param _owner The account that gives the approval\\n    /// @param _operator The account receiving the approval\\n    /// @param _newValue The value of the approval\\n    function set(address _owner, address _operator, uint256 _newValue) internal {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_owner][_operator] = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0xc8ec39447b09747e3cfff1c456743b4f52fafbd994122ebf8285035fc497c95c\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/PendingAdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Pending Administrator Address Storage\\n/// @notice Utility to manage the Pending Administrator Address in storage\\nlibrary PendingAdministratorAddress {\\n    /// @notice Storage slot of the Pending Administrator Address\\n    bytes32 public constant PENDING_ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.pendingAdministratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Pending Administrator Address\\n    /// @return The Pending Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Pending Administrator Address\\n    /// @param _newValue New Pending Administrator Address\\n    function set(address _newValue) internal {\\n        LibUnstructuredStorage.setStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x2164cafa435d1e1650037164e2b094ca3af00cc68e05b59140406aa59b1949f2\",\"license\":\"MIT\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Version Storage\\n/// @notice Utility to manage the Version in storage\\nlibrary Version {\\n    /// @notice Storage slot of the Version\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    /// @notice Retrieve the Version\\n    /// @return The Version\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    /// @notice Sets the Version\\n    /// @param _newValue New Version\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(VERSION_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x82f1cc4bbb1f16c1cdbac93596334805eb1a2e0e40ccbd0ab0f78e22d3f83864\",\"license\":\"BUSL-1.1\"},\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}",
            "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"AllowanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Denied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorOnDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentPublicKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicKeyCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"providedValidatorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"InvalidValidatorCountReport\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawalCredentials\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAvailableValidatorKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"UnauthorizedTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroMintedShares\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorTotalBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"roundId\",\"type\":\"bytes32\"}],\"name\":\"ConsensusLayerDataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"FundedValidatorKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"cdata\",\"type\":\"bytes\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PulledELFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldTotalUnderlyingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalUnderlyingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"RewardsEarned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"allowlist\",\"type\":\"address\"}],\"name\":\"SetAllowlist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"SetCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositContract\",\"type\":\"address\"}],\"name\":\"SetDepositContractAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"elFeeRecipient\",\"type\":\"address\"}],\"name\":\"SetELFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetGlobalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorRegistry\",\"type\":\"address\"}],\"name\":\"SetOperatorsRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"SetOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"SetPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawalCredentials\",\"type\":\"bytes32\"}],\"name\":\"SetWithdrawalCredentials\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserDeposit\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEPOSIT_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_KEY_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNATURE_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractableValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"depositAndTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCount\",\"type\":\"uint256\"}],\"name\":\"depositToConsensusLayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowlist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceToDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCLValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCLValidatorTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositedValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getELFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorsRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalCredentials\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_additionalValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_elFeeRecipientAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_withdrawalCredentials\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_systemAdministratorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowlistAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operatorRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collectorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_globalFee\",\"type\":\"uint256\"}],\"name\":\"initRiverV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"proposeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendELFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAllowlist\",\"type\":\"address\"}],\"name\":\"setAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCollector\",\"type\":\"address\"}],\"name\":\"setCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorTotalBalance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_roundId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maxIncrease\",\"type\":\"uint256\"}],\"name\":\"setConsensusLayerData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newELFeeRecipient\",\"type\":\"address\"}],\"name\":\"setELFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setGlobalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_underlyingAssetAmount\",\"type\":\"uint256\"}],\"name\":\"sharesFromUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlyingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"underlyingBalanceFromShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kiln\",\"errors\":{\"AllowanceTooLow(address,address,uint256,uint256)\":[{\"params\":{\"_allowance\":\"Current allowance\",\"_from\":\"Account where funds are sent from\",\"_operator\":\"Account attempting the transfer\",\"_value\":\"Requested transfer value in shares\"}}],\"Denied(address)\":[{\"params\":{\"account\":\"The account that was denied\"}}],\"InvalidInitialization(uint256,uint256)\":[{\"params\":{\"expectedVersion\":\"The version that was expected\",\"version\":\"The version that was attempting to be initialized\"}}],\"InvalidValidatorCountReport(uint256,uint256)\":[{\"params\":{\"depositedValidatorCount\":\"The number of deposits performed by the system\",\"providedValidatorCount\":\"The received validator count value\"}}],\"Unauthorized(address)\":[{\"params\":{\"caller\":\"Address performing the call\"}}],\"UnauthorizedTransfer(address,address)\":[{\"params\":{\"_from\":\"Account sending the funds in the invalid transfer\",\"_to\":\"Account receiving the funds in the invalid transfer\"}}]},\"kind\":\"dev\",\"methods\":{\"acceptAdmin()\":{\"details\":\"Only callable by the pending admin. Resets the pending admin if succesful.\"},\"allowance(address,address)\":{\"params\":{\"_owner\":\"Address that issued the allowance\",\"_spender\":\"Address that received the allowance\"},\"returns\":{\"_0\":\"The allowance in shares for a given spender\"}},\"approve(address,uint256)\":{\"details\":\"An approved account can use transferFrom to transfer funds on behalf of the token owner\",\"params\":{\"_spender\":\"Address that is allowed to spend the tokens\",\"_value\":\"The allowed amount in shares, will override previous value\"},\"returns\":{\"_0\":\"True if success\"}},\"balanceOf(address)\":{\"params\":{\"_owner\":\"Address to be checked\"},\"returns\":{\"_0\":\"The balance of the account in shares\"}},\"balanceOfUnderlying(address)\":{\"params\":{\"_owner\":\"Address to be checked\"},\"returns\":{\"_0\":\"The underlying balance of the account\"}},\"decimals()\":{\"returns\":{\"_0\":\"The decimal count\"}},\"decreaseAllowance(address,uint256)\":{\"params\":{\"_spender\":\"Spender that receives the allowance\",\"_subtractableValue\":\"Amount of shares to subtract\"},\"returns\":{\"_0\":\"True if success\"}},\"depositAndTransfer(address)\":{\"params\":{\"_recipient\":\"Address receiving the minted LsETH\"}},\"depositToConsensusLayer(uint256)\":{\"params\":{\"_maxCount\":\"The maximum amount of validator keys to fund\"}},\"getAdmin()\":{\"returns\":{\"_0\":\"The admin address\"}},\"getAllowlist()\":{\"returns\":{\"_0\":\"The allowlist address\"}},\"getBalanceToDeposit()\":{\"returns\":{\"_0\":\"The amount of pending ETH\"}},\"getCLValidatorCount()\":{\"returns\":{\"_0\":\"The CL validator count\"}},\"getCLValidatorTotalBalance()\":{\"returns\":{\"_0\":\"The CL Validator total balance\"}},\"getCollector()\":{\"returns\":{\"_0\":\"The collector address\"}},\"getDepositedValidatorCount()\":{\"returns\":{\"_0\":\"The deposited validator count\"}},\"getELFeeRecipient()\":{\"returns\":{\"_0\":\"The execution layer fee recipient address\"}},\"getGlobalFee()\":{\"returns\":{\"_0\":\"The global fee\"}},\"getOperatorsRegistry()\":{\"returns\":{\"_0\":\"The operators registry address\"}},\"getOracle()\":{\"returns\":{\"_0\":\"The oracle address\"}},\"getPendingAdmin()\":{\"returns\":{\"_0\":\"The pending admin address\"}},\"getWithdrawalCredentials()\":{\"returns\":{\"_0\":\"The withdrawal credentials\"}},\"increaseAllowance(address,uint256)\":{\"params\":{\"_additionalValue\":\"Amount of shares to add\",\"_spender\":\"Spender that receives the allowance\"},\"returns\":{\"_0\":\"True if success\"}},\"initRiverV1(address,address,bytes32,address,address,address,address,address,uint256)\":{\"params\":{\"_allowlistAddress\":\"Address of the allowlist contract\",\"_collectorAddress\":\"Address receiving the the global fee on revenue\",\"_depositContractAddress\":\"Address to make Consensus Layer deposits\",\"_elFeeRecipientAddress\":\"Address that receives the execution layer fees\",\"_globalFee\":\"Amount retained when the ETH balance increases and sent to the collector\",\"_operatorRegistryAddress\":\"Address of the operator registry\",\"_oracleAddress\":\"The address of the Oracle contract\",\"_systemAdministratorAddress\":\"Administrator address\",\"_withdrawalCredentials\":\"Credentials to use for every validator deposit\"}},\"name()\":{\"returns\":{\"_0\":\"The token name\"}},\"proposeAdmin(address)\":{\"details\":\"This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.\",\"params\":{\"_newAdmin\":\"New admin address\"}},\"setAllowlist(address)\":{\"params\":{\"_newAllowlist\":\"New address for the allowlist\"}},\"setCollector(address)\":{\"params\":{\"_newCollector\":\"New address for the collector\"}},\"setConsensusLayerData(uint256,uint256,bytes32,uint256)\":{\"details\":\"Can only be called by the oracle addressThe round id is a blackbox value that should only be used to identify unique reportsWhen a report is performed, River computes the amount of fees that can be pulledfrom the execution layer fee recipient. This amount is capped by the max allowedincrease provided during the report.If the total asset balance increases (from the reported total balance and the pulled funds)we then compute the share that must be taken for the collector on the positive delta.The execution layer fees are taken into account here because they are the product ofnode operator's work, just like consensus layer fees, and both should be handled in thesame manner, as a single revenue stream for the users and the collector.\",\"params\":{\"_maxIncrease\":\"The maximum allowed increase in the total balance\",\"_roundId\":\"An identifier for this update\",\"_validatorCount\":\"The number of active validators on the consensus layer\",\"_validatorTotalBalance\":\"The balance sum of the active validators on the consensus layer\"}},\"setELFeeRecipient(address)\":{\"params\":{\"_newELFeeRecipient\":\"New address for the recipient\"}},\"setGlobalFee(uint256)\":{\"params\":{\"newFee\":\"New fee value\"}},\"setOracle(address)\":{\"params\":{\"_oracleAddress\":\"Address of the oracle\"}},\"sharesFromUnderlyingBalance(uint256)\":{\"params\":{\"_underlyingAssetAmount\":\"Amount of underlying asset to convert\"},\"returns\":{\"_0\":\"The amount of shares worth the underlying asset amopunt\"}},\"symbol()\":{\"returns\":{\"_0\":\"The token symbol\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"The total supply in shares\"}},\"totalUnderlyingSupply()\":{\"returns\":{\"_0\":\"The total underlying asset supply\"}},\"transfer(address,uint256)\":{\"params\":{\"_to\":\"Address receiving the tokens\",\"_value\":\"Amount of shares to be sent\"},\"returns\":{\"_0\":\"True if success\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"_from\":\"Address sending the tokens\",\"_to\":\"Address receiving the tokens\",\"_value\":\"Amount of shares to be sent\"},\"returns\":{\"_0\":\"True if success\"}},\"underlyingBalanceFromShares(uint256)\":{\"params\":{\"_shares\":\"Amount of shares to convert\"},\"returns\":{\"_0\":\"The underlying asset balance represented by the shares\"}}},\"title\":\"River (v1)\",\"version\":1},\"userdoc\":{\"errors\":{\"AllowanceTooLow(address,address,uint256,uint256)\":[{\"notice\":\"Allowance too low to perform operation\"}],\"BalanceTooLow()\":[{\"notice\":\"Balance too low to perform operation\"}],\"Denied(address)\":[{\"notice\":\"The access was denied\"}],\"EmptyDeposit()\":[{\"notice\":\"And empty deposit attempt was made\"}],\"ErrorOnDeposit()\":[{\"notice\":\"An error occured during the deposit\"}],\"InconsistentPublicKeys()\":[{\"notice\":\"The length of the BLS Public key is invalid during deposit\"}],\"InconsistentSignatures()\":[{\"notice\":\"The length of the BLS Signature is invalid during deposit\"}],\"InvalidArgument()\":[{\"notice\":\"The argument was invalid\"}],\"InvalidCall()\":[{\"notice\":\"The call was invalid\"}],\"InvalidFee()\":[{\"notice\":\"The fee is invalid\"}],\"InvalidInitialization(uint256,uint256)\":[{\"notice\":\"An error occured during the initialization\"}],\"InvalidPublicKeyCount()\":[{\"notice\":\"The received count of public keys to deposit is invalid\"}],\"InvalidSignatureCount()\":[{\"notice\":\"The received count of signatures to deposit is invalid\"}],\"InvalidValidatorCountReport(uint256,uint256)\":[{\"notice\":\"The reported validator count is invalid\"}],\"InvalidWithdrawalCredentials()\":[{\"notice\":\"The withdrawal credentials value is null\"}],\"InvalidZeroAddress()\":[{\"notice\":\"The address is zero\"}],\"NoAvailableValidatorKeys()\":[{\"notice\":\"The internal key retrieval returned no keys\"}],\"NotEnoughFunds()\":[{\"notice\":\"Not enough funds to deposit one validator\"}],\"NullTransfer()\":[{\"notice\":\"Invalid empty transfer\"}],\"SliceOutOfBounds()\":[{\"notice\":\"The slice is outside of the initial bytes bounds\"}],\"SliceOverflow()\":[{\"notice\":\"The length overflows an uint\"}],\"Unauthorized(address)\":[{\"notice\":\"The operator is unauthorized for the caller\"}],\"UnauthorizedTransfer(address,address)\":[{\"notice\":\"Invalid transfer recipients\"}],\"ZeroMintedShares()\":[{\"notice\":\"The computed amount of shares to mint is 0\"}]},\"events\":{\"ConsensusLayerDataUpdate(uint256,uint256,bytes32)\":{\"notice\":\"The consensus layer data provided by the oracle has been updated\"},\"FundedValidatorKey(bytes)\":{\"notice\":\"A validator key got funded on the deposit contract\"},\"Initialize(uint256,bytes)\":{\"notice\":\"Emitted when the contract is properly initialized\"},\"PulledELFees(uint256)\":{\"notice\":\"Funds have been pulled from the Execution Layer Fee Recipient\"},\"RewardsEarned(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"The system underlying supply increased. This is a snapshot of the balances for accounting purposes\"},\"SetAdmin(address)\":{\"notice\":\"The admin address changed\"},\"SetAllowlist(address)\":{\"notice\":\"The stored Allowlist has been changed\"},\"SetCollector(address)\":{\"notice\":\"The stored Collector has been changed\"},\"SetDepositContractAddress(address)\":{\"notice\":\"The stored deposit contract address changed\"},\"SetELFeeRecipient(address)\":{\"notice\":\"The stored Execution Layer Fee Recipient has been changed\"},\"SetGlobalFee(uint256)\":{\"notice\":\"The stored Global Fee has been changed\"},\"SetOperatorsRegistry(address)\":{\"notice\":\"The stored Operators Registry has been changed\"},\"SetOracle(address)\":{\"notice\":\"The stored oracle address changed\"},\"SetPendingAdmin(address)\":{\"notice\":\"The pending admin address changed\"},\"SetWithdrawalCredentials(bytes32)\":{\"notice\":\"The stored withdrawal credentials changed\"},\"UserDeposit(address,address,uint256)\":{\"notice\":\"User deposited ETH in the system\"}},\"kind\":\"user\",\"methods\":{\"DEPOSIT_SIZE()\":{\"notice\":\"Size of a deposit in ETH\"},\"PUBLIC_KEY_LENGTH()\":{\"notice\":\"Size of a BLS Public key in bytes\"},\"SIGNATURE_LENGTH()\":{\"notice\":\"Size of a BLS Signature in bytes\"},\"acceptAdmin()\":{\"notice\":\"Accept the transfer of ownership\"},\"allowance(address,address)\":{\"notice\":\"Retrieve the allowance value for a spender\"},\"approve(address,uint256)\":{\"notice\":\"Approves an account for future spendings\"},\"balanceOf(address)\":{\"notice\":\"Retrieve the balance of an account\"},\"balanceOfUnderlying(address)\":{\"notice\":\"Retrieve the underlying asset balance of an account\"},\"decimals()\":{\"notice\":\"Retrieve the decimal count\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Decrease allowance to another account\"},\"deposit()\":{\"notice\":\"Explicit deposit method to mint on msg.sender\"},\"depositAndTransfer(address)\":{\"notice\":\"Explicit deposit method to mint on msg.sender and transfer to _recipient\"},\"depositToConsensusLayer(uint256)\":{\"notice\":\"Deposits current balance to the Consensus Layer by batches of 32 ETH\"},\"getAdmin()\":{\"notice\":\"Retrieves the current admin address\"},\"getAllowlist()\":{\"notice\":\"Retrieve the allowlist address\"},\"getBalanceToDeposit()\":{\"notice\":\"Returns the amount of pending ETH\"},\"getCLValidatorCount()\":{\"notice\":\"Get CL validator count (the amount of validator reported by the oracles)\"},\"getCLValidatorTotalBalance()\":{\"notice\":\"Get CL validator total balance\"},\"getCollector()\":{\"notice\":\"Retrieve the collector address\"},\"getDepositedValidatorCount()\":{\"notice\":\"Get the deposited validator count (the count of deposits made by the contract)\"},\"getELFeeRecipient()\":{\"notice\":\"Retrieve the execution layer fee recipient\"},\"getGlobalFee()\":{\"notice\":\"Get the current global fee\"},\"getOperatorsRegistry()\":{\"notice\":\"Retrieve the operators registry\"},\"getOracle()\":{\"notice\":\"Get oracle address\"},\"getPendingAdmin()\":{\"notice\":\"Retrieve the current pending admin address\"},\"getWithdrawalCredentials()\":{\"notice\":\"Retrieve the withdrawal credentials\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Increase allowance to another account\"},\"initRiverV1(address,address,bytes32,address,address,address,address,address,uint256)\":{\"notice\":\"Initializes the River system\"},\"name()\":{\"notice\":\"Retrieve the token name\"},\"proposeAdmin(address)\":{\"notice\":\"Proposes a new address as admin\"},\"sendELFees()\":{\"notice\":\"Input for execution layer fee earnings\"},\"setAllowlist(address)\":{\"notice\":\"Changes the allowlist address\"},\"setCollector(address)\":{\"notice\":\"Changes the collector address\"},\"setConsensusLayerData(uint256,uint256,bytes32,uint256)\":{\"notice\":\"Sets the validator count and validator total balance sum reported by the oracle\"},\"setELFeeRecipient(address)\":{\"notice\":\"Changes the execution layer fee recipient\"},\"setGlobalFee(uint256)\":{\"notice\":\"Changes the global fee parameter\"},\"setOracle(address)\":{\"notice\":\"Set the oracle address\"},\"sharesFromUnderlyingBalance(uint256)\":{\"notice\":\"Retrieve the shares count from an underlying asset amount\"},\"symbol()\":{\"notice\":\"Retrieve the token symbol\"},\"totalSupply()\":{\"notice\":\"Retrieve the total token supply\"},\"totalUnderlyingSupply()\":{\"notice\":\"Retrieve the total underlying asset supply\"},\"transfer(address,uint256)\":{\"notice\":\"Performs a transfer from the message sender to the provided account\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Performs a transfer between two recipients\"},\"underlyingBalanceFromShares(uint256)\":{\"notice\":\"Retrieve the underlying asset balance from an amount of shares\"}},\"notice\":\"This contract merges all the manager contracts and implements all the virtual methods stitching all components together@notice    +---------------------------------------------------------------------+|                                                                     ||                           Consensus Layer                           ||                                                                     || +-------------------+  +-------------------+  +-------------------+ || |                   |  |                   |  |                   | || |  EL Fee Recipient |  |      Oracle       |  |  Deposit Contract | || |                   |  |                   |  |                   | || +---------|---------+  +---------|---------+  +---------|---------+ |+---------------------------------------------------------------------+|         7            |            5         |+-----------------|    |    |-----------------+|    |6   ||    |    |+---------+          +----|----|----|----+            +---------+|         |          |                   |     2      |         ||Operator |          |       River       --------------  User   ||         |          |                   |            |         |+----|----+          +----|---------|----+            +---------+|                    |         ||             4      |         |       3|1     +-------------|         |--------------+|      |                                      ||      |                                      |+------|------|------------+           +-------------|------------+|                          |           |                          ||    Operators Registry    |           |         Allowlist        ||                          |           |                          |+--------------------------+           +--------------------------+@notice      1. Operators are adding BLS Public Keys of validators running in theirinfrastructure.2. User deposit ETH to the system and get shares minted in exchange3. Upon deposit, the system verifies if the User is allowed to depositby querying the Allowlist4. When the system has enough funds to deposit validators, keys are pulledfrom the Operators Registry5. The deposit data is computed and the validators are funded via the officialdeposit contract6. Oracles report the total balance of the running validators and the total countof running validators7. The running validators propose blocks that reward the EL Fee Recipient. The fundsare pulled back in the system.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/River.1.sol\":\"RiverV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/Administrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IAdministrable.sol\\\";\\n\\nimport \\\"./libraries/LibAdministrable.sol\\\";\\nimport \\\"./libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrable\\n/// @author Kiln\\n/// @notice This contract handles the administration of the contracts\\nabstract contract Administrable is IAdministrable {\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() {\\n        if (msg.sender != LibAdministrable._getAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyPendingAdmin() {\\n        if (msg.sender != LibAdministrable._getPendingAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getAdmin() external view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getPendingAdmin() external view returns (address) {\\n        return LibAdministrable._getPendingAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function proposeAdmin(address _newAdmin) external onlyAdmin {\\n        _setPendingAdmin(_newAdmin);\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function acceptAdmin() external onlyPendingAdmin {\\n        _setAdmin(LibAdministrable._getPendingAdmin());\\n        _setPendingAdmin(address(0));\\n    }\\n\\n    /// @notice Internal utility to set the admin address\\n    /// @param _admin Address to set as admin\\n    function _setAdmin(address _admin) internal {\\n        LibSanitize._notZeroAddress(_admin);\\n        LibAdministrable._setAdmin(_admin);\\n        emit SetAdmin(_admin);\\n    }\\n\\n    /// @notice Internal utility to set the pending admin address\\n    /// @param _pendingAdmin Address to set as pending admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        LibAdministrable._setPendingAdmin(_pendingAdmin);\\n        emit SetPendingAdmin(_pendingAdmin);\\n    }\\n\\n    /// @notice Internal utility to retrieve the address of the current admin\\n    /// @return The address of admin\\n    function _getAdmin() internal view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n}\\n\",\"keccak256\":\"0xc9ce727028bc42bf4ea4247dfde9b57a5c36e1820aba5219207aa95c4f035372\",\"license\":\"BUSL-1.1\"},\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\n/// @title Initializable\\n/// @author Kiln\\n/// @notice This contract ensures that initializers are called only once per version\\ncontract Initializable {\\n    /// @notice An error occured during the initialization\\n    /// @param version The version that was attempting to be initialized\\n    /// @param expectedVersion The version that was expected\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    /// @notice Emitted when the contract is properly initialized\\n    /// @param version New version of the contracts\\n    /// @param cdata Complete calldata that was used during the initialization\\n    event Initialize(uint256 version, bytes cdata);\\n\\n    /// @notice Use this modifier on initializers along with a hard-coded version number\\n    /// @param _version Version to initialize\\n    modifier init(uint256 _version) {\\n        if (_version != Version.get()) {\\n            revert InvalidInitialization(_version, Version.get());\\n        }\\n        Version.set(_version + 1); // prevents reentrency on the called method\\n        _;\\n        emit Initialize(_version, msg.data);\\n    }\\n}\\n\",\"keccak256\":\"0xc85d24988a02608db50067c5319e3b42eec8e45726045489bdb8ea1f33e1ce67\",\"license\":\"BUSL-1.1\"},\"contracts/src/River.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IAllowlist.1.sol\\\";\\nimport \\\"./interfaces/IOperatorRegistry.1.sol\\\";\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\nimport \\\"./interfaces/IELFeeRecipient.1.sol\\\";\\n\\nimport \\\"./components/ConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"./components/UserDepositManager.1.sol\\\";\\nimport \\\"./components/SharesManager.1.sol\\\";\\nimport \\\"./components/OracleManager.1.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./Administrable.sol\\\";\\n\\nimport \\\"./state/river/AllowlistAddress.sol\\\";\\nimport \\\"./state/river/OperatorsRegistryAddress.sol\\\";\\nimport \\\"./state/river/CollectorAddress.sol\\\";\\nimport \\\"./state/river/GlobalFee.sol\\\";\\nimport \\\"./state/river/ELFeeRecipientAddress.sol\\\";\\n\\n/// @title River (v1)\\n/// @author Kiln\\n/// @notice This contract merges all the manager contracts and implements all the virtual methods stitching all components together\\n/// @notice\\n/// @notice    +---------------------------------------------------------------------+\\n/// @notice    |                                                                     |\\n/// @notice    |                           Consensus Layer                           |\\n/// @notice    |                                                                     |\\n/// @notice    | +-------------------+  +-------------------+  +-------------------+ |\\n/// @notice    | |                   |  |                   |  |                   | |\\n/// @notice    | |  EL Fee Recipient |  |      Oracle       |  |  Deposit Contract | |\\n/// @notice    | |                   |  |                   |  |                   | |\\n/// @notice    | +---------|---------+  +---------|---------+  +---------|---------+ |\\n/// @notice    +---------------------------------------------------------------------+\\n/// @notice                |         7            |            5         |\\n/// @notice                +-----------------|    |    |-----------------+\\n/// @notice                                  |    |6   |\\n/// @notice                                  |    |    |\\n/// @notice        +---------+          +----|----|----|----+            +---------+\\n/// @notice        |         |          |                   |     2      |         |\\n/// @notice        |Operator |          |       River       --------------  User   |\\n/// @notice        |         |          |                   |            |         |\\n/// @notice        +----|----+          +----|---------|----+            +---------+\\n/// @notice             |                    |         |\\n/// @notice             |             4      |         |       3\\n/// @notice             |1     +-------------|         |--------------+\\n/// @notice             |      |                                      |\\n/// @notice             |      |                                      |\\n/// @notice      +------|------|------------+           +-------------|------------+\\n/// @notice      |                          |           |                          |\\n/// @notice      |    Operators Registry    |           |         Allowlist        |\\n/// @notice      |                          |           |                          |\\n/// @notice      +--------------------------+           +--------------------------+\\n/// @notice\\n/// @notice      1. Operators are adding BLS Public Keys of validators running in their\\n/// @notice         infrastructure.\\n/// @notice      2. User deposit ETH to the system and get shares minted in exchange\\n/// @notice      3. Upon deposit, the system verifies if the User is allowed to deposit\\n/// @notice         by querying the Allowlist\\n/// @notice      4. When the system has enough funds to deposit validators, keys are pulled\\n/// @notice         from the Operators Registry\\n/// @notice      5. The deposit data is computed and the validators are funded via the official\\n/// @notice         deposit contract\\n/// @notice      6. Oracles report the total balance of the running validators and the total count\\n/// @notice         of running validators\\n/// @notice      7. The running validators propose blocks that reward the EL Fee Recipient. The funds\\n/// @notice         are pulled back in the system.\\n/// @notice\\ncontract RiverV1 is\\n    ConsensusLayerDepositManagerV1,\\n    UserDepositManagerV1,\\n    SharesManagerV1,\\n    OracleManagerV1,\\n    Initializable,\\n    Administrable,\\n    IRiverV1\\n{\\n    /// @notice The mask for the deposit right\\n    uint256 internal constant DEPOSIT_MASK = 0x1;\\n\\n    /// @inheritdoc IRiverV1\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _operatorRegistryAddress,\\n        address _collectorAddress,\\n        uint256 _globalFee\\n    ) external init(0) {\\n        _setAdmin(_systemAdministratorAddress);\\n\\n        CollectorAddress.set(_collectorAddress);\\n        emit SetCollector(_collectorAddress);\\n\\n        GlobalFee.set(_globalFee);\\n        emit SetGlobalFee(_globalFee);\\n\\n        ELFeeRecipientAddress.set(_elFeeRecipientAddress);\\n        emit SetELFeeRecipient(_elFeeRecipientAddress);\\n\\n        AllowlistAddress.set(_allowlistAddress);\\n        emit SetAllowlist(_allowlistAddress);\\n\\n        OperatorsRegistryAddress.set(_operatorRegistryAddress);\\n        emit SetOperatorsRegistry(_operatorRegistryAddress);\\n\\n        ConsensusLayerDepositManagerV1.initConsensusLayerDepositManagerV1(\\n            _depositContractAddress, _withdrawalCredentials\\n        );\\n\\n        OracleManagerV1.initOracleManagerV1(_oracleAddress);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getGlobalFee() external view returns (uint256) {\\n        return GlobalFee.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getAllowlist() external view returns (address) {\\n        return AllowlistAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getCollector() external view returns (address) {\\n        return CollectorAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getELFeeRecipient() external view returns (address) {\\n        return ELFeeRecipientAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setGlobalFee(uint256 newFee) external onlyAdmin {\\n        GlobalFee.set(newFee);\\n        emit SetGlobalFee(newFee);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setAllowlist(address _newAllowlist) external onlyAdmin {\\n        AllowlistAddress.set(_newAllowlist);\\n        emit SetAllowlist(_newAllowlist);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setCollector(address _newCollector) external onlyAdmin {\\n        CollectorAddress.set(_newCollector);\\n        emit SetCollector(_newCollector);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setELFeeRecipient(address _newELFeeRecipient) external onlyAdmin {\\n        ELFeeRecipientAddress.set(_newELFeeRecipient);\\n        emit SetELFeeRecipient(_newELFeeRecipient);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getOperatorsRegistry() external view returns (address) {\\n        return OperatorsRegistryAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function sendELFees() external payable {\\n        if (msg.sender != ELFeeRecipientAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n    }\\n\\n    /// @notice Overriden handler to pass the system admin inside components\\n    /// @return The address of the admin\\n    function _getRiverAdmin()\\n        internal\\n        view\\n        override (OracleManagerV1, ConsensusLayerDepositManagerV1)\\n        returns (address)\\n    {\\n        return Administrable._getAdmin();\\n    }\\n\\n    /// @notice Overriden handler called whenever a token transfer is triggered\\n    /// @param _from Token sender\\n    /// @param _to Token receiver\\n    function _onTransfer(address _from, address _to) internal view override {\\n        IAllowlistV1 allowlist = IAllowlistV1(AllowlistAddress.get());\\n        if (allowlist.isDenied(_from)) {\\n            revert Denied(_from);\\n        }\\n        if (allowlist.isDenied(_to)) {\\n            revert Denied(_to);\\n        }\\n    }\\n\\n    /// @notice Overriden handler called whenever a user deposits ETH to the system. Mints the adequate amount of shares.\\n    /// @param _depositor User address that made the deposit\\n    /// @param _amount Amount of ETH deposited\\n    function _onDeposit(address _depositor, address _recipient, uint256 _amount) internal override {\\n        uint256 mintedShares = SharesManagerV1._mintShares(_depositor, _amount);\\n        IAllowlistV1 allowlist = IAllowlistV1(AllowlistAddress.get());\\n        if (_depositor == _recipient) {\\n            allowlist.onlyAllowed(_depositor, DEPOSIT_MASK); // this call reverts if unauthorized or denied\\n        } else {\\n            allowlist.onlyAllowed(_depositor, DEPOSIT_MASK); // this call reverts if unauthorized or denied\\n            if (allowlist.isDenied(_recipient)) {\\n                revert Denied(_recipient);\\n            }\\n            _transfer(_depositor, _recipient, mintedShares);\\n        }\\n    }\\n\\n    /// @notice Overriden handler called whenever a deposit to the consensus layer is made. Should retrieve _requestedAmount or lower keys\\n    /// @param _requestedAmount Amount of keys required. Contract is expected to send _requestedAmount or lower.\\n    /// @return publicKeys Array of fundable public keys\\n    /// @return signatures Array of signatures linked to the public keys\\n    function _getNextValidators(uint256 _requestedAmount)\\n        internal\\n        override\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        return IOperatorsRegistryV1(OperatorsRegistryAddress.get()).pickNextValidators(_requestedAmount);\\n    }\\n\\n    /// @notice Overriden handler to pull funds from the execution layer fee recipient to River and return the delta in the balance\\n    /// @param _max The maximum amount to pull from the execution layer fee recipient\\n    /// @return The amount pulled from the execution layer fee recipient\\n    function _pullELFees(uint256 _max) internal override returns (uint256) {\\n        address elFeeRecipient = ELFeeRecipientAddress.get();\\n        if (elFeeRecipient == address(0)) {\\n            return 0;\\n        }\\n        uint256 initialBalance = address(this).balance;\\n        IELFeeRecipientV1(payable(elFeeRecipient)).pullELFees(_max);\\n        uint256 collectedELFees = address(this).balance - initialBalance;\\n        BalanceToDeposit.set(BalanceToDeposit.get() + collectedELFees);\\n        emit PulledELFees(collectedELFees);\\n        return collectedELFees;\\n    }\\n\\n    /// @notice Overriden handler called whenever the balance of ETH handled by the system increases. Computes the fees paid to the collector\\n    /// @param _amount Additional ETH received\\n    function _onEarnings(uint256 _amount) internal override {\\n        uint256 oldTotalSupply = _totalSupply();\\n        if (oldTotalSupply == 0) {\\n            revert ZeroMintedShares();\\n        }\\n        uint256 newTotalBalance = _assetBalance();\\n        uint256 globalFee = GlobalFee.get();\\n        uint256 numerator = _amount * oldTotalSupply * globalFee;\\n        uint256 denominator = (newTotalBalance * LibBasisPoints.BASIS_POINTS_MAX) - (_amount * globalFee);\\n        uint256 sharesToMint = denominator == 0 ? 0 : (numerator / denominator);\\n\\n        if (sharesToMint > 0) {\\n            address collector = CollectorAddress.get();\\n            _mintRawShares(collector, sharesToMint);\\n            uint256 newTotalSupply = _totalSupply();\\n            uint256 oldTotalBalance = newTotalBalance - _amount;\\n            emit RewardsEarned(collector, oldTotalBalance, oldTotalSupply, newTotalBalance, newTotalSupply);\\n        }\\n    }\\n\\n    /// @notice Overriden handler called whenever the total balance of ETH is requested\\n    /// @return The current total asset balance managed by River\\n    function _assetBalance() internal view override returns (uint256) {\\n        uint256 clValidatorCount = CLValidatorCount.get();\\n        uint256 depositedValidatorCount = DepositedValidatorCount.get();\\n        if (clValidatorCount < depositedValidatorCount) {\\n            return CLValidatorTotalBalance.get() + BalanceToDeposit.get()\\n                + (depositedValidatorCount - clValidatorCount) * ConsensusLayerDepositManagerV1.DEPOSIT_SIZE;\\n        } else {\\n            return CLValidatorTotalBalance.get() + BalanceToDeposit.get();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7d9aa9e9a7b170a0967a48969d94b53720280b650b95ff964b746a75fe703bd\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/ConsensusLayerDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/components/IConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"../interfaces/IDepositContract.sol\\\";\\n\\nimport \\\"../libraries/LibBytes.sol\\\";\\nimport \\\"../libraries/LibUint256.sol\\\";\\n\\nimport \\\"../state/river/DepositContractAddress.sol\\\";\\nimport \\\"../state/river/WithdrawalCredentials.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\nimport \\\"../state/river/BalanceToDeposit.sol\\\";\\n\\n/// @title Consensus Layer Deposit Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the interactions with the official deposit contract, funding all validators\\n/// @notice Whenever a deposit to the consensus layer is requested, this contract computed the amount of keys\\n/// @notice that could be deposited depending on the amount available in the contract. It then tries to retrieve\\n/// @notice validator keys by calling its internal virtual method _getNextValidators. This method should be\\n/// @notice overridden by the implementing contract to provide [0; _keyCount] keys when invoked.\\nabstract contract ConsensusLayerDepositManagerV1 is IConsensusLayerDepositManagerV1 {\\n    /// @notice Size of a BLS Public key in bytes\\n    uint256 public constant PUBLIC_KEY_LENGTH = 48;\\n    /// @notice Size of a BLS Signature in bytes\\n    uint256 public constant SIGNATURE_LENGTH = 96;\\n    /// @notice Size of a deposit in ETH\\n    uint256 public constant DEPOSIT_SIZE = 32 ether;\\n\\n    /// @notice Handler called to retrieve the internal River admin address\\n    /// @dev Must be overriden\\n    function _getRiverAdmin() internal view virtual returns (address);\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin_CDMV1() {\\n        if (msg.sender != _getRiverAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Internal helper to retrieve validator keys ready to be funded\\n    /// @dev Must be overridden\\n    /// @param _keyCount The amount of keys (or less) to return.\\n    function _getNextValidators(uint256 _keyCount)\\n        internal\\n        virtual\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n\\n    /// @notice Initializer to set the deposit contract address and the withdrawal credentials to use\\n    /// @param _depositContractAddress The address of the deposit contract\\n    /// @param _withdrawalCredentials The withdrawal credentials to apply to all deposits\\n    function initConsensusLayerDepositManagerV1(address _depositContractAddress, bytes32 _withdrawalCredentials)\\n        internal\\n    {\\n        DepositContractAddress.set(_depositContractAddress);\\n        emit SetDepositContractAddress(_depositContractAddress);\\n\\n        WithdrawalCredentials.set(_withdrawalCredentials);\\n        emit SetWithdrawalCredentials(_withdrawalCredentials);\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function getBalanceToDeposit() external view returns (uint256) {\\n        return BalanceToDeposit.get();\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function getWithdrawalCredentials() external view returns (bytes32) {\\n        return WithdrawalCredentials.get();\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function getDepositedValidatorCount() external view returns (uint256) {\\n        return DepositedValidatorCount.get();\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function depositToConsensusLayer(uint256 _maxCount) external onlyAdmin_CDMV1 {\\n        uint256 balanceToDeposit = BalanceToDeposit.get();\\n        uint256 keyToDepositCount = LibUint256.min(balanceToDeposit / DEPOSIT_SIZE, _maxCount);\\n\\n        if (keyToDepositCount == 0) {\\n            revert NotEnoughFunds();\\n        }\\n\\n        (bytes[] memory publicKeys, bytes[] memory signatures) = _getNextValidators(keyToDepositCount);\\n\\n        uint256 receivedPublicKeyCount = publicKeys.length;\\n\\n        if (receivedPublicKeyCount == 0) {\\n            revert NoAvailableValidatorKeys();\\n        }\\n\\n        if (receivedPublicKeyCount > keyToDepositCount) {\\n            revert InvalidPublicKeyCount();\\n        }\\n\\n        uint256 receivedSignatureCount = signatures.length;\\n\\n        if (receivedSignatureCount != receivedPublicKeyCount) {\\n            revert InvalidSignatureCount();\\n        }\\n\\n        bytes32 withdrawalCredentials = WithdrawalCredentials.get();\\n\\n        if (withdrawalCredentials == 0) {\\n            revert InvalidWithdrawalCredentials();\\n        }\\n\\n        for (uint256 idx = 0; idx < receivedPublicKeyCount;) {\\n            _depositValidator(publicKeys[idx], signatures[idx], withdrawalCredentials);\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        BalanceToDeposit.set(balanceToDeposit - DEPOSIT_SIZE * receivedPublicKeyCount);\\n        DepositedValidatorCount.set(DepositedValidatorCount.get() + receivedPublicKeyCount);\\n    }\\n\\n    /// @notice Deposits 32 ETH to the official Deposit contract\\n    /// @param _publicKey The public key of the validator\\n    /// @param _signature The signature provided by the operator\\n    /// @param _withdrawalCredentials The withdrawal credentials provided by River\\n    function _depositValidator(bytes memory _publicKey, bytes memory _signature, bytes32 _withdrawalCredentials)\\n        internal\\n    {\\n        if (_publicKey.length != PUBLIC_KEY_LENGTH) {\\n            revert InconsistentPublicKeys();\\n        }\\n\\n        if (_signature.length != SIGNATURE_LENGTH) {\\n            revert InconsistentSignatures();\\n        }\\n        uint256 value = DEPOSIT_SIZE;\\n\\n        uint256 depositAmount = value / 1 gwei;\\n\\n        bytes32 pubkeyRoot = sha256(bytes.concat(_publicKey, bytes16(0)));\\n        bytes32 signatureRoot = sha256(\\n            bytes.concat(\\n                sha256(LibBytes.slice(_signature, 0, 64)),\\n                sha256(bytes.concat(LibBytes.slice(_signature, 64, SIGNATURE_LENGTH - 64), bytes32(0)))\\n            )\\n        );\\n\\n        bytes32 depositDataRoot = sha256(\\n            bytes.concat(\\n                sha256(bytes.concat(pubkeyRoot, _withdrawalCredentials)),\\n                sha256(bytes.concat(bytes32(LibUint256.toLittleEndian64(depositAmount)), signatureRoot))\\n            )\\n        );\\n\\n        uint256 targetBalance = address(this).balance - value;\\n\\n        IDepositContract(DepositContractAddress.get()).deposit{value: value}(\\n            _publicKey, abi.encodePacked(_withdrawalCredentials), _signature, depositDataRoot\\n        );\\n        if (address(this).balance != targetBalance) {\\n            revert ErrorOnDeposit();\\n        }\\n        emit FundedValidatorKey(_publicKey);\\n    }\\n}\\n\",\"keccak256\":\"0xd7701afc7b63fc1cc12b8a74b9d0eb880e3094d4c0f32b866080226d520e2aab\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/OracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/components/IOracleManager.1.sol\\\";\\n\\nimport \\\"../state/river/OracleAddress.sol\\\";\\nimport \\\"../state/river/LastOracleRoundId.sol\\\";\\nimport \\\"../state/river/CLValidatorTotalBalance.sol\\\";\\nimport \\\"../state/river/CLValidatorCount.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\n\\n/// @title Oracle Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the inputs provided by the oracle\\n/// @notice The Oracle contract is plugged to this contract and is in charge of pushing\\n/// @notice data whenever a new report has been deemed valid. The report consists in two\\n/// @notice values: the sum of all balances of all deposited validators and the count of\\n/// @notice validators that have been activated on the consensus layer.\\nabstract contract OracleManagerV1 is IOracleManagerV1 {\\n    /// @notice Handler called if the delta between the last and new validator balance sum is positive\\n    /// @dev Must be overridden\\n    /// @param _profits The positive increase in the validator balance sum (staking rewards)\\n    function _onEarnings(uint256 _profits) internal virtual;\\n\\n    /// @notice Handler called to pull the Execution layer fees from the recipient\\n    /// @dev Must be overridden\\n    /// @param _max The maximum amount to pull inside the system\\n    /// @return The amount pulled inside the system\\n    function _pullELFees(uint256 _max) internal virtual returns (uint256);\\n\\n    /// @notice Handler called to retrieve the system administrator address\\n    /// @dev Must be overridden\\n    /// @return The system administrator address\\n    function _getRiverAdmin() internal view virtual returns (address);\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin_OMV1() {\\n        if (msg.sender != _getRiverAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Set the initial oracle address\\n    /// @param _oracle Address of the oracle\\n    function initOracleManagerV1(address _oracle) internal {\\n        OracleAddress.set(_oracle);\\n        emit SetOracle(_oracle);\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getOracle() external view returns (address) {\\n        return OracleAddress.get();\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getCLValidatorTotalBalance() external view returns (uint256) {\\n        return CLValidatorTotalBalance.get();\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getCLValidatorCount() external view returns (uint256) {\\n        return CLValidatorCount.get();\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function setOracle(address _oracleAddress) external onlyAdmin_OMV1 {\\n        OracleAddress.set(_oracleAddress);\\n        emit SetOracle(_oracleAddress);\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function setConsensusLayerData(\\n        uint256 _validatorCount,\\n        uint256 _validatorTotalBalance,\\n        bytes32 _roundId,\\n        uint256 _maxIncrease\\n    ) external {\\n        if (msg.sender != OracleAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n\\n        if (_validatorCount > DepositedValidatorCount.get()) {\\n            revert InvalidValidatorCountReport(_validatorCount, DepositedValidatorCount.get());\\n        }\\n\\n        uint256 newValidators = _validatorCount - CLValidatorCount.get();\\n        uint256 previousValidatorTotalBalance = CLValidatorTotalBalance.get() + (newValidators * 32 ether);\\n\\n        CLValidatorTotalBalance.set(_validatorTotalBalance);\\n        CLValidatorCount.set(_validatorCount);\\n        LastOracleRoundId.set(_roundId);\\n\\n        uint256 executionLayerFees;\\n\\n        // if there's a margin left for pulling the execution layer fees that would leave our delta under the allowed maxIncrease value, do it\\n        if ((_maxIncrease + previousValidatorTotalBalance) > _validatorTotalBalance) {\\n            executionLayerFees = _pullELFees((_maxIncrease + previousValidatorTotalBalance) - _validatorTotalBalance);\\n        }\\n\\n        if (previousValidatorTotalBalance < _validatorTotalBalance + executionLayerFees) {\\n            _onEarnings((_validatorTotalBalance + executionLayerFees) - previousValidatorTotalBalance);\\n        }\\n\\n        emit ConsensusLayerDataUpdate(_validatorCount, _validatorTotalBalance, _roundId);\\n    }\\n}\\n\",\"keccak256\":\"0xe7765023760ec972a2c39de4fede1c5f390cad12aa7a83acd2d8fe98c98b443d\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/SharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/components/ISharesManager.1.sol\\\";\\n\\nimport \\\"../libraries/LibSanitize.sol\\\";\\n\\nimport \\\"../state/river/Shares.sol\\\";\\nimport \\\"../state/river/SharesPerOwner.sol\\\";\\nimport \\\"../state/shared/ApprovalsPerOwner.sol\\\";\\n\\n/// @title Shares Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the shares of the depositor and the ERC20 interface\\nabstract contract SharesManagerV1 is ISharesManagerV1 {\\n    /// @notice Internal hook triggered on the external transfer call\\n    /// @dev Must be overridden\\n    /// @param _from Address of the sender\\n    /// @param _to Address of the recipient\\n    function _onTransfer(address _from, address _to) internal view virtual;\\n\\n    /// @notice Internal method to override to provide the total underlying asset balance\\n    /// @dev Must be overridden\\n    /// @return The total asset balance of the system\\n    function _assetBalance() internal view virtual returns (uint256);\\n\\n    /// @notice Modifier used to ensure that the transfer is allowed by using the internal hook to perform internal checks\\n    /// @param _from Address of the sender\\n    /// @param _to Address of the recipient\\n    modifier transferAllowed(address _from, address _to) {\\n        _onTransfer(_from, _to);\\n        _;\\n    }\\n\\n    /// @notice Modifier used to ensure the amount transferred is not 0\\n    /// @param _value Amount to check\\n    modifier isNotZero(uint256 _value) {\\n        if (_value == 0) {\\n            revert NullTransfer();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier used to ensure that the sender has enough funds for the transfer\\n    /// @param _owner Address of the sender\\n    /// @param _value Value that is required to be sent\\n    modifier hasFunds(address _owner, uint256 _value) {\\n        if (_balanceOf(_owner) < _value) {\\n            revert BalanceTooLow();\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function name() external pure returns (string memory) {\\n        return \\\"Liquid Staked ETH\\\";\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function symbol() external pure returns (string memory) {\\n        return \\\"LsETH\\\";\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function totalUnderlyingSupply() external view returns (uint256) {\\n        return _assetBalance();\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function balanceOf(address _owner) external view returns (uint256) {\\n        return _balanceOf(_owner);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function balanceOfUnderlying(address _owner) public view returns (uint256) {\\n        return _balanceFromShares(SharesPerOwner.get(_owner));\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function underlyingBalanceFromShares(uint256 _shares) external view returns (uint256) {\\n        return _balanceFromShares(_shares);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function sharesFromUnderlyingBalance(uint256 _underlyingAssetAmount) external view returns (uint256) {\\n        return _sharesFromBalance(_underlyingAssetAmount);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function allowance(address _owner, address _spender) external view returns (uint256) {\\n        return ApprovalsPerOwner.get(_owner, _spender);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function transfer(address _to, uint256 _value)\\n        external\\n        transferAllowed(msg.sender, _to)\\n        isNotZero(_value)\\n        hasFunds(msg.sender, _value)\\n        returns (bool)\\n    {\\n        if (_to == address(0)) {\\n            revert UnauthorizedTransfer(msg.sender, address(0));\\n        }\\n        return _transfer(msg.sender, _to, _value);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        external\\n        transferAllowed(_from, _to)\\n        isNotZero(_value)\\n        hasFunds(_from, _value)\\n        returns (bool)\\n    {\\n        if (_to == address(0)) {\\n            revert UnauthorizedTransfer(_from, address(0));\\n        }\\n        _spendAllowance(_from, _value);\\n        return _transfer(_from, _to, _value);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function approve(address _spender, uint256 _value) external returns (bool) {\\n        _approve(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool) {\\n        _approve(msg.sender, _spender, ApprovalsPerOwner.get(msg.sender, _spender) + _additionalValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool) {\\n        _approve(msg.sender, _spender, ApprovalsPerOwner.get(msg.sender, _spender) - _subtractableValue);\\n        return true;\\n    }\\n\\n    /// @notice Internal utility to spend the allowance of an account from the message sender\\n    /// @param _from Address owning the allowance\\n    /// @param _value Amount of allowance in shares to spend\\n    function _spendAllowance(address _from, uint256 _value) internal {\\n        uint256 currentAllowance = ApprovalsPerOwner.get(_from, msg.sender);\\n        if (currentAllowance < _value) {\\n            revert AllowanceTooLow(_from, msg.sender, currentAllowance, _value);\\n        }\\n        if (currentAllowance != type(uint256).max) {\\n            _approve(_from, msg.sender, currentAllowance - _value);\\n        }\\n    }\\n\\n    /// @notice Internal utility to change the allowance of an owner to a spender\\n    /// @param _owner The owner of the shares\\n    /// @param _spender The allowed spender of the shares\\n    /// @param _value The new allowance value\\n    function _approve(address _owner, address _spender, uint256 _value) internal {\\n        LibSanitize._notZeroAddress(_owner);\\n        LibSanitize._notZeroAddress(_spender);\\n        ApprovalsPerOwner.set(_owner, _spender, _value);\\n        emit Approval(_owner, _spender, _value);\\n    }\\n\\n    /// @notice Internal utility to retrieve the total supply of tokens\\n    /// @return The total supply\\n    function _totalSupply() internal view returns (uint256) {\\n        return Shares.get();\\n    }\\n\\n    /// @notice Internal utility to perform an unchecked transfer\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\\n        SharesPerOwner.set(_from, SharesPerOwner.get(_from) - _value);\\n        SharesPerOwner.set(_to, SharesPerOwner.get(_to) + _value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /// @notice Internal utility to retrieve the underlying asset balance for the given shares\\n    /// @param _shares Amount of shares to convert\\n    /// @return The balance from the given shares\\n    function _balanceFromShares(uint256 _shares) internal view returns (uint256) {\\n        uint256 _totalSharesValue = Shares.get();\\n\\n        if (_totalSharesValue == 0) {\\n            return 0;\\n        }\\n\\n        return ((_shares * _assetBalance())) / _totalSharesValue;\\n    }\\n\\n    /// @notice Internal utility to retrieve the shares count for a given underlying asset amount\\n    /// @param _balance Amount of underlying asset balance to convert\\n    /// @return The shares from the given balance\\n    function _sharesFromBalance(uint256 _balance) internal view returns (uint256) {\\n        uint256 _totalSharesValue = Shares.get();\\n\\n        if (_totalSharesValue == 0) {\\n            return 0;\\n        }\\n\\n        return (_balance * _totalSharesValue) / _assetBalance();\\n    }\\n\\n    /// @notice Internal utility to mint shares for the specified user\\n    /// @dev This method assumes that funds received are now part of the _assetBalance()\\n    /// @param _owner Account that should receive the new shares\\n    /// @param _underlyingAssetValue Value of underlying asset received, to convert into shares\\n    /// @return sharesToMint The amnount of minted shares\\n    function _mintShares(address _owner, uint256 _underlyingAssetValue) internal returns (uint256 sharesToMint) {\\n        uint256 oldTotalAssetBalance = _assetBalance() - _underlyingAssetValue;\\n\\n        if (oldTotalAssetBalance == 0) {\\n            sharesToMint = _underlyingAssetValue;\\n            _mintRawShares(_owner, _underlyingAssetValue);\\n        } else {\\n            sharesToMint = (_underlyingAssetValue * _totalSupply()) / oldTotalAssetBalance;\\n            _mintRawShares(_owner, sharesToMint);\\n        }\\n    }\\n\\n    /// @notice Internal utility to mint shares without any conversion, and emits a mint Transfer event\\n    /// @param _owner Account that should receive the new shares\\n    /// @param _value Amount of shares to mint\\n    function _mintRawShares(address _owner, uint256 _value) internal {\\n        Shares.set(Shares.get() + _value);\\n        SharesPerOwner.set(_owner, SharesPerOwner.get(_owner) + _value);\\n        emit Transfer(address(0), _owner, _value);\\n    }\\n\\n    /// @notice Internal utility to retrieve the amount of shares per owner\\n    /// @param _owner Account to be checked\\n    /// @return The balance of the account in shares\\n    function _balanceOf(address _owner) internal view returns (uint256) {\\n        return SharesPerOwner.get(_owner);\\n    }\\n}\\n\",\"keccak256\":\"0xf56ca00880eb84b775b73627014b0623942770985d5bf164f3bb577882976572\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/UserDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/components/IUserDepositManager.1.sol\\\";\\n\\nimport \\\"../libraries/LibSanitize.sol\\\";\\n\\nimport \\\"../state/river/BalanceToDeposit.sol\\\";\\n\\n/// @title User Deposit Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the inbound transfers cases or the explicit submissions\\nabstract contract UserDepositManagerV1 is IUserDepositManagerV1 {\\n    /// @notice Handler called whenever a user has sent funds to the contract\\n    /// @dev Must be overridden\\n    /// @param _depositor Address that made the deposit\\n    /// @param _recipient Address that receives the minted shares\\n    /// @param _amount Amount deposited\\n    function _onDeposit(address _depositor, address _recipient, uint256 _amount) internal virtual;\\n\\n    /// @inheritdoc IUserDepositManagerV1\\n    function deposit() external payable {\\n        _deposit(msg.sender);\\n    }\\n\\n    /// @inheritdoc IUserDepositManagerV1\\n    function depositAndTransfer(address _recipient) external payable {\\n        LibSanitize._notZeroAddress(_recipient);\\n        _deposit(_recipient);\\n    }\\n\\n    /// @inheritdoc IUserDepositManagerV1\\n    receive() external payable {\\n        _deposit(msg.sender);\\n    }\\n\\n    /// @inheritdoc IUserDepositManagerV1\\n    fallback() external payable {\\n        revert LibErrors.InvalidCall();\\n    }\\n\\n    /// @notice Internal utility calling the deposit handler and emitting the deposit details\\n    /// @param _recipient The account receiving the minted shares\\n    function _deposit(address _recipient) internal {\\n        if (msg.value == 0) {\\n            revert EmptyDeposit();\\n        }\\n\\n        BalanceToDeposit.set(BalanceToDeposit.get() + msg.value);\\n\\n        _onDeposit(msg.sender, _recipient, msg.value);\\n\\n        emit UserDeposit(msg.sender, _recipient, msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x1996ead84f73844ce6d8e869a74dfcd78cef629074165bb24e8c0fa1010a5897\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Administrable Interface\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the ownership of the contracts\\ninterface IAdministrable {\\n    /// @notice The pending admin address changed\\n    /// @param pendingAdmin New pending admin address\\n    event SetPendingAdmin(address indexed pendingAdmin);\\n\\n    /// @notice The admin address changed\\n    /// @param admin New admin address\\n    event SetAdmin(address indexed admin);\\n\\n    /// @notice Retrieves the current admin address\\n    /// @return The admin address\\n    function getAdmin() external view returns (address);\\n\\n    /// @notice Retrieve the current pending admin address\\n    /// @return The pending admin address\\n    function getPendingAdmin() external view returns (address);\\n\\n    /// @notice Proposes a new address as admin\\n    /// @dev This security prevents setting an invalid address as an admin. The pending\\n    /// @dev admin has to claim its ownership of the contract, and prove that the new\\n    /// @dev address is able to perform regular transactions.\\n    /// @param _newAdmin New admin address\\n    function proposeAdmin(address _newAdmin) external;\\n\\n    /// @notice Accept the transfer of ownership\\n    /// @dev Only callable by the pending admin. Resets the pending admin if succesful.\\n    function acceptAdmin() external;\\n}\\n\",\"keccak256\":\"0xe45ef81bf9326bac437dcf901eeb80628d5c87d51dcbcf3addb80e834ba7bfea\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAllowlist.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Allowlist Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the list of allowed recipients.\\ninterface IAllowlistV1 {\\n    /// @notice The permissions of several accounts have changed\\n    /// @param accounts List of accounts\\n    /// @param permissions New permissions for each account at the same index\\n    event SetAllowlistPermissions(address[] indexed accounts, uint256[] permissions);\\n\\n    /// @notice The stored allower address has been changed\\n    /// @param allower The new allower address\\n    event SetAllower(address indexed allower);\\n\\n    /// @notice The provided accounts list is empty\\n    error InvalidAlloweeCount();\\n\\n    /// @notice The account is denied access\\n    /// @param _account The denied account\\n    error Denied(address _account);\\n\\n    /// @notice The provided accounts and permissions list have different lengths\\n    error MismatchedAlloweeAndStatusCount();\\n\\n    /// @notice Initializes the allowlist\\n    /// @param _admin Address of the Allowlist administrator\\n    /// @param _allower Address of the allower\\n    function initAllowlistV1(address _admin, address _allower) external;\\n\\n    /// @notice Retrieves the allower address\\n    /// @return The address of the allower\\n    function getAllower() external view returns (address);\\n\\n    /// @notice This method returns true if the user has the expected permission and\\n    ///         is not in the deny list\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    /// @return True if mask is respected and user is allowed\\n    function isAllowed(address _account, uint256 _mask) external view returns (bool);\\n\\n    /// @notice This method returns true if the user is in the deny list\\n    /// @param _account Recipient to verify\\n    /// @return True if user is denied access\\n    function isDenied(address _account) external view returns (bool);\\n\\n    /// @notice This method returns true if the user has the expected permission\\n    ///         ignoring any deny list membership\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    /// @return True if mask is respected\\n    function hasPermission(address _account, uint256 _mask) external view returns (bool);\\n\\n    /// @notice This method retrieves the raw permission value\\n    /// @param _account Recipient to verify\\n    /// @return The raw permissions value of the account\\n    function getPermissions(address _account) external view returns (uint256);\\n\\n    /// @notice This method should be used as a modifier and is expected to revert\\n    ///         if the user hasn't got the required permission or if the user is\\n    ///         in the deny list.\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    function onlyAllowed(address _account, uint256 _mask) external view;\\n\\n    /// @notice Changes the allower address\\n    /// @param _newAllowerAddress New address allowed to edit the allowlist\\n    function setAllower(address _newAllowerAddress) external;\\n\\n    /// @notice Sets the allowlisting status for one or more accounts\\n    /// @dev The permission value is overridden and not updated\\n    /// @param _accounts Accounts with statuses to edit\\n    /// @param _permissions Allowlist permissions for each account, in the same order as _accounts\\n    function allow(address[] calldata _accounts, uint256[] calldata _permissions) external;\\n}\\n\",\"keccak256\":\"0x5adc1d16239b5d210b1779325b85b80435b4e5c0d8d578c6f72c01e98dcf224f\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IDepositContract.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Deposit Contract Interface\\n/// @notice This interface exposes methods to perform validator deposits\\ninterface IDepositContract {\\n    /// @notice Official deposit method to activate a validator on the consensus layer\\n    /// @param pubkey The 48 bytes long BLS Public key representing the validator\\n    /// @param withdrawalCredentials The 32 bytes long withdrawal credentials, configures the withdrawal recipient\\n    /// @param signature The 96 bytes long BLS Signature performed by the pubkey's private key\\n    /// @param depositDataRoot The root hash of the whole deposit data structure\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawalCredentials,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xd6eb6616fcc668e5c00141d60c3d5079dce01a04d2761ad4fe68e13a349d3850\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IELFeeRecipient.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Execution Layer Fee Recipient Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to receive all the execution layer fees from the proposed blocks + bribes\\ninterface IELFeeRecipientV1 {\\n    /// @notice The storage river address has changed\\n    /// @param river The new river address\\n    event SetRiver(address indexed river);\\n\\n    /// @notice The fallback has been triggered\\n    error InvalidCall();\\n\\n    /// @notice Initialize the fee recipient with the required arguments\\n    /// @param _riverAddress Address of River\\n    function initELFeeRecipientV1(address _riverAddress) external;\\n\\n    /// @notice Pulls all the ETH to the River contract\\n    /// @dev Only callable by the River contract\\n    /// @param _maxAmount The maximum amount to pull into the system\\n    function pullELFees(uint256 _maxAmount) external;\\n\\n    /// @notice Ether receiver\\n    receive() external payable;\\n\\n    /// @notice Invalid fallback detector\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x1cbb9895cd2524fdc241c9203fbd796493f613a2c8018acae99ddfd0899a1025\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IOperatorRegistry.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/operatorsRegistry/Operators.sol\\\";\\n\\n/// @title Operators Registry Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the list of operators and their keys\\ninterface IOperatorsRegistryV1 {\\n    /// @notice A new operator has been added to the registry\\n    /// @param index The operator index\\n    /// @param name The operator display name\\n    /// @param operatorAddress The operator address\\n    event AddedOperator(uint256 indexed index, string name, address indexed operatorAddress);\\n\\n    /// @notice The operator status has been changed\\n    /// @param index The operator index\\n    /// @param active True if the operator is active\\n    event SetOperatorStatus(uint256 indexed index, bool active);\\n\\n    /// @notice The operator limit has been changed\\n    /// @param index The operator index\\n    /// @param newLimit The new operator staking limit\\n    event SetOperatorLimit(uint256 indexed index, uint256 newLimit);\\n\\n    /// @notice The operator stopped validator count has been changed\\n    /// @param index The operator index\\n    /// @param newStoppedValidatorCount The new stopped validator count\\n    event SetOperatorStoppedValidatorCount(uint256 indexed index, uint256 newStoppedValidatorCount);\\n\\n    /// @notice The operator address has been changed\\n    /// @param index The operator index\\n    /// @param newOperatorAddress The new operator address\\n    event SetOperatorAddress(uint256 indexed index, address indexed newOperatorAddress);\\n\\n    /// @notice The operator display name has been changed\\n    /// @param index The operator index\\n    /// @param newName The new display name\\n    event SetOperatorName(uint256 indexed index, string newName);\\n\\n    /// @notice The operator or the admin added new validator keys and signatures\\n    /// @dev The public keys and signatures are concatenated\\n    /// @dev A public key is 48 bytes long\\n    /// @dev A signature is 96 bytes long\\n    /// @dev [P1, S1, P2, S2, ..., PN, SN] where N is the bytes length divided by (96 + 48)\\n    /// @param index The operator index\\n    /// @param publicKeysAndSignatures The concatenated public keys and signatures\\n    event AddedValidatorKeys(uint256 indexed index, bytes publicKeysAndSignatures);\\n\\n    /// @notice The operator or the admin removed a public key and its signature from the registry\\n    /// @param index The operator index\\n    /// @param publicKey The BLS public key that has been removed\\n    event RemovedValidatorKey(uint256 indexed index, bytes publicKey);\\n\\n    /// @notice The stored river address has been changed\\n    /// @param river The new river address\\n    event SetRiver(address indexed river);\\n\\n    /// @notice The operator edited its keys after the snapshot block\\n    /// @dev This means that we cannot assume that its key set is checked by the snapshot\\n    /// @dev This happens only if the limit was meant to be increased\\n    /// @param index The operator index\\n    /// @param currentLimit The current operator limit\\n    /// @param newLimit The new operator limit that was attempted to be set\\n    /// @param latestKeysEditBlockNumber The last block number at which the operator changed its keys\\n    /// @param snapshotBlock The block number of the snapshot\\n    event OperatorEditsAfterSnapshot(\\n        uint256 indexed index,\\n        uint256 currentLimit,\\n        uint256 newLimit,\\n        uint256 indexed latestKeysEditBlockNumber,\\n        uint256 indexed snapshotBlock\\n    );\\n\\n    /// @notice The call didn't alter the limit of the operator\\n    /// @param index The operator index\\n    /// @param limit The limit of the operator\\n    event OperatorLimitUnchanged(uint256 indexed index, uint256 limit);\\n\\n    /// @notice The calling operator is inactive\\n    /// @param index The operator index\\n    error InactiveOperator(uint256 index);\\n\\n    /// @notice A funded key deletion has been attempted\\n    error InvalidFundedKeyDeletionAttempt();\\n\\n    /// @notice The index provided are not sorted properly (descending order)\\n    error InvalidUnsortedIndexes();\\n\\n    /// @notice The provided operator and limits array have different lengths\\n    error InvalidArrayLengths();\\n\\n    /// @notice The provided operator and limits array are empty\\n    error InvalidEmptyArray();\\n\\n    /// @notice The provided key count is 0\\n    error InvalidKeyCount();\\n\\n    /// @notice The provided concatenated keys do not have the expected length\\n    error InvalidKeysLength();\\n\\n    /// @notice The index that is removed is out of bounds\\n    error InvalidIndexOutOfBounds();\\n\\n    /// @notice The value for the operator limit is too high\\n    /// @param index The operator index\\n    /// @param limit The new limit provided\\n    /// @param keyCount The operator key count\\n    error OperatorLimitTooHigh(uint256 index, uint256 limit, uint256 keyCount);\\n\\n    /// @notice The value for the limit is too low\\n    /// @param index The operator index\\n    /// @param limit The new limit provided\\n    /// @param fundedKeyCount The operator funded key count\\n    error OperatorLimitTooLow(uint256 index, uint256 limit, uint256 fundedKeyCount);\\n\\n    /// @notice The provided list of operators is not in increasing order\\n    error UnorderedOperatorList();\\n\\n    /// @notice Initializes the operators registry\\n    /// @param _admin Admin in charge of managing operators\\n    /// @param _river Address of River system\\n    function initOperatorsRegistryV1(address _admin, address _river) external;\\n\\n    /// @notice Retrieve the River address\\n    /// @return The address of River\\n    function getRiver() external view returns (address);\\n\\n    /// @notice Get operator details\\n    /// @param _index The index of the operator\\n    /// @return The details of the operator\\n    function getOperator(uint256 _index) external view returns (Operators.Operator memory);\\n\\n    /// @notice Get operator count\\n    /// @return The operator count\\n    function getOperatorCount() external view returns (uint256);\\n\\n    /// @notice Get the details of a validator\\n    /// @param _operatorIndex The index of the operator\\n    /// @param _validatorIndex The index of the validator\\n    /// @return publicKey The public key of the validator\\n    /// @return signature The signature used during deposit\\n    /// @return funded True if validator has been funded\\n    function getValidator(uint256 _operatorIndex, uint256 _validatorIndex)\\n        external\\n        view\\n        returns (bytes memory publicKey, bytes memory signature, bool funded);\\n\\n    /// @notice Retrieve the active operator set\\n    /// @return The list of active operators and their details\\n    function listActiveOperators() external view returns (Operators.Operator[] memory);\\n\\n    /// @notice Adds an operator to the registry\\n    /// @dev Only callable by the administrator\\n    /// @param _name The name identifying the operator\\n    /// @param _operator The address representing the operator, receiving the rewards\\n    /// @return The index of the new operator\\n    function addOperator(string calldata _name, address _operator) external returns (uint256);\\n\\n    /// @notice Changes the operator address of an operator\\n    /// @dev Only callable by the administrator or the previous operator address\\n    /// @param _index The operator index\\n    /// @param _newOperatorAddress The new address of the operator\\n    function setOperatorAddress(uint256 _index, address _newOperatorAddress) external;\\n\\n    /// @notice Changes the operator name\\n    /// @dev Only callable by the administrator or the operator\\n    /// @param _index The operator index\\n    /// @param _newName The new operator name\\n    function setOperatorName(uint256 _index, string calldata _newName) external;\\n\\n    /// @notice Changes the operator status\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStatus The new status of the operator\\n    function setOperatorStatus(uint256 _index, bool _newStatus) external;\\n\\n    /// @notice Changes the operator stopped validator count\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStoppedValidatorCount The new stopped validator count of the operator\\n    function setOperatorStoppedValidatorCount(uint256 _index, uint256 _newStoppedValidatorCount) external;\\n\\n    /// @notice Changes the operator staking limit\\n    /// @dev Only callable by the administrator\\n    /// @dev The operator indexes must be in increasing order and contain no duplicate\\n    /// @dev The limit cannot exceed the total key count of the operator\\n    /// @dev The _indexes and _newLimits must have the same length.\\n    /// @dev Each limit value is applied to the operator index at the same index in the _indexes array.\\n    /// @param _operatorIndexes The operator indexes, in increasing order and duplicate free\\n    /// @param _newLimits The new staking limit of the operators\\n    /// @param _snapshotBlock The block number at which the snapshot was computed\\n    function setOperatorLimits(\\n        uint256[] calldata _operatorIndexes,\\n        uint256[] calldata _newLimits,\\n        uint256 _snapshotBlock\\n    ) external;\\n\\n    /// @notice Adds new keys for an operator\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @param _index The operator index\\n    /// @param _keyCount The amount of keys provided\\n    /// @param _publicKeysAndSignatures Public keys of the validator, concatenated\\n    function addValidators(uint256 _index, uint256 _keyCount, bytes calldata _publicKeysAndSignatures) external;\\n\\n    /// @notice Remove validator keys\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @dev The indexes must be provided sorted in decreasing order and duplicate-free, otherwise the method will revert\\n    /// @dev The operator limit will be set to the lowest deleted key index if the operator's limit wasn't equal to its total key count\\n    /// @dev The operator or the admin cannot remove funded keys\\n    /// @dev When removing validators, the indexes of specific unfunded keys can be changed in order to properly\\n    /// @dev remove the keys from the storage array. Beware of this specific behavior when chaining calls as the\\n    /// @dev targeted public key indexes can point to a different key after a first call was made and performed\\n    /// @dev some swaps\\n    /// @param _index The operator index\\n    /// @param _indexes The indexes of the keys to remove\\n    function removeValidators(uint256 _index, uint256[] calldata _indexes) external;\\n\\n    /// @notice Retrieve validator keys based on operator statuses\\n    /// @param _count Max amount of keys requested\\n    /// @return publicKeys An array of public keys\\n    /// @return signatures An array of signatures linked to the public keys\\n    function pickNextValidators(uint256 _count)\\n        external\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n}\\n\",\"keccak256\":\"0xe5155a676a2faf7a5909d6f167de643b6ce8db08facbc85ebfc17da157d3fc2d\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRiver.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./components/IConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"./components/IOracleManager.1.sol\\\";\\nimport \\\"./components/ISharesManager.1.sol\\\";\\nimport \\\"./components/IUserDepositManager.1.sol\\\";\\n\\n/// @title River Interface (v1)\\n/// @author Kiln\\n/// @notice The main system interface\\ninterface IRiverV1 is IConsensusLayerDepositManagerV1, IUserDepositManagerV1, ISharesManagerV1, IOracleManagerV1 {\\n    /// @notice Funds have been pulled from the Execution Layer Fee Recipient\\n    /// @param amount The amount pulled\\n    event PulledELFees(uint256 amount);\\n\\n    /// @notice The stored Execution Layer Fee Recipient has been changed\\n    /// @param elFeeRecipient The new Execution Layer Fee Recipient\\n    event SetELFeeRecipient(address indexed elFeeRecipient);\\n\\n    /// @notice The stored Collector has been changed\\n    /// @param collector The new Collector\\n    event SetCollector(address indexed collector);\\n\\n    /// @notice The stored Allowlist has been changed\\n    /// @param allowlist The new Allowlist\\n    event SetAllowlist(address indexed allowlist);\\n\\n    /// @notice The stored Global Fee has been changed\\n    /// @param fee The new Global Fee\\n    event SetGlobalFee(uint256 fee);\\n\\n    /// @notice The stored Operators Registry has been changed\\n    /// @param operatorRegistry The new Operators Registry\\n    event SetOperatorsRegistry(address indexed operatorRegistry);\\n\\n    /// @notice The system underlying supply increased. This is a snapshot of the balances for accounting purposes\\n    /// @param _collector The address of the collector during this event\\n    /// @param _oldTotalUnderlyingBalance Old total ETH balance under management by River\\n    /// @param _oldTotalSupply Old total supply in shares\\n    /// @param _newTotalUnderlyingBalance New total ETH balance under management by River\\n    /// @param _newTotalSupply New total supply in shares\\n    event RewardsEarned(\\n        address indexed _collector,\\n        uint256 _oldTotalUnderlyingBalance,\\n        uint256 _oldTotalSupply,\\n        uint256 _newTotalUnderlyingBalance,\\n        uint256 _newTotalSupply\\n    );\\n\\n    /// @notice The computed amount of shares to mint is 0\\n    error ZeroMintedShares();\\n\\n    /// @notice The access was denied\\n    /// @param account The account that was denied\\n    error Denied(address account);\\n\\n    /// @notice Initializes the River system\\n    /// @param _depositContractAddress Address to make Consensus Layer deposits\\n    /// @param _elFeeRecipientAddress Address that receives the execution layer fees\\n    /// @param _withdrawalCredentials Credentials to use for every validator deposit\\n    /// @param _oracleAddress The address of the Oracle contract\\n    /// @param _systemAdministratorAddress Administrator address\\n    /// @param _allowlistAddress Address of the allowlist contract\\n    /// @param _operatorRegistryAddress Address of the operator registry\\n    /// @param _collectorAddress Address receiving the the global fee on revenue\\n    /// @param _globalFee Amount retained when the ETH balance increases and sent to the collector\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _operatorRegistryAddress,\\n        address _collectorAddress,\\n        uint256 _globalFee\\n    ) external;\\n\\n    /// @notice Get the current global fee\\n    /// @return The global fee\\n    function getGlobalFee() external view returns (uint256);\\n\\n    /// @notice Retrieve the allowlist address\\n    /// @return The allowlist address\\n    function getAllowlist() external view returns (address);\\n\\n    /// @notice Retrieve the collector address\\n    /// @return The collector address\\n    function getCollector() external view returns (address);\\n\\n    /// @notice Retrieve the execution layer fee recipient\\n    /// @return The execution layer fee recipient address\\n    function getELFeeRecipient() external view returns (address);\\n\\n    /// @notice Retrieve the operators registry\\n    /// @return The operators registry address\\n    function getOperatorsRegistry() external view returns (address);\\n\\n    /// @notice Changes the global fee parameter\\n    /// @param newFee New fee value\\n    function setGlobalFee(uint256 newFee) external;\\n\\n    /// @notice Changes the allowlist address\\n    /// @param _newAllowlist New address for the allowlist\\n    function setAllowlist(address _newAllowlist) external;\\n\\n    /// @notice Changes the collector address\\n    /// @param _newCollector New address for the collector\\n    function setCollector(address _newCollector) external;\\n\\n    /// @notice Changes the execution layer fee recipient\\n    /// @param _newELFeeRecipient New address for the recipient\\n    function setELFeeRecipient(address _newELFeeRecipient) external;\\n\\n    /// @notice Input for execution layer fee earnings\\n    function sendELFees() external payable;\\n}\\n\",\"keccak256\":\"0xb49107de594a37139c9cd1d1652eb9f119634d97b2ef60e25325d88b3a34766a\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IConsensusLayerDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Consensys Layer Deposit Manager Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the interactions with the official deposit contract\\ninterface IConsensusLayerDepositManagerV1 {\\n    /// @notice A validator key got funded on the deposit contract\\n    /// @param publicKey BLS Public key that got funded\\n    event FundedValidatorKey(bytes publicKey);\\n\\n    /// @notice The stored deposit contract address changed\\n    /// @param depositContract Address of the deposit contract\\n    event SetDepositContractAddress(address indexed depositContract);\\n\\n    /// @notice The stored withdrawal credentials changed\\n    /// @param withdrawalCredentials The withdrawal credentials to use for deposits\\n    event SetWithdrawalCredentials(bytes32 withdrawalCredentials);\\n\\n    /// @notice Not enough funds to deposit one validator\\n    error NotEnoughFunds();\\n\\n    /// @notice The length of the BLS Public key is invalid during deposit\\n    error InconsistentPublicKeys();\\n\\n    /// @notice The length of the BLS Signature is invalid during deposit\\n    error InconsistentSignatures();\\n\\n    /// @notice The internal key retrieval returned no keys\\n    error NoAvailableValidatorKeys();\\n\\n    /// @notice The received count of public keys to deposit is invalid\\n    error InvalidPublicKeyCount();\\n\\n    /// @notice The received count of signatures to deposit is invalid\\n    error InvalidSignatureCount();\\n\\n    /// @notice The withdrawal credentials value is null\\n    error InvalidWithdrawalCredentials();\\n\\n    /// @notice An error occured during the deposit\\n    error ErrorOnDeposit();\\n\\n    /// @notice Returns the amount of pending ETH\\n    /// @return The amount of pending ETH\\n    function getBalanceToDeposit() external view returns (uint256);\\n\\n    /// @notice Retrieve the withdrawal credentials\\n    /// @return The withdrawal credentials\\n    function getWithdrawalCredentials() external view returns (bytes32);\\n\\n    /// @notice Get the deposited validator count (the count of deposits made by the contract)\\n    /// @return The deposited validator count\\n    function getDepositedValidatorCount() external view returns (uint256);\\n\\n    /// @notice Deposits current balance to the Consensus Layer by batches of 32 ETH\\n    /// @param _maxCount The maximum amount of validator keys to fund\\n    function depositToConsensusLayer(uint256 _maxCount) external;\\n}\\n\",\"keccak256\":\"0x2215d3054ece419e846f376e7624094b5ce24b3c72be745a4b5aa4e756c4cb42\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IOracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Oracle Manager (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the inputs provided by the oracle\\ninterface IOracleManagerV1 {\\n    /// @notice The stored oracle address changed\\n    /// @param oracleAddress The new oracle address\\n    event SetOracle(address indexed oracleAddress);\\n\\n    /// @notice The consensus layer data provided by the oracle has been updated\\n    /// @param validatorCount The new count of validators running on the consensus layer\\n    /// @param validatorTotalBalance The new total balance sum of all validators\\n    /// @param roundId Round identifier\\n    event ConsensusLayerDataUpdate(uint256 validatorCount, uint256 validatorTotalBalance, bytes32 roundId);\\n\\n    /// @notice The reported validator count is invalid\\n    /// @param providedValidatorCount The received validator count value\\n    /// @param depositedValidatorCount The number of deposits performed by the system\\n    error InvalidValidatorCountReport(uint256 providedValidatorCount, uint256 depositedValidatorCount);\\n\\n    /// @notice Get oracle address\\n    /// @return The oracle address\\n    function getOracle() external view returns (address);\\n\\n    /// @notice Get CL validator total balance\\n    /// @return The CL Validator total balance\\n    function getCLValidatorTotalBalance() external view returns (uint256);\\n\\n    /// @notice Get CL validator count (the amount of validator reported by the oracles)\\n    /// @return The CL validator count\\n    function getCLValidatorCount() external view returns (uint256);\\n\\n    /// @notice Set the oracle address\\n    /// @param _oracleAddress Address of the oracle\\n    function setOracle(address _oracleAddress) external;\\n\\n    /// @notice Sets the validator count and validator total balance sum reported by the oracle\\n    /// @dev Can only be called by the oracle address\\n    /// @dev The round id is a blackbox value that should only be used to identify unique reports\\n    /// @dev When a report is performed, River computes the amount of fees that can be pulled\\n    /// @dev from the execution layer fee recipient. This amount is capped by the max allowed\\n    /// @dev increase provided during the report.\\n    /// @dev If the total asset balance increases (from the reported total balance and the pulled funds)\\n    /// @dev we then compute the share that must be taken for the collector on the positive delta.\\n    /// @dev The execution layer fees are taken into account here because they are the product of\\n    /// @dev node operator's work, just like consensus layer fees, and both should be handled in the\\n    /// @dev same manner, as a single revenue stream for the users and the collector.\\n    /// @param _validatorCount The number of active validators on the consensus layer\\n    /// @param _validatorTotalBalance The balance sum of the active validators on the consensus layer\\n    /// @param _roundId An identifier for this update\\n    /// @param _maxIncrease The maximum allowed increase in the total balance\\n    function setConsensusLayerData(\\n        uint256 _validatorCount,\\n        uint256 _validatorTotalBalance,\\n        bytes32 _roundId,\\n        uint256 _maxIncrease\\n    ) external;\\n}\\n\",\"keccak256\":\"0x088ff39852e3000fbe31c62da75c41bba38aaf2f2d66f99ba698835b840ef6bc\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/ISharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Shares Manager Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the shares of the depositor and the ERC20 interface\\ninterface ISharesManagerV1 is IERC20 {\\n    /// @notice Balance too low to perform operation\\n    error BalanceTooLow();\\n\\n    /// @notice Allowance too low to perform operation\\n    /// @param _from Account where funds are sent from\\n    /// @param _operator Account attempting the transfer\\n    /// @param _allowance Current allowance\\n    /// @param _value Requested transfer value in shares\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n\\n    /// @notice Invalid empty transfer\\n    error NullTransfer();\\n\\n    /// @notice Invalid transfer recipients\\n    /// @param _from Account sending the funds in the invalid transfer\\n    /// @param _to Account receiving the funds in the invalid transfer\\n    error UnauthorizedTransfer(address _from, address _to);\\n\\n    /// @notice Retrieve the token name\\n    /// @return The token name\\n    function name() external pure returns (string memory);\\n\\n    /// @notice Retrieve the token symbol\\n    /// @return The token symbol\\n    function symbol() external pure returns (string memory);\\n\\n    /// @notice Retrieve the decimal count\\n    /// @return The decimal count\\n    function decimals() external pure returns (uint8);\\n\\n    /// @notice Retrieve the total token supply\\n    /// @return The total supply in shares\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the total underlying asset supply\\n    /// @return The total underlying asset supply\\n    function totalUnderlyingSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The balance of the account in shares\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The underlying balance of the account\\n    function balanceOfUnderlying(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance from an amount of shares\\n    /// @param _shares Amount of shares to convert\\n    /// @return The underlying asset balance represented by the shares\\n    function underlyingBalanceFromShares(uint256 _shares) external view returns (uint256);\\n\\n    /// @notice Retrieve the shares count from an underlying asset amount\\n    /// @param _underlyingAssetAmount Amount of underlying asset to convert\\n    /// @return The amount of shares worth the underlying asset amopunt\\n    function sharesFromUnderlyingBalance(uint256 _underlyingAssetAmount) external view returns (uint256);\\n\\n    /// @notice Retrieve the allowance value for a spender\\n    /// @param _owner Address that issued the allowance\\n    /// @param _spender Address that received the allowance\\n    /// @return The allowance in shares for a given spender\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    /// @notice Performs a transfer from the message sender to the provided account\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Performs a transfer between two recipients\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Approves an account for future spendings\\n    /// @dev An approved account can use transferFrom to transfer funds on behalf of the token owner\\n    /// @param _spender Address that is allowed to spend the tokens\\n    /// @param _value The allowed amount in shares, will override previous value\\n    /// @return True if success\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    /// @notice Increase allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _additionalValue Amount of shares to add\\n    /// @return True if success\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool);\\n\\n    /// @notice Decrease allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _subtractableValue Amount of shares to subtract\\n    /// @return True if success\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool);\\n}\\n\",\"keccak256\":\"0x947debdcf17b72c13c3ca1a840795ed935bde5d4f345e52fa1bed1895212da66\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IUserDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title User Deposit Manager (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the inbound transfers cases or the explicit submissions\\ninterface IUserDepositManagerV1 {\\n    /// @notice User deposited ETH in the system\\n    /// @param depositor Address performing the deposit\\n    /// @param recipient Address receiving the minted shares\\n    /// @param amount Amount in ETH deposited\\n    event UserDeposit(address indexed depositor, address indexed recipient, uint256 amount);\\n\\n    /// @notice And empty deposit attempt was made\\n    error EmptyDeposit();\\n\\n    /// @notice Explicit deposit method to mint on msg.sender\\n    function deposit() external payable;\\n\\n    /// @notice Explicit deposit method to mint on msg.sender and transfer to _recipient\\n    /// @param _recipient Address receiving the minted LsETH\\n    function depositAndTransfer(address _recipient) external payable;\\n\\n    /// @notice Implicit deposit method, when the user performs a regular transfer to the contract\\n    receive() external payable;\\n\\n    /// @notice Invalid call, when the user sends a transaction with a data payload but no method matched\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x1abcda34431bfbb82b6ede5c852f4ece6544cca24616f58cb44ed340df0ef06b\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\nimport \\\"../state/shared/PendingAdministratorAddress.sol\\\";\\n\\n/// @title Lib Administrable\\n/// @author Kiln\\n/// @notice This library handles the admin and pending admin storage vars\\nlibrary LibAdministrable {\\n    /// @notice Retrieve the system admin\\n    /// @return The address of the system admin\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n\\n    /// @notice Retrieve the pending system admin\\n    /// @return The adress of the pending system admin\\n    function _getPendingAdmin() internal view returns (address) {\\n        return PendingAdministratorAddress.get();\\n    }\\n\\n    /// @notice Sets the system admin\\n    /// @param _admin New system admin\\n    function _setAdmin(address _admin) internal {\\n        AdministratorAddress.set(_admin);\\n    }\\n\\n    /// @notice Sets the pending system admin\\n    /// @param _pendingAdmin New pending system admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        PendingAdministratorAddress.set(_pendingAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0xbe4cec02aff69406624f3ab71a19948997aaf74f63e171137f2f3b85bdb7bc3a\",\"license\":\"MIT\"},\"contracts/src/libraries/LibBasisPoints.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Lib Basis Points\\n/// @notice Holds the basis points max value\\nlibrary LibBasisPoints {\\n    /// @notice The max value for basis points (represents 100%)\\n    uint256 internal constant BASIS_POINTS_MAX = 10_000;\\n}\\n\",\"keccak256\":\"0x97228a01dcd48f033555e3a44f9be37fb474a1b027f703f28097d539808f1c6c\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibBytes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Bytes\\n/// @notice This library helps manipulating bytes\\nlibrary LibBytes {\\n    /// @notice The length overflows an uint\\n    error SliceOverflow();\\n\\n    /// @notice The slice is outside of the initial bytes bounds\\n    error SliceOutOfBounds();\\n\\n    /// @notice Slices the provided bytes\\n    /// @param _bytes Bytes to slice\\n    /// @param _start The starting index of the slice\\n    /// @param _length The length of the slice\\n    /// @return The slice of _bytes starting at _start of length _length\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\n        unchecked {\\n            if (_length + 31 < _length) {\\n                revert SliceOverflow();\\n            }\\n        }\\n        if (_bytes.length < _start + _length) {\\n            revert SliceOutOfBounds();\\n        }\\n\\n        bytes memory tempBytes;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } { mstore(mc, mload(cc)) }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xbcc2d6e851fd5e66e5661856fa089fadd69150c75e07978d89faf6ea8d867234\",\"license\":\"MIT\"},\"contracts/src/libraries/LibErrors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Errors\\n/// @notice Library of common errors\\nlibrary LibErrors {\\n    /// @notice The operator is unauthorized for the caller\\n    /// @param caller Address performing the call\\n    error Unauthorized(address caller);\\n\\n    /// @notice The call was invalid\\n    error InvalidCall();\\n\\n    /// @notice The argument was invalid\\n    error InvalidArgument();\\n\\n    /// @notice The address is zero\\n    error InvalidZeroAddress();\\n\\n    /// @notice The string is empty\\n    error InvalidEmptyString();\\n\\n    /// @notice The fee is invalid\\n    error InvalidFee();\\n}\\n\",\"keccak256\":\"0x7bdbd4ada124723fa08e2088405ba0bf4453beb23d84f4af09e894e06e751f33\",\"license\":\"MIT\"},\"contracts/src/libraries/LibSanitize.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./LibErrors.sol\\\";\\nimport \\\"./LibBasisPoints.sol\\\";\\n\\n/// @title Lib Sanitize\\n/// @notice Utilities to sanitize input values\\nlibrary LibSanitize {\\n    /// @notice Reverts if address is 0\\n    /// @param _address Address to check\\n    function _notZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert LibErrors.InvalidZeroAddress();\\n        }\\n    }\\n\\n    /// @notice Reverts if string is empty\\n    /// @param _string String to check\\n    function _notEmptyString(string memory _string) internal pure {\\n        if (bytes(_string).length == 0) {\\n            revert LibErrors.InvalidEmptyString();\\n        }\\n    }\\n\\n    /// @notice Reverts if fee is invalid\\n    /// @param _fee Fee to check\\n    function _validFee(uint256 _fee) internal pure {\\n        if (_fee > LibBasisPoints.BASIS_POINTS_MAX) {\\n            revert LibErrors.InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8aeeb866c4657a96c8b4c006340c7996d15a6f0044b730c276bc3ba8d5bcd48\",\"license\":\"MIT\"},\"contracts/src/libraries/LibUint256.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Uint256\\n/// @notice Utilities to perform uint operations\\nlibrary LibUint256 {\\n    /// @notice Converts a value to little endian (64 bits)\\n    /// @param _value The value to convert\\n    /// @return result The converted value\\n    function toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n        result = 0;\\n        uint256 tempValue = _value;\\n        result = tempValue & 0xFF;\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        assert(0 == tempValue); // fully converted\\n        result <<= (24 * 8);\\n    }\\n\\n    /// @notice Returns the minimum value\\n    /// @param _a First value\\n    /// @param _b Second value\\n    /// @return Smallest value between _a and _b\\n    function min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a > _b ? _b : _a);\\n    }\\n}\\n\",\"keccak256\":\"0xac75e924b50fa887249f6435a710d691f25e95973466f4c91ac4f5d49a2ece4a\",\"license\":\"MIT\"},\"contracts/src/libraries/LibUnstructuredStorage.sol\":{\"content\":\"// SPDX-License-Identifier:    MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @title Lib Unstructured Storage\\n/// @notice Utilities to work with unstructured storage\\nlibrary LibUnstructuredStorage {\\n    /// @notice Retrieve a bool value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bool value\\n    function getStorageBool(bytes32 _position) internal view returns (bool data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an address value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The address value\\n    function getStorageAddress(bytes32 _position) internal view returns (address data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve a bytes32 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bytes32 value\\n    function getStorageBytes32(bytes32 _position) internal view returns (bytes32 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an uint256 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The uint256 value\\n    function getStorageUint256(bytes32 _position) internal view returns (uint256 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Sets a bool value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bool value to set\\n    function setStorageBool(bytes32 _position, bool _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an address value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The address value to set\\n    function setStorageAddress(bytes32 _position, address _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets a bytes32 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bytes32 value to set\\n    function setStorageBytes32(bytes32 _position, bytes32 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an uint256 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The uint256 value to set\\n    function setStorageUint256(bytes32 _position, uint256 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8e1a2f0dc18e023e12747355b3c95258d4de698f2bb6196222a1dc92940caa3\",\"license\":\"MIT\"},\"contracts/src/state/operatorsRegistry/Operators.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Operators Storage\\n/// @notice Utility to manage the Operators in storage\\nlibrary Operators {\\n    /// @notice Storage slot of the Operators\\n    bytes32 internal constant OPERATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.operators\\\")) - 1);\\n\\n    /// @notice The Operator structure in storage\\n    struct Operator {\\n        /// @custom:attribute True if the operator is active and allowed to operate on River\\n        bool active;\\n        /// @custom:attribute Display name of the operator\\n        string name;\\n        /// @custom:attribute Address of the operator\\n        address operator;\\n        /// @dev The following values respect this invariant:\\n        /// @dev     keys >= limit >= funded >= stopped\\n\\n        /// @custom:attribute Staking limit of the operator\\n        uint256 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint256 funded;\\n        /// @custom:attribute The total count of keys of the operator\\n        uint256 keys;\\n        /// @custom:attribute The count of stopped validators. Stopped validators are validators\\n        ///                   that exited the consensus layer (voluntary or slashed)\\n        uint256 stopped;\\n        uint256 latestKeysEditBlockNumber;\\n    }\\n\\n    /// @notice The Operator structure when loaded in memory\\n    struct CachedOperator {\\n        /// @custom:attribute True if the operator is active and allowed to operate on River\\n        bool active;\\n        /// @custom:attribute Display name of the operator\\n        string name;\\n        /// @custom:attribute Address of the operator\\n        address operator;\\n        /// @custom:attribute Staking limit of the operator\\n        uint256 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint256 funded;\\n        /// @custom:attribute The total count of keys of the operator\\n        uint256 keys;\\n        /// @custom:attribute The count of stopped validators\\n        uint256 stopped;\\n        /// @custom:attribute The count of stopped validators. Stopped validators are validators\\n        ///                   that exited the consensus layer (voluntary or slashed)\\n        uint256 index;\\n        /// @custom:attribute The amount of picked keys, buffer used before changing funded in storage\\n        uint256 picked;\\n    }\\n\\n    /// @notice The structure at the storage slot\\n    struct SlotOperator {\\n        /// @custom:attribute Array containing all the operators\\n        Operator[] value;\\n    }\\n\\n    /// @notice The operator was not found\\n    /// @param index The provided index\\n    error OperatorNotFound(uint256 index);\\n\\n    /// @notice Retrieve the operator in storage\\n    /// @param _index The index of the operator\\n    /// @return The Operator structure\\n    function get(uint256 _index) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (r.value.length <= _index) {\\n            revert OperatorNotFound(_index);\\n        }\\n\\n        return r.value[_index];\\n    }\\n\\n    /// @notice Retrieve the operator count in storage\\n    /// @return The count of operators in storage\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Retrieve all the active operators\\n    /// @return The list of active operator structures\\n    function getAllActive() internal view returns (Operator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        Operator[] memory activeOperators = new Operator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                activeOperators[activeIdx] = r.value[idx];\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    /// @notice Retrieve all the active and fundable operators\\n    /// @return The list of active and fundable operators\\n    function getAllFundable() internal view returns (CachedOperator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (_hasFundableKeys(r.value[idx])) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        CachedOperator[] memory activeOperators = new CachedOperator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            Operator memory op = r.value[idx];\\n            if (_hasFundableKeys(op)) {\\n                activeOperators[activeIdx] = CachedOperator({\\n                    active: op.active,\\n                    name: op.name,\\n                    operator: op.operator,\\n                    limit: op.limit,\\n                    funded: op.funded,\\n                    keys: op.keys,\\n                    stopped: op.stopped,\\n                    index: idx,\\n                    picked: 0\\n                });\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    /// @notice Add a new operator in storage\\n    /// @param _newOperator Value of the new operator\\n    /// @return The size of the operator array after the operation\\n    function push(Operator memory _newOperator) internal returns (uint256) {\\n        LibSanitize._notZeroAddress(_newOperator.operator);\\n        LibSanitize._notEmptyString(_newOperator.name);\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_newOperator);\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Atomic operation to set the key count and update the latestKeysEditBlockNumber field at the same time\\n    /// @param _index The operator index\\n    /// @param _newKeys The new value for the key count\\n    function setKeys(uint256 _index, uint256 _newKeys) internal {\\n        Operator storage op = get(_index);\\n\\n        op.keys = _newKeys;\\n        op.latestKeysEditBlockNumber = block.number;\\n    }\\n\\n    /// @notice Checks if an operator is active and has fundable keys\\n    /// @param _operator The operator details\\n    /// @return True if active and fundable\\n    function _hasFundableKeys(Operators.Operator memory _operator) internal pure returns (bool) {\\n        return (_operator.active && _operator.limit > _operator.funded);\\n    }\\n}\\n\",\"keccak256\":\"0xded9f69550674563fe324c95487bdf9e6cad7390064209bdce2afde8dad8f0e2\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/AllowlistAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Allowlist Address Storage\\n/// @notice Utility to manage the Allowlist Address in storage\\nlibrary AllowlistAddress {\\n    /// @notice Storage slot of the Allowlist Address\\n    bytes32 internal constant ALLOWLIST_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowlistAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Allowlist Address\\n    /// @return The Allowlist Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ALLOWLIST_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Allowlist Address\\n    /// @param _newValue New Allowlist Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ALLOWLIST_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xe672508958c0fe402a54d0f1fe6709139a8eccc3d702808839a912660867c427\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/BalanceToDeposit.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\nlibrary BalanceToDeposit {\\n    bytes32 internal constant BALANCE_TO_DEPOSIT_SLOT = bytes32(uint256(keccak256(\\\"river.state.balanceToDeposit\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(BALANCE_TO_DEPOSIT_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(BALANCE_TO_DEPOSIT_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x8c8224d1511fa4ad8816e55b28a939c7a69243531c053d876bbdda5aa21b8b7e\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/CLValidatorCount.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Consensus Layer Validator Count Storage\\n/// @notice Utility to manage the Consensus Layer Validator Count in storage\\nlibrary CLValidatorCount {\\n    /// @notice Storage slot of the Consensus Layer Validator Count\\n    bytes32 internal constant CL_VALIDATOR_COUNT_SLOT = bytes32(uint256(keccak256(\\\"river.state.clValidatorCount\\\")) - 1);\\n\\n    /// @notice Retrieve the Consensus Layer Validator Count\\n    /// @return The Consensus Layer Validator Count\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(CL_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    /// @notice Sets the Consensus Layer Validator Count\\n    /// @param _newValue New Consensus Layer Validator Count\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(CL_VALIDATOR_COUNT_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x269674254e7f8dd80cd49f9dc2d73722d55d515a90f0b371379c9705fd08019a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/CLValidatorTotalBalance.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Consensus Layer Validator Total Balance Storage\\n/// @notice Utility to manage the Consensus Layer Validator Total Balance in storage\\nlibrary CLValidatorTotalBalance {\\n    /// @notice Storage slot of the Consensus Layer Validator Total Balance\\n    bytes32 internal constant CL_VALIDATOR_TOTAL_BALANCE_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.clValidatorTotalBalance\\\")) - 1);\\n\\n    /// @notice Retrieve the Consensus Layer Validator Total Balance\\n    /// @return The Consensus Layer Validator Total Balance\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(CL_VALIDATOR_TOTAL_BALANCE_SLOT);\\n    }\\n\\n    /// @notice Sets the Consensus Layer Validator Total Balance\\n    /// @param _newValue New Consensus Layer Validator Total Balance\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(CL_VALIDATOR_TOTAL_BALANCE_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x0ff559b3022c51bca1fd9376cbb8bbf3a3880a6450adfddf0f298b16bd26784a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/CollectorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Collector Address Storage\\n/// @notice Utility to manage the Collector Address in storage\\nlibrary CollectorAddress {\\n    /// @notice Storage slot of the Collector Address\\n    bytes32 internal constant COLLECTOR_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.collectorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Collector Address\\n    /// @return The Collector Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(COLLECTOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Collector Address\\n    /// @param _newValue New Collector Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(COLLECTOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x48c4333c0c6ba2c425fd252763df7a0ccf89b4e9b0c06336ae2835c1c386e8c9\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DepositContractAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Deposit Contract Address Storage\\n/// @notice Utility to manage the Deposit Contract Address in storage\\nlibrary DepositContractAddress {\\n    /// @notice Storage slot of the Deposit Contract Address\\n    bytes32 internal constant DEPOSIT_CONTRACT_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositContractAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Deposit Contract Address\\n    /// @return The Deposit Contract Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Deposit Contract Address\\n    /// @param _newValue New Deposit Contract Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xfb0bc93b1c175e0461de84b3e37d9361765c8599b9c6daec97e5b5e763246516\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DepositedValidatorCount.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Deposited Validator Count Storage\\n/// @notice Utility to manage the Deposited Validator Count in storage\\nlibrary DepositedValidatorCount {\\n    /// @notice Storage slot of the Deposited Validator Count\\n    bytes32 internal constant DEPOSITED_VALIDATOR_COUNT_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositedValidatorCount\\\")) - 1);\\n\\n    /// @notice Retrieve the Deposited Validator Count\\n    /// @return The Deposited Validator Count\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    /// @notice Sets the Deposited Validator Count\\n    /// @param _newValue New Deposited Validator Count\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x3ba204f875f9b521cf584abc94db9ba4fe9cb87a49c47da3892f339fb37cf683\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/ELFeeRecipientAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Execution Layer Fee Recipient Address Storage\\n/// @notice Utility to manage the Execution Layer Fee Recipient Address in storage\\nlibrary ELFeeRecipientAddress {\\n    /// @notice Storage slot of the Execution Layer Fee Recipient Address\\n    bytes32 internal constant EL_FEE_RECIPIENT_ADDRESS =\\n        bytes32(uint256(keccak256(\\\"river.state.elFeeRecipientAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Execution Layer Fee Recipient Address\\n    /// @return The Execution Layer Fee Recipient Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(EL_FEE_RECIPIENT_ADDRESS);\\n    }\\n\\n    /// @notice Sets the Execution Layer Fee Recipient Address\\n    /// @param _newValue New Execution Layer Fee Recipient Address\\n    function set(address _newValue) internal {\\n        LibUnstructuredStorage.setStorageAddress(EL_FEE_RECIPIENT_ADDRESS, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xd937885f53104d9dc9e97db47cbcb611fc6d57629d203433fcdd7d7d3c09ded0\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/GlobalFee.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Global Fee Storage\\n/// @notice Utility to manage the Global Fee in storage\\nlibrary GlobalFee {\\n    /// @notice Storage slot of the Global Fee\\n    bytes32 internal constant GLOBAL_FEE_SLOT = bytes32(uint256(keccak256(\\\"river.state.globalFee\\\")) - 1);\\n\\n    /// @notice Retrieve the Global Fee\\n    /// @return The Global Fee\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(GLOBAL_FEE_SLOT);\\n    }\\n\\n    /// @notice Sets the Global Fee\\n    /// @param _newValue New Global Fee\\n    function set(uint256 _newValue) internal {\\n        LibSanitize._validFee(_newValue);\\n        LibUnstructuredStorage.setStorageUint256(GLOBAL_FEE_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x74f858f1133151fd85ce17150d4084e226cbb6d37396eb903258ea1b50731401\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/LastOracleRoundId.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Last Oracle Round Id Storage\\n/// @notice Utility to manage the Last Oracle Round Id in storage\\nlibrary LastOracleRoundId {\\n    /// @notice Storage slot of the Last Oracle Round Id\\n    bytes32 internal constant LAST_ORACLE_ROUND_ID_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.lastOracleRoundId\\\")) - 1);\\n\\n    /// @notice Retrieve the Last Oracle Round Id\\n    /// @return The Last Oracle Round Id\\n    function get() internal view returns (bytes32) {\\n        return LibUnstructuredStorage.getStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT);\\n    }\\n\\n    /// @notice Sets the Last Oracle Round Id\\n    /// @param _newValue New Last Oracle Round Id\\n    function set(bytes32 _newValue) internal {\\n        LibUnstructuredStorage.setStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xdcbff9faeea8aee1bf267af035e08abe9431e3bf995624b93611e50dbd09e5f4\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/OperatorsRegistryAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Operators Registry Address Storage\\n/// @notice Utility to manage the Operators Registry Address in storage\\nlibrary OperatorsRegistryAddress {\\n    /// @notice Storage slot of the Operators Registry Address\\n    bytes32 internal constant OPERATORS_REGISTRY_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.operatorsRegistryAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Operators Registry Address\\n    /// @return The Operators Registry Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(OPERATORS_REGISTRY_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Operators Registry Address\\n    /// @param _newValue New Operators Registry Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(OPERATORS_REGISTRY_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x4f4ec440487085e8d7cd820fa42770529ae56efc775b6a0764604e089af20fa3\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/OracleAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Oracle Address Storage\\n/// @notice Utility to manage the Oracle Address in storage\\nlibrary OracleAddress {\\n    /// @notice Storage slot of the Oracle Address\\n    bytes32 internal constant ORACLE_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.oracleAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Oracle Address\\n    /// @return The Oracle Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ORACLE_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Oracle Address\\n    /// @param _newValue New Oracle Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ORACLE_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x85b7199ab1d327987121c384209b413cb4e4506a36c583b442abd6f6fa323dd9\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/Shares.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Shares Count Storage\\n/// @notice Utility to manage the Shares Count in storage\\nlibrary Shares {\\n    /// @notice Storage slot of the Shares Count\\n    bytes32 internal constant SHARES_SLOT = bytes32(uint256(keccak256(\\\"river.state.shares\\\")) - 1);\\n\\n    /// @notice Retrieve the Shares Count\\n    /// @return The Shares Count\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(SHARES_SLOT);\\n    }\\n\\n    /// @notice Sets the Shares Count\\n    /// @param _newValue New Shares Count\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(SHARES_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xc56d66f15acf56b321b9c6f41b3845db73d64987b9c62b1d763457768725de8b\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/SharesPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Shares Per Owner Storage\\n/// @notice Utility to manage the Shares Per Owner in storage\\nlibrary SharesPerOwner {\\n    /// @notice Storage slot of the Shares Per Owner\\n    bytes32 internal constant SHARES_PER_OWNER_SLOT = bytes32(uint256(keccak256(\\\"river.state.sharesPerOwner\\\")) - 1);\\n\\n    /// @notice Structure in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from an owner to its share count\\n        mapping(address => uint256) value;\\n    }\\n\\n    /// @notice Retrieve the share count for given owner\\n    /// @param _owner The address to get the balance of\\n    /// @return The amount of shares\\n    function get(address _owner) internal view returns (uint256) {\\n        bytes32 slot = SHARES_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_owner];\\n    }\\n\\n    /// @notice Set the amount of shares for an owner\\n    /// @param _owner The owner of the shares to edit\\n    /// @param _newValue The new shares value for the owner\\n    function set(address _owner, uint256 _newValue) internal {\\n        bytes32 slot = SHARES_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_owner] = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0xc1043c3f40dc90c7de21b938033b8c7492f070e05848d30190e313a55988df5a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/WithdrawalCredentials.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibErrors.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Withdrawal Credentials Storage\\n/// @notice Utility to manage the Withdrawal Credentials in storage\\nlibrary WithdrawalCredentials {\\n    /// @notice Storage slot of the Withdrawal Credentials\\n    bytes32 internal constant WITHDRAWAL_CREDENTIALS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.withdrawalCredentials\\\")) - 1);\\n\\n    /// @notice Retrieve the Withdrawal Credentials\\n    /// @return The Withdrawal Credentials\\n    function get() internal view returns (bytes32) {\\n        return LibUnstructuredStorage.getStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT);\\n    }\\n\\n    /// @notice Sets the Withdrawal Credentials\\n    /// @param _newValue New Withdrawal Credentials\\n    function set(bytes32 _newValue) internal {\\n        if (_newValue == bytes32(0)) {\\n            revert LibErrors.InvalidArgument();\\n        }\\n        LibUnstructuredStorage.setStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xc18e535754adfcbfce56e3b0df37de4ac59b741b70e0b8c3e0dedb36b0266bca\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrator Address Storage\\n/// @notice Utility to manage the Administrator Address in storage\\nlibrary AdministratorAddress {\\n    /// @notice Storage slot of the Administrator Address\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Administrator Address\\n    /// @return The Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Administrator Address\\n    /// @param _newValue New Administrator Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x4f702b4454858199ca8fd15ef1cee63d9dc3d4d8f2ff7a2f859a4e151e46e8ec\",\"license\":\"MIT\"},\"contracts/src/state/shared/ApprovalsPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Approvals Per Owner Storage\\n/// @notice Utility to manage the Approvals Per Owner in storage\\nlibrary ApprovalsPerOwner {\\n    /// @notice Storage slot of the Approvals Per Owner\\n    bytes32 internal constant APPROVALS_PER_OWNER_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.approvalsPerOwner\\\")) - 1);\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from an owner to an operator to the approval amount\\n        mapping(address => mapping(address => uint256)) value;\\n    }\\n\\n    /// @notice Retrieve the approval for an owner to an operator\\n    /// @param _owner The account that gave the approval\\n    /// @param _operator The account receiving the approval\\n    /// @return The value of the approval\\n    function get(address _owner, address _operator) internal view returns (uint256) {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_owner][_operator];\\n    }\\n\\n    /// @notice Set the approval value for an owner to an operator\\n    /// @param _owner The account that gives the approval\\n    /// @param _operator The account receiving the approval\\n    /// @param _newValue The value of the approval\\n    function set(address _owner, address _operator, uint256 _newValue) internal {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_owner][_operator] = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0xc8ec39447b09747e3cfff1c456743b4f52fafbd994122ebf8285035fc497c95c\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/PendingAdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Pending Administrator Address Storage\\n/// @notice Utility to manage the Pending Administrator Address in storage\\nlibrary PendingAdministratorAddress {\\n    /// @notice Storage slot of the Pending Administrator Address\\n    bytes32 public constant PENDING_ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.pendingAdministratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Pending Administrator Address\\n    /// @return The Pending Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Pending Administrator Address\\n    /// @param _newValue New Pending Administrator Address\\n    function set(address _newValue) internal {\\n        LibUnstructuredStorage.setStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x2164cafa435d1e1650037164e2b094ca3af00cc68e05b59140406aa59b1949f2\",\"license\":\"MIT\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Version Storage\\n/// @notice Utility to manage the Version in storage\\nlibrary Version {\\n    /// @notice Storage slot of the Version\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    /// @notice Retrieve the Version\\n    /// @return The Version\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    /// @notice Sets the Version\\n    /// @param _newValue New Version\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(VERSION_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x82f1cc4bbb1f16c1cdbac93596334805eb1a2e0e40ccbd0ab0f78e22d3f83864\",\"license\":\"BUSL-1.1\"},\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}",
            "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"AllowanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Denied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorOnDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentPublicKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEmptyString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicKeyCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"providedValidatorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"InvalidValidatorCountReport\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawalCredentials\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAvailableValidatorKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"UnauthorizedTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroMintedShares\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorTotalBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"roundId\",\"type\":\"bytes32\"}],\"name\":\"ConsensusLayerDataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"FundedValidatorKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"cdata\",\"type\":\"bytes\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PulledCoverageFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PulledELFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldTotalUnderlyingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalUnderlyingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"RewardsEarned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"allowlist\",\"type\":\"address\"}],\"name\":\"SetAllowlist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"SetCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"coverageFund\",\"type\":\"address\"}],\"name\":\"SetCoverageFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositContract\",\"type\":\"address\"}],\"name\":\"SetDepositContractAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"elFeeRecipient\",\"type\":\"address\"}],\"name\":\"SetELFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetGlobalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"SetMetadataURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorRegistry\",\"type\":\"address\"}],\"name\":\"SetOperatorsRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"SetOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"SetPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawalCredentials\",\"type\":\"bytes32\"}],\"name\":\"SetWithdrawalCredentials\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserDeposit\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEPOSIT_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_KEY_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNATURE_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractableValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"depositAndTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCount\",\"type\":\"uint256\"}],\"name\":\"depositToConsensusLayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowlist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceToDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCLValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCLValidatorTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCoverageFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositedValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getELFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorsRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalCredentials\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_additionalValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_elFeeRecipientAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_withdrawalCredentials\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_systemAdministratorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowlistAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operatorRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collectorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_globalFee\",\"type\":\"uint256\"}],\"name\":\"initRiverV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"proposeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCoverageFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendELFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAllowlist\",\"type\":\"address\"}],\"name\":\"setAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCollector\",\"type\":\"address\"}],\"name\":\"setCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorTotalBalance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_roundId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maxIncrease\",\"type\":\"uint256\"}],\"name\":\"setConsensusLayerData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCoverageFund\",\"type\":\"address\"}],\"name\":\"setCoverageFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newELFeeRecipient\",\"type\":\"address\"}],\"name\":\"setELFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setGlobalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"setMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_underlyingAssetAmount\",\"type\":\"uint256\"}],\"name\":\"sharesFromUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlyingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"underlyingBalanceFromShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kiln\",\"errors\":{\"AllowanceTooLow(address,address,uint256,uint256)\":[{\"params\":{\"_allowance\":\"Current allowance\",\"_from\":\"Account where funds are sent from\",\"_operator\":\"Account attempting the transfer\",\"_value\":\"Requested transfer value in shares\"}}],\"Denied(address)\":[{\"params\":{\"account\":\"The account that was denied\"}}],\"InvalidInitialization(uint256,uint256)\":[{\"params\":{\"expectedVersion\":\"The version that was expected\",\"version\":\"The version that was attempting to be initialized\"}}],\"InvalidValidatorCountReport(uint256,uint256)\":[{\"params\":{\"depositedValidatorCount\":\"The number of deposits performed by the system\",\"providedValidatorCount\":\"The received validator count value\"}}],\"Unauthorized(address)\":[{\"params\":{\"caller\":\"Address performing the call\"}}],\"UnauthorizedTransfer(address,address)\":[{\"params\":{\"_from\":\"Account sending the funds in the invalid transfer\",\"_to\":\"Account receiving the funds in the invalid transfer\"}}]},\"kind\":\"dev\",\"methods\":{\"acceptAdmin()\":{\"details\":\"Only callable by the pending admin. Resets the pending admin if succesful.\"},\"allowance(address,address)\":{\"params\":{\"_owner\":\"Address that issued the allowance\",\"_spender\":\"Address that received the allowance\"},\"returns\":{\"_0\":\"The allowance in shares for a given spender\"}},\"approve(address,uint256)\":{\"details\":\"An approved account can use transferFrom to transfer funds on behalf of the token owner\",\"params\":{\"_spender\":\"Address that is allowed to spend the tokens\",\"_value\":\"The allowed amount in shares, will override previous value\"},\"returns\":{\"_0\":\"True if success\"}},\"balanceOf(address)\":{\"params\":{\"_owner\":\"Address to be checked\"},\"returns\":{\"_0\":\"The balance of the account in shares\"}},\"balanceOfUnderlying(address)\":{\"params\":{\"_owner\":\"Address to be checked\"},\"returns\":{\"_0\":\"The underlying balance of the account\"}},\"decimals()\":{\"returns\":{\"_0\":\"The decimal count\"}},\"decreaseAllowance(address,uint256)\":{\"params\":{\"_spender\":\"Spender that receives the allowance\",\"_subtractableValue\":\"Amount of shares to subtract\"},\"returns\":{\"_0\":\"True if success\"}},\"depositAndTransfer(address)\":{\"params\":{\"_recipient\":\"Address receiving the minted LsETH\"}},\"depositToConsensusLayer(uint256)\":{\"params\":{\"_maxCount\":\"The maximum amount of validator keys to fund\"}},\"getAdmin()\":{\"returns\":{\"_0\":\"The admin address\"}},\"getAllowlist()\":{\"returns\":{\"_0\":\"The allowlist address\"}},\"getBalanceToDeposit()\":{\"returns\":{\"_0\":\"The amount of pending ETH\"}},\"getCLValidatorCount()\":{\"returns\":{\"_0\":\"The CL validator count\"}},\"getCLValidatorTotalBalance()\":{\"returns\":{\"_0\":\"The CL Validator total balance\"}},\"getCollector()\":{\"returns\":{\"_0\":\"The collector address\"}},\"getCoverageFund()\":{\"returns\":{\"_0\":\"The coverage fund address\"}},\"getDepositedValidatorCount()\":{\"returns\":{\"_0\":\"The deposited validator count\"}},\"getELFeeRecipient()\":{\"returns\":{\"_0\":\"The execution layer fee recipient address\"}},\"getGlobalFee()\":{\"returns\":{\"_0\":\"The global fee\"}},\"getMetadataURI()\":{\"returns\":{\"_0\":\"The metadata uri string value\"}},\"getOperatorsRegistry()\":{\"returns\":{\"_0\":\"The operators registry address\"}},\"getOracle()\":{\"returns\":{\"_0\":\"The oracle address\"}},\"getPendingAdmin()\":{\"returns\":{\"_0\":\"The pending admin address\"}},\"getWithdrawalCredentials()\":{\"returns\":{\"_0\":\"The withdrawal credentials\"}},\"increaseAllowance(address,uint256)\":{\"params\":{\"_additionalValue\":\"Amount of shares to add\",\"_spender\":\"Spender that receives the allowance\"},\"returns\":{\"_0\":\"True if success\"}},\"initRiverV1(address,address,bytes32,address,address,address,address,address,uint256)\":{\"params\":{\"_allowlistAddress\":\"Address of the allowlist contract\",\"_collectorAddress\":\"Address receiving the the global fee on revenue\",\"_depositContractAddress\":\"Address to make Consensus Layer deposits\",\"_elFeeRecipientAddress\":\"Address that receives the execution layer fees\",\"_globalFee\":\"Amount retained when the ETH balance increases and sent to the collector\",\"_operatorRegistryAddress\":\"Address of the operator registry\",\"_oracleAddress\":\"The address of the Oracle contract\",\"_systemAdministratorAddress\":\"Administrator address\",\"_withdrawalCredentials\":\"Credentials to use for every validator deposit\"}},\"name()\":{\"returns\":{\"_0\":\"The token name\"}},\"proposeAdmin(address)\":{\"details\":\"This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.\",\"params\":{\"_newAdmin\":\"New admin address\"}},\"setAllowlist(address)\":{\"params\":{\"_newAllowlist\":\"New address for the allowlist\"}},\"setCollector(address)\":{\"params\":{\"_newCollector\":\"New address for the collector\"}},\"setConsensusLayerData(uint256,uint256,bytes32,uint256)\":{\"details\":\"Can only be called by the oracle addressThe round id is a blackbox value that should only be used to identify unique reportsWhen a report is performed, River computes the amount of fees that can be pulledfrom the execution layer fee recipient. This amount is capped by the max allowedincrease provided during the report.If the total asset balance increases (from the reported total balance and the pulled funds)we then compute the share that must be taken for the collector on the positive delta.The execution layer fees are taken into account here because they are the product ofnode operator's work, just like consensus layer fees, and both should be handled in thesame manner, as a single revenue stream for the users and the collector.\",\"params\":{\"_maxIncrease\":\"The maximum allowed increase in the total balance\",\"_roundId\":\"An identifier for this update\",\"_validatorCount\":\"The number of active validators on the consensus layer\",\"_validatorTotalBalance\":\"The balance sum of the active validators on the consensus layer\"}},\"setCoverageFund(address)\":{\"params\":{\"_newCoverageFund\":\"New address for the fund\"}},\"setELFeeRecipient(address)\":{\"params\":{\"_newELFeeRecipient\":\"New address for the recipient\"}},\"setGlobalFee(uint256)\":{\"params\":{\"newFee\":\"New fee value\"}},\"setMetadataURI(string)\":{\"params\":{\"_metadataURI\":\"The new metadata uri string value\"}},\"setOracle(address)\":{\"params\":{\"_oracleAddress\":\"Address of the oracle\"}},\"sharesFromUnderlyingBalance(uint256)\":{\"params\":{\"_underlyingAssetAmount\":\"Amount of underlying asset to convert\"},\"returns\":{\"_0\":\"The amount of shares worth the underlying asset amopunt\"}},\"symbol()\":{\"returns\":{\"_0\":\"The token symbol\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"The total supply in shares\"}},\"totalUnderlyingSupply()\":{\"returns\":{\"_0\":\"The total underlying asset supply\"}},\"transfer(address,uint256)\":{\"params\":{\"_to\":\"Address receiving the tokens\",\"_value\":\"Amount of shares to be sent\"},\"returns\":{\"_0\":\"True if success\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"_from\":\"Address sending the tokens\",\"_to\":\"Address receiving the tokens\",\"_value\":\"Amount of shares to be sent\"},\"returns\":{\"_0\":\"True if success\"}},\"underlyingBalanceFromShares(uint256)\":{\"params\":{\"_shares\":\"Amount of shares to convert\"},\"returns\":{\"_0\":\"The underlying asset balance represented by the shares\"}}},\"title\":\"River (v1)\",\"version\":1},\"userdoc\":{\"errors\":{\"AllowanceTooLow(address,address,uint256,uint256)\":[{\"notice\":\"Allowance too low to perform operation\"}],\"BalanceTooLow()\":[{\"notice\":\"Balance too low to perform operation\"}],\"Denied(address)\":[{\"notice\":\"The access was denied\"}],\"EmptyDeposit()\":[{\"notice\":\"And empty deposit attempt was made\"}],\"ErrorOnDeposit()\":[{\"notice\":\"An error occured during the deposit\"}],\"InconsistentPublicKeys()\":[{\"notice\":\"The length of the BLS Public key is invalid during deposit\"}],\"InconsistentSignatures()\":[{\"notice\":\"The length of the BLS Signature is invalid during deposit\"}],\"InvalidArgument()\":[{\"notice\":\"The argument was invalid\"}],\"InvalidCall()\":[{\"notice\":\"The call was invalid\"}],\"InvalidEmptyString()\":[{\"notice\":\"The string is empty\"}],\"InvalidFee()\":[{\"notice\":\"The fee is invalid\"}],\"InvalidInitialization(uint256,uint256)\":[{\"notice\":\"An error occured during the initialization\"}],\"InvalidPublicKeyCount()\":[{\"notice\":\"The received count of public keys to deposit is invalid\"}],\"InvalidSignatureCount()\":[{\"notice\":\"The received count of signatures to deposit is invalid\"}],\"InvalidValidatorCountReport(uint256,uint256)\":[{\"notice\":\"The reported validator count is invalid\"}],\"InvalidWithdrawalCredentials()\":[{\"notice\":\"The withdrawal credentials value is null\"}],\"InvalidZeroAddress()\":[{\"notice\":\"The address is zero\"}],\"NoAvailableValidatorKeys()\":[{\"notice\":\"The internal key retrieval returned no keys\"}],\"NotEnoughFunds()\":[{\"notice\":\"Not enough funds to deposit one validator\"}],\"NullTransfer()\":[{\"notice\":\"Invalid empty transfer\"}],\"SliceOutOfBounds()\":[{\"notice\":\"The slice is outside of the initial bytes bounds\"}],\"SliceOverflow()\":[{\"notice\":\"The length overflows an uint\"}],\"Unauthorized(address)\":[{\"notice\":\"The operator is unauthorized for the caller\"}],\"UnauthorizedTransfer(address,address)\":[{\"notice\":\"Invalid transfer recipients\"}],\"ZeroMintedShares()\":[{\"notice\":\"The computed amount of shares to mint is 0\"}]},\"events\":{\"ConsensusLayerDataUpdate(uint256,uint256,bytes32)\":{\"notice\":\"The consensus layer data provided by the oracle has been updated\"},\"FundedValidatorKey(bytes)\":{\"notice\":\"A validator key got funded on the deposit contract\"},\"Initialize(uint256,bytes)\":{\"notice\":\"Emitted when the contract is properly initialized\"},\"PulledCoverageFunds(uint256)\":{\"notice\":\"Funds have been pulled from the Coverage Fund\"},\"PulledELFees(uint256)\":{\"notice\":\"Funds have been pulled from the Execution Layer Fee Recipient\"},\"RewardsEarned(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"The system underlying supply increased. This is a snapshot of the balances for accounting purposes\"},\"SetAdmin(address)\":{\"notice\":\"The admin address changed\"},\"SetAllowlist(address)\":{\"notice\":\"The stored Allowlist has been changed\"},\"SetCollector(address)\":{\"notice\":\"The stored Collector has been changed\"},\"SetCoverageFund(address)\":{\"notice\":\"The stored Coverage Fund has been changed\"},\"SetDepositContractAddress(address)\":{\"notice\":\"The stored deposit contract address changed\"},\"SetELFeeRecipient(address)\":{\"notice\":\"The stored Execution Layer Fee Recipient has been changed\"},\"SetGlobalFee(uint256)\":{\"notice\":\"The stored Global Fee has been changed\"},\"SetMetadataURI(string)\":{\"notice\":\"The stored Metadata URI string has been changed\"},\"SetOperatorsRegistry(address)\":{\"notice\":\"The stored Operators Registry has been changed\"},\"SetOracle(address)\":{\"notice\":\"The stored oracle address changed\"},\"SetPendingAdmin(address)\":{\"notice\":\"The pending admin address changed\"},\"SetWithdrawalCredentials(bytes32)\":{\"notice\":\"The stored withdrawal credentials changed\"},\"UserDeposit(address,address,uint256)\":{\"notice\":\"User deposited ETH in the system\"}},\"kind\":\"user\",\"methods\":{\"DEPOSIT_SIZE()\":{\"notice\":\"Size of a deposit in ETH\"},\"PUBLIC_KEY_LENGTH()\":{\"notice\":\"Size of a BLS Public key in bytes\"},\"SIGNATURE_LENGTH()\":{\"notice\":\"Size of a BLS Signature in bytes\"},\"acceptAdmin()\":{\"notice\":\"Accept the transfer of ownership\"},\"allowance(address,address)\":{\"notice\":\"Retrieve the allowance value for a spender\"},\"approve(address,uint256)\":{\"notice\":\"Approves an account for future spendings\"},\"balanceOf(address)\":{\"notice\":\"Retrieve the balance of an account\"},\"balanceOfUnderlying(address)\":{\"notice\":\"Retrieve the underlying asset balance of an account\"},\"decimals()\":{\"notice\":\"Retrieve the decimal count\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Decrease allowance to another account\"},\"deposit()\":{\"notice\":\"Explicit deposit method to mint on msg.sender\"},\"depositAndTransfer(address)\":{\"notice\":\"Explicit deposit method to mint on msg.sender and transfer to _recipient\"},\"depositToConsensusLayer(uint256)\":{\"notice\":\"Deposits current balance to the Consensus Layer by batches of 32 ETH\"},\"getAdmin()\":{\"notice\":\"Retrieves the current admin address\"},\"getAllowlist()\":{\"notice\":\"Retrieve the allowlist address\"},\"getBalanceToDeposit()\":{\"notice\":\"Returns the amount of pending ETH\"},\"getCLValidatorCount()\":{\"notice\":\"Get CL validator count (the amount of validator reported by the oracles)\"},\"getCLValidatorTotalBalance()\":{\"notice\":\"Get CL validator total balance\"},\"getCollector()\":{\"notice\":\"Retrieve the collector address\"},\"getCoverageFund()\":{\"notice\":\"Retrieve the coverage fund\"},\"getDepositedValidatorCount()\":{\"notice\":\"Get the deposited validator count (the count of deposits made by the contract)\"},\"getELFeeRecipient()\":{\"notice\":\"Retrieve the execution layer fee recipient\"},\"getGlobalFee()\":{\"notice\":\"Get the current global fee\"},\"getMetadataURI()\":{\"notice\":\"Retrieve the metadata uri string value\"},\"getOperatorsRegistry()\":{\"notice\":\"Retrieve the operators registry\"},\"getOracle()\":{\"notice\":\"Get oracle address\"},\"getPendingAdmin()\":{\"notice\":\"Retrieve the current pending admin address\"},\"getWithdrawalCredentials()\":{\"notice\":\"Retrieve the withdrawal credentials\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Increase allowance to another account\"},\"initRiverV1(address,address,bytes32,address,address,address,address,address,uint256)\":{\"notice\":\"Initializes the River system\"},\"name()\":{\"notice\":\"Retrieve the token name\"},\"proposeAdmin(address)\":{\"notice\":\"Proposes a new address as admin\"},\"sendCoverageFunds()\":{\"notice\":\"Input for coverage funds\"},\"sendELFees()\":{\"notice\":\"Input for execution layer fee earnings\"},\"setAllowlist(address)\":{\"notice\":\"Changes the allowlist address\"},\"setCollector(address)\":{\"notice\":\"Changes the collector address\"},\"setConsensusLayerData(uint256,uint256,bytes32,uint256)\":{\"notice\":\"Sets the validator count and validator total balance sum reported by the oracle\"},\"setCoverageFund(address)\":{\"notice\":\"Changes the coverage fund\"},\"setELFeeRecipient(address)\":{\"notice\":\"Changes the execution layer fee recipient\"},\"setGlobalFee(uint256)\":{\"notice\":\"Changes the global fee parameter\"},\"setMetadataURI(string)\":{\"notice\":\"Sets the metadata uri string value\"},\"setOracle(address)\":{\"notice\":\"Set the oracle address\"},\"sharesFromUnderlyingBalance(uint256)\":{\"notice\":\"Retrieve the shares count from an underlying asset amount\"},\"symbol()\":{\"notice\":\"Retrieve the token symbol\"},\"totalSupply()\":{\"notice\":\"Retrieve the total token supply\"},\"totalUnderlyingSupply()\":{\"notice\":\"Retrieve the total underlying asset supply\"},\"transfer(address,uint256)\":{\"notice\":\"Performs a transfer from the message sender to the provided account\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Performs a transfer between two recipients\"},\"underlyingBalanceFromShares(uint256)\":{\"notice\":\"Retrieve the underlying asset balance from an amount of shares\"}},\"notice\":\"This contract merges all the manager contracts and implements all the virtual methods stitching all components together@notice    +---------------------------------------------------------------------+|                                                                     ||                           Consensus Layer                           ||                                                                     || +-------------------+  +-------------------+  +-------------------+ || |                   |  |                   |  |                   | || |  EL Fee Recipient |  |      Oracle       |  |  Deposit Contract | || |                   |  |                   |  |                   | || +---------|---------+  +---------|---------+  +---------|---------+ |+---------------------------------------------------------------------+|         7            |            5         |+-----------------|    |    |-----------------+|    |6   ||    |    |+---------+          +----|----|----|----+            +---------+|         |          |                   |     2      |         ||Operator |          |       River       --------------  User   ||         |          |                   |            |         |+----|----+          +----|---------|----+            +---------+|                    |         ||             4      |         |       3|1     +-------------|         |--------------+|      |                                      ||      |                                      |+------|------|------------+           +-------------|------------+|                          |           |                          ||    Operators Registry    |           |         Allowlist        ||                          |           |                          |+--------------------------+           +--------------------------+@notice      1. Operators are adding BLS Public Keys of validators running in theirinfrastructure.2. User deposit ETH to the system and get shares minted in exchange3. Upon deposit, the system verifies if the User is allowed to depositby querying the Allowlist4. When the system has enough funds to deposit validators, keys are pulledfrom the Operators Registry5. The deposit data is computed and the validators are funded via the officialdeposit contract6. Oracles report the total balance of the running validators and the total countof running validators7. The running validators propose blocks that reward the EL Fee Recipient. The fundsare pulled back in the system.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/River.1.sol\":\"RiverV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/Administrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IAdministrable.sol\\\";\\n\\nimport \\\"./libraries/LibAdministrable.sol\\\";\\nimport \\\"./libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrable\\n/// @author Kiln\\n/// @notice This contract handles the administration of the contracts\\nabstract contract Administrable is IAdministrable {\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() {\\n        if (msg.sender != LibAdministrable._getAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyPendingAdmin() {\\n        if (msg.sender != LibAdministrable._getPendingAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getAdmin() external view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getPendingAdmin() external view returns (address) {\\n        return LibAdministrable._getPendingAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function proposeAdmin(address _newAdmin) external onlyAdmin {\\n        _setPendingAdmin(_newAdmin);\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function acceptAdmin() external onlyPendingAdmin {\\n        _setAdmin(LibAdministrable._getPendingAdmin());\\n        _setPendingAdmin(address(0));\\n    }\\n\\n    /// @notice Internal utility to set the admin address\\n    /// @param _admin Address to set as admin\\n    function _setAdmin(address _admin) internal {\\n        LibSanitize._notZeroAddress(_admin);\\n        LibAdministrable._setAdmin(_admin);\\n        emit SetAdmin(_admin);\\n    }\\n\\n    /// @notice Internal utility to set the pending admin address\\n    /// @param _pendingAdmin Address to set as pending admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        LibAdministrable._setPendingAdmin(_pendingAdmin);\\n        emit SetPendingAdmin(_pendingAdmin);\\n    }\\n\\n    /// @notice Internal utility to retrieve the address of the current admin\\n    /// @return The address of admin\\n    function _getAdmin() internal view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n}\\n\",\"keccak256\":\"0xc9ce727028bc42bf4ea4247dfde9b57a5c36e1820aba5219207aa95c4f035372\",\"license\":\"BUSL-1.1\"},\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\n/// @title Initializable\\n/// @author Kiln\\n/// @notice This contract ensures that initializers are called only once per version\\ncontract Initializable {\\n    /// @notice An error occured during the initialization\\n    /// @param version The version that was attempting to be initialized\\n    /// @param expectedVersion The version that was expected\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    /// @notice Emitted when the contract is properly initialized\\n    /// @param version New version of the contracts\\n    /// @param cdata Complete calldata that was used during the initialization\\n    event Initialize(uint256 version, bytes cdata);\\n\\n    /// @notice Use this modifier on initializers along with a hard-coded version number\\n    /// @param _version Version to initialize\\n    modifier init(uint256 _version) {\\n        if (_version != Version.get()) {\\n            revert InvalidInitialization(_version, Version.get());\\n        }\\n        Version.set(_version + 1); // prevents reentrency on the called method\\n        _;\\n        emit Initialize(_version, msg.data);\\n    }\\n}\\n\",\"keccak256\":\"0xc85d24988a02608db50067c5319e3b42eec8e45726045489bdb8ea1f33e1ce67\",\"license\":\"BUSL-1.1\"},\"contracts/src/River.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IAllowlist.1.sol\\\";\\nimport \\\"./interfaces/IOperatorRegistry.1.sol\\\";\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\nimport \\\"./interfaces/IELFeeRecipient.1.sol\\\";\\nimport \\\"./interfaces/ICoverageFund.1.sol\\\";\\n\\nimport \\\"./components/ConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"./components/UserDepositManager.1.sol\\\";\\nimport \\\"./components/SharesManager.1.sol\\\";\\nimport \\\"./components/OracleManager.1.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./Administrable.sol\\\";\\n\\nimport \\\"./libraries/LibAllowlistMasks.sol\\\";\\n\\nimport \\\"./state/river/AllowlistAddress.sol\\\";\\nimport \\\"./state/river/OperatorsRegistryAddress.sol\\\";\\nimport \\\"./state/river/CollectorAddress.sol\\\";\\nimport \\\"./state/river/GlobalFee.sol\\\";\\nimport \\\"./state/river/MetadataURI.sol\\\";\\nimport \\\"./state/river/ELFeeRecipientAddress.sol\\\";\\nimport \\\"./state/river/CoverageFundAddress.sol\\\";\\n\\n/// @title River (v1)\\n/// @author Kiln\\n/// @notice This contract merges all the manager contracts and implements all the virtual methods stitching all components together\\n/// @notice\\n/// @notice    +---------------------------------------------------------------------+\\n/// @notice    |                                                                     |\\n/// @notice    |                           Consensus Layer                           |\\n/// @notice    |                                                                     |\\n/// @notice    | +-------------------+  +-------------------+  +-------------------+ |\\n/// @notice    | |                   |  |                   |  |                   | |\\n/// @notice    | |  EL Fee Recipient |  |      Oracle       |  |  Deposit Contract | |\\n/// @notice    | |                   |  |                   |  |                   | |\\n/// @notice    | +---------|---------+  +---------|---------+  +---------|---------+ |\\n/// @notice    +---------------------------------------------------------------------+\\n/// @notice                |         7            |            5         |\\n/// @notice                +-----------------|    |    |-----------------+\\n/// @notice                                  |    |6   |\\n/// @notice                                  |    |    |\\n/// @notice        +---------+          +----|----|----|----+            +---------+\\n/// @notice        |         |          |                   |     2      |         |\\n/// @notice        |Operator |          |       River       --------------  User   |\\n/// @notice        |         |          |                   |            |         |\\n/// @notice        +----|----+          +----|---------|----+            +---------+\\n/// @notice             |                    |         |\\n/// @notice             |             4      |         |       3\\n/// @notice             |1     +-------------|         |--------------+\\n/// @notice             |      |                                      |\\n/// @notice             |      |                                      |\\n/// @notice      +------|------|------------+           +-------------|------------+\\n/// @notice      |                          |           |                          |\\n/// @notice      |    Operators Registry    |           |         Allowlist        |\\n/// @notice      |                          |           |                          |\\n/// @notice      +--------------------------+           +--------------------------+\\n/// @notice\\n/// @notice      1. Operators are adding BLS Public Keys of validators running in their\\n/// @notice         infrastructure.\\n/// @notice      2. User deposit ETH to the system and get shares minted in exchange\\n/// @notice      3. Upon deposit, the system verifies if the User is allowed to deposit\\n/// @notice         by querying the Allowlist\\n/// @notice      4. When the system has enough funds to deposit validators, keys are pulled\\n/// @notice         from the Operators Registry\\n/// @notice      5. The deposit data is computed and the validators are funded via the official\\n/// @notice         deposit contract\\n/// @notice      6. Oracles report the total balance of the running validators and the total count\\n/// @notice         of running validators\\n/// @notice      7. The running validators propose blocks that reward the EL Fee Recipient. The funds\\n/// @notice         are pulled back in the system.\\n/// @notice\\ncontract RiverV1 is\\n    ConsensusLayerDepositManagerV1,\\n    UserDepositManagerV1,\\n    SharesManagerV1,\\n    OracleManagerV1,\\n    Initializable,\\n    Administrable,\\n    IRiverV1\\n{\\n    /// @inheritdoc IRiverV1\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _operatorRegistryAddress,\\n        address _collectorAddress,\\n        uint256 _globalFee\\n    ) external init(0) {\\n        _setAdmin(_systemAdministratorAddress);\\n\\n        CollectorAddress.set(_collectorAddress);\\n        emit SetCollector(_collectorAddress);\\n\\n        GlobalFee.set(_globalFee);\\n        emit SetGlobalFee(_globalFee);\\n\\n        ELFeeRecipientAddress.set(_elFeeRecipientAddress);\\n        emit SetELFeeRecipient(_elFeeRecipientAddress);\\n\\n        AllowlistAddress.set(_allowlistAddress);\\n        emit SetAllowlist(_allowlistAddress);\\n\\n        OperatorsRegistryAddress.set(_operatorRegistryAddress);\\n        emit SetOperatorsRegistry(_operatorRegistryAddress);\\n\\n        ConsensusLayerDepositManagerV1.initConsensusLayerDepositManagerV1(\\n            _depositContractAddress, _withdrawalCredentials\\n        );\\n\\n        OracleManagerV1.initOracleManagerV1(_oracleAddress);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getGlobalFee() external view returns (uint256) {\\n        return GlobalFee.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getAllowlist() external view returns (address) {\\n        return AllowlistAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getCollector() external view returns (address) {\\n        return CollectorAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getELFeeRecipient() external view returns (address) {\\n        return ELFeeRecipientAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getCoverageFund() external view returns (address) {\\n        return CoverageFundAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getMetadataURI() external view returns (string memory) {\\n        return MetadataURI.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setGlobalFee(uint256 newFee) external onlyAdmin {\\n        GlobalFee.set(newFee);\\n        emit SetGlobalFee(newFee);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setAllowlist(address _newAllowlist) external onlyAdmin {\\n        AllowlistAddress.set(_newAllowlist);\\n        emit SetAllowlist(_newAllowlist);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setCollector(address _newCollector) external onlyAdmin {\\n        CollectorAddress.set(_newCollector);\\n        emit SetCollector(_newCollector);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setELFeeRecipient(address _newELFeeRecipient) external onlyAdmin {\\n        ELFeeRecipientAddress.set(_newELFeeRecipient);\\n        emit SetELFeeRecipient(_newELFeeRecipient);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setCoverageFund(address _newCoverageFund) external onlyAdmin {\\n        CoverageFundAddress.set(_newCoverageFund);\\n        emit SetCoverageFund(_newCoverageFund);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setMetadataURI(string memory _metadataURI) external onlyAdmin {\\n        LibSanitize._notEmptyString(_metadataURI);\\n        MetadataURI.set(_metadataURI);\\n        emit SetMetadataURI(_metadataURI);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getOperatorsRegistry() external view returns (address) {\\n        return OperatorsRegistryAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function sendELFees() external payable {\\n        if (msg.sender != ELFeeRecipientAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function sendCoverageFunds() external payable {\\n        if (msg.sender != CoverageFundAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n    }\\n\\n    /// @notice Overridden handler to pass the system admin inside components\\n    /// @return The address of the admin\\n    function _getRiverAdmin()\\n        internal\\n        view\\n        override (OracleManagerV1, ConsensusLayerDepositManagerV1)\\n        returns (address)\\n    {\\n        return Administrable._getAdmin();\\n    }\\n\\n    /// @notice Overridden handler called whenever a token transfer is triggered\\n    /// @param _from Token sender\\n    /// @param _to Token receiver\\n    function _onTransfer(address _from, address _to) internal view override {\\n        IAllowlistV1 allowlist = IAllowlistV1(AllowlistAddress.get());\\n        if (allowlist.isDenied(_from)) {\\n            revert Denied(_from);\\n        }\\n        if (allowlist.isDenied(_to)) {\\n            revert Denied(_to);\\n        }\\n    }\\n\\n    /// @notice Overridden handler called whenever a user deposits ETH to the system. Mints the adequate amount of shares.\\n    /// @param _depositor User address that made the deposit\\n    /// @param _amount Amount of ETH deposited\\n    function _onDeposit(address _depositor, address _recipient, uint256 _amount) internal override {\\n        uint256 mintedShares = SharesManagerV1._mintShares(_depositor, _amount);\\n        IAllowlistV1 allowlist = IAllowlistV1(AllowlistAddress.get());\\n        if (_depositor == _recipient) {\\n            allowlist.onlyAllowed(_depositor, LibAllowlistMasks.DEPOSIT_MASK); // this call reverts if unauthorized or denied\\n        } else {\\n            allowlist.onlyAllowed(_depositor, LibAllowlistMasks.DEPOSIT_MASK); // this call reverts if unauthorized or denied\\n            if (allowlist.isDenied(_recipient)) {\\n                revert Denied(_recipient);\\n            }\\n            _transfer(_depositor, _recipient, mintedShares);\\n        }\\n    }\\n\\n    /// @notice Overridden handler called whenever a deposit to the consensus layer is made. Should retrieve _requestedAmount or lower keys\\n    /// @param _requestedAmount Amount of keys required. Contract is expected to send _requestedAmount or lower.\\n    /// @return publicKeys Array of fundable public keys\\n    /// @return signatures Array of signatures linked to the public keys\\n    function _getNextValidators(uint256 _requestedAmount)\\n        internal\\n        override\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        return IOperatorsRegistryV1(OperatorsRegistryAddress.get()).pickNextValidators(_requestedAmount);\\n    }\\n\\n    /// @notice Overridden handler to pull funds from the execution layer fee recipient to River and return the delta in the balance\\n    /// @param _max The maximum amount to pull from the execution layer fee recipient\\n    /// @return The amount pulled from the execution layer fee recipient\\n    function _pullELFees(uint256 _max) internal override returns (uint256) {\\n        address elFeeRecipient = ELFeeRecipientAddress.get();\\n        uint256 initialBalance = address(this).balance;\\n        IELFeeRecipientV1(payable(elFeeRecipient)).pullELFees(_max);\\n        uint256 collectedELFees = address(this).balance - initialBalance;\\n        if (collectedELFees > 0) {\\n            BalanceToDeposit.set(BalanceToDeposit.get() + collectedELFees);\\n            emit PulledELFees(collectedELFees);\\n        }\\n        return collectedELFees;\\n    }\\n\\n    /// @notice Overridden handler to pull funds from the coverage fund to River and return the delta in the balance\\n    /// @param _max The maximum amount to pull from the coverage fund\\n    /// @return The amount pulled from the coverage fund\\n    function _pullCoverageFunds(uint256 _max) internal override returns (uint256) {\\n        address coverageFund = CoverageFundAddress.get();\\n        if (coverageFund == address(0)) {\\n            return 0;\\n        }\\n        uint256 initialBalance = address(this).balance;\\n        ICoverageFundV1(payable(coverageFund)).pullCoverageFunds(_max);\\n        uint256 collectedCoverageFunds = address(this).balance - initialBalance;\\n        if (collectedCoverageFunds > 0) {\\n            BalanceToDeposit.set(BalanceToDeposit.get() + collectedCoverageFunds);\\n            emit PulledCoverageFunds(collectedCoverageFunds);\\n        }\\n        return collectedCoverageFunds;\\n    }\\n\\n    /// @notice Overridden handler called whenever the balance of ETH handled by the system increases. Computes the fees paid to the collector\\n    /// @param _amount Additional ETH received\\n    function _onEarnings(uint256 _amount) internal override {\\n        uint256 oldTotalSupply = _totalSupply();\\n        if (oldTotalSupply == 0) {\\n            revert ZeroMintedShares();\\n        }\\n        uint256 newTotalBalance = _assetBalance();\\n        uint256 globalFee = GlobalFee.get();\\n        uint256 numerator = _amount * oldTotalSupply * globalFee;\\n        uint256 denominator = (newTotalBalance * LibBasisPoints.BASIS_POINTS_MAX) - (_amount * globalFee);\\n        uint256 sharesToMint = denominator == 0 ? 0 : (numerator / denominator);\\n\\n        if (sharesToMint > 0) {\\n            address collector = CollectorAddress.get();\\n            _mintRawShares(collector, sharesToMint);\\n            uint256 newTotalSupply = _totalSupply();\\n            uint256 oldTotalBalance = newTotalBalance - _amount;\\n            emit RewardsEarned(collector, oldTotalBalance, oldTotalSupply, newTotalBalance, newTotalSupply);\\n        }\\n    }\\n\\n    /// @notice Overridden handler called whenever the total balance of ETH is requested\\n    /// @return The current total asset balance managed by River\\n    function _assetBalance() internal view override returns (uint256) {\\n        uint256 clValidatorCount = CLValidatorCount.get();\\n        uint256 depositedValidatorCount = DepositedValidatorCount.get();\\n        if (clValidatorCount < depositedValidatorCount) {\\n            return CLValidatorTotalBalance.get() + BalanceToDeposit.get()\\n                + (depositedValidatorCount - clValidatorCount) * ConsensusLayerDepositManagerV1.DEPOSIT_SIZE;\\n        } else {\\n            return CLValidatorTotalBalance.get() + BalanceToDeposit.get();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d202ead098260ed2d7294098d4ef1872386daa2a4a84680633cd3bd35e6208a\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/ConsensusLayerDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/components/IConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"../interfaces/IDepositContract.sol\\\";\\n\\nimport \\\"../libraries/LibBytes.sol\\\";\\nimport \\\"../libraries/LibUint256.sol\\\";\\n\\nimport \\\"../state/river/DepositContractAddress.sol\\\";\\nimport \\\"../state/river/WithdrawalCredentials.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\nimport \\\"../state/river/BalanceToDeposit.sol\\\";\\n\\n/// @title Consensus Layer Deposit Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the interactions with the official deposit contract, funding all validators\\n/// @notice Whenever a deposit to the consensus layer is requested, this contract computed the amount of keys\\n/// @notice that could be deposited depending on the amount available in the contract. It then tries to retrieve\\n/// @notice validator keys by calling its internal virtual method _getNextValidators. This method should be\\n/// @notice overridden by the implementing contract to provide [0; _keyCount] keys when invoked.\\nabstract contract ConsensusLayerDepositManagerV1 is IConsensusLayerDepositManagerV1 {\\n    /// @notice Size of a BLS Public key in bytes\\n    uint256 public constant PUBLIC_KEY_LENGTH = 48;\\n    /// @notice Size of a BLS Signature in bytes\\n    uint256 public constant SIGNATURE_LENGTH = 96;\\n    /// @notice Size of a deposit in ETH\\n    uint256 public constant DEPOSIT_SIZE = 32 ether;\\n\\n    /// @notice Handler called to retrieve the internal River admin address\\n    /// @dev Must be Overridden\\n    function _getRiverAdmin() internal view virtual returns (address);\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin_CDMV1() {\\n        if (msg.sender != _getRiverAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Internal helper to retrieve validator keys ready to be funded\\n    /// @dev Must be overridden\\n    /// @param _keyCount The amount of keys (or less) to return.\\n    function _getNextValidators(uint256 _keyCount)\\n        internal\\n        virtual\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n\\n    /// @notice Initializer to set the deposit contract address and the withdrawal credentials to use\\n    /// @param _depositContractAddress The address of the deposit contract\\n    /// @param _withdrawalCredentials The withdrawal credentials to apply to all deposits\\n    function initConsensusLayerDepositManagerV1(address _depositContractAddress, bytes32 _withdrawalCredentials)\\n        internal\\n    {\\n        DepositContractAddress.set(_depositContractAddress);\\n        emit SetDepositContractAddress(_depositContractAddress);\\n\\n        WithdrawalCredentials.set(_withdrawalCredentials);\\n        emit SetWithdrawalCredentials(_withdrawalCredentials);\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function getBalanceToDeposit() external view returns (uint256) {\\n        return BalanceToDeposit.get();\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function getWithdrawalCredentials() external view returns (bytes32) {\\n        return WithdrawalCredentials.get();\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function getDepositedValidatorCount() external view returns (uint256) {\\n        return DepositedValidatorCount.get();\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function depositToConsensusLayer(uint256 _maxCount) external onlyAdmin_CDMV1 {\\n        uint256 balanceToDeposit = BalanceToDeposit.get();\\n        uint256 keyToDepositCount = LibUint256.min(balanceToDeposit / DEPOSIT_SIZE, _maxCount);\\n\\n        if (keyToDepositCount == 0) {\\n            revert NotEnoughFunds();\\n        }\\n\\n        (bytes[] memory publicKeys, bytes[] memory signatures) = _getNextValidators(keyToDepositCount);\\n\\n        uint256 receivedPublicKeyCount = publicKeys.length;\\n\\n        if (receivedPublicKeyCount == 0) {\\n            revert NoAvailableValidatorKeys();\\n        }\\n\\n        if (receivedPublicKeyCount > keyToDepositCount) {\\n            revert InvalidPublicKeyCount();\\n        }\\n\\n        uint256 receivedSignatureCount = signatures.length;\\n\\n        if (receivedSignatureCount != receivedPublicKeyCount) {\\n            revert InvalidSignatureCount();\\n        }\\n\\n        bytes32 withdrawalCredentials = WithdrawalCredentials.get();\\n\\n        if (withdrawalCredentials == 0) {\\n            revert InvalidWithdrawalCredentials();\\n        }\\n\\n        for (uint256 idx = 0; idx < receivedPublicKeyCount;) {\\n            _depositValidator(publicKeys[idx], signatures[idx], withdrawalCredentials);\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        BalanceToDeposit.set(balanceToDeposit - DEPOSIT_SIZE * receivedPublicKeyCount);\\n        DepositedValidatorCount.set(DepositedValidatorCount.get() + receivedPublicKeyCount);\\n    }\\n\\n    /// @notice Deposits 32 ETH to the official Deposit contract\\n    /// @param _publicKey The public key of the validator\\n    /// @param _signature The signature provided by the operator\\n    /// @param _withdrawalCredentials The withdrawal credentials provided by River\\n    function _depositValidator(bytes memory _publicKey, bytes memory _signature, bytes32 _withdrawalCredentials)\\n        internal\\n    {\\n        if (_publicKey.length != PUBLIC_KEY_LENGTH) {\\n            revert InconsistentPublicKeys();\\n        }\\n\\n        if (_signature.length != SIGNATURE_LENGTH) {\\n            revert InconsistentSignatures();\\n        }\\n        uint256 value = DEPOSIT_SIZE;\\n\\n        uint256 depositAmount = value / 1 gwei;\\n\\n        bytes32 pubkeyRoot = sha256(bytes.concat(_publicKey, bytes16(0)));\\n        bytes32 signatureRoot = sha256(\\n            bytes.concat(\\n                sha256(LibBytes.slice(_signature, 0, 64)),\\n                sha256(bytes.concat(LibBytes.slice(_signature, 64, SIGNATURE_LENGTH - 64), bytes32(0)))\\n            )\\n        );\\n\\n        bytes32 depositDataRoot = sha256(\\n            bytes.concat(\\n                sha256(bytes.concat(pubkeyRoot, _withdrawalCredentials)),\\n                sha256(bytes.concat(bytes32(LibUint256.toLittleEndian64(depositAmount)), signatureRoot))\\n            )\\n        );\\n\\n        uint256 targetBalance = address(this).balance - value;\\n\\n        IDepositContract(DepositContractAddress.get()).deposit{value: value}(\\n            _publicKey, abi.encodePacked(_withdrawalCredentials), _signature, depositDataRoot\\n        );\\n        if (address(this).balance != targetBalance) {\\n            revert ErrorOnDeposit();\\n        }\\n        emit FundedValidatorKey(_publicKey);\\n    }\\n}\\n\",\"keccak256\":\"0xe0ec6b50946b74a08e2e7742a5b4dad74239ede63f54c51b28cebcc858f52a0b\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/OracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/components/IOracleManager.1.sol\\\";\\n\\nimport \\\"../state/river/OracleAddress.sol\\\";\\nimport \\\"../state/river/LastOracleRoundId.sol\\\";\\nimport \\\"../state/river/CLValidatorTotalBalance.sol\\\";\\nimport \\\"../state/river/CLValidatorCount.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\n\\n/// @title Oracle Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the inputs provided by the oracle\\n/// @notice The Oracle contract is plugged to this contract and is in charge of pushing\\n/// @notice data whenever a new report has been deemed valid. The report consists in two\\n/// @notice values: the sum of all balances of all deposited validators and the count of\\n/// @notice validators that have been activated on the consensus layer.\\nabstract contract OracleManagerV1 is IOracleManagerV1 {\\n    /// @notice Handler called if the delta between the last and new validator balance sum is positive\\n    /// @dev Must be overridden\\n    /// @param _profits The positive increase in the validator balance sum (staking rewards)\\n    function _onEarnings(uint256 _profits) internal virtual;\\n\\n    /// @notice Handler called to pull the Execution layer fees from the recipient\\n    /// @dev Must be overridden\\n    /// @param _max The maximum amount to pull inside the system\\n    /// @return The amount pulled inside the system\\n    function _pullELFees(uint256 _max) internal virtual returns (uint256);\\n\\n    /// @notice Handler called to pull the coverage funds\\n    /// @dev Must be overridden\\n    /// @param _max The maximum amount to pull inside the system\\n    /// @return The amount pulled inside the system\\n    function _pullCoverageFunds(uint256 _max) internal virtual returns (uint256);\\n\\n    /// @notice Handler called to retrieve the system administrator address\\n    /// @dev Must be overridden\\n    /// @return The system administrator address\\n    function _getRiverAdmin() internal view virtual returns (address);\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin_OMV1() {\\n        if (msg.sender != _getRiverAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Set the initial oracle address\\n    /// @param _oracle Address of the oracle\\n    function initOracleManagerV1(address _oracle) internal {\\n        OracleAddress.set(_oracle);\\n        emit SetOracle(_oracle);\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getOracle() external view returns (address) {\\n        return OracleAddress.get();\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getCLValidatorTotalBalance() external view returns (uint256) {\\n        return CLValidatorTotalBalance.get();\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getCLValidatorCount() external view returns (uint256) {\\n        return CLValidatorCount.get();\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function setOracle(address _oracleAddress) external onlyAdmin_OMV1 {\\n        OracleAddress.set(_oracleAddress);\\n        emit SetOracle(_oracleAddress);\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function setConsensusLayerData(\\n        uint256 _validatorCount,\\n        uint256 _validatorTotalBalance,\\n        bytes32 _roundId,\\n        uint256 _maxIncrease\\n    ) external {\\n        if (msg.sender != OracleAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n\\n        if (_validatorCount > DepositedValidatorCount.get()) {\\n            revert InvalidValidatorCountReport(_validatorCount, DepositedValidatorCount.get());\\n        }\\n\\n        uint256 newValidators = _validatorCount - CLValidatorCount.get();\\n        uint256 previousValidatorTotalBalance = CLValidatorTotalBalance.get() + (newValidators * 32 ether);\\n\\n        CLValidatorTotalBalance.set(_validatorTotalBalance);\\n        CLValidatorCount.set(_validatorCount);\\n        LastOracleRoundId.set(_roundId);\\n\\n        uint256 executionLayerFees = 0;\\n\\n        // if there's a margin left for pulling the execution layer fees that would leave our delta under the allowed maxIncrease value, do it\\n        if ((_maxIncrease + previousValidatorTotalBalance) > _validatorTotalBalance) {\\n            executionLayerFees = _pullELFees((_maxIncrease + previousValidatorTotalBalance) - _validatorTotalBalance);\\n        }\\n\\n        // if there's a margin for pulling coverage funds that would also leave our delta under the allowed maxIncrease value, also do it\\n        if (((_maxIncrease + previousValidatorTotalBalance) - executionLayerFees) > _validatorTotalBalance) {\\n            _pullCoverageFunds(\\n                ((_maxIncrease + previousValidatorTotalBalance) - executionLayerFees) - _validatorTotalBalance\\n            );\\n        }\\n\\n        // the revenue value does not include the pulled coverageFunds\\n        if (previousValidatorTotalBalance < _validatorTotalBalance + executionLayerFees) {\\n            _onEarnings((_validatorTotalBalance + executionLayerFees) - previousValidatorTotalBalance);\\n        }\\n\\n        emit ConsensusLayerDataUpdate(_validatorCount, _validatorTotalBalance, _roundId);\\n    }\\n}\\n\",\"keccak256\":\"0xe3053b18ec7a8fe70c8627a1c9f3459ad446bc4d906ebb56db8123a3b18523a6\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/SharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/components/ISharesManager.1.sol\\\";\\n\\nimport \\\"../libraries/LibSanitize.sol\\\";\\n\\nimport \\\"../state/river/Shares.sol\\\";\\nimport \\\"../state/river/SharesPerOwner.sol\\\";\\nimport \\\"../state/shared/ApprovalsPerOwner.sol\\\";\\n\\n/// @title Shares Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the shares of the depositor and the ERC20 interface\\nabstract contract SharesManagerV1 is ISharesManagerV1 {\\n    /// @notice Internal hook triggered on the external transfer call\\n    /// @dev Must be overridden\\n    /// @param _from Address of the sender\\n    /// @param _to Address of the recipient\\n    function _onTransfer(address _from, address _to) internal view virtual;\\n\\n    /// @notice Internal method to override to provide the total underlying asset balance\\n    /// @dev Must be overridden\\n    /// @return The total asset balance of the system\\n    function _assetBalance() internal view virtual returns (uint256);\\n\\n    /// @notice Modifier used to ensure that the transfer is allowed by using the internal hook to perform internal checks\\n    /// @param _from Address of the sender\\n    /// @param _to Address of the recipient\\n    modifier transferAllowed(address _from, address _to) {\\n        _onTransfer(_from, _to);\\n        _;\\n    }\\n\\n    /// @notice Modifier used to ensure the amount transferred is not 0\\n    /// @param _value Amount to check\\n    modifier isNotZero(uint256 _value) {\\n        if (_value == 0) {\\n            revert NullTransfer();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier used to ensure that the sender has enough funds for the transfer\\n    /// @param _owner Address of the sender\\n    /// @param _value Value that is required to be sent\\n    modifier hasFunds(address _owner, uint256 _value) {\\n        if (_balanceOf(_owner) < _value) {\\n            revert BalanceTooLow();\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function name() external pure returns (string memory) {\\n        return \\\"Liquid Staked ETH\\\";\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function symbol() external pure returns (string memory) {\\n        return \\\"LsETH\\\";\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function totalUnderlyingSupply() external view returns (uint256) {\\n        return _assetBalance();\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function balanceOf(address _owner) external view returns (uint256) {\\n        return _balanceOf(_owner);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function balanceOfUnderlying(address _owner) public view returns (uint256) {\\n        return _balanceFromShares(SharesPerOwner.get(_owner));\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function underlyingBalanceFromShares(uint256 _shares) external view returns (uint256) {\\n        return _balanceFromShares(_shares);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function sharesFromUnderlyingBalance(uint256 _underlyingAssetAmount) external view returns (uint256) {\\n        return _sharesFromBalance(_underlyingAssetAmount);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function allowance(address _owner, address _spender) external view returns (uint256) {\\n        return ApprovalsPerOwner.get(_owner, _spender);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function transfer(address _to, uint256 _value)\\n        external\\n        transferAllowed(msg.sender, _to)\\n        isNotZero(_value)\\n        hasFunds(msg.sender, _value)\\n        returns (bool)\\n    {\\n        if (_to == address(0)) {\\n            revert UnauthorizedTransfer(msg.sender, address(0));\\n        }\\n        return _transfer(msg.sender, _to, _value);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        external\\n        transferAllowed(_from, _to)\\n        isNotZero(_value)\\n        hasFunds(_from, _value)\\n        returns (bool)\\n    {\\n        if (_to == address(0)) {\\n            revert UnauthorizedTransfer(_from, address(0));\\n        }\\n        _spendAllowance(_from, _value);\\n        return _transfer(_from, _to, _value);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function approve(address _spender, uint256 _value) external returns (bool) {\\n        _approve(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool) {\\n        _approve(msg.sender, _spender, ApprovalsPerOwner.get(msg.sender, _spender) + _additionalValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool) {\\n        _approve(msg.sender, _spender, ApprovalsPerOwner.get(msg.sender, _spender) - _subtractableValue);\\n        return true;\\n    }\\n\\n    /// @notice Internal utility to spend the allowance of an account from the message sender\\n    /// @param _from Address owning the allowance\\n    /// @param _value Amount of allowance in shares to spend\\n    function _spendAllowance(address _from, uint256 _value) internal {\\n        uint256 currentAllowance = ApprovalsPerOwner.get(_from, msg.sender);\\n        if (currentAllowance < _value) {\\n            revert AllowanceTooLow(_from, msg.sender, currentAllowance, _value);\\n        }\\n        if (currentAllowance != type(uint256).max) {\\n            _approve(_from, msg.sender, currentAllowance - _value);\\n        }\\n    }\\n\\n    /// @notice Internal utility to change the allowance of an owner to a spender\\n    /// @param _owner The owner of the shares\\n    /// @param _spender The allowed spender of the shares\\n    /// @param _value The new allowance value\\n    function _approve(address _owner, address _spender, uint256 _value) internal {\\n        LibSanitize._notZeroAddress(_owner);\\n        LibSanitize._notZeroAddress(_spender);\\n        ApprovalsPerOwner.set(_owner, _spender, _value);\\n        emit Approval(_owner, _spender, _value);\\n    }\\n\\n    /// @notice Internal utility to retrieve the total supply of tokens\\n    /// @return The total supply\\n    function _totalSupply() internal view returns (uint256) {\\n        return Shares.get();\\n    }\\n\\n    /// @notice Internal utility to perform an unchecked transfer\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\\n        SharesPerOwner.set(_from, SharesPerOwner.get(_from) - _value);\\n        SharesPerOwner.set(_to, SharesPerOwner.get(_to) + _value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /// @notice Internal utility to retrieve the underlying asset balance for the given shares\\n    /// @param _shares Amount of shares to convert\\n    /// @return The balance from the given shares\\n    function _balanceFromShares(uint256 _shares) internal view returns (uint256) {\\n        uint256 _totalSharesValue = Shares.get();\\n\\n        if (_totalSharesValue == 0) {\\n            return 0;\\n        }\\n\\n        return ((_shares * _assetBalance())) / _totalSharesValue;\\n    }\\n\\n    /// @notice Internal utility to retrieve the shares count for a given underlying asset amount\\n    /// @param _balance Amount of underlying asset balance to convert\\n    /// @return The shares from the given balance\\n    function _sharesFromBalance(uint256 _balance) internal view returns (uint256) {\\n        uint256 _totalSharesValue = Shares.get();\\n\\n        if (_totalSharesValue == 0) {\\n            return 0;\\n        }\\n\\n        return (_balance * _totalSharesValue) / _assetBalance();\\n    }\\n\\n    /// @notice Internal utility to mint shares for the specified user\\n    /// @dev This method assumes that funds received are now part of the _assetBalance()\\n    /// @param _owner Account that should receive the new shares\\n    /// @param _underlyingAssetValue Value of underlying asset received, to convert into shares\\n    /// @return sharesToMint The amnount of minted shares\\n    function _mintShares(address _owner, uint256 _underlyingAssetValue) internal returns (uint256 sharesToMint) {\\n        uint256 oldTotalAssetBalance = _assetBalance() - _underlyingAssetValue;\\n\\n        if (oldTotalAssetBalance == 0) {\\n            sharesToMint = _underlyingAssetValue;\\n            _mintRawShares(_owner, _underlyingAssetValue);\\n        } else {\\n            sharesToMint = (_underlyingAssetValue * _totalSupply()) / oldTotalAssetBalance;\\n            _mintRawShares(_owner, sharesToMint);\\n        }\\n    }\\n\\n    /// @notice Internal utility to mint shares without any conversion, and emits a mint Transfer event\\n    /// @param _owner Account that should receive the new shares\\n    /// @param _value Amount of shares to mint\\n    function _mintRawShares(address _owner, uint256 _value) internal {\\n        Shares.set(Shares.get() + _value);\\n        SharesPerOwner.set(_owner, SharesPerOwner.get(_owner) + _value);\\n        emit Transfer(address(0), _owner, _value);\\n    }\\n\\n    /// @notice Internal utility to retrieve the amount of shares per owner\\n    /// @param _owner Account to be checked\\n    /// @return The balance of the account in shares\\n    function _balanceOf(address _owner) internal view returns (uint256) {\\n        return SharesPerOwner.get(_owner);\\n    }\\n}\\n\",\"keccak256\":\"0xf56ca00880eb84b775b73627014b0623942770985d5bf164f3bb577882976572\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/UserDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/components/IUserDepositManager.1.sol\\\";\\n\\nimport \\\"../libraries/LibSanitize.sol\\\";\\n\\nimport \\\"../state/river/BalanceToDeposit.sol\\\";\\n\\n/// @title User Deposit Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the inbound transfers cases or the explicit submissions\\nabstract contract UserDepositManagerV1 is IUserDepositManagerV1 {\\n    /// @notice Handler called whenever a user has sent funds to the contract\\n    /// @dev Must be overridden\\n    /// @param _depositor Address that made the deposit\\n    /// @param _recipient Address that receives the minted shares\\n    /// @param _amount Amount deposited\\n    function _onDeposit(address _depositor, address _recipient, uint256 _amount) internal virtual;\\n\\n    /// @inheritdoc IUserDepositManagerV1\\n    function deposit() external payable {\\n        _deposit(msg.sender);\\n    }\\n\\n    /// @inheritdoc IUserDepositManagerV1\\n    function depositAndTransfer(address _recipient) external payable {\\n        LibSanitize._notZeroAddress(_recipient);\\n        _deposit(_recipient);\\n    }\\n\\n    /// @inheritdoc IUserDepositManagerV1\\n    receive() external payable {\\n        _deposit(msg.sender);\\n    }\\n\\n    /// @inheritdoc IUserDepositManagerV1\\n    fallback() external payable {\\n        revert LibErrors.InvalidCall();\\n    }\\n\\n    /// @notice Internal utility calling the deposit handler and emitting the deposit details\\n    /// @param _recipient The account receiving the minted shares\\n    function _deposit(address _recipient) internal {\\n        if (msg.value == 0) {\\n            revert EmptyDeposit();\\n        }\\n\\n        BalanceToDeposit.set(BalanceToDeposit.get() + msg.value);\\n\\n        _onDeposit(msg.sender, _recipient, msg.value);\\n\\n        emit UserDeposit(msg.sender, _recipient, msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x1996ead84f73844ce6d8e869a74dfcd78cef629074165bb24e8c0fa1010a5897\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Administrable Interface\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the ownership of the contracts\\ninterface IAdministrable {\\n    /// @notice The pending admin address changed\\n    /// @param pendingAdmin New pending admin address\\n    event SetPendingAdmin(address indexed pendingAdmin);\\n\\n    /// @notice The admin address changed\\n    /// @param admin New admin address\\n    event SetAdmin(address indexed admin);\\n\\n    /// @notice Retrieves the current admin address\\n    /// @return The admin address\\n    function getAdmin() external view returns (address);\\n\\n    /// @notice Retrieve the current pending admin address\\n    /// @return The pending admin address\\n    function getPendingAdmin() external view returns (address);\\n\\n    /// @notice Proposes a new address as admin\\n    /// @dev This security prevents setting an invalid address as an admin. The pending\\n    /// @dev admin has to claim its ownership of the contract, and prove that the new\\n    /// @dev address is able to perform regular transactions.\\n    /// @param _newAdmin New admin address\\n    function proposeAdmin(address _newAdmin) external;\\n\\n    /// @notice Accept the transfer of ownership\\n    /// @dev Only callable by the pending admin. Resets the pending admin if succesful.\\n    function acceptAdmin() external;\\n}\\n\",\"keccak256\":\"0xe45ef81bf9326bac437dcf901eeb80628d5c87d51dcbcf3addb80e834ba7bfea\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAllowlist.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Allowlist Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the list of allowed recipients.\\ninterface IAllowlistV1 {\\n    /// @notice The permissions of several accounts have changed\\n    /// @param accounts List of accounts\\n    /// @param permissions New permissions for each account at the same index\\n    event SetAllowlistPermissions(address[] accounts, uint256[] permissions);\\n\\n    /// @notice The stored allower address has been changed\\n    /// @param allower The new allower address\\n    event SetAllower(address indexed allower);\\n\\n    /// @notice The provided accounts list is empty\\n    error InvalidAlloweeCount();\\n\\n    /// @notice The account is denied access\\n    /// @param _account The denied account\\n    error Denied(address _account);\\n\\n    /// @notice The provided accounts and permissions list have different lengths\\n    error MismatchedAlloweeAndStatusCount();\\n\\n    /// @notice Initializes the allowlist\\n    /// @param _admin Address of the Allowlist administrator\\n    /// @param _allower Address of the allower\\n    function initAllowlistV1(address _admin, address _allower) external;\\n\\n    /// @notice Retrieves the allower address\\n    /// @return The address of the allower\\n    function getAllower() external view returns (address);\\n\\n    /// @notice This method returns true if the user has the expected permission and\\n    ///         is not in the deny list\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    /// @return True if mask is respected and user is allowed\\n    function isAllowed(address _account, uint256 _mask) external view returns (bool);\\n\\n    /// @notice This method returns true if the user is in the deny list\\n    /// @param _account Recipient to verify\\n    /// @return True if user is denied access\\n    function isDenied(address _account) external view returns (bool);\\n\\n    /// @notice This method returns true if the user has the expected permission\\n    ///         ignoring any deny list membership\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    /// @return True if mask is respected\\n    function hasPermission(address _account, uint256 _mask) external view returns (bool);\\n\\n    /// @notice This method retrieves the raw permission value\\n    /// @param _account Recipient to verify\\n    /// @return The raw permissions value of the account\\n    function getPermissions(address _account) external view returns (uint256);\\n\\n    /// @notice This method should be used as a modifier and is expected to revert\\n    ///         if the user hasn't got the required permission or if the user is\\n    ///         in the deny list.\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    function onlyAllowed(address _account, uint256 _mask) external view;\\n\\n    /// @notice Changes the allower address\\n    /// @param _newAllowerAddress New address allowed to edit the allowlist\\n    function setAllower(address _newAllowerAddress) external;\\n\\n    /// @notice Sets the allowlisting status for one or more accounts\\n    /// @dev The permission value is overridden and not updated\\n    /// @param _accounts Accounts with statuses to edit\\n    /// @param _permissions Allowlist permissions for each account, in the same order as _accounts\\n    function allow(address[] calldata _accounts, uint256[] calldata _permissions) external;\\n}\\n\",\"keccak256\":\"0x31166276cb00a5933800d9fadbe6c17f7397d981cd6193df5c50a0c0457b0355\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/ICoverageFund.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Coverage Fund Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to receive donations for the slashing coverage fund and pull the funds into river\\ninterface ICoverageFundV1 {\\n    /// @notice The storage river address has changed\\n    /// @param river The new river address\\n    event SetRiver(address indexed river);\\n\\n    /// @notice A donation has been made to the coverage fund\\n    /// @param donator Address that performed the donation\\n    /// @param amount The amount donated\\n    event Donate(address indexed donator, uint256 amount);\\n\\n    /// @notice The fallback or receive callback has been triggered\\n    error InvalidCall();\\n\\n    /// @notice A donation with 0 ETH has been performed\\n    error EmptyDonation();\\n\\n    /// @notice Initialize the coverage fund with the required arguments\\n    /// @param _riverAddress Address of River\\n    function initCoverageFundV1(address _riverAddress) external;\\n\\n    /// @notice Pulls ETH into the River contract\\n    /// @dev Only callable by the River contract\\n    /// @param _maxAmount The maximum amount to pull into the system\\n    function pullCoverageFunds(uint256 _maxAmount) external;\\n\\n    /// @notice Donates ETH to the coverage fund contract\\n    function donate() external payable;\\n\\n    /// @notice Ether receiver\\n    receive() external payable;\\n\\n    /// @notice Invalid fallback detector\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0xc817f26cf7c6f22c831e70bf1467ad120a05e147df09fb78d68068b4b2d3eb45\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IDepositContract.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Deposit Contract Interface\\n/// @notice This interface exposes methods to perform validator deposits\\ninterface IDepositContract {\\n    /// @notice Official deposit method to activate a validator on the consensus layer\\n    /// @param pubkey The 48 bytes long BLS Public key representing the validator\\n    /// @param withdrawalCredentials The 32 bytes long withdrawal credentials, configures the withdrawal recipient\\n    /// @param signature The 96 bytes long BLS Signature performed by the pubkey's private key\\n    /// @param depositDataRoot The root hash of the whole deposit data structure\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawalCredentials,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xd6eb6616fcc668e5c00141d60c3d5079dce01a04d2761ad4fe68e13a349d3850\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IELFeeRecipient.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Execution Layer Fee Recipient Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to receive all the execution layer fees from the proposed blocks + bribes\\ninterface IELFeeRecipientV1 {\\n    /// @notice The storage river address has changed\\n    /// @param river The new river address\\n    event SetRiver(address indexed river);\\n\\n    /// @notice The fallback has been triggered\\n    error InvalidCall();\\n\\n    /// @notice Initialize the fee recipient with the required arguments\\n    /// @param _riverAddress Address of River\\n    function initELFeeRecipientV1(address _riverAddress) external;\\n\\n    /// @notice Pulls ETH to the River contract\\n    /// @dev Only callable by the River contract\\n    /// @param _maxAmount The maximum amount to pull into the system\\n    function pullELFees(uint256 _maxAmount) external;\\n\\n    /// @notice Ether receiver\\n    receive() external payable;\\n\\n    /// @notice Invalid fallback detector\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0xa169e8ec368410260684db9ae713bceeded951eb1be9dea883f6736649cdcaea\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IOperatorRegistry.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/operatorsRegistry/Operators.sol\\\";\\n\\n/// @title Operators Registry Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the list of operators and their keys\\ninterface IOperatorsRegistryV1 {\\n    /// @notice A new operator has been added to the registry\\n    /// @param index The operator index\\n    /// @param name The operator display name\\n    /// @param operatorAddress The operator address\\n    event AddedOperator(uint256 indexed index, string name, address indexed operatorAddress);\\n\\n    /// @notice The operator status has been changed\\n    /// @param index The operator index\\n    /// @param active True if the operator is active\\n    event SetOperatorStatus(uint256 indexed index, bool active);\\n\\n    /// @notice The operator limit has been changed\\n    /// @param index The operator index\\n    /// @param newLimit The new operator staking limit\\n    event SetOperatorLimit(uint256 indexed index, uint256 newLimit);\\n\\n    /// @notice The operator stopped validator count has been changed\\n    /// @param index The operator index\\n    /// @param newStoppedValidatorCount The new stopped validator count\\n    event SetOperatorStoppedValidatorCount(uint256 indexed index, uint256 newStoppedValidatorCount);\\n\\n    /// @notice The operator address has been changed\\n    /// @param index The operator index\\n    /// @param newOperatorAddress The new operator address\\n    event SetOperatorAddress(uint256 indexed index, address indexed newOperatorAddress);\\n\\n    /// @notice The operator display name has been changed\\n    /// @param index The operator index\\n    /// @param newName The new display name\\n    event SetOperatorName(uint256 indexed index, string newName);\\n\\n    /// @notice The operator or the admin added new validator keys and signatures\\n    /// @dev The public keys and signatures are concatenated\\n    /// @dev A public key is 48 bytes long\\n    /// @dev A signature is 96 bytes long\\n    /// @dev [P1, S1, P2, S2, ..., PN, SN] where N is the bytes length divided by (96 + 48)\\n    /// @param index The operator index\\n    /// @param publicKeysAndSignatures The concatenated public keys and signatures\\n    event AddedValidatorKeys(uint256 indexed index, bytes publicKeysAndSignatures);\\n\\n    /// @notice The operator or the admin removed a public key and its signature from the registry\\n    /// @param index The operator index\\n    /// @param publicKey The BLS public key that has been removed\\n    event RemovedValidatorKey(uint256 indexed index, bytes publicKey);\\n\\n    /// @notice The stored river address has been changed\\n    /// @param river The new river address\\n    event SetRiver(address indexed river);\\n\\n    /// @notice The operator edited its keys after the snapshot block\\n    /// @dev This means that we cannot assume that its key set is checked by the snapshot\\n    /// @dev This happens only if the limit was meant to be increased\\n    /// @param index The operator index\\n    /// @param currentLimit The current operator limit\\n    /// @param newLimit The new operator limit that was attempted to be set\\n    /// @param latestKeysEditBlockNumber The last block number at which the operator changed its keys\\n    /// @param snapshotBlock The block number of the snapshot\\n    event OperatorEditsAfterSnapshot(\\n        uint256 indexed index,\\n        uint256 currentLimit,\\n        uint256 newLimit,\\n        uint256 indexed latestKeysEditBlockNumber,\\n        uint256 indexed snapshotBlock\\n    );\\n\\n    /// @notice The call didn't alter the limit of the operator\\n    /// @param index The operator index\\n    /// @param limit The limit of the operator\\n    event OperatorLimitUnchanged(uint256 indexed index, uint256 limit);\\n\\n    /// @notice The calling operator is inactive\\n    /// @param index The operator index\\n    error InactiveOperator(uint256 index);\\n\\n    /// @notice A funded key deletion has been attempted\\n    error InvalidFundedKeyDeletionAttempt();\\n\\n    /// @notice The index provided are not sorted properly (descending order)\\n    error InvalidUnsortedIndexes();\\n\\n    /// @notice The provided operator and limits array have different lengths\\n    error InvalidArrayLengths();\\n\\n    /// @notice The provided operator and limits array are empty\\n    error InvalidEmptyArray();\\n\\n    /// @notice The provided key count is 0\\n    error InvalidKeyCount();\\n\\n    /// @notice The provided concatenated keys do not have the expected length\\n    error InvalidKeysLength();\\n\\n    /// @notice The index that is removed is out of bounds\\n    error InvalidIndexOutOfBounds();\\n\\n    /// @notice The value for the operator limit is too high\\n    /// @param index The operator index\\n    /// @param limit The new limit provided\\n    /// @param keyCount The operator key count\\n    error OperatorLimitTooHigh(uint256 index, uint256 limit, uint256 keyCount);\\n\\n    /// @notice The value for the limit is too low\\n    /// @param index The operator index\\n    /// @param limit The new limit provided\\n    /// @param fundedKeyCount The operator funded key count\\n    error OperatorLimitTooLow(uint256 index, uint256 limit, uint256 fundedKeyCount);\\n\\n    /// @notice The provided list of operators is not in increasing order\\n    error UnorderedOperatorList();\\n\\n    /// @notice Initializes the operators registry\\n    /// @param _admin Admin in charge of managing operators\\n    /// @param _river Address of River system\\n    function initOperatorsRegistryV1(address _admin, address _river) external;\\n\\n    /// @notice Retrieve the River address\\n    /// @return The address of River\\n    function getRiver() external view returns (address);\\n\\n    /// @notice Get operator details\\n    /// @param _index The index of the operator\\n    /// @return The details of the operator\\n    function getOperator(uint256 _index) external view returns (Operators.Operator memory);\\n\\n    /// @notice Get operator count\\n    /// @return The operator count\\n    function getOperatorCount() external view returns (uint256);\\n\\n    /// @notice Get the details of a validator\\n    /// @param _operatorIndex The index of the operator\\n    /// @param _validatorIndex The index of the validator\\n    /// @return publicKey The public key of the validator\\n    /// @return signature The signature used during deposit\\n    /// @return funded True if validator has been funded\\n    function getValidator(uint256 _operatorIndex, uint256 _validatorIndex)\\n        external\\n        view\\n        returns (bytes memory publicKey, bytes memory signature, bool funded);\\n\\n    /// @notice Retrieve the active operator set\\n    /// @return The list of active operators and their details\\n    function listActiveOperators() external view returns (Operators.Operator[] memory);\\n\\n    /// @notice Adds an operator to the registry\\n    /// @dev Only callable by the administrator\\n    /// @param _name The name identifying the operator\\n    /// @param _operator The address representing the operator, receiving the rewards\\n    /// @return The index of the new operator\\n    function addOperator(string calldata _name, address _operator) external returns (uint256);\\n\\n    /// @notice Changes the operator address of an operator\\n    /// @dev Only callable by the administrator or the previous operator address\\n    /// @param _index The operator index\\n    /// @param _newOperatorAddress The new address of the operator\\n    function setOperatorAddress(uint256 _index, address _newOperatorAddress) external;\\n\\n    /// @notice Changes the operator name\\n    /// @dev Only callable by the administrator or the operator\\n    /// @param _index The operator index\\n    /// @param _newName The new operator name\\n    function setOperatorName(uint256 _index, string calldata _newName) external;\\n\\n    /// @notice Changes the operator status\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStatus The new status of the operator\\n    function setOperatorStatus(uint256 _index, bool _newStatus) external;\\n\\n    /// @notice Changes the operator stopped validator count\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStoppedValidatorCount The new stopped validator count of the operator\\n    function setOperatorStoppedValidatorCount(uint256 _index, uint256 _newStoppedValidatorCount) external;\\n\\n    /// @notice Changes the operator staking limit\\n    /// @dev Only callable by the administrator\\n    /// @dev The operator indexes must be in increasing order and contain no duplicate\\n    /// @dev The limit cannot exceed the total key count of the operator\\n    /// @dev The _indexes and _newLimits must have the same length.\\n    /// @dev Each limit value is applied to the operator index at the same index in the _indexes array.\\n    /// @param _operatorIndexes The operator indexes, in increasing order and duplicate free\\n    /// @param _newLimits The new staking limit of the operators\\n    /// @param _snapshotBlock The block number at which the snapshot was computed\\n    function setOperatorLimits(\\n        uint256[] calldata _operatorIndexes,\\n        uint256[] calldata _newLimits,\\n        uint256 _snapshotBlock\\n    ) external;\\n\\n    /// @notice Adds new keys for an operator\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @param _index The operator index\\n    /// @param _keyCount The amount of keys provided\\n    /// @param _publicKeysAndSignatures Public keys of the validator, concatenated\\n    function addValidators(uint256 _index, uint256 _keyCount, bytes calldata _publicKeysAndSignatures) external;\\n\\n    /// @notice Remove validator keys\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @dev The indexes must be provided sorted in decreasing order and duplicate-free, otherwise the method will revert\\n    /// @dev The operator limit will be set to the lowest deleted key index if the operator's limit wasn't equal to its total key count\\n    /// @dev The operator or the admin cannot remove funded keys\\n    /// @dev When removing validators, the indexes of specific unfunded keys can be changed in order to properly\\n    /// @dev remove the keys from the storage array. Beware of this specific behavior when chaining calls as the\\n    /// @dev targeted public key indexes can point to a different key after a first call was made and performed\\n    /// @dev some swaps\\n    /// @param _index The operator index\\n    /// @param _indexes The indexes of the keys to remove\\n    function removeValidators(uint256 _index, uint256[] calldata _indexes) external;\\n\\n    /// @notice Retrieve validator keys based on operator statuses\\n    /// @param _count Max amount of keys requested\\n    /// @return publicKeys An array of public keys\\n    /// @return signatures An array of signatures linked to the public keys\\n    function pickNextValidators(uint256 _count)\\n        external\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n}\\n\",\"keccak256\":\"0xe5155a676a2faf7a5909d6f167de643b6ce8db08facbc85ebfc17da157d3fc2d\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRiver.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./components/IConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"./components/IOracleManager.1.sol\\\";\\nimport \\\"./components/ISharesManager.1.sol\\\";\\nimport \\\"./components/IUserDepositManager.1.sol\\\";\\n\\n/// @title River Interface (v1)\\n/// @author Kiln\\n/// @notice The main system interface\\ninterface IRiverV1 is IConsensusLayerDepositManagerV1, IUserDepositManagerV1, ISharesManagerV1, IOracleManagerV1 {\\n    /// @notice Funds have been pulled from the Execution Layer Fee Recipient\\n    /// @param amount The amount pulled\\n    event PulledELFees(uint256 amount);\\n\\n    /// @notice Funds have been pulled from the Coverage Fund\\n    /// @param amount The amount pulled\\n    event PulledCoverageFunds(uint256 amount);\\n\\n    /// @notice The stored Execution Layer Fee Recipient has been changed\\n    /// @param elFeeRecipient The new Execution Layer Fee Recipient\\n    event SetELFeeRecipient(address indexed elFeeRecipient);\\n\\n    /// @notice The stored Coverage Fund has been changed\\n    /// @param coverageFund The new Coverage Fund\\n    event SetCoverageFund(address indexed coverageFund);\\n\\n    /// @notice The stored Collector has been changed\\n    /// @param collector The new Collector\\n    event SetCollector(address indexed collector);\\n\\n    /// @notice The stored Allowlist has been changed\\n    /// @param allowlist The new Allowlist\\n    event SetAllowlist(address indexed allowlist);\\n\\n    /// @notice The stored Global Fee has been changed\\n    /// @param fee The new Global Fee\\n    event SetGlobalFee(uint256 fee);\\n\\n    /// @notice The stored Operators Registry has been changed\\n    /// @param operatorRegistry The new Operators Registry\\n    event SetOperatorsRegistry(address indexed operatorRegistry);\\n\\n    /// @notice The stored Metadata URI string has been changed\\n    /// @param metadataURI The new Metadata URI string\\n    event SetMetadataURI(string metadataURI);\\n\\n    /// @notice The system underlying supply increased. This is a snapshot of the balances for accounting purposes\\n    /// @param _collector The address of the collector during this event\\n    /// @param _oldTotalUnderlyingBalance Old total ETH balance under management by River\\n    /// @param _oldTotalSupply Old total supply in shares\\n    /// @param _newTotalUnderlyingBalance New total ETH balance under management by River\\n    /// @param _newTotalSupply New total supply in shares\\n    event RewardsEarned(\\n        address indexed _collector,\\n        uint256 _oldTotalUnderlyingBalance,\\n        uint256 _oldTotalSupply,\\n        uint256 _newTotalUnderlyingBalance,\\n        uint256 _newTotalSupply\\n    );\\n\\n    /// @notice The computed amount of shares to mint is 0\\n    error ZeroMintedShares();\\n\\n    /// @notice The access was denied\\n    /// @param account The account that was denied\\n    error Denied(address account);\\n\\n    /// @notice Initializes the River system\\n    /// @param _depositContractAddress Address to make Consensus Layer deposits\\n    /// @param _elFeeRecipientAddress Address that receives the execution layer fees\\n    /// @param _withdrawalCredentials Credentials to use for every validator deposit\\n    /// @param _oracleAddress The address of the Oracle contract\\n    /// @param _systemAdministratorAddress Administrator address\\n    /// @param _allowlistAddress Address of the allowlist contract\\n    /// @param _operatorRegistryAddress Address of the operator registry\\n    /// @param _collectorAddress Address receiving the the global fee on revenue\\n    /// @param _globalFee Amount retained when the ETH balance increases and sent to the collector\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _operatorRegistryAddress,\\n        address _collectorAddress,\\n        uint256 _globalFee\\n    ) external;\\n\\n    /// @notice Get the current global fee\\n    /// @return The global fee\\n    function getGlobalFee() external view returns (uint256);\\n\\n    /// @notice Retrieve the allowlist address\\n    /// @return The allowlist address\\n    function getAllowlist() external view returns (address);\\n\\n    /// @notice Retrieve the collector address\\n    /// @return The collector address\\n    function getCollector() external view returns (address);\\n\\n    /// @notice Retrieve the execution layer fee recipient\\n    /// @return The execution layer fee recipient address\\n    function getELFeeRecipient() external view returns (address);\\n\\n    /// @notice Retrieve the coverage fund\\n    /// @return The coverage fund address\\n    function getCoverageFund() external view returns (address);\\n\\n    /// @notice Retrieve the operators registry\\n    /// @return The operators registry address\\n    function getOperatorsRegistry() external view returns (address);\\n\\n    /// @notice Retrieve the metadata uri string value\\n    /// @return The metadata uri string value\\n    function getMetadataURI() external view returns (string memory);\\n\\n    /// @notice Changes the global fee parameter\\n    /// @param newFee New fee value\\n    function setGlobalFee(uint256 newFee) external;\\n\\n    /// @notice Changes the allowlist address\\n    /// @param _newAllowlist New address for the allowlist\\n    function setAllowlist(address _newAllowlist) external;\\n\\n    /// @notice Changes the collector address\\n    /// @param _newCollector New address for the collector\\n    function setCollector(address _newCollector) external;\\n\\n    /// @notice Changes the execution layer fee recipient\\n    /// @param _newELFeeRecipient New address for the recipient\\n    function setELFeeRecipient(address _newELFeeRecipient) external;\\n\\n    /// @notice Changes the coverage fund\\n    /// @param _newCoverageFund New address for the fund\\n    function setCoverageFund(address _newCoverageFund) external;\\n\\n    /// @notice Sets the metadata uri string value\\n    /// @param _metadataURI The new metadata uri string value\\n    function setMetadataURI(string memory _metadataURI) external;\\n\\n    /// @notice Input for execution layer fee earnings\\n    function sendELFees() external payable;\\n\\n    /// @notice Input for coverage funds\\n    function sendCoverageFunds() external payable;\\n}\\n\",\"keccak256\":\"0x6e5160d77eb8918e94f0af26b2081e73e7861a566c736db15012412add618e03\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IConsensusLayerDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Consensys Layer Deposit Manager Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the interactions with the official deposit contract\\ninterface IConsensusLayerDepositManagerV1 {\\n    /// @notice A validator key got funded on the deposit contract\\n    /// @param publicKey BLS Public key that got funded\\n    event FundedValidatorKey(bytes publicKey);\\n\\n    /// @notice The stored deposit contract address changed\\n    /// @param depositContract Address of the deposit contract\\n    event SetDepositContractAddress(address indexed depositContract);\\n\\n    /// @notice The stored withdrawal credentials changed\\n    /// @param withdrawalCredentials The withdrawal credentials to use for deposits\\n    event SetWithdrawalCredentials(bytes32 withdrawalCredentials);\\n\\n    /// @notice Not enough funds to deposit one validator\\n    error NotEnoughFunds();\\n\\n    /// @notice The length of the BLS Public key is invalid during deposit\\n    error InconsistentPublicKeys();\\n\\n    /// @notice The length of the BLS Signature is invalid during deposit\\n    error InconsistentSignatures();\\n\\n    /// @notice The internal key retrieval returned no keys\\n    error NoAvailableValidatorKeys();\\n\\n    /// @notice The received count of public keys to deposit is invalid\\n    error InvalidPublicKeyCount();\\n\\n    /// @notice The received count of signatures to deposit is invalid\\n    error InvalidSignatureCount();\\n\\n    /// @notice The withdrawal credentials value is null\\n    error InvalidWithdrawalCredentials();\\n\\n    /// @notice An error occured during the deposit\\n    error ErrorOnDeposit();\\n\\n    /// @notice Returns the amount of pending ETH\\n    /// @return The amount of pending ETH\\n    function getBalanceToDeposit() external view returns (uint256);\\n\\n    /// @notice Retrieve the withdrawal credentials\\n    /// @return The withdrawal credentials\\n    function getWithdrawalCredentials() external view returns (bytes32);\\n\\n    /// @notice Get the deposited validator count (the count of deposits made by the contract)\\n    /// @return The deposited validator count\\n    function getDepositedValidatorCount() external view returns (uint256);\\n\\n    /// @notice Deposits current balance to the Consensus Layer by batches of 32 ETH\\n    /// @param _maxCount The maximum amount of validator keys to fund\\n    function depositToConsensusLayer(uint256 _maxCount) external;\\n}\\n\",\"keccak256\":\"0x2215d3054ece419e846f376e7624094b5ce24b3c72be745a4b5aa4e756c4cb42\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IOracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Oracle Manager (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the inputs provided by the oracle\\ninterface IOracleManagerV1 {\\n    /// @notice The stored oracle address changed\\n    /// @param oracleAddress The new oracle address\\n    event SetOracle(address indexed oracleAddress);\\n\\n    /// @notice The consensus layer data provided by the oracle has been updated\\n    /// @param validatorCount The new count of validators running on the consensus layer\\n    /// @param validatorTotalBalance The new total balance sum of all validators\\n    /// @param roundId Round identifier\\n    event ConsensusLayerDataUpdate(uint256 validatorCount, uint256 validatorTotalBalance, bytes32 roundId);\\n\\n    /// @notice The reported validator count is invalid\\n    /// @param providedValidatorCount The received validator count value\\n    /// @param depositedValidatorCount The number of deposits performed by the system\\n    error InvalidValidatorCountReport(uint256 providedValidatorCount, uint256 depositedValidatorCount);\\n\\n    /// @notice Get oracle address\\n    /// @return The oracle address\\n    function getOracle() external view returns (address);\\n\\n    /// @notice Get CL validator total balance\\n    /// @return The CL Validator total balance\\n    function getCLValidatorTotalBalance() external view returns (uint256);\\n\\n    /// @notice Get CL validator count (the amount of validator reported by the oracles)\\n    /// @return The CL validator count\\n    function getCLValidatorCount() external view returns (uint256);\\n\\n    /// @notice Set the oracle address\\n    /// @param _oracleAddress Address of the oracle\\n    function setOracle(address _oracleAddress) external;\\n\\n    /// @notice Sets the validator count and validator total balance sum reported by the oracle\\n    /// @dev Can only be called by the oracle address\\n    /// @dev The round id is a blackbox value that should only be used to identify unique reports\\n    /// @dev When a report is performed, River computes the amount of fees that can be pulled\\n    /// @dev from the execution layer fee recipient. This amount is capped by the max allowed\\n    /// @dev increase provided during the report.\\n    /// @dev If the total asset balance increases (from the reported total balance and the pulled funds)\\n    /// @dev we then compute the share that must be taken for the collector on the positive delta.\\n    /// @dev The execution layer fees are taken into account here because they are the product of\\n    /// @dev node operator's work, just like consensus layer fees, and both should be handled in the\\n    /// @dev same manner, as a single revenue stream for the users and the collector.\\n    /// @param _validatorCount The number of active validators on the consensus layer\\n    /// @param _validatorTotalBalance The balance sum of the active validators on the consensus layer\\n    /// @param _roundId An identifier for this update\\n    /// @param _maxIncrease The maximum allowed increase in the total balance\\n    function setConsensusLayerData(\\n        uint256 _validatorCount,\\n        uint256 _validatorTotalBalance,\\n        bytes32 _roundId,\\n        uint256 _maxIncrease\\n    ) external;\\n}\\n\",\"keccak256\":\"0x088ff39852e3000fbe31c62da75c41bba38aaf2f2d66f99ba698835b840ef6bc\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/ISharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Shares Manager Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the shares of the depositor and the ERC20 interface\\ninterface ISharesManagerV1 is IERC20 {\\n    /// @notice Balance too low to perform operation\\n    error BalanceTooLow();\\n\\n    /// @notice Allowance too low to perform operation\\n    /// @param _from Account where funds are sent from\\n    /// @param _operator Account attempting the transfer\\n    /// @param _allowance Current allowance\\n    /// @param _value Requested transfer value in shares\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n\\n    /// @notice Invalid empty transfer\\n    error NullTransfer();\\n\\n    /// @notice Invalid transfer recipients\\n    /// @param _from Account sending the funds in the invalid transfer\\n    /// @param _to Account receiving the funds in the invalid transfer\\n    error UnauthorizedTransfer(address _from, address _to);\\n\\n    /// @notice Retrieve the token name\\n    /// @return The token name\\n    function name() external pure returns (string memory);\\n\\n    /// @notice Retrieve the token symbol\\n    /// @return The token symbol\\n    function symbol() external pure returns (string memory);\\n\\n    /// @notice Retrieve the decimal count\\n    /// @return The decimal count\\n    function decimals() external pure returns (uint8);\\n\\n    /// @notice Retrieve the total token supply\\n    /// @return The total supply in shares\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the total underlying asset supply\\n    /// @return The total underlying asset supply\\n    function totalUnderlyingSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The balance of the account in shares\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The underlying balance of the account\\n    function balanceOfUnderlying(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance from an amount of shares\\n    /// @param _shares Amount of shares to convert\\n    /// @return The underlying asset balance represented by the shares\\n    function underlyingBalanceFromShares(uint256 _shares) external view returns (uint256);\\n\\n    /// @notice Retrieve the shares count from an underlying asset amount\\n    /// @param _underlyingAssetAmount Amount of underlying asset to convert\\n    /// @return The amount of shares worth the underlying asset amopunt\\n    function sharesFromUnderlyingBalance(uint256 _underlyingAssetAmount) external view returns (uint256);\\n\\n    /// @notice Retrieve the allowance value for a spender\\n    /// @param _owner Address that issued the allowance\\n    /// @param _spender Address that received the allowance\\n    /// @return The allowance in shares for a given spender\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    /// @notice Performs a transfer from the message sender to the provided account\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Performs a transfer between two recipients\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Approves an account for future spendings\\n    /// @dev An approved account can use transferFrom to transfer funds on behalf of the token owner\\n    /// @param _spender Address that is allowed to spend the tokens\\n    /// @param _value The allowed amount in shares, will override previous value\\n    /// @return True if success\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    /// @notice Increase allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _additionalValue Amount of shares to add\\n    /// @return True if success\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool);\\n\\n    /// @notice Decrease allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _subtractableValue Amount of shares to subtract\\n    /// @return True if success\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool);\\n}\\n\",\"keccak256\":\"0x947debdcf17b72c13c3ca1a840795ed935bde5d4f345e52fa1bed1895212da66\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IUserDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title User Deposit Manager (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the inbound transfers cases or the explicit submissions\\ninterface IUserDepositManagerV1 {\\n    /// @notice User deposited ETH in the system\\n    /// @param depositor Address performing the deposit\\n    /// @param recipient Address receiving the minted shares\\n    /// @param amount Amount in ETH deposited\\n    event UserDeposit(address indexed depositor, address indexed recipient, uint256 amount);\\n\\n    /// @notice And empty deposit attempt was made\\n    error EmptyDeposit();\\n\\n    /// @notice Explicit deposit method to mint on msg.sender\\n    function deposit() external payable;\\n\\n    /// @notice Explicit deposit method to mint on msg.sender and transfer to _recipient\\n    /// @param _recipient Address receiving the minted LsETH\\n    function depositAndTransfer(address _recipient) external payable;\\n\\n    /// @notice Implicit deposit method, when the user performs a regular transfer to the contract\\n    receive() external payable;\\n\\n    /// @notice Invalid call, when the user sends a transaction with a data payload but no method matched\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x1abcda34431bfbb82b6ede5c852f4ece6544cca24616f58cb44ed340df0ef06b\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\nimport \\\"../state/shared/PendingAdministratorAddress.sol\\\";\\n\\n/// @title Lib Administrable\\n/// @author Kiln\\n/// @notice This library handles the admin and pending admin storage vars\\nlibrary LibAdministrable {\\n    /// @notice Retrieve the system admin\\n    /// @return The address of the system admin\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n\\n    /// @notice Retrieve the pending system admin\\n    /// @return The adress of the pending system admin\\n    function _getPendingAdmin() internal view returns (address) {\\n        return PendingAdministratorAddress.get();\\n    }\\n\\n    /// @notice Sets the system admin\\n    /// @param _admin New system admin\\n    function _setAdmin(address _admin) internal {\\n        AdministratorAddress.set(_admin);\\n    }\\n\\n    /// @notice Sets the pending system admin\\n    /// @param _pendingAdmin New pending system admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        PendingAdministratorAddress.set(_pendingAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0xbe4cec02aff69406624f3ab71a19948997aaf74f63e171137f2f3b85bdb7bc3a\",\"license\":\"MIT\"},\"contracts/src/libraries/LibAllowlistMasks.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Lib Allowlist Masks\\n/// @notice Holds all the mask values\\nlibrary LibAllowlistMasks {\\n    /// @notice Mask used for denied accounts\\n    uint256 internal constant DENY_MASK = 0x1 << 255;\\n    /// @notice The mask for the deposit right\\n    uint256 internal constant DEPOSIT_MASK = 0x1;\\n    /// @notice The mask for the donation right\\n    uint256 internal constant DONATE_MASK = 0x1 << 1;\\n}\\n\",\"keccak256\":\"0x175df47238ed2b1731374ab41fb3118facbe30f16d0e0c2bedd6d2d192d48038\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibBasisPoints.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Lib Basis Points\\n/// @notice Holds the basis points max value\\nlibrary LibBasisPoints {\\n    /// @notice The max value for basis points (represents 100%)\\n    uint256 internal constant BASIS_POINTS_MAX = 10_000;\\n}\\n\",\"keccak256\":\"0x97228a01dcd48f033555e3a44f9be37fb474a1b027f703f28097d539808f1c6c\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibBytes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Bytes\\n/// @notice This library helps manipulating bytes\\nlibrary LibBytes {\\n    /// @notice The length overflows an uint\\n    error SliceOverflow();\\n\\n    /// @notice The slice is outside of the initial bytes bounds\\n    error SliceOutOfBounds();\\n\\n    /// @notice Slices the provided bytes\\n    /// @param _bytes Bytes to slice\\n    /// @param _start The starting index of the slice\\n    /// @param _length The length of the slice\\n    /// @return The slice of _bytes starting at _start of length _length\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\n        unchecked {\\n            if (_length + 31 < _length) {\\n                revert SliceOverflow();\\n            }\\n        }\\n        if (_bytes.length < _start + _length) {\\n            revert SliceOutOfBounds();\\n        }\\n\\n        bytes memory tempBytes;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } { mstore(mc, mload(cc)) }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xbcc2d6e851fd5e66e5661856fa089fadd69150c75e07978d89faf6ea8d867234\",\"license\":\"MIT\"},\"contracts/src/libraries/LibErrors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Errors\\n/// @notice Library of common errors\\nlibrary LibErrors {\\n    /// @notice The operator is unauthorized for the caller\\n    /// @param caller Address performing the call\\n    error Unauthorized(address caller);\\n\\n    /// @notice The call was invalid\\n    error InvalidCall();\\n\\n    /// @notice The argument was invalid\\n    error InvalidArgument();\\n\\n    /// @notice The address is zero\\n    error InvalidZeroAddress();\\n\\n    /// @notice The string is empty\\n    error InvalidEmptyString();\\n\\n    /// @notice The fee is invalid\\n    error InvalidFee();\\n}\\n\",\"keccak256\":\"0x7bdbd4ada124723fa08e2088405ba0bf4453beb23d84f4af09e894e06e751f33\",\"license\":\"MIT\"},\"contracts/src/libraries/LibSanitize.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./LibErrors.sol\\\";\\nimport \\\"./LibBasisPoints.sol\\\";\\n\\n/// @title Lib Sanitize\\n/// @notice Utilities to sanitize input values\\nlibrary LibSanitize {\\n    /// @notice Reverts if address is 0\\n    /// @param _address Address to check\\n    function _notZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert LibErrors.InvalidZeroAddress();\\n        }\\n    }\\n\\n    /// @notice Reverts if string is empty\\n    /// @param _string String to check\\n    function _notEmptyString(string memory _string) internal pure {\\n        if (bytes(_string).length == 0) {\\n            revert LibErrors.InvalidEmptyString();\\n        }\\n    }\\n\\n    /// @notice Reverts if fee is invalid\\n    /// @param _fee Fee to check\\n    function _validFee(uint256 _fee) internal pure {\\n        if (_fee > LibBasisPoints.BASIS_POINTS_MAX) {\\n            revert LibErrors.InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8aeeb866c4657a96c8b4c006340c7996d15a6f0044b730c276bc3ba8d5bcd48\",\"license\":\"MIT\"},\"contracts/src/libraries/LibUint256.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Uint256\\n/// @notice Utilities to perform uint operations\\nlibrary LibUint256 {\\n    /// @notice Converts a value to little endian (64 bits)\\n    /// @param _value The value to convert\\n    /// @return result The converted value\\n    function toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n        result = 0;\\n        uint256 tempValue = _value;\\n        result = tempValue & 0xFF;\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        assert(0 == tempValue); // fully converted\\n        result <<= (24 * 8);\\n    }\\n\\n    /// @notice Returns the minimum value\\n    /// @param _a First value\\n    /// @param _b Second value\\n    /// @return Smallest value between _a and _b\\n    function min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a > _b ? _b : _a);\\n    }\\n}\\n\",\"keccak256\":\"0xac75e924b50fa887249f6435a710d691f25e95973466f4c91ac4f5d49a2ece4a\",\"license\":\"MIT\"},\"contracts/src/libraries/LibUnstructuredStorage.sol\":{\"content\":\"// SPDX-License-Identifier:    MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @title Lib Unstructured Storage\\n/// @notice Utilities to work with unstructured storage\\nlibrary LibUnstructuredStorage {\\n    /// @notice Retrieve a bool value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bool value\\n    function getStorageBool(bytes32 _position) internal view returns (bool data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an address value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The address value\\n    function getStorageAddress(bytes32 _position) internal view returns (address data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve a bytes32 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bytes32 value\\n    function getStorageBytes32(bytes32 _position) internal view returns (bytes32 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an uint256 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The uint256 value\\n    function getStorageUint256(bytes32 _position) internal view returns (uint256 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Sets a bool value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bool value to set\\n    function setStorageBool(bytes32 _position, bool _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an address value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The address value to set\\n    function setStorageAddress(bytes32 _position, address _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets a bytes32 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bytes32 value to set\\n    function setStorageBytes32(bytes32 _position, bytes32 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an uint256 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The uint256 value to set\\n    function setStorageUint256(bytes32 _position, uint256 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8e1a2f0dc18e023e12747355b3c95258d4de698f2bb6196222a1dc92940caa3\",\"license\":\"MIT\"},\"contracts/src/state/operatorsRegistry/Operators.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Operators Storage\\n/// @notice Utility to manage the Operators in storage\\nlibrary Operators {\\n    /// @notice Storage slot of the Operators\\n    bytes32 internal constant OPERATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.operators\\\")) - 1);\\n\\n    /// @notice The Operator structure in storage\\n    struct Operator {\\n        /// @custom:attribute True if the operator is active and allowed to operate on River\\n        bool active;\\n        /// @custom:attribute Display name of the operator\\n        string name;\\n        /// @custom:attribute Address of the operator\\n        address operator;\\n        /// @dev The following values respect this invariant:\\n        /// @dev     keys >= limit >= funded >= stopped\\n\\n        /// @custom:attribute Staking limit of the operator\\n        uint256 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint256 funded;\\n        /// @custom:attribute The total count of keys of the operator\\n        uint256 keys;\\n        /// @custom:attribute The count of stopped validators. Stopped validators are validators\\n        ///                   that exited the consensus layer (voluntary or slashed)\\n        uint256 stopped;\\n        uint256 latestKeysEditBlockNumber;\\n    }\\n\\n    /// @notice The Operator structure when loaded in memory\\n    struct CachedOperator {\\n        /// @custom:attribute True if the operator is active and allowed to operate on River\\n        bool active;\\n        /// @custom:attribute Display name of the operator\\n        string name;\\n        /// @custom:attribute Address of the operator\\n        address operator;\\n        /// @custom:attribute Staking limit of the operator\\n        uint256 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint256 funded;\\n        /// @custom:attribute The total count of keys of the operator\\n        uint256 keys;\\n        /// @custom:attribute The count of stopped validators\\n        uint256 stopped;\\n        /// @custom:attribute The count of stopped validators. Stopped validators are validators\\n        ///                   that exited the consensus layer (voluntary or slashed)\\n        uint256 index;\\n        /// @custom:attribute The amount of picked keys, buffer used before changing funded in storage\\n        uint256 picked;\\n    }\\n\\n    /// @notice The structure at the storage slot\\n    struct SlotOperator {\\n        /// @custom:attribute Array containing all the operators\\n        Operator[] value;\\n    }\\n\\n    /// @notice The operator was not found\\n    /// @param index The provided index\\n    error OperatorNotFound(uint256 index);\\n\\n    /// @notice Retrieve the operator in storage\\n    /// @param _index The index of the operator\\n    /// @return The Operator structure\\n    function get(uint256 _index) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (r.value.length <= _index) {\\n            revert OperatorNotFound(_index);\\n        }\\n\\n        return r.value[_index];\\n    }\\n\\n    /// @notice Retrieve the operator count in storage\\n    /// @return The count of operators in storage\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Retrieve all the active operators\\n    /// @return The list of active operator structures\\n    function getAllActive() internal view returns (Operator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        Operator[] memory activeOperators = new Operator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                activeOperators[activeIdx] = r.value[idx];\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    /// @notice Retrieve all the active and fundable operators\\n    /// @return The list of active and fundable operators\\n    function getAllFundable() internal view returns (CachedOperator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (_hasFundableKeys(r.value[idx])) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        CachedOperator[] memory activeOperators = new CachedOperator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            Operator memory op = r.value[idx];\\n            if (_hasFundableKeys(op)) {\\n                activeOperators[activeIdx] = CachedOperator({\\n                    active: op.active,\\n                    name: op.name,\\n                    operator: op.operator,\\n                    limit: op.limit,\\n                    funded: op.funded,\\n                    keys: op.keys,\\n                    stopped: op.stopped,\\n                    index: idx,\\n                    picked: 0\\n                });\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    /// @notice Add a new operator in storage\\n    /// @param _newOperator Value of the new operator\\n    /// @return The size of the operator array after the operation\\n    function push(Operator memory _newOperator) internal returns (uint256) {\\n        LibSanitize._notZeroAddress(_newOperator.operator);\\n        LibSanitize._notEmptyString(_newOperator.name);\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_newOperator);\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Atomic operation to set the key count and update the latestKeysEditBlockNumber field at the same time\\n    /// @param _index The operator index\\n    /// @param _newKeys The new value for the key count\\n    function setKeys(uint256 _index, uint256 _newKeys) internal {\\n        Operator storage op = get(_index);\\n\\n        op.keys = _newKeys;\\n        op.latestKeysEditBlockNumber = block.number;\\n    }\\n\\n    /// @notice Checks if an operator is active and has fundable keys\\n    /// @param _operator The operator details\\n    /// @return True if active and fundable\\n    function _hasFundableKeys(Operators.Operator memory _operator) internal pure returns (bool) {\\n        return (_operator.active && _operator.limit > _operator.funded);\\n    }\\n}\\n\",\"keccak256\":\"0xded9f69550674563fe324c95487bdf9e6cad7390064209bdce2afde8dad8f0e2\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/AllowlistAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Allowlist Address Storage\\n/// @notice Utility to manage the Allowlist Address in storage\\nlibrary AllowlistAddress {\\n    /// @notice Storage slot of the Allowlist Address\\n    bytes32 internal constant ALLOWLIST_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowlistAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Allowlist Address\\n    /// @return The Allowlist Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ALLOWLIST_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Allowlist Address\\n    /// @param _newValue New Allowlist Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ALLOWLIST_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xe672508958c0fe402a54d0f1fe6709139a8eccc3d702808839a912660867c427\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/BalanceToDeposit.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\nlibrary BalanceToDeposit {\\n    bytes32 internal constant BALANCE_TO_DEPOSIT_SLOT = bytes32(uint256(keccak256(\\\"river.state.balanceToDeposit\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(BALANCE_TO_DEPOSIT_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(BALANCE_TO_DEPOSIT_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x8c8224d1511fa4ad8816e55b28a939c7a69243531c053d876bbdda5aa21b8b7e\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/CLValidatorCount.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Consensus Layer Validator Count Storage\\n/// @notice Utility to manage the Consensus Layer Validator Count in storage\\nlibrary CLValidatorCount {\\n    /// @notice Storage slot of the Consensus Layer Validator Count\\n    bytes32 internal constant CL_VALIDATOR_COUNT_SLOT = bytes32(uint256(keccak256(\\\"river.state.clValidatorCount\\\")) - 1);\\n\\n    /// @notice Retrieve the Consensus Layer Validator Count\\n    /// @return The Consensus Layer Validator Count\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(CL_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    /// @notice Sets the Consensus Layer Validator Count\\n    /// @param _newValue New Consensus Layer Validator Count\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(CL_VALIDATOR_COUNT_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x269674254e7f8dd80cd49f9dc2d73722d55d515a90f0b371379c9705fd08019a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/CLValidatorTotalBalance.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Consensus Layer Validator Total Balance Storage\\n/// @notice Utility to manage the Consensus Layer Validator Total Balance in storage\\nlibrary CLValidatorTotalBalance {\\n    /// @notice Storage slot of the Consensus Layer Validator Total Balance\\n    bytes32 internal constant CL_VALIDATOR_TOTAL_BALANCE_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.clValidatorTotalBalance\\\")) - 1);\\n\\n    /// @notice Retrieve the Consensus Layer Validator Total Balance\\n    /// @return The Consensus Layer Validator Total Balance\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(CL_VALIDATOR_TOTAL_BALANCE_SLOT);\\n    }\\n\\n    /// @notice Sets the Consensus Layer Validator Total Balance\\n    /// @param _newValue New Consensus Layer Validator Total Balance\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(CL_VALIDATOR_TOTAL_BALANCE_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x0ff559b3022c51bca1fd9376cbb8bbf3a3880a6450adfddf0f298b16bd26784a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/CollectorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Collector Address Storage\\n/// @notice Utility to manage the Collector Address in storage\\nlibrary CollectorAddress {\\n    /// @notice Storage slot of the Collector Address\\n    bytes32 internal constant COLLECTOR_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.collectorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Collector Address\\n    /// @return The Collector Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(COLLECTOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Collector Address\\n    /// @param _newValue New Collector Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(COLLECTOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x48c4333c0c6ba2c425fd252763df7a0ccf89b4e9b0c06336ae2835c1c386e8c9\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/CoverageFundAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Coverage Fund Address Storage\\n/// @notice Utility to manage the Coverage Fund Address in storage\\nlibrary CoverageFundAddress {\\n    /// @notice Storage slot of the Coverage Fund Address\\n    bytes32 internal constant COVERAGE_FUND_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.coverageFundAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Coverage Fund Address\\n    /// @return The Coverage Fund Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(COVERAGE_FUND_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Coverage Fund Address\\n    /// @param _newValue New Coverage Fund Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(COVERAGE_FUND_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x9112407368dd7e1bc872bd505fca120cdd5d83d32bb109e58e7f04bb3ead7ba9\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DepositContractAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Deposit Contract Address Storage\\n/// @notice Utility to manage the Deposit Contract Address in storage\\nlibrary DepositContractAddress {\\n    /// @notice Storage slot of the Deposit Contract Address\\n    bytes32 internal constant DEPOSIT_CONTRACT_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositContractAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Deposit Contract Address\\n    /// @return The Deposit Contract Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Deposit Contract Address\\n    /// @param _newValue New Deposit Contract Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xfb0bc93b1c175e0461de84b3e37d9361765c8599b9c6daec97e5b5e763246516\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DepositedValidatorCount.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Deposited Validator Count Storage\\n/// @notice Utility to manage the Deposited Validator Count in storage\\nlibrary DepositedValidatorCount {\\n    /// @notice Storage slot of the Deposited Validator Count\\n    bytes32 internal constant DEPOSITED_VALIDATOR_COUNT_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositedValidatorCount\\\")) - 1);\\n\\n    /// @notice Retrieve the Deposited Validator Count\\n    /// @return The Deposited Validator Count\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    /// @notice Sets the Deposited Validator Count\\n    /// @param _newValue New Deposited Validator Count\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x3ba204f875f9b521cf584abc94db9ba4fe9cb87a49c47da3892f339fb37cf683\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/ELFeeRecipientAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Execution Layer Fee Recipient Address Storage\\n/// @notice Utility to manage the Execution Layer Fee Recipient Address in storage\\nlibrary ELFeeRecipientAddress {\\n    /// @notice Storage slot of the Execution Layer Fee Recipient Address\\n    bytes32 internal constant EL_FEE_RECIPIENT_ADDRESS =\\n        bytes32(uint256(keccak256(\\\"river.state.elFeeRecipientAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Execution Layer Fee Recipient Address\\n    /// @return The Execution Layer Fee Recipient Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(EL_FEE_RECIPIENT_ADDRESS);\\n    }\\n\\n    /// @notice Sets the Execution Layer Fee Recipient Address\\n    /// @param _newValue New Execution Layer Fee Recipient Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(EL_FEE_RECIPIENT_ADDRESS, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x40cf4bdda104abbba17ca07cbf2592a075d106d3b054d9ff9f58b88be7765783\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/GlobalFee.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Global Fee Storage\\n/// @notice Utility to manage the Global Fee in storage\\nlibrary GlobalFee {\\n    /// @notice Storage slot of the Global Fee\\n    bytes32 internal constant GLOBAL_FEE_SLOT = bytes32(uint256(keccak256(\\\"river.state.globalFee\\\")) - 1);\\n\\n    /// @notice Retrieve the Global Fee\\n    /// @return The Global Fee\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(GLOBAL_FEE_SLOT);\\n    }\\n\\n    /// @notice Sets the Global Fee\\n    /// @param _newValue New Global Fee\\n    function set(uint256 _newValue) internal {\\n        LibSanitize._validFee(_newValue);\\n        LibUnstructuredStorage.setStorageUint256(GLOBAL_FEE_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x74f858f1133151fd85ce17150d4084e226cbb6d37396eb903258ea1b50731401\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/LastOracleRoundId.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Last Oracle Round Id Storage\\n/// @notice Utility to manage the Last Oracle Round Id in storage\\nlibrary LastOracleRoundId {\\n    /// @notice Storage slot of the Last Oracle Round Id\\n    bytes32 internal constant LAST_ORACLE_ROUND_ID_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.lastOracleRoundId\\\")) - 1);\\n\\n    /// @notice Retrieve the Last Oracle Round Id\\n    /// @return The Last Oracle Round Id\\n    function get() internal view returns (bytes32) {\\n        return LibUnstructuredStorage.getStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT);\\n    }\\n\\n    /// @notice Sets the Last Oracle Round Id\\n    /// @param _newValue New Last Oracle Round Id\\n    function set(bytes32 _newValue) internal {\\n        LibUnstructuredStorage.setStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xdcbff9faeea8aee1bf267af035e08abe9431e3bf995624b93611e50dbd09e5f4\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/MetadataURI.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Metadata URI Storage\\n/// @notice Utility to manage the Metadata in storage\\nlibrary MetadataURI {\\n    /// @notice Storage slot of the Metadata URI\\n    bytes32 internal constant METADATA_URI_SLOT = bytes32(uint256(keccak256(\\\"river.state.metadataUri\\\")) - 1);\\n\\n    /// @notice Structure in storage\\n    struct Slot {\\n        /// @custom:attribute The metadata value\\n        string value;\\n    }\\n\\n    /// @notice Retrieve the metadata URI\\n    /// @return The metadata URI string\\n    function get() internal view returns (string memory) {\\n        bytes32 slot = METADATA_URI_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the metadata URI value\\n    /// @param _newValue The new metadata URI value\\n    function set(string memory _newValue) internal {\\n        bytes32 slot = METADATA_URI_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0xd9fd334a98ad315fb76752bd345a7393035248a8d3ab833b4a254ec44655d99b\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/OperatorsRegistryAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Operators Registry Address Storage\\n/// @notice Utility to manage the Operators Registry Address in storage\\nlibrary OperatorsRegistryAddress {\\n    /// @notice Storage slot of the Operators Registry Address\\n    bytes32 internal constant OPERATORS_REGISTRY_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.operatorsRegistryAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Operators Registry Address\\n    /// @return The Operators Registry Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(OPERATORS_REGISTRY_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Operators Registry Address\\n    /// @param _newValue New Operators Registry Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(OPERATORS_REGISTRY_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x4f4ec440487085e8d7cd820fa42770529ae56efc775b6a0764604e089af20fa3\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/OracleAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Oracle Address Storage\\n/// @notice Utility to manage the Oracle Address in storage\\nlibrary OracleAddress {\\n    /// @notice Storage slot of the Oracle Address\\n    bytes32 internal constant ORACLE_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.oracleAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Oracle Address\\n    /// @return The Oracle Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ORACLE_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Oracle Address\\n    /// @param _newValue New Oracle Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ORACLE_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x85b7199ab1d327987121c384209b413cb4e4506a36c583b442abd6f6fa323dd9\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/Shares.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Shares Count Storage\\n/// @notice Utility to manage the Shares Count in storage\\nlibrary Shares {\\n    /// @notice Storage slot of the Shares Count\\n    bytes32 internal constant SHARES_SLOT = bytes32(uint256(keccak256(\\\"river.state.shares\\\")) - 1);\\n\\n    /// @notice Retrieve the Shares Count\\n    /// @return The Shares Count\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(SHARES_SLOT);\\n    }\\n\\n    /// @notice Sets the Shares Count\\n    /// @param _newValue New Shares Count\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(SHARES_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xc56d66f15acf56b321b9c6f41b3845db73d64987b9c62b1d763457768725de8b\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/SharesPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Shares Per Owner Storage\\n/// @notice Utility to manage the Shares Per Owner in storage\\nlibrary SharesPerOwner {\\n    /// @notice Storage slot of the Shares Per Owner\\n    bytes32 internal constant SHARES_PER_OWNER_SLOT = bytes32(uint256(keccak256(\\\"river.state.sharesPerOwner\\\")) - 1);\\n\\n    /// @notice Structure in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from an owner to its share count\\n        mapping(address => uint256) value;\\n    }\\n\\n    /// @notice Retrieve the share count for given owner\\n    /// @param _owner The address to get the balance of\\n    /// @return The amount of shares\\n    function get(address _owner) internal view returns (uint256) {\\n        bytes32 slot = SHARES_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_owner];\\n    }\\n\\n    /// @notice Set the amount of shares for an owner\\n    /// @param _owner The owner of the shares to edit\\n    /// @param _newValue The new shares value for the owner\\n    function set(address _owner, uint256 _newValue) internal {\\n        bytes32 slot = SHARES_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_owner] = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0xc1043c3f40dc90c7de21b938033b8c7492f070e05848d30190e313a55988df5a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/WithdrawalCredentials.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibErrors.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Withdrawal Credentials Storage\\n/// @notice Utility to manage the Withdrawal Credentials in storage\\nlibrary WithdrawalCredentials {\\n    /// @notice Storage slot of the Withdrawal Credentials\\n    bytes32 internal constant WITHDRAWAL_CREDENTIALS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.withdrawalCredentials\\\")) - 1);\\n\\n    /// @notice Retrieve the Withdrawal Credentials\\n    /// @return The Withdrawal Credentials\\n    function get() internal view returns (bytes32) {\\n        return LibUnstructuredStorage.getStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT);\\n    }\\n\\n    /// @notice Sets the Withdrawal Credentials\\n    /// @param _newValue New Withdrawal Credentials\\n    function set(bytes32 _newValue) internal {\\n        if (_newValue == bytes32(0)) {\\n            revert LibErrors.InvalidArgument();\\n        }\\n        LibUnstructuredStorage.setStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xc18e535754adfcbfce56e3b0df37de4ac59b741b70e0b8c3e0dedb36b0266bca\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrator Address Storage\\n/// @notice Utility to manage the Administrator Address in storage\\nlibrary AdministratorAddress {\\n    /// @notice Storage slot of the Administrator Address\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Administrator Address\\n    /// @return The Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Administrator Address\\n    /// @param _newValue New Administrator Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x4f702b4454858199ca8fd15ef1cee63d9dc3d4d8f2ff7a2f859a4e151e46e8ec\",\"license\":\"MIT\"},\"contracts/src/state/shared/ApprovalsPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Approvals Per Owner Storage\\n/// @notice Utility to manage the Approvals Per Owner in storage\\nlibrary ApprovalsPerOwner {\\n    /// @notice Storage slot of the Approvals Per Owner\\n    bytes32 internal constant APPROVALS_PER_OWNER_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.approvalsPerOwner\\\")) - 1);\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from an owner to an operator to the approval amount\\n        mapping(address => mapping(address => uint256)) value;\\n    }\\n\\n    /// @notice Retrieve the approval for an owner to an operator\\n    /// @param _owner The account that gave the approval\\n    /// @param _operator The account receiving the approval\\n    /// @return The value of the approval\\n    function get(address _owner, address _operator) internal view returns (uint256) {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_owner][_operator];\\n    }\\n\\n    /// @notice Set the approval value for an owner to an operator\\n    /// @param _owner The account that gives the approval\\n    /// @param _operator The account receiving the approval\\n    /// @param _newValue The value of the approval\\n    function set(address _owner, address _operator, uint256 _newValue) internal {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_owner][_operator] = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0xc8ec39447b09747e3cfff1c456743b4f52fafbd994122ebf8285035fc497c95c\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/PendingAdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Pending Administrator Address Storage\\n/// @notice Utility to manage the Pending Administrator Address in storage\\nlibrary PendingAdministratorAddress {\\n    /// @notice Storage slot of the Pending Administrator Address\\n    bytes32 public constant PENDING_ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.pendingAdministratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Pending Administrator Address\\n    /// @return The Pending Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Pending Administrator Address\\n    /// @param _newValue New Pending Administrator Address\\n    function set(address _newValue) internal {\\n        LibUnstructuredStorage.setStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x2164cafa435d1e1650037164e2b094ca3af00cc68e05b59140406aa59b1949f2\",\"license\":\"MIT\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Version Storage\\n/// @notice Utility to manage the Version in storage\\nlibrary Version {\\n    /// @notice Storage slot of the Version\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    /// @notice Retrieve the Version\\n    /// @return The Version\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    /// @notice Sets the Version\\n    /// @param _newValue New Version\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(VERSION_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x82f1cc4bbb1f16c1cdbac93596334805eb1a2e0e40ccbd0ab0f78e22d3f83864\",\"license\":\"BUSL-1.1\"},\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}"
        ],
        "bytecode": [
            "0x608060405234801561001057600080fd5b50613063806100206000396000f3fe60806040526004361061026b5760003560e01c80635639671511610144578063a9059cbb116100b6578063d04681561161007a578063d0468156146106e6578063d0e30db0146106fb578063dd62ed3e14610703578063efd6034714610723578063f79c3f021461072b578063fb5b82d01461074b5761027b565b8063a9059cbb14610669578063ac232bde14610689578063bf15af561461069c578063c5eff3d0146106b1578063cc48cd31146106c65761027b565b80637adbf973116101085780637adbf973146105bc578063833b1fce146105dc57806387f2adfb146105f157806395d89b41146106065780639b498e2614610634578063a457c2d7146106495761027b565b8063563967151461053257806358bf3c7f146105475780636e9960c31461056757806370a082311461057c578063799a19541461059c5761027b565b806323b872dd116101dd57806336bf3325116101a157806336bf33251461049657806339509351146104b35780633af9e669146104d357806346425ef0146104f35780635022820114610508578063540bc5ea1461051d5761027b565b806323b872dd146103f8578063281a312214610418578063291206f6146104385780632cb562e114610458578063313ce5671461047a5761027b565b80631311cf8d1161022f5780631311cf8d1461035957806313d86aed14610379578063143a08d414610399578063147bf6c4146103ae57806318160ddd146103ce5780631bcbfaba146103e35761027b565b806304843a171461029457806306fdde03146102bc578063095ea7b3146102ff5780630e18b6811461032f578063107d7fa0146103445761027b565b3661027b576102793361076b565b005b60405163574b16a760e11b815260040160405180910390fd5b3480156102a057600080fd5b506102a96107f2565b6040519081526020015b60405180910390f35b3480156102c857600080fd5b50604080518082019091526011815270098d2e2ead2c840a6e8c2d6cac8408aa89607b1b60208201525b6040516102b39190612ae6565b34801561030b57600080fd5b5061031f61031a366004612b15565b610801565b60405190151581526020016102b3565b34801561033b57600080fd5b50610279610857565b34801561035057600080fd5b506102a96108b7565b34801561036557600080fd5b50610279610374366004612b3f565b6108c1565b34801561038557600080fd5b50610279610394366004612b5a565b61093c565b3480156103a557600080fd5b506102a9610af5565b3480156103ba57600080fd5b506102796103c9366004612b3f565b610aff565b3480156103da57600080fd5b506102a9610b46565b3480156103ef57600080fd5b506102a9610b50565b34801561040457600080fd5b5061031f610413366004612b73565b610b5a565b34801561042457600080fd5b50610279610433366004612baf565b610c0d565b34801561044457600080fd5b50610279610453366004612b5a565b610def565b34801561046457600080fd5b5061046d610e69565b6040516102b39190612c49565b34801561048657600080fd5b50604051601281526020016102b3565b3480156104a257600080fd5b506102a96801bc16d674ec80000081565b3480156104bf57600080fd5b5061031f6104ce366004612b15565b610e73565b3480156104df57600080fd5b506102a96104ee366004612b3f565b610ee3565b3480156104ff57600080fd5b506102a9610efc565b34801561051457600080fd5b5061046d610f06565b34801561052957600080fd5b506102a9606081565b34801561053e57600080fd5b506102a9610f10565b34801561055357600080fd5b50610279610562366004612b3f565b610f1a565b34801561057357600080fd5b5061046d610f95565b34801561058857600080fd5b506102a9610597366004612b3f565b610f9f565b3480156105a857600080fd5b506102a96105b7366004612b5a565b610faa565b3480156105c857600080fd5b506102796105d7366004612b3f565b610fb5565b3480156105e857600080fd5b5061046d611030565b3480156105fd57600080fd5b506102a961103a565b34801561061257600080fd5b50604080518082019091526005815264098e68aa8960db1b60208201526102f2565b34801561064057600080fd5b5061046d611044565b34801561065557600080fd5b5061031f610664366004612b15565b61104e565b34801561067557600080fd5b5061031f610684366004612b15565b611066565b610279610697366004612b3f565b611105565b3480156106a857600080fd5b506102a9603081565b3480156106bd57600080fd5b5061046d611117565b3480156106d257600080fd5b506102796106e1366004612c5d565b611121565b3480156106f257600080fd5b5061046d61129b565b6102796112a5565b34801561070f57600080fd5b506102a961071e366004612c8f565b6112ae565b6102796112c1565b34801561073757600080fd5b506102a9610746366004612b5a565b6112fc565b34801561075757600080fd5b50610279610766366004612b3f565b611307565b34610789576040516395b66fe960e01b815260040160405180910390fd5b6107a434610795611382565b61079f9190612cd8565b6113b6565b6107af3382346113e9565b6040513481526001600160a01b0382169033907f3bc57f469ad6d10d7723ea226cd22bd2b9e527def2b529f6ab44645a166895829060200160405180910390a350565b60006107fc611382565b905090565b600061080e338484611583565b6040518281526001600160a01b0384169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259060200160405180910390a350600192915050565b61085f6115da565b6001600160a01b0316336001600160a01b03161461089b573360405163472511eb60e11b81526004016108929190612c49565b60405180910390fd5b6108ab6108a66115da565b6115e4565b6108b5600061162d565b565b60006107fc61166d565b6108c961169d565b6001600160a01b0316336001600160a01b0316146108fc573360405163472511eb60e11b81526004016108929190612c49565b610905816116a7565b6040516001600160a01b038216907f1da4c245099590dc40be61880c9b97792f3694d970acc1e67ac0e6cc90f3780d90600090a250565b6109446116d5565b6001600160a01b0316336001600160a01b031614610977573360405163472511eb60e11b81526004016108929190612c49565b6000610981611382565b905060006109a161099b6801bc16d674ec80000084612cf0565b846116df565b9050806109c157604051631036b5ad60e31b815260040160405180910390fd5b6000806109cd836116f4565b81519193509150806109f25760405163200149ad60e21b815260040160405180910390fd5b83811115610a1357604051635993bd5760e01b815260040160405180910390fd5b8151818114610a35576040516322e5ce4360e21b815260040160405180910390fd5b6000610a3f61177c565b905080610a5f57604051639be7315960e01b815260040160405180910390fd5b60005b83811015610aaf57610aa7868281518110610a7f57610a7f612d12565b6020026020010151868381518110610a9957610a99612d12565b6020026020010151846117ac565b600101610a62565b50610ad0610ac6846801bc16d674ec800000612d28565b61079f9089612d47565b610aeb83610adc611c34565b610ae69190612cd8565b611c64565b5050505050505050565b60006107fc611c92565b610b0761169d565b6001600160a01b0316336001600160a01b031614610b3a573360405163472511eb60e11b81526004016108929190612c49565b610b438161162d565b50565b60006107fc611d0c565b60006107fc611d16565b60008383610b688282611d46565b8380610b87576040516336b216db60e21b815260040160405180910390fd5b868580610b9383611e72565b1015610bb2576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b038816610beb57604051637617407560e11b81526001600160a01b038a16600482015260006024820152604401610892565b610bf58988611e7d565b610c00898989611ee8565b9998505050505050505050565b6000610c17611f64565b8114610c485780610c26611f64565b604051631cfd276760e31b815260048101929092526024820152604401610892565b610c5b610c56826001612cd8565b611f94565b610c64866115e4565b610c6d83611fc2565b6040516001600160a01b038416907f0cc5437d7c9c1d9eab549acbb533eea3e9868e9443dd75309ed5820b33a3774e90600090a2610caa82611ff9565b6040518281527fbd533e726baaf59b36f3914d950053f7e78f527057c97cd3f0043257fc0fc8849060200160405180910390a1610ce6896116a7565b6040516001600160a01b038a16907f1da4c245099590dc40be61880c9b97792f3694d970acc1e67ac0e6cc90f3780d90600090a2610d2385612030565b6040516001600160a01b038616907f30f015a5d3c72c0a9414538199baa022323a483fa9e4ba2cd581596cf8ca042490600090a2610d6084612067565b6040516001600160a01b038516907fffc0721ef0563a1b0a51a0dc92113025f33ca434ada9ee3eebff2f385d2a8f9a90600090a2610d9e8a8961209e565b610da787610ff0565b7f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610ddb93929190612d5e565b60405180910390a150505050505050505050565b610df761169d565b6001600160a01b0316336001600160a01b031614610e2a573360405163472511eb60e11b81526004016108929190612c49565b610e3381611ff9565b6040518181527fbd533e726baaf59b36f3914d950053f7e78f527057c97cd3f0043257fc0fc8849060200160405180910390a150565b60006107fc61211a565b60008082610e81338661214a565b610e8b9190612cd8565b9050610e98338583611583565b6040518181526001600160a01b0385169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906020015b60405180910390a35060019392505050565b6000610ef6610ef1836121a2565b6121f0565b92915050565b60006107fc612228565b60006107fc612258565b60006107fc61177c565b610f2261169d565b6001600160a01b0316336001600160a01b031614610f55573360405163472511eb60e11b81526004016108929190612c49565b610f5e81612030565b6040516001600160a01b038216907f30f015a5d3c72c0a9414538199baa022323a483fa9e4ba2cd581596cf8ca042490600090a250565b60006107fc61169d565b6000610ef682611e72565b6000610ef682612288565b610fbd6116d5565b6001600160a01b0316336001600160a01b031614610ff0573360405163472511eb60e11b81526004016108929190612c49565b610ff9816122b5565b6040516001600160a01b038216907fd3b5d1e0ffaeff528910f3663f0adace7694ab8241d58e17a91351ced2e0803190600090a250565b60006107fc6122ec565b60006107fc611c34565b60006107fc61231c565b6000808261105c338661214a565b610e8b9190612d47565b600033836110748282611d46565b8380611093576040516336b216db60e21b815260040160405180910390fd5b33858061109f83611e72565b10156110be576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b0388166110ee57604051637617407560e11b815233600482015260006024820152604401610892565b6110f9338989611ee8565b98975050505050505050565b61110e8161234c565b610b438161076b565b60006107fc612373565b6111296122ec565b6001600160a01b0316336001600160a01b03161461115c573360405163472511eb60e11b81526004016108929190612c49565b611164611c34565b8411156111965783611174611c34565b6040516376179ac560e01b815260048101929092526024820152604401610892565b60006111a061166d565b6111aa9086612d47565b905060006111c1826801bc16d674ec800000612d28565b6111c9612228565b6111d39190612cd8565b90506111de856123a3565b6111e7866123d1565b6111f0846123ff565b6000856111fd8386612cd8565b111561122357611220866112118487612cd8565b61121b9190612d47565b61242d565b90505b61122d8187612cd8565b82101561125157611251826112428389612cd8565b61124c9190612d47565b612504565b60408051888152602081018890529081018690527f25d7358447891786a139ae7149548f3232a8c95f2ea6065c69c5bd7c39cd386c9060600160405180910390a150505050505050565b60006107fc6115da565b6108b53361076b565b60006112ba838361214a565b9392505050565b6112c961211a565b6001600160a01b0316336001600160a01b0316146108b5573360405163472511eb60e11b81526004016108929190612c49565b6000610ef6826121f0565b61130f61169d565b6001600160a01b0316336001600160a01b031614611342573360405163472511eb60e11b81526004016108929190612c49565b61134b81611fc2565b6040516001600160a01b038216907f0cc5437d7c9c1d9eab549acbb533eea3e9868e9443dd75309ed5820b33a3774e90600090a250565b60006107fc6113b260017f2b6136e423ab70d76431e2a635e877e16ea2dd9a895e054ad7f35f89d6c7b711612d47565b5490565b610b436113e460017f2b6136e423ab70d76431e2a635e877e16ea2dd9a895e054ad7f35f89d6c7b711612d47565b829055565b60006113f58483612636565b90506000611401612373565b9050836001600160a01b0316856001600160a01b0316141561148257604051632d20488160e11b81526001600160a01b03868116600483015260016024830152821690635a4091029060440160006040518083038186803b15801561146557600080fd5b505afa158015611479573d6000803e3d6000fd5b5050505061157c565b604051632d20488160e11b81526001600160a01b03868116600483015260016024830152821690635a4091029060440160006040518083038186803b1580156114ca57600080fd5b505afa1580156114de573d6000803e3d6000fd5b505060405163e838dfbb60e01b81526001600160a01b038416925063e838dfbb915061150e908790600401612c49565b602060405180830381865afa15801561152b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154f9190612d94565b1561156f578360405163e7d05e2760e01b81526004016108929190612c49565b61157a858584611ee8565b505b5050505050565b60006115b060017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847612d47565b6001600160a01b039485166000908152602091825260408082209590961681529390525091902055565b60006107fc612695565b6115ed8161234c565b6115f6816126c5565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b611636816126ce565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b60006107fc6113b260017f0f1e7733641e4d843128fea0d2ec90d3d06a40b0fe244ff603d8c1aa200dc0f9612d47565b60006107fc6126d7565b610b436113e460017f8e9e2a1d30fed357d8a000c1131fc77ed65d2052918caf1ccc6eb1e7af3d13b6612d47565b60006107fc610f95565b60008183116116ee57826112ba565b50919050565b6060806116ff61231c565b6001600160a01b031663a1947323846040518263ffffffff1660e01b815260040161172c91815260200190565b6000604051808303816000875af115801561174b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117739190810190612ee2565b91509150915091565b60006107fc6113b260017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42612d47565b60308351146117ce5760405163050cb55360e41b815260040160405180910390fd5b60608251146117f05760405163408ebd3960e01b815260040160405180910390fd5b6801bc16d674ec800000600061180a633b9aca0083612cf0565b90506000600286600060801b604051602001611827929190612f46565b60408051601f198184030181529082905261184191612f75565b602060405180830381855afa15801561185e573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906118819190612f91565b905060006002806118958860006040612707565b6040516118a29190612f75565b602060405180830381855afa1580156118bf573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906118e29190612f91565b60026118fa8960406118f5816060612d47565b612707565b60405161190d9190600090602001612faa565b60408051601f198184030181529082905261192791612f75565b602060405180830381855afa158015611944573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906119679190612f91565b60408051602081019390935282015260600160408051601f198184030181529082905261199391612f75565b602060405180830381855afa1580156119b0573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906119d39190612f91565b9050600060028084886040516020016119f6929190918252602082015260400190565b60408051601f1981840301815290829052611a1091612f75565b602060405180830381855afa158015611a2d573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611a509190612f91565b6002611a5b876127ca565b604080516020810192909252810186905260600160408051601f1981840301815290829052611a8991612f75565b602060405180830381855afa158015611aa6573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611ac99190612f91565b60408051602081019390935282015260600160408051601f1981840301815290829052611af591612f75565b602060405180830381855afa158015611b12573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611b359190612f91565b90506000611b438647612d47565b9050611b4d612837565b6001600160a01b03166322895118878b8a604051602001611b7091815260200190565b6040516020818303038152906040528c876040518663ffffffff1660e01b8152600401611ba09493929190612fcc565b6000604051808303818588803b158015611bb957600080fd5b505af1158015611bcd573d6000803e3d6000fd5b5050505050804714611bf257604051638051a6bb60e01b815260040160405180910390fd5b7f11553d182c6d24df901ccbb837d640c1ee9994876a88dccc8ddfd7ebab9b6ce189604051611c219190612ae6565b60405180910390a1505050505050505050565b60006107fc6113b260017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8612d47565b610b436113e460017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8612d47565b600080611c9d61166d565b90506000611ca9611c34565b905080821015611cfc576801bc16d674ec800000611cc78383612d47565b611cd19190612d28565b611cd9611382565b611ce1612228565b611ceb9190612cd8565b611cf59190612cd8565b9250505090565b611d04611382565b611ceb612228565b60006107fc612867565b60006107fc6113b260017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37612d47565b6000611d50612373565b60405163e838dfbb60e01b81529091506001600160a01b0382169063e838dfbb90611d7f908690600401612c49565b602060405180830381865afa158015611d9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc09190612d94565b15611de0578260405163e7d05e2760e01b81526004016108929190612c49565b60405163e838dfbb60e01b81526001600160a01b0382169063e838dfbb90611e0c908590600401612c49565b602060405180830381865afa158015611e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4d9190612d94565b15611e6d578160405163e7d05e2760e01b81526004016108929190612c49565b505050565b6000610ef6826121a2565b6000611e89833361214a565b905081811015611ecb57604051637b936de360e01b81526001600160a01b03841660048201523360248201526044810182905260648101839052608401610892565b6000198114611e6d57611e6d8333611ee38585612d47565b611583565b6000611f078483611ef8876121a2565b611f029190612d47565b612897565b611f1f8383611f15866121a2565b611f029190612cd8565b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610ed191815260200190565b60006107fc6113b260017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd612d47565b610b436113e460017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd612d47565b611fcb8161234c565b610b436113e460017f082b6d18de7b10e438e6b1002141db737519cb4ceed679bc815e3aac00cd2227612d47565b612002816128e3565b610b436113e460017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37612d47565b6120398161234c565b610b436113e460017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780612d47565b6120708161234c565b610b436113e460017f3f075dea7ef99b1e5db245018e5e4ed8d2a0d93953f5932b2176bef59bd69061612d47565b6120a782612906565b6040516001600160a01b038316907e043cf7635f276413ae358250286a479a631abd9d74d57d4aa0bb87ebc7d11790600090a26120e38161293d565b6040518181527f4c86ba184ea1a1558f84835ca34f6d67e222e8ee5cc4f324b8861dda4cf1740c9060200160405180910390a15050565b60006107fc6113b260017f8e9e2a1d30fed357d8a000c1131fc77ed65d2052918caf1ccc6eb1e7af3d13b6612d47565b60008061217860017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847612d47565b6001600160a01b039485166000908152602091825260408082209590961681529390525050205490565b6000806121d060017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838612d47565b6001600160a01b0390931660009081526020939093525050604090205490565b6000806121fb612867565b90508061220b5750600092915050565b80612214611c92565b61221e9085612d28565b6112ba9190612cf0565b60006107fc6113b260017ffedfd2c285a57fb23bf45a3fe9ac02d36a76ebb72801b1c8aaf553d74e9d4653612d47565b60006107fc6113b260017f082b6d18de7b10e438e6b1002141db737519cb4ceed679bc815e3aac00cd2227612d47565b600080612293612867565b9050806122a35750600092915050565b6122ab611c92565b61221e8285612d28565b6122be8161234c565b610b436113e460017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb612d47565b60006107fc6113b260017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb612d47565b60006107fc6113b260017f3f075dea7ef99b1e5db245018e5e4ed8d2a0d93953f5932b2176bef59bd69061612d47565b6001600160a01b038116610b435760405163f6b2911f60e01b815260040160405180910390fd5b60006107fc6113b260017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780612d47565b610b436113e460017ffedfd2c285a57fb23bf45a3fe9ac02d36a76ebb72801b1c8aaf553d74e9d4653612d47565b610b436113e460017f0f1e7733641e4d843128fea0d2ec90d3d06a40b0fe244ff603d8c1aa200dc0f9612d47565b610b436113e460017fd7f2d45e512a86049f7a113657b39731b6b558609584243063a52cd31a8eb529612d47565b60008061243861211a565b90506001600160a01b0381166124515750600092915050565b60405163c8a6dfd360e01b81526004810184905247906001600160a01b0383169063c8a6dfd390602401600060405180830381600087803b15801561249557600080fd5b505af11580156124a9573d6000803e3d6000fd5b50505050600081476124bb9190612d47565b90506124c981610795611382565b6040518181527fda841d3042d792e2509a333b9dcbd4b3dd9b9047d382011f8788fab90ca7e3c79060200160405180910390a1949350505050565b600061250e611d0c565b90508061252e57604051630d35acd760e21b815260040160405180910390fd5b6000612538611c92565b90506000612544611d16565b90506000816125538587612d28565b61255d9190612d28565b9050600061256b8387612d28565b61257761271086612d28565b6125819190612d47565b90506000811561259a576125958284612cf0565b61259d565b60005b9050801561262d5760006125af612258565b90506125bb8183612989565b60006125c5611d0c565b905060006125d38a89612d47565b60408051828152602081018c90529081018a9052606081018490529091506001600160a01b038416907f3d1669e813a9845c288f0e1f642a4343a451103b87886d12de37e63b39bbd9429060800160405180910390a25050505b50505050505050565b60008082612642611c92565b61264c9190612d47565b905080612665578291506126608484612989565b61268e565b8061266e611d0c565b6126789085612d28565b6126829190612cf0565b915061268e8483612989565b5092915050565b60006107fc6113b260017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281612d47565b610b43816129f7565b610b4381612a2e565b60006107fc6113b260017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113612d47565b60608182601f01101561272d576040516323d5783d60e11b815260040160405180910390fd5b6127378284612cd8565b8451101561275857604051633b99b53d60e01b815260040160405180910390fd5b60608215801561277757604051915060008252602082016040526127c1565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156127b0578051835260209283019201612798565b5050858452601f01601f1916604052505b50949350505050565b603881901c60ff908116603083901c8216602884901c8316602085901c8416601886901c8516601087901c8616600888811c9790971688881b61ff001617871b17861b17851b17841b17831b1790911b17604082901c801561282e5761282e613017565b5060c01b919050565b60006107fc6113b260017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260612d47565b60006107fc6113b260017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b612d47565b60006128c460017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838612d47565b6001600160a01b03909316600090815260209390935250604090912055565b612710811115610b43576040516358d620b360e01b815260040160405180910390fd5b61290f8161234c565b610b436113e460017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260612d47565b8061295b5760405163a9cb9e0d60e01b815260040160405180910390fd5b610b436113e460017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42612d47565b6129a481612995612867565b61299f9190612cd8565b612a5c565b6129b28282611f15856121a2565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b612a008161234c565b610b436113e460017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113612d47565b610b436113e460017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281612d47565b610b436113e460017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b612d47565b60005b83811015612aa5578181015183820152602001612a8d565b83811115612ab4576000848401525b50505050565b60008151808452612ad2816020860160208601612a8a565b601f01601f19169290920160200192915050565b6020815260006112ba6020830184612aba565b80356001600160a01b0381168114612b1057600080fd5b919050565b60008060408385031215612b2857600080fd5b612b3183612af9565b946020939093013593505050565b600060208284031215612b5157600080fd5b6112ba82612af9565b600060208284031215612b6c57600080fd5b5035919050565b600080600060608486031215612b8857600080fd5b612b9184612af9565b9250612b9f60208501612af9565b9150604084013590509250925092565b60008060008060008060008060006101208a8c031215612bce57600080fd5b612bd78a612af9565b9850612be560208b01612af9565b975060408a01359650612bfa60608b01612af9565b9550612c0860808b01612af9565b9450612c1660a08b01612af9565b9350612c2460c08b01612af9565b9250612c3260e08b01612af9565b91506101008a013590509295985092959850929598565b6001600160a01b0391909116815260200190565b60008060008060808587031215612c7357600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215612ca257600080fd5b612cab83612af9565b9150612cb960208401612af9565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612ceb57612ceb612cc2565b500190565b600082612d0d57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615612d4257612d42612cc2565b500290565b600082821015612d5957612d59612cc2565b500390565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b600060208284031215612da657600080fd5b815180151581146112ba57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612df557612df5612db6565b604052919050565b6000601f8381840112612e0f57600080fd5b8251602067ffffffffffffffff80831115612e2c57612e2c612db6565b8260051b612e3b838201612dcc565b9384528681018301938381019089861115612e5557600080fd5b84890192505b85831015610c0057825184811115612e735760008081fd5b8901603f81018b13612e855760008081fd5b85810151604086821115612e9b57612e9b612db6565b612eac828b01601f19168901612dcc565b8281528d82848601011115612ec15760008081fd5b612ed0838a8301848701612a8a565b85525050509184019190840190612e5b565b60008060408385031215612ef557600080fd5b825167ffffffffffffffff80821115612f0d57600080fd5b612f1986838701612dfd565b93506020850151915080821115612f2f57600080fd5b50612f3c85828601612dfd565b9150509250929050565b60008351612f58818460208801612a8a565b6001600160801b0319939093169190920190815260100192915050565b60008251612f87818460208701612a8a565b9190910192915050565b600060208284031215612fa357600080fd5b5051919050565b60008351612fbc818460208801612a8a565b9190910191825250602001919050565b608081526000612fdf6080830187612aba565b8281036020840152612ff18187612aba565b905082810360408401526130058186612aba565b91505082606083015295945050505050565b634e487b7160e01b600052600160045260246000fdfea2646970667358221220a0ca0e5050c3d44537e9bbacc1c4f8a7319eb9f6a0d9bbaa5d300df1cd91a0b764736f6c634300080a0033",
            "0x608060405234801561001057600080fd5b50613054806100206000396000f3fe60806040526004361061026b5760003560e01c80635639671511610144578063a9059cbb116100b6578063d04681561161007a578063d0468156146106e6578063d0e30db0146106fb578063dd62ed3e14610703578063efd6034714610723578063f79c3f021461072b578063fb5b82d01461074b5761027b565b8063a9059cbb14610669578063ac232bde14610689578063bf15af561461069c578063c5eff3d0146106b1578063cc48cd31146106c65761027b565b80637adbf973116101085780637adbf973146105bc578063833b1fce146105dc57806387f2adfb146105f157806395d89b41146106065780639b498e2614610634578063a457c2d7146106495761027b565b8063563967151461053257806358bf3c7f146105475780636e9960c31461056757806370a082311461057c578063799a19541461059c5761027b565b806323b872dd116101dd57806336bf3325116101a157806336bf33251461049657806339509351146104b35780633af9e669146104d357806346425ef0146104f35780635022820114610508578063540bc5ea1461051d5761027b565b806323b872dd146103f8578063281a312214610418578063291206f6146104385780632cb562e114610458578063313ce5671461047a5761027b565b80631311cf8d1161022f5780631311cf8d1461035957806313d86aed14610379578063143a08d414610399578063147bf6c4146103ae57806318160ddd146103ce5780631bcbfaba146103e35761027b565b806304843a171461029457806306fdde03146102bc578063095ea7b3146102ff5780630e18b6811461032f578063107d7fa0146103445761027b565b3661027b576102793361076b565b005b60405163574b16a760e11b815260040160405180910390fd5b3480156102a057600080fd5b506102a96107f2565b6040519081526020015b60405180910390f35b3480156102c857600080fd5b50604080518082019091526011815270098d2e2ead2c840a6e8c2d6cac8408aa89607b1b60208201525b6040516102b39190612ad7565b34801561030b57600080fd5b5061031f61031a366004612b06565b610801565b60405190151581526020016102b3565b34801561033b57600080fd5b50610279610817565b34801561035057600080fd5b506102a9610877565b34801561036557600080fd5b50610279610374366004612b30565b610881565b34801561038557600080fd5b50610279610394366004612b4b565b6108fc565b3480156103a557600080fd5b506102a9610ab5565b3480156103ba57600080fd5b506102796103c9366004612b30565b610abf565b3480156103da57600080fd5b506102a9610b06565b3480156103ef57600080fd5b506102a9610b10565b34801561040457600080fd5b5061031f610413366004612b64565b610b1a565b34801561042457600080fd5b50610279610433366004612ba0565b610bcd565b34801561044457600080fd5b50610279610453366004612b4b565b610daf565b34801561046457600080fd5b5061046d610e29565b6040516102b39190612c3a565b34801561048657600080fd5b50604051601281526020016102b3565b3480156104a257600080fd5b506102a96801bc16d674ec80000081565b3480156104bf57600080fd5b5061031f6104ce366004612b06565b610e33565b3480156104df57600080fd5b506102a96104ee366004612b30565b610e54565b3480156104ff57600080fd5b506102a9610e6d565b34801561051457600080fd5b5061046d610e77565b34801561052957600080fd5b506102a9606081565b34801561053e57600080fd5b506102a9610e81565b34801561055357600080fd5b50610279610562366004612b30565b610e8b565b34801561057357600080fd5b5061046d610f06565b34801561058857600080fd5b506102a9610597366004612b30565b610f10565b3480156105a857600080fd5b506102a96105b7366004612b4b565b610f1b565b3480156105c857600080fd5b506102796105d7366004612b30565b610f26565b3480156105e857600080fd5b5061046d610fa1565b3480156105fd57600080fd5b506102a9610fab565b34801561061257600080fd5b50604080518082019091526005815264098e68aa8960db1b60208201526102f2565b34801561064057600080fd5b5061046d610fb5565b34801561065557600080fd5b5061031f610664366004612b06565b610fbf565b34801561067557600080fd5b5061031f610684366004612b06565b610fdb565b610279610697366004612b30565b61107a565b3480156106a857600080fd5b506102a9603081565b3480156106bd57600080fd5b5061046d61108c565b3480156106d257600080fd5b506102796106e1366004612c4e565b611096565b3480156106f257600080fd5b5061046d611210565b61027961121a565b34801561070f57600080fd5b506102a961071e366004612c80565b611223565b610279611236565b34801561073757600080fd5b506102a9610746366004612b4b565b611271565b34801561075757600080fd5b50610279610766366004612b30565b61127c565b34610789576040516395b66fe960e01b815260040160405180910390fd5b6107a4346107956112f7565b61079f9190612cc9565b61132b565b6107af33823461135e565b6040513481526001600160a01b0382169033907f3bc57f469ad6d10d7723ea226cd22bd2b9e527def2b529f6ab44645a166895829060200160405180910390a350565b60006107fc6112f7565b905090565b600061080e3384846114f8565b50600192915050565b61081f611567565b6001600160a01b0316336001600160a01b03161461085b573360405163472511eb60e11b81526004016108529190612c3a565b60405180910390fd5b61086b610866611567565b611571565b61087560006115ba565b565b60006107fc6115fa565b61088961162a565b6001600160a01b0316336001600160a01b0316146108bc573360405163472511eb60e11b81526004016108529190612c3a565b6108c581611634565b6040516001600160a01b038216907f1da4c245099590dc40be61880c9b97792f3694d970acc1e67ac0e6cc90f3780d90600090a250565b610904611662565b6001600160a01b0316336001600160a01b031614610937573360405163472511eb60e11b81526004016108529190612c3a565b60006109416112f7565b9050600061096161095b6801bc16d674ec80000084612ce1565b8461166c565b90508061098157604051631036b5ad60e31b815260040160405180910390fd5b60008061098d83611681565b81519193509150806109b25760405163200149ad60e21b815260040160405180910390fd5b838111156109d357604051635993bd5760e01b815260040160405180910390fd5b81518181146109f5576040516322e5ce4360e21b815260040160405180910390fd5b60006109ff611709565b905080610a1f57604051639be7315960e01b815260040160405180910390fd5b60005b83811015610a6f57610a67868281518110610a3f57610a3f612d03565b6020026020010151868381518110610a5957610a59612d03565b602002602001015184611739565b600101610a22565b50610a90610a86846801bc16d674ec800000612d19565b61079f9089612d38565b610aab83610a9c611bc1565b610aa69190612cc9565b611bf1565b5050505050505050565b60006107fc611c1f565b610ac761162a565b6001600160a01b0316336001600160a01b031614610afa573360405163472511eb60e11b81526004016108529190612c3a565b610b03816115ba565b50565b60006107fc611c99565b60006107fc611ca3565b60008383610b288282611cd3565b8380610b47576040516336b216db60e21b815260040160405180910390fd5b868580610b5383611dff565b1015610b72576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b038816610bab57604051637617407560e11b81526001600160a01b038a16600482015260006024820152604401610852565b610bb58988611e0a565b610bc0898989611e70565b9998505050505050505050565b6000610bd7611efe565b8114610c085780610be6611efe565b604051631cfd276760e31b815260048101929092526024820152604401610852565b610c1b610c16826001612cc9565b611f2e565b610c2486611571565b610c2d83611f5c565b6040516001600160a01b038416907f0cc5437d7c9c1d9eab549acbb533eea3e9868e9443dd75309ed5820b33a3774e90600090a2610c6a82611f93565b6040518281527fbd533e726baaf59b36f3914d950053f7e78f527057c97cd3f0043257fc0fc8849060200160405180910390a1610ca689611634565b6040516001600160a01b038a16907f1da4c245099590dc40be61880c9b97792f3694d970acc1e67ac0e6cc90f3780d90600090a2610ce385611fca565b6040516001600160a01b038616907f30f015a5d3c72c0a9414538199baa022323a483fa9e4ba2cd581596cf8ca042490600090a2610d2084612001565b6040516001600160a01b038516907fffc0721ef0563a1b0a51a0dc92113025f33ca434ada9ee3eebff2f385d2a8f9a90600090a2610d5e8a89612038565b610d6787610f61565b7f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610d9b93929190612d4f565b60405180910390a150505050505050505050565b610db761162a565b6001600160a01b0316336001600160a01b031614610dea573360405163472511eb60e11b81526004016108529190612c3a565b610df381611f93565b6040518181527fbd533e726baaf59b36f3914d950053f7e78f527057c97cd3f0043257fc0fc8849060200160405180910390a150565b60006107fc6120b4565b600061080e338484610e4533886120e4565b610e4f9190612cc9565b6114f8565b6000610e67610e628361213c565b61218a565b92915050565b60006107fc6121c2565b60006107fc6121f2565b60006107fc611709565b610e9361162a565b6001600160a01b0316336001600160a01b031614610ec6573360405163472511eb60e11b81526004016108529190612c3a565b610ecf81611fca565b6040516001600160a01b038216907f30f015a5d3c72c0a9414538199baa022323a483fa9e4ba2cd581596cf8ca042490600090a250565b60006107fc61162a565b6000610e6782611dff565b6000610e6782612222565b610f2e611662565b6001600160a01b0316336001600160a01b031614610f61573360405163472511eb60e11b81526004016108529190612c3a565b610f6a8161224f565b6040516001600160a01b038216907fd3b5d1e0ffaeff528910f3663f0adace7694ab8241d58e17a91351ced2e0803190600090a250565b60006107fc612286565b60006107fc611bc1565b60006107fc6122b6565b600061080e338484610fd133886120e4565b610e4f9190612d38565b60003383610fe98282611cd3565b8380611008576040516336b216db60e21b815260040160405180910390fd5b33858061101483611dff565b1015611033576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b03881661106357604051637617407560e11b815233600482015260006024820152604401610852565b61106e338989611e70565b98975050505050505050565b611083816122e6565b610b038161076b565b60006107fc61230d565b61109e612286565b6001600160a01b0316336001600160a01b0316146110d1573360405163472511eb60e11b81526004016108529190612c3a565b6110d9611bc1565b84111561110b57836110e9611bc1565b6040516376179ac560e01b815260048101929092526024820152604401610852565b60006111156115fa565b61111f9086612d38565b90506000611136826801bc16d674ec800000612d19565b61113e6121c2565b6111489190612cc9565b90506111538561233d565b61115c8661236b565b61116584612399565b6000856111728386612cc9565b111561119857611195866111868487612cc9565b6111909190612d38565b6123c7565b90505b6111a28187612cc9565b8210156111c6576111c6826111b78389612cc9565b6111c19190612d38565b61249e565b60408051888152602081018890529081018690527f25d7358447891786a139ae7149548f3232a8c95f2ea6065c69c5bd7c39cd386c9060600160405180910390a150505050505050565b60006107fc611567565b6108753361076b565b600061122f83836120e4565b9392505050565b61123e6120b4565b6001600160a01b0316336001600160a01b031614610875573360405163472511eb60e11b81526004016108529190612c3a565b6000610e678261218a565b61128461162a565b6001600160a01b0316336001600160a01b0316146112b7573360405163472511eb60e11b81526004016108529190612c3a565b6112c081611f5c565b6040516001600160a01b038216907f0cc5437d7c9c1d9eab549acbb533eea3e9868e9443dd75309ed5820b33a3774e90600090a250565b60006107fc61132760017f2b6136e423ab70d76431e2a635e877e16ea2dd9a895e054ad7f35f89d6c7b711612d38565b5490565b610b0361135960017f2b6136e423ab70d76431e2a635e877e16ea2dd9a895e054ad7f35f89d6c7b711612d38565b829055565b600061136a84836125d0565b9050600061137661230d565b9050836001600160a01b0316856001600160a01b031614156113f757604051632d20488160e11b81526001600160a01b03868116600483015260016024830152821690635a4091029060440160006040518083038186803b1580156113da57600080fd5b505afa1580156113ee573d6000803e3d6000fd5b505050506114f1565b604051632d20488160e11b81526001600160a01b03868116600483015260016024830152821690635a4091029060440160006040518083038186803b15801561143f57600080fd5b505afa158015611453573d6000803e3d6000fd5b505060405163e838dfbb60e01b81526001600160a01b038416925063e838dfbb9150611483908790600401612c3a565b602060405180830381865afa1580156114a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c49190612d85565b156114e4578360405163e7d05e2760e01b81526004016108529190612c3a565b6114ef858584611e70565b505b5050505050565b611501836122e6565b61150a826122e6565b61151583838361262f565b816001600160a01b0316836001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161155a91815260200190565b60405180910390a3505050565b60006107fc612686565b61157a816122e6565b611583816126b6565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b6115c3816126bf565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b60006107fc61132760017f0f1e7733641e4d843128fea0d2ec90d3d06a40b0fe244ff603d8c1aa200dc0f9612d38565b60006107fc6126c8565b610b0361135960017f8e9e2a1d30fed357d8a000c1131fc77ed65d2052918caf1ccc6eb1e7af3d13b6612d38565b60006107fc610f06565b600081831161167b578261122f565b50919050565b60608061168c6122b6565b6001600160a01b031663a1947323846040518263ffffffff1660e01b81526004016116b991815260200190565b6000604051808303816000875af11580156116d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117009190810190612ed3565b91509150915091565b60006107fc61132760017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42612d38565b603083511461175b5760405163050cb55360e41b815260040160405180910390fd5b606082511461177d5760405163408ebd3960e01b815260040160405180910390fd5b6801bc16d674ec8000006000611797633b9aca0083612ce1565b90506000600286600060801b6040516020016117b4929190612f37565b60408051601f19818403018152908290526117ce91612f66565b602060405180830381855afa1580156117eb573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061180e9190612f82565b9050600060028061182288600060406126f8565b60405161182f9190612f66565b602060405180830381855afa15801561184c573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061186f9190612f82565b6002611887896040611882816060612d38565b6126f8565b60405161189a9190600090602001612f9b565b60408051601f19818403018152908290526118b491612f66565b602060405180830381855afa1580156118d1573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906118f49190612f82565b60408051602081019390935282015260600160408051601f198184030181529082905261192091612f66565b602060405180830381855afa15801561193d573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906119609190612f82565b905060006002808488604051602001611983929190918252602082015260400190565b60408051601f198184030181529082905261199d91612f66565b602060405180830381855afa1580156119ba573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906119dd9190612f82565b60026119e8876127bb565b604080516020810192909252810186905260600160408051601f1981840301815290829052611a1691612f66565b602060405180830381855afa158015611a33573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611a569190612f82565b60408051602081019390935282015260600160408051601f1981840301815290829052611a8291612f66565b602060405180830381855afa158015611a9f573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611ac29190612f82565b90506000611ad08647612d38565b9050611ada612828565b6001600160a01b03166322895118878b8a604051602001611afd91815260200190565b6040516020818303038152906040528c876040518663ffffffff1660e01b8152600401611b2d9493929190612fbd565b6000604051808303818588803b158015611b4657600080fd5b505af1158015611b5a573d6000803e3d6000fd5b5050505050804714611b7f57604051638051a6bb60e01b815260040160405180910390fd5b7f11553d182c6d24df901ccbb837d640c1ee9994876a88dccc8ddfd7ebab9b6ce189604051611bae9190612ad7565b60405180910390a1505050505050505050565b60006107fc61132760017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8612d38565b610b0361135960017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8612d38565b600080611c2a6115fa565b90506000611c36611bc1565b905080821015611c89576801bc16d674ec800000611c548383612d38565b611c5e9190612d19565b611c666112f7565b611c6e6121c2565b611c789190612cc9565b611c829190612cc9565b9250505090565b611c916112f7565b611c786121c2565b60006107fc612858565b60006107fc61132760017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37612d38565b6000611cdd61230d565b60405163e838dfbb60e01b81529091506001600160a01b0382169063e838dfbb90611d0c908690600401612c3a565b602060405180830381865afa158015611d29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4d9190612d85565b15611d6d578260405163e7d05e2760e01b81526004016108529190612c3a565b60405163e838dfbb60e01b81526001600160a01b0382169063e838dfbb90611d99908590600401612c3a565b602060405180830381865afa158015611db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dda9190612d85565b15611dfa578160405163e7d05e2760e01b81526004016108529190612c3a565b505050565b6000610e678261213c565b6000611e1683336120e4565b905081811015611e5857604051637b936de360e01b81526001600160a01b03841660048201523360248201526044810182905260648101839052608401610852565b6000198114611dfa57611dfa8333610e4f8585612d38565b6000611e8f8483611e808761213c565b611e8a9190612d38565b612888565b611ea78383611e9d8661213c565b611e8a9190612cc9565b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611eec91815260200190565b60405180910390a35060019392505050565b60006107fc61132760017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd612d38565b610b0361135960017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd612d38565b611f65816122e6565b610b0361135960017f082b6d18de7b10e438e6b1002141db737519cb4ceed679bc815e3aac00cd2227612d38565b611f9c816128d4565b610b0361135960017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37612d38565b611fd3816122e6565b610b0361135960017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780612d38565b61200a816122e6565b610b0361135960017f3f075dea7ef99b1e5db245018e5e4ed8d2a0d93953f5932b2176bef59bd69061612d38565b612041826128f7565b6040516001600160a01b038316907e043cf7635f276413ae358250286a479a631abd9d74d57d4aa0bb87ebc7d11790600090a261207d8161292e565b6040518181527f4c86ba184ea1a1558f84835ca34f6d67e222e8ee5cc4f324b8861dda4cf1740c9060200160405180910390a15050565b60006107fc61132760017f8e9e2a1d30fed357d8a000c1131fc77ed65d2052918caf1ccc6eb1e7af3d13b6612d38565b60008061211260017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847612d38565b6001600160a01b039485166000908152602091825260408082209590961681529390525050205490565b60008061216a60017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838612d38565b6001600160a01b0390931660009081526020939093525050604090205490565b600080612195612858565b9050806121a55750600092915050565b806121ae611c1f565b6121b89085612d19565b61122f9190612ce1565b60006107fc61132760017ffedfd2c285a57fb23bf45a3fe9ac02d36a76ebb72801b1c8aaf553d74e9d4653612d38565b60006107fc61132760017f082b6d18de7b10e438e6b1002141db737519cb4ceed679bc815e3aac00cd2227612d38565b60008061222d612858565b90508061223d5750600092915050565b612245611c1f565b6121b88285612d19565b612258816122e6565b610b0361135960017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb612d38565b60006107fc61132760017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb612d38565b60006107fc61132760017f3f075dea7ef99b1e5db245018e5e4ed8d2a0d93953f5932b2176bef59bd69061612d38565b6001600160a01b038116610b035760405163f6b2911f60e01b815260040160405180910390fd5b60006107fc61132760017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780612d38565b610b0361135960017ffedfd2c285a57fb23bf45a3fe9ac02d36a76ebb72801b1c8aaf553d74e9d4653612d38565b610b0361135960017f0f1e7733641e4d843128fea0d2ec90d3d06a40b0fe244ff603d8c1aa200dc0f9612d38565b610b0361135960017fd7f2d45e512a86049f7a113657b39731b6b558609584243063a52cd31a8eb529612d38565b6000806123d26120b4565b90506001600160a01b0381166123eb5750600092915050565b60405163c8a6dfd360e01b81526004810184905247906001600160a01b0383169063c8a6dfd390602401600060405180830381600087803b15801561242f57600080fd5b505af1158015612443573d6000803e3d6000fd5b50505050600081476124559190612d38565b9050612463816107956112f7565b6040518181527fda841d3042d792e2509a333b9dcbd4b3dd9b9047d382011f8788fab90ca7e3c79060200160405180910390a1949350505050565b60006124a8611c99565b9050806124c857604051630d35acd760e21b815260040160405180910390fd5b60006124d2611c1f565b905060006124de611ca3565b90506000816124ed8587612d19565b6124f79190612d19565b905060006125058387612d19565b61251161271086612d19565b61251b9190612d38565b9050600081156125345761252f8284612ce1565b612537565b60005b905080156125c75760006125496121f2565b9050612555818361297a565b600061255f611c99565b9050600061256d8a89612d38565b60408051828152602081018c90529081018a9052606081018490529091506001600160a01b038416907f3d1669e813a9845c288f0e1f642a4343a451103b87886d12de37e63b39bbd9429060800160405180910390a25050505b50505050505050565b600080826125dc611c1f565b6125e69190612d38565b9050806125ff578291506125fa848461297a565b612628565b80612608611c99565b6126129085612d19565b61261c9190612ce1565b9150612628848361297a565b5092915050565b600061265c60017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847612d38565b6001600160a01b039485166000908152602091825260408082209590961681529390525091902055565b60006107fc61132760017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281612d38565b610b03816129e8565b610b0381612a1f565b60006107fc61132760017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113612d38565b60608182601f01101561271e576040516323d5783d60e11b815260040160405180910390fd5b6127288284612cc9565b8451101561274957604051633b99b53d60e01b815260040160405180910390fd5b60608215801561276857604051915060008252602082016040526127b2565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156127a1578051835260209283019201612789565b5050858452601f01601f1916604052505b50949350505050565b603881901c60ff908116603083901c8216602884901c8316602085901c8416601886901c8516601087901c8616600888811c9790971688881b61ff001617871b17861b17851b17841b17831b1790911b17604082901c801561281f5761281f613008565b5060c01b919050565b60006107fc61132760017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260612d38565b60006107fc61132760017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b612d38565b60006128b560017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838612d38565b6001600160a01b03909316600090815260209390935250604090912055565b612710811115610b03576040516358d620b360e01b815260040160405180910390fd5b612900816122e6565b610b0361135960017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260612d38565b8061294c5760405163a9cb9e0d60e01b815260040160405180910390fd5b610b0361135960017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42612d38565b61299581612986612858565b6129909190612cc9565b612a4d565b6129a38282611e9d8561213c565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6129f1816122e6565b610b0361135960017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113612d38565b610b0361135960017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281612d38565b610b0361135960017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b612d38565b60005b83811015612a96578181015183820152602001612a7e565b83811115612aa5576000848401525b50505050565b60008151808452612ac3816020860160208601612a7b565b601f01601f19169290920160200192915050565b60208152600061122f6020830184612aab565b80356001600160a01b0381168114612b0157600080fd5b919050565b60008060408385031215612b1957600080fd5b612b2283612aea565b946020939093013593505050565b600060208284031215612b4257600080fd5b61122f82612aea565b600060208284031215612b5d57600080fd5b5035919050565b600080600060608486031215612b7957600080fd5b612b8284612aea565b9250612b9060208501612aea565b9150604084013590509250925092565b60008060008060008060008060006101208a8c031215612bbf57600080fd5b612bc88a612aea565b9850612bd660208b01612aea565b975060408a01359650612beb60608b01612aea565b9550612bf960808b01612aea565b9450612c0760a08b01612aea565b9350612c1560c08b01612aea565b9250612c2360e08b01612aea565b91506101008a013590509295985092959850929598565b6001600160a01b0391909116815260200190565b60008060008060808587031215612c6457600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215612c9357600080fd5b612c9c83612aea565b9150612caa60208401612aea565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612cdc57612cdc612cb3565b500190565b600082612cfe57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615612d3357612d33612cb3565b500290565b600082821015612d4a57612d4a612cb3565b500390565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b600060208284031215612d9757600080fd5b8151801515811461122f57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612de657612de6612da7565b604052919050565b6000601f8381840112612e0057600080fd5b8251602067ffffffffffffffff80831115612e1d57612e1d612da7565b8260051b612e2c838201612dbd565b9384528681018301938381019089861115612e4657600080fd5b84890192505b85831015610bc057825184811115612e645760008081fd5b8901603f81018b13612e765760008081fd5b85810151604086821115612e8c57612e8c612da7565b612e9d828b01601f19168901612dbd565b8281528d82848601011115612eb25760008081fd5b612ec1838a8301848701612a7b565b85525050509184019190840190612e4c565b60008060408385031215612ee657600080fd5b825167ffffffffffffffff80821115612efe57600080fd5b612f0a86838701612dee565b93506020850151915080821115612f2057600080fd5b50612f2d85828601612dee565b9150509250929050565b60008351612f49818460208801612a7b565b6001600160801b0319939093169190920190815260100192915050565b60008251612f78818460208701612a7b565b9190910192915050565b600060208284031215612f9457600080fd5b5051919050565b60008351612fad818460208801612a7b565b9190910191825250602001919050565b608081526000612fd06080830187612aab565b8281036020840152612fe28187612aab565b90508281036040840152612ff68186612aab565b91505082606083015295945050505050565b634e487b7160e01b600052600160045260246000fdfea26469706673582212204c98ac4f477f06f69f4028fa9440dd9c691d20f120c69e574b4c9dd17f97219264736f6c634300080a0033",
            "0x608060405234801561001057600080fd5b50613616806100206000396000f3fe6080604052600436106102a25760003560e01c80635639671511610165578063a457c2d7116100cc578063d046815611610085578063d046815614610787578063d0e30db01461079c578063d4970524146107a4578063dd62ed3e146107ac578063efd60347146107cc578063f79c3f02146107d4578063fb5b82d0146107f4576102b2565b8063a457c2d7146106ea578063a9059cbb1461070a578063ac232bde1461072a578063bf15af561461073d578063c5eff3d014610752578063cc48cd3114610767576102b2565b80637adbf9731161011e5780637adbf97314610648578063833b1fce1461066857806386a92af71461067d57806387f2adfb1461069257806395d89b41146106a75780639b498e26146106d5576102b2565b8063563967151461059e57806358bf3c7f146105b35780636e9960c3146105d357806370a08231146105e8578063750521f514610608578063799a195414610628576102b2565b80631bcbfaba1161020957806336bf3325116101c257806336bf332514610502578063395093511461051f5780633af9e6691461053f57806346425ef01461055f5780635022820114610574578063540bc5ea14610589576102b2565b80631bcbfaba1461045c57806323b872dd14610471578063281a312214610491578063291206f6146104b15780632cb562e1146104d1578063313ce567146104e6576102b2565b80631311cf8d1161025b5780631311cf8d146103b057806313d86aed146103d0578063143a08d4146103f0578063147bf6c4146104055780631546962b1461042557806318160ddd14610447576102b2565b8063020f086e146102cb57806304843a17146102eb57806306fdde0314610313578063095ea7b3146103565780630e18b68114610386578063107d7fa01461039b576102b2565b366102b2576102b033610814565b005b60405163574b16a760e11b815260040160405180910390fd5b3480156102d757600080fd5b506102b06102e6366004612f96565b61089b565b3480156102f757600080fd5b5061030061091f565b6040519081526020015b60405180910390f35b34801561031f57600080fd5b50604080518082019091526011815270098d2e2ead2c840a6e8c2d6cac8408aa89607b1b60208201525b60405161030a9190613009565b34801561036257600080fd5b5061037661037136600461301c565b61092e565b604051901515815260200161030a565b34801561039257600080fd5b506102b0610944565b3480156103a757600080fd5b5061030061099b565b3480156103bc57600080fd5b506102b06103cb366004612f96565b6109a5565b3480156103dc57600080fd5b506102b06103eb366004613046565b610a20565b3480156103fc57600080fd5b50610300610bd9565b34801561041157600080fd5b506102b0610420366004612f96565b610be3565b34801561043157600080fd5b5061043a610c2a565b60405161030a919061305f565b34801561045357600080fd5b50610300610c34565b34801561046857600080fd5b50610300610c3e565b34801561047d57600080fd5b5061037661048c366004613073565b610c48565b34801561049d57600080fd5b506102b06104ac3660046130af565b610cfb565b3480156104bd57600080fd5b506102b06104cc366004613046565b610edd565b3480156104dd57600080fd5b5061043a610f58565b3480156104f257600080fd5b506040516012815260200161030a565b34801561050e57600080fd5b506103006801bc16d674ec80000081565b34801561052b57600080fd5b5061037661053a36600461301c565b610f62565b34801561054b57600080fd5b5061030061055a366004612f96565b610f83565b34801561056b57600080fd5b50610300610f9c565b34801561058057600080fd5b5061043a610fa6565b34801561059557600080fd5b50610300606081565b3480156105aa57600080fd5b50610300610fb0565b3480156105bf57600080fd5b506102b06105ce366004612f96565b610fba565b3480156105df57600080fd5b5061043a611035565b3480156105f457600080fd5b50610300610603366004612f96565b61103f565b34801561061457600080fd5b506102b06106233660046131b8565b61104a565b34801561063457600080fd5b50610300610643366004613046565b6110c6565b34801561065457600080fd5b506102b0610663366004612f96565b6110d1565b34801561067457600080fd5b5061043a61114c565b34801561068957600080fd5b50610349611156565b34801561069e57600080fd5b50610300611160565b3480156106b357600080fd5b50604080518082019091526005815264098e68aa8960db1b6020820152610349565b3480156106e157600080fd5b5061043a61116a565b3480156106f657600080fd5b5061037661070536600461301c565b611174565b34801561071657600080fd5b5061037661072536600461301c565b611190565b6102b0610738366004612f96565b61122f565b34801561074957600080fd5b50610300603081565b34801561075e57600080fd5b5061043a611241565b34801561077357600080fd5b506102b0610782366004613238565b61124b565b34801561079357600080fd5b5061043a61140b565b6102b0611415565b6102b061141e565b3480156107b857600080fd5b506103006107c736600461326a565b611459565b6102b061146c565b3480156107e057600080fd5b506103006107ef366004613046565b611474565b34801561080057600080fd5b506102b061080f366004612f96565b61147f565b34610832576040516395b66fe960e01b815260040160405180910390fd5b61084d3461083e6114fa565b61084891906132b3565b61152e565b610858338234611561565b6040513481526001600160a01b0382169033907f3bc57f469ad6d10d7723ea226cd22bd2b9e527def2b529f6ab44645a166895829060200160405180910390a350565b6108a36116fb565b6001600160a01b0316336001600160a01b0316146108df573360405163472511eb60e11b81526004016108d6919061305f565b60405180910390fd5b6108e881611705565b6040516001600160a01b038216907f67b26a33f305cc027b2d45b2f6f418793afcd3e22f7376afa7be068ce18604e890600090a250565b60006109296114fa565b905090565b600061093b33848461173c565b50600192915050565b61094c6117ab565b6001600160a01b0316336001600160a01b03161461097f573360405163472511eb60e11b81526004016108d6919061305f565b61098f61098a6117ab565b6117b5565b61099960006117fe565b565b600061092961183e565b6109ad6116fb565b6001600160a01b0316336001600160a01b0316146109e0573360405163472511eb60e11b81526004016108d6919061305f565b6109e98161186e565b6040516001600160a01b038216907f1da4c245099590dc40be61880c9b97792f3694d970acc1e67ac0e6cc90f3780d90600090a250565b610a286118a5565b6001600160a01b0316336001600160a01b031614610a5b573360405163472511eb60e11b81526004016108d6919061305f565b6000610a656114fa565b90506000610a85610a7f6801bc16d674ec800000846132cb565b846118af565b905080610aa557604051631036b5ad60e31b815260040160405180910390fd5b600080610ab1836118c4565b8151919350915080610ad65760405163200149ad60e21b815260040160405180910390fd5b83811115610af757604051635993bd5760e01b815260040160405180910390fd5b8151818114610b19576040516322e5ce4360e21b815260040160405180910390fd5b6000610b2361194c565b905080610b4357604051639be7315960e01b815260040160405180910390fd5b60005b83811015610b9357610b8b868281518110610b6357610b636132ed565b6020026020010151868381518110610b7d57610b7d6132ed565b60200260200101518461197c565b600101610b46565b50610bb4610baa846801bc16d674ec800000613303565b6108489089613322565b610bcf83610bc0611e04565b610bca91906132b3565b611e34565b5050505050505050565b6000610929611e62565b610beb6116fb565b6001600160a01b0316336001600160a01b031614610c1e573360405163472511eb60e11b81526004016108d6919061305f565b610c27816117fe565b50565b6000610929611edc565b6000610929611f0c565b6000610929611f16565b60008383610c568282611f46565b8380610c75576040516336b216db60e21b815260040160405180910390fd5b868580610c8183612072565b1015610ca0576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b038816610cd957604051637617407560e11b81526001600160a01b038a166004820152600060248201526044016108d6565b610ce3898861207d565b610cee8989896120e3565b9998505050505050505050565b6000610d05612171565b8114610d365780610d14612171565b604051631cfd276760e31b8152600481019290925260248201526044016108d6565b610d49610d448260016132b3565b6121a1565b610d52866117b5565b610d5b836121cf565b6040516001600160a01b038416907f0cc5437d7c9c1d9eab549acbb533eea3e9868e9443dd75309ed5820b33a3774e90600090a2610d9882612206565b6040518281527fbd533e726baaf59b36f3914d950053f7e78f527057c97cd3f0043257fc0fc8849060200160405180910390a1610dd48961186e565b6040516001600160a01b038a16907f1da4c245099590dc40be61880c9b97792f3694d970acc1e67ac0e6cc90f3780d90600090a2610e118561223d565b6040516001600160a01b038616907f30f015a5d3c72c0a9414538199baa022323a483fa9e4ba2cd581596cf8ca042490600090a2610e4e84612274565b6040516001600160a01b038516907fffc0721ef0563a1b0a51a0dc92113025f33ca434ada9ee3eebff2f385d2a8f9a90600090a2610e8c8a896122ab565b610e958761110c565b7f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610ec993929190613339565b60405180910390a150505050505050505050565b610ee56116fb565b6001600160a01b0316336001600160a01b031614610f18573360405163472511eb60e11b81526004016108d6919061305f565b610f2181612206565b6040518181527fbd533e726baaf59b36f3914d950053f7e78f527057c97cd3f0043257fc0fc884906020015b60405180910390a150565b6000610929612327565b600061093b338484610f743388612357565b610f7e91906132b3565b61173c565b6000610f96610f91836123af565b6123fd565b92915050565b6000610929612435565b6000610929612465565b600061092961194c565b610fc26116fb565b6001600160a01b0316336001600160a01b031614610ff5573360405163472511eb60e11b81526004016108d6919061305f565b610ffe8161223d565b6040516001600160a01b038216907f30f015a5d3c72c0a9414538199baa022323a483fa9e4ba2cd581596cf8ca042490600090a250565b60006109296116fb565b6000610f9682612072565b6110526116fb565b6001600160a01b0316336001600160a01b031614611085573360405163472511eb60e11b81526004016108d6919061305f565b61108e81612495565b611097816124b4565b7f8d2df192dd17edf92a7964b78aa322f3d717b2ab9de00651bee32bbc4c5da63a81604051610f4d9190613009565b6000610f96826124fe565b6110d96118a5565b6001600160a01b0316336001600160a01b03161461110c573360405163472511eb60e11b81526004016108d6919061305f565b6111158161252b565b6040516001600160a01b038216907fd3b5d1e0ffaeff528910f3663f0adace7694ab8241d58e17a91351ced2e0803190600090a250565b6000610929612562565b6060610929612592565b6000610929611e04565b6000610929612658565b600061093b3384846111863388612357565b610f7e9190613322565b6000338361119e8282611f46565b83806111bd576040516336b216db60e21b815260040160405180910390fd5b3385806111c983612072565b10156111e8576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b03881661121857604051637617407560e11b8152336004820152600060248201526044016108d6565b6112233389896120e3565b98975050505050505050565b61123881612688565b610c2781610814565b60006109296126af565b611253612562565b6001600160a01b0316336001600160a01b031614611286573360405163472511eb60e11b81526004016108d6919061305f565b61128e611e04565b8411156112c0578361129e611e04565b6040516376179ac560e01b8152600481019290925260248201526044016108d6565b60006112ca61183e565b6112d49086613322565b905060006112eb826801bc16d674ec800000613303565b6112f3612435565b6112fd91906132b3565b9050611308856126df565b6113118661270d565b61131a8461273b565b60008561132783866132b3565b111561134d5761134a8661133b84876132b3565b6113459190613322565b612769565b90505b858161135984876132b3565b6113639190613322565b111561139357611391868261137885886132b3565b6113829190613322565b61138c9190613322565b612832565b505b61139d81876132b3565b8210156113c1576113c1826113b283896132b3565b6113bc9190613322565b612904565b60408051888152602081018890529081018690527f25d7358447891786a139ae7149548f3232a8c95f2ea6065c69c5bd7c39cd386c9060600160405180910390a150505050505050565b60006109296117ab565b61099933610814565b611426611edc565b6001600160a01b0316336001600160a01b031614610999573360405163472511eb60e11b81526004016108d6919061305f565b60006114658383612357565b9392505050565b611426612327565b6000610f96826123fd565b6114876116fb565b6001600160a01b0316336001600160a01b0316146114ba573360405163472511eb60e11b81526004016108d6919061305f565b6114c3816121cf565b6040516001600160a01b038216907f0cc5437d7c9c1d9eab549acbb533eea3e9868e9443dd75309ed5820b33a3774e90600090a250565b600061092961152a60017f2b6136e423ab70d76431e2a635e877e16ea2dd9a895e054ad7f35f89d6c7b711613322565b5490565b610c2761155c60017f2b6136e423ab70d76431e2a635e877e16ea2dd9a895e054ad7f35f89d6c7b711613322565b829055565b600061156d8483612a36565b905060006115796126af565b9050836001600160a01b0316856001600160a01b031614156115fa57604051632d20488160e11b81526001600160a01b03868116600483015260016024830152821690635a4091029060440160006040518083038186803b1580156115dd57600080fd5b505afa1580156115f1573d6000803e3d6000fd5b505050506116f4565b604051632d20488160e11b81526001600160a01b03868116600483015260016024830152821690635a4091029060440160006040518083038186803b15801561164257600080fd5b505afa158015611656573d6000803e3d6000fd5b505060405163e838dfbb60e01b81526001600160a01b038416925063e838dfbb915061168690879060040161305f565b602060405180830381865afa1580156116a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c7919061336f565b156116e7578360405163e7d05e2760e01b81526004016108d6919061305f565b6116f28585846120e3565b505b5050505050565b6000610929612a95565b61170e81612688565b610c2761155c60017ff4271262f3552a4108cde54dc75061de8de495709221d793b126e448522d6a80613322565b61174583612688565b61174e82612688565b611759838383612ac5565b816001600160a01b0316836001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161179e91815260200190565b60405180910390a3505050565b6000610929612b1c565b6117be81612688565b6117c781612b4c565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b61180781612b55565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b600061092961152a60017f0f1e7733641e4d843128fea0d2ec90d3d06a40b0fe244ff603d8c1aa200dc0f9613322565b61187781612688565b610c2761155c60017f8e9e2a1d30fed357d8a000c1131fc77ed65d2052918caf1ccc6eb1e7af3d13b6613322565b6000610929611035565b60008183116118be5782611465565b50919050565b6060806118cf612658565b6001600160a01b031663a1947323846040518263ffffffff1660e01b81526004016118fc91815260200190565b6000604051808303816000875af115801561191b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119439190810190613460565b91509150915091565b600061092961152a60017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42613322565b603083511461199e5760405163050cb55360e41b815260040160405180910390fd5b60608251146119c05760405163408ebd3960e01b815260040160405180910390fd5b6801bc16d674ec80000060006119da633b9aca00836132cb565b90506000600286600060801b6040516020016119f79291906134c4565b60408051601f1981840301815290829052611a11916134f3565b602060405180830381855afa158015611a2e573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611a51919061350f565b90506000600280611a658860006040612b5e565b604051611a7291906134f3565b602060405180830381855afa158015611a8f573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611ab2919061350f565b6002611aca896040611ac5816060613322565b612b5e565b604051611add9190600090602001613528565b60408051601f1981840301815290829052611af7916134f3565b602060405180830381855afa158015611b14573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611b37919061350f565b60408051602081019390935282015260600160408051601f1981840301815290829052611b63916134f3565b602060405180830381855afa158015611b80573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611ba3919061350f565b905060006002808488604051602001611bc6929190918252602082015260400190565b60408051601f1981840301815290829052611be0916134f3565b602060405180830381855afa158015611bfd573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611c20919061350f565b6002611c2b87612c21565b604080516020810192909252810186905260600160408051601f1981840301815290829052611c59916134f3565b602060405180830381855afa158015611c76573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611c99919061350f565b60408051602081019390935282015260600160408051601f1981840301815290829052611cc5916134f3565b602060405180830381855afa158015611ce2573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611d05919061350f565b90506000611d138647613322565b9050611d1d612c8e565b6001600160a01b03166322895118878b8a604051602001611d4091815260200190565b6040516020818303038152906040528c876040518663ffffffff1660e01b8152600401611d70949392919061354a565b6000604051808303818588803b158015611d8957600080fd5b505af1158015611d9d573d6000803e3d6000fd5b5050505050804714611dc257604051638051a6bb60e01b815260040160405180910390fd5b7f11553d182c6d24df901ccbb837d640c1ee9994876a88dccc8ddfd7ebab9b6ce189604051611df19190613009565b60405180910390a1505050505050505050565b600061092961152a60017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8613322565b610c2761155c60017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8613322565b600080611e6d61183e565b90506000611e79611e04565b905080821015611ecc576801bc16d674ec800000611e978383613322565b611ea19190613303565b611ea96114fa565b611eb1612435565b611ebb91906132b3565b611ec591906132b3565b9250505090565b611ed46114fa565b611ebb612435565b600061092961152a60017ff4271262f3552a4108cde54dc75061de8de495709221d793b126e448522d6a80613322565b6000610929612cbe565b600061092961152a60017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37613322565b6000611f506126af565b60405163e838dfbb60e01b81529091506001600160a01b0382169063e838dfbb90611f7f90869060040161305f565b602060405180830381865afa158015611f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc0919061336f565b15611fe0578260405163e7d05e2760e01b81526004016108d6919061305f565b60405163e838dfbb60e01b81526001600160a01b0382169063e838dfbb9061200c90859060040161305f565b602060405180830381865afa158015612029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204d919061336f565b1561206d578160405163e7d05e2760e01b81526004016108d6919061305f565b505050565b6000610f96826123af565b60006120898333612357565b9050818110156120cb57604051637b936de360e01b81526001600160a01b038416600482015233602482015260448101829052606481018390526084016108d6565b600019811461206d5761206d8333610f7e8585613322565b600061210284836120f3876123af565b6120fd9190613322565b612cee565b61211a8383612110866123af565b6120fd91906132b3565b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161215f91815260200190565b60405180910390a35060019392505050565b600061092961152a60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd613322565b610c2761155c60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd613322565b6121d881612688565b610c2761155c60017f082b6d18de7b10e438e6b1002141db737519cb4ceed679bc815e3aac00cd2227613322565b61220f81612d3a565b610c2761155c60017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37613322565b61224681612688565b610c2761155c60017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780613322565b61227d81612688565b610c2761155c60017f3f075dea7ef99b1e5db245018e5e4ed8d2a0d93953f5932b2176bef59bd69061613322565b6122b482612d5d565b6040516001600160a01b038316907e043cf7635f276413ae358250286a479a631abd9d74d57d4aa0bb87ebc7d11790600090a26122f081612d94565b6040518181527f4c86ba184ea1a1558f84835ca34f6d67e222e8ee5cc4f324b8861dda4cf1740c9060200160405180910390a15050565b600061092961152a60017f8e9e2a1d30fed357d8a000c1131fc77ed65d2052918caf1ccc6eb1e7af3d13b6613322565b60008061238560017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847613322565b6001600160a01b039485166000908152602091825260408082209590961681529390525050205490565b6000806123dd60017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838613322565b6001600160a01b0390931660009081526020939093525050604090205490565b600080612408612cbe565b9050806124185750600092915050565b80612421611e62565b61242b9085613303565b61146591906132cb565b600061092961152a60017ffedfd2c285a57fb23bf45a3fe9ac02d36a76ebb72801b1c8aaf553d74e9d4653613322565b600061092961152a60017f082b6d18de7b10e438e6b1002141db737519cb4ceed679bc815e3aac00cd2227613322565b8051610c2757604051638d46fe0560e01b815260040160405180910390fd5b60006124e160017fb63f3482ec84cb93d74a71645ad2e9e896fa02723e42170b4aad20a4bed6cdd6613322565b825190915081906124f89082906020860190612ee1565b50505050565b600080612509612cbe565b9050806125195750600092915050565b612521611e62565b61242b8285613303565b61253481612688565b610c2761155c60017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb613322565b600061092961152a60017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb613322565b606060006125c160017fb63f3482ec84cb93d74a71645ad2e9e896fa02723e42170b4aad20a4bed6cdd6613322565b8054909150819081906125d390613595565b80601f01602080910402602001604051908101604052809291908181526020018280546125ff90613595565b801561264c5780601f106126215761010080835404028352916020019161264c565b820191906000526020600020905b81548152906001019060200180831161262f57829003601f168201915b50505050509250505090565b600061092961152a60017f3f075dea7ef99b1e5db245018e5e4ed8d2a0d93953f5932b2176bef59bd69061613322565b6001600160a01b038116610c275760405163f6b2911f60e01b815260040160405180910390fd5b600061092961152a60017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780613322565b610c2761155c60017ffedfd2c285a57fb23bf45a3fe9ac02d36a76ebb72801b1c8aaf553d74e9d4653613322565b610c2761155c60017f0f1e7733641e4d843128fea0d2ec90d3d06a40b0fe244ff603d8c1aa200dc0f9613322565b610c2761155c60017fd7f2d45e512a86049f7a113657b39731b6b558609584243063a52cd31a8eb529613322565b600080612774612327565b60405163c8a6dfd360e01b81526004810185905290915047906001600160a01b0383169063c8a6dfd390602401600060405180830381600087803b1580156127bb57600080fd5b505af11580156127cf573d6000803e3d6000fd5b50505050600081476127e19190613322565b9050801561282a576127f58161083e6114fa565b6040518181527fda841d3042d792e2509a333b9dcbd4b3dd9b9047d382011f8788fab90ca7e3c7906020015b60405180910390a15b949350505050565b60008061283d611edc565b90506001600160a01b0381166128565750600092915050565b604051638ede6b6b60e01b81526004810184905247906001600160a01b03831690638ede6b6b90602401600060405180830381600087803b15801561289a57600080fd5b505af11580156128ae573d6000803e3d6000fd5b50505050600081476128c09190613322565b9050801561282a576128d48161083e6114fa565b6040518181527fd500b67e5bd8019c0af744cadeec120d1b5e3d3a3a011f18cf182aa4c97947b690602001612821565b600061290e611f0c565b90508061292e57604051630d35acd760e21b815260040160405180910390fd5b6000612938611e62565b90506000612944611f16565b90506000816129538587613303565b61295d9190613303565b9050600061296b8387613303565b61297761271086613303565b6129819190613322565b90506000811561299a5761299582846132cb565b61299d565b60005b90508015612a2d5760006129af612465565b90506129bb8183612de0565b60006129c5611f0c565b905060006129d38a89613322565b60408051828152602081018c90529081018a9052606081018490529091506001600160a01b038416907f3d1669e813a9845c288f0e1f642a4343a451103b87886d12de37e63b39bbd9429060800160405180910390a25050505b50505050505050565b60008082612a42611e62565b612a4c9190613322565b905080612a6557829150612a608484612de0565b612a8e565b80612a6e611f0c565b612a789085613303565b612a8291906132cb565b9150612a8e8483612de0565b5092915050565b600061092961152a60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113613322565b6000612af260017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847613322565b6001600160a01b039485166000908152602091825260408082209590961681529390525091902055565b600061092961152a60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281613322565b610c2781612e4e565b610c2781612e85565b60608182601f011015612b84576040516323d5783d60e11b815260040160405180910390fd5b612b8e82846132b3565b84511015612baf57604051633b99b53d60e01b815260040160405180910390fd5b606082158015612bce5760405191506000825260208201604052612c18565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612c07578051835260209283019201612bef565b5050858452601f01601f1916604052505b50949350505050565b603881901c60ff908116603083901c8216602884901c8316602085901c8416601886901c8516601087901c8616600888811c9790971688881b61ff001617871b17861b17851b17841b17831b1790911b17604082901c8015612c8557612c856135ca565b5060c01b919050565b600061092961152a60017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260613322565b600061092961152a60017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b613322565b6000612d1b60017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838613322565b6001600160a01b03909316600090815260209390935250604090912055565b612710811115610c27576040516358d620b360e01b815260040160405180910390fd5b612d6681612688565b610c2761155c60017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260613322565b80612db25760405163a9cb9e0d60e01b815260040160405180910390fd5b610c2761155c60017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42613322565b612dfb81612dec612cbe565b612df691906132b3565b612eb3565b612e098282612110856123af565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b612e5781612688565b610c2761155c60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113613322565b610c2761155c60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281613322565b610c2761155c60017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b613322565b828054612eed90613595565b90600052602060002090601f016020900481019282612f0f5760008555612f55565b82601f10612f2857805160ff1916838001178555612f55565b82800160010185558215612f55579182015b82811115612f55578251825591602001919060010190612f3a565b50612f61929150612f65565b5090565b5b80821115612f615760008155600101612f66565b80356001600160a01b0381168114612f9157600080fd5b919050565b600060208284031215612fa857600080fd5b61146582612f7a565b60005b83811015612fcc578181015183820152602001612fb4565b838111156124f85750506000910152565b60008151808452612ff5816020860160208601612fb1565b601f01601f19169290920160200192915050565b6020815260006114656020830184612fdd565b6000806040838503121561302f57600080fd5b61303883612f7a565b946020939093013593505050565b60006020828403121561305857600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60008060006060848603121561308857600080fd5b61309184612f7a565b925061309f60208501612f7a565b9150604084013590509250925092565b60008060008060008060008060006101208a8c0312156130ce57600080fd5b6130d78a612f7a565b98506130e560208b01612f7a565b975060408a013596506130fa60608b01612f7a565b955061310860808b01612f7a565b945061311660a08b01612f7a565b935061312460c08b01612f7a565b925061313260e08b01612f7a565b91506101008a013590509295985092959850929598565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561318857613188613149565b604052919050565b600067ffffffffffffffff8211156131aa576131aa613149565b50601f01601f191660200190565b6000602082840312156131ca57600080fd5b813567ffffffffffffffff8111156131e157600080fd5b8201601f810184136131f257600080fd5b803561320561320082613190565b61315f565b81815285602083850101111561321a57600080fd5b81602084016020830137600091810160200191909152949350505050565b6000806000806080858703121561324e57600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561327d57600080fd5b61328683612f7a565b915061329460208401612f7a565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b600082198211156132c6576132c661329d565b500190565b6000826132e857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561331d5761331d61329d565b500290565b6000828210156133345761333461329d565b500390565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b60006020828403121561338157600080fd5b8151801515811461146557600080fd5b600082601f8301126133a257600080fd5b8151602067ffffffffffffffff808311156133bf576133bf613149565b8260051b6133ce83820161315f565b93845285810183019383810190888611156133e857600080fd5b84880192505b85831015611223578251848111156134065760008081fd5b8801603f81018a136134185760008081fd5b85810151604061342a61320083613190565b8281528c8284860101111561343f5760008081fd5b61344e838a8301848701612fb1565b855250505091840191908401906133ee565b6000806040838503121561347357600080fd5b825167ffffffffffffffff8082111561348b57600080fd5b61349786838701613391565b935060208501519150808211156134ad57600080fd5b506134ba85828601613391565b9150509250929050565b600083516134d6818460208801612fb1565b6001600160801b0319939093169190920190815260100192915050565b60008251613505818460208701612fb1565b9190910192915050565b60006020828403121561352157600080fd5b5051919050565b6000835161353a818460208801612fb1565b9190910191825250602001919050565b60808152600061355d6080830187612fdd565b828103602084015261356f8187612fdd565b905082810360408401526135838186612fdd565b91505082606083015295945050505050565b600181811c908216806135a957607f821691505b602082108114156118be57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052600160045260246000fdfea2646970667358221220970321c783abf715e67020d8e4b80f54819b7eacd341ba3f4ceafe86e46d3bd764736f6c634300080a0033"
        ],
        "deployedBytecode": [
            "0x60806040526004361061026b5760003560e01c80635639671511610144578063a9059cbb116100b6578063d04681561161007a578063d0468156146106e6578063d0e30db0146106fb578063dd62ed3e14610703578063efd6034714610723578063f79c3f021461072b578063fb5b82d01461074b5761027b565b8063a9059cbb14610669578063ac232bde14610689578063bf15af561461069c578063c5eff3d0146106b1578063cc48cd31146106c65761027b565b80637adbf973116101085780637adbf973146105bc578063833b1fce146105dc57806387f2adfb146105f157806395d89b41146106065780639b498e2614610634578063a457c2d7146106495761027b565b8063563967151461053257806358bf3c7f146105475780636e9960c31461056757806370a082311461057c578063799a19541461059c5761027b565b806323b872dd116101dd57806336bf3325116101a157806336bf33251461049657806339509351146104b35780633af9e669146104d357806346425ef0146104f35780635022820114610508578063540bc5ea1461051d5761027b565b806323b872dd146103f8578063281a312214610418578063291206f6146104385780632cb562e114610458578063313ce5671461047a5761027b565b80631311cf8d1161022f5780631311cf8d1461035957806313d86aed14610379578063143a08d414610399578063147bf6c4146103ae57806318160ddd146103ce5780631bcbfaba146103e35761027b565b806304843a171461029457806306fdde03146102bc578063095ea7b3146102ff5780630e18b6811461032f578063107d7fa0146103445761027b565b3661027b576102793361076b565b005b60405163574b16a760e11b815260040160405180910390fd5b3480156102a057600080fd5b506102a96107f2565b6040519081526020015b60405180910390f35b3480156102c857600080fd5b50604080518082019091526011815270098d2e2ead2c840a6e8c2d6cac8408aa89607b1b60208201525b6040516102b39190612ae6565b34801561030b57600080fd5b5061031f61031a366004612b15565b610801565b60405190151581526020016102b3565b34801561033b57600080fd5b50610279610857565b34801561035057600080fd5b506102a96108b7565b34801561036557600080fd5b50610279610374366004612b3f565b6108c1565b34801561038557600080fd5b50610279610394366004612b5a565b61093c565b3480156103a557600080fd5b506102a9610af5565b3480156103ba57600080fd5b506102796103c9366004612b3f565b610aff565b3480156103da57600080fd5b506102a9610b46565b3480156103ef57600080fd5b506102a9610b50565b34801561040457600080fd5b5061031f610413366004612b73565b610b5a565b34801561042457600080fd5b50610279610433366004612baf565b610c0d565b34801561044457600080fd5b50610279610453366004612b5a565b610def565b34801561046457600080fd5b5061046d610e69565b6040516102b39190612c49565b34801561048657600080fd5b50604051601281526020016102b3565b3480156104a257600080fd5b506102a96801bc16d674ec80000081565b3480156104bf57600080fd5b5061031f6104ce366004612b15565b610e73565b3480156104df57600080fd5b506102a96104ee366004612b3f565b610ee3565b3480156104ff57600080fd5b506102a9610efc565b34801561051457600080fd5b5061046d610f06565b34801561052957600080fd5b506102a9606081565b34801561053e57600080fd5b506102a9610f10565b34801561055357600080fd5b50610279610562366004612b3f565b610f1a565b34801561057357600080fd5b5061046d610f95565b34801561058857600080fd5b506102a9610597366004612b3f565b610f9f565b3480156105a857600080fd5b506102a96105b7366004612b5a565b610faa565b3480156105c857600080fd5b506102796105d7366004612b3f565b610fb5565b3480156105e857600080fd5b5061046d611030565b3480156105fd57600080fd5b506102a961103a565b34801561061257600080fd5b50604080518082019091526005815264098e68aa8960db1b60208201526102f2565b34801561064057600080fd5b5061046d611044565b34801561065557600080fd5b5061031f610664366004612b15565b61104e565b34801561067557600080fd5b5061031f610684366004612b15565b611066565b610279610697366004612b3f565b611105565b3480156106a857600080fd5b506102a9603081565b3480156106bd57600080fd5b5061046d611117565b3480156106d257600080fd5b506102796106e1366004612c5d565b611121565b3480156106f257600080fd5b5061046d61129b565b6102796112a5565b34801561070f57600080fd5b506102a961071e366004612c8f565b6112ae565b6102796112c1565b34801561073757600080fd5b506102a9610746366004612b5a565b6112fc565b34801561075757600080fd5b50610279610766366004612b3f565b611307565b34610789576040516395b66fe960e01b815260040160405180910390fd5b6107a434610795611382565b61079f9190612cd8565b6113b6565b6107af3382346113e9565b6040513481526001600160a01b0382169033907f3bc57f469ad6d10d7723ea226cd22bd2b9e527def2b529f6ab44645a166895829060200160405180910390a350565b60006107fc611382565b905090565b600061080e338484611583565b6040518281526001600160a01b0384169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259060200160405180910390a350600192915050565b61085f6115da565b6001600160a01b0316336001600160a01b03161461089b573360405163472511eb60e11b81526004016108929190612c49565b60405180910390fd5b6108ab6108a66115da565b6115e4565b6108b5600061162d565b565b60006107fc61166d565b6108c961169d565b6001600160a01b0316336001600160a01b0316146108fc573360405163472511eb60e11b81526004016108929190612c49565b610905816116a7565b6040516001600160a01b038216907f1da4c245099590dc40be61880c9b97792f3694d970acc1e67ac0e6cc90f3780d90600090a250565b6109446116d5565b6001600160a01b0316336001600160a01b031614610977573360405163472511eb60e11b81526004016108929190612c49565b6000610981611382565b905060006109a161099b6801bc16d674ec80000084612cf0565b846116df565b9050806109c157604051631036b5ad60e31b815260040160405180910390fd5b6000806109cd836116f4565b81519193509150806109f25760405163200149ad60e21b815260040160405180910390fd5b83811115610a1357604051635993bd5760e01b815260040160405180910390fd5b8151818114610a35576040516322e5ce4360e21b815260040160405180910390fd5b6000610a3f61177c565b905080610a5f57604051639be7315960e01b815260040160405180910390fd5b60005b83811015610aaf57610aa7868281518110610a7f57610a7f612d12565b6020026020010151868381518110610a9957610a99612d12565b6020026020010151846117ac565b600101610a62565b50610ad0610ac6846801bc16d674ec800000612d28565b61079f9089612d47565b610aeb83610adc611c34565b610ae69190612cd8565b611c64565b5050505050505050565b60006107fc611c92565b610b0761169d565b6001600160a01b0316336001600160a01b031614610b3a573360405163472511eb60e11b81526004016108929190612c49565b610b438161162d565b50565b60006107fc611d0c565b60006107fc611d16565b60008383610b688282611d46565b8380610b87576040516336b216db60e21b815260040160405180910390fd5b868580610b9383611e72565b1015610bb2576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b038816610beb57604051637617407560e11b81526001600160a01b038a16600482015260006024820152604401610892565b610bf58988611e7d565b610c00898989611ee8565b9998505050505050505050565b6000610c17611f64565b8114610c485780610c26611f64565b604051631cfd276760e31b815260048101929092526024820152604401610892565b610c5b610c56826001612cd8565b611f94565b610c64866115e4565b610c6d83611fc2565b6040516001600160a01b038416907f0cc5437d7c9c1d9eab549acbb533eea3e9868e9443dd75309ed5820b33a3774e90600090a2610caa82611ff9565b6040518281527fbd533e726baaf59b36f3914d950053f7e78f527057c97cd3f0043257fc0fc8849060200160405180910390a1610ce6896116a7565b6040516001600160a01b038a16907f1da4c245099590dc40be61880c9b97792f3694d970acc1e67ac0e6cc90f3780d90600090a2610d2385612030565b6040516001600160a01b038616907f30f015a5d3c72c0a9414538199baa022323a483fa9e4ba2cd581596cf8ca042490600090a2610d6084612067565b6040516001600160a01b038516907fffc0721ef0563a1b0a51a0dc92113025f33ca434ada9ee3eebff2f385d2a8f9a90600090a2610d9e8a8961209e565b610da787610ff0565b7f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610ddb93929190612d5e565b60405180910390a150505050505050505050565b610df761169d565b6001600160a01b0316336001600160a01b031614610e2a573360405163472511eb60e11b81526004016108929190612c49565b610e3381611ff9565b6040518181527fbd533e726baaf59b36f3914d950053f7e78f527057c97cd3f0043257fc0fc8849060200160405180910390a150565b60006107fc61211a565b60008082610e81338661214a565b610e8b9190612cd8565b9050610e98338583611583565b6040518181526001600160a01b0385169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906020015b60405180910390a35060019392505050565b6000610ef6610ef1836121a2565b6121f0565b92915050565b60006107fc612228565b60006107fc612258565b60006107fc61177c565b610f2261169d565b6001600160a01b0316336001600160a01b031614610f55573360405163472511eb60e11b81526004016108929190612c49565b610f5e81612030565b6040516001600160a01b038216907f30f015a5d3c72c0a9414538199baa022323a483fa9e4ba2cd581596cf8ca042490600090a250565b60006107fc61169d565b6000610ef682611e72565b6000610ef682612288565b610fbd6116d5565b6001600160a01b0316336001600160a01b031614610ff0573360405163472511eb60e11b81526004016108929190612c49565b610ff9816122b5565b6040516001600160a01b038216907fd3b5d1e0ffaeff528910f3663f0adace7694ab8241d58e17a91351ced2e0803190600090a250565b60006107fc6122ec565b60006107fc611c34565b60006107fc61231c565b6000808261105c338661214a565b610e8b9190612d47565b600033836110748282611d46565b8380611093576040516336b216db60e21b815260040160405180910390fd5b33858061109f83611e72565b10156110be576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b0388166110ee57604051637617407560e11b815233600482015260006024820152604401610892565b6110f9338989611ee8565b98975050505050505050565b61110e8161234c565b610b438161076b565b60006107fc612373565b6111296122ec565b6001600160a01b0316336001600160a01b03161461115c573360405163472511eb60e11b81526004016108929190612c49565b611164611c34565b8411156111965783611174611c34565b6040516376179ac560e01b815260048101929092526024820152604401610892565b60006111a061166d565b6111aa9086612d47565b905060006111c1826801bc16d674ec800000612d28565b6111c9612228565b6111d39190612cd8565b90506111de856123a3565b6111e7866123d1565b6111f0846123ff565b6000856111fd8386612cd8565b111561122357611220866112118487612cd8565b61121b9190612d47565b61242d565b90505b61122d8187612cd8565b82101561125157611251826112428389612cd8565b61124c9190612d47565b612504565b60408051888152602081018890529081018690527f25d7358447891786a139ae7149548f3232a8c95f2ea6065c69c5bd7c39cd386c9060600160405180910390a150505050505050565b60006107fc6115da565b6108b53361076b565b60006112ba838361214a565b9392505050565b6112c961211a565b6001600160a01b0316336001600160a01b0316146108b5573360405163472511eb60e11b81526004016108929190612c49565b6000610ef6826121f0565b61130f61169d565b6001600160a01b0316336001600160a01b031614611342573360405163472511eb60e11b81526004016108929190612c49565b61134b81611fc2565b6040516001600160a01b038216907f0cc5437d7c9c1d9eab549acbb533eea3e9868e9443dd75309ed5820b33a3774e90600090a250565b60006107fc6113b260017f2b6136e423ab70d76431e2a635e877e16ea2dd9a895e054ad7f35f89d6c7b711612d47565b5490565b610b436113e460017f2b6136e423ab70d76431e2a635e877e16ea2dd9a895e054ad7f35f89d6c7b711612d47565b829055565b60006113f58483612636565b90506000611401612373565b9050836001600160a01b0316856001600160a01b0316141561148257604051632d20488160e11b81526001600160a01b03868116600483015260016024830152821690635a4091029060440160006040518083038186803b15801561146557600080fd5b505afa158015611479573d6000803e3d6000fd5b5050505061157c565b604051632d20488160e11b81526001600160a01b03868116600483015260016024830152821690635a4091029060440160006040518083038186803b1580156114ca57600080fd5b505afa1580156114de573d6000803e3d6000fd5b505060405163e838dfbb60e01b81526001600160a01b038416925063e838dfbb915061150e908790600401612c49565b602060405180830381865afa15801561152b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154f9190612d94565b1561156f578360405163e7d05e2760e01b81526004016108929190612c49565b61157a858584611ee8565b505b5050505050565b60006115b060017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847612d47565b6001600160a01b039485166000908152602091825260408082209590961681529390525091902055565b60006107fc612695565b6115ed8161234c565b6115f6816126c5565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b611636816126ce565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b60006107fc6113b260017f0f1e7733641e4d843128fea0d2ec90d3d06a40b0fe244ff603d8c1aa200dc0f9612d47565b60006107fc6126d7565b610b436113e460017f8e9e2a1d30fed357d8a000c1131fc77ed65d2052918caf1ccc6eb1e7af3d13b6612d47565b60006107fc610f95565b60008183116116ee57826112ba565b50919050565b6060806116ff61231c565b6001600160a01b031663a1947323846040518263ffffffff1660e01b815260040161172c91815260200190565b6000604051808303816000875af115801561174b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117739190810190612ee2565b91509150915091565b60006107fc6113b260017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42612d47565b60308351146117ce5760405163050cb55360e41b815260040160405180910390fd5b60608251146117f05760405163408ebd3960e01b815260040160405180910390fd5b6801bc16d674ec800000600061180a633b9aca0083612cf0565b90506000600286600060801b604051602001611827929190612f46565b60408051601f198184030181529082905261184191612f75565b602060405180830381855afa15801561185e573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906118819190612f91565b905060006002806118958860006040612707565b6040516118a29190612f75565b602060405180830381855afa1580156118bf573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906118e29190612f91565b60026118fa8960406118f5816060612d47565b612707565b60405161190d9190600090602001612faa565b60408051601f198184030181529082905261192791612f75565b602060405180830381855afa158015611944573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906119679190612f91565b60408051602081019390935282015260600160408051601f198184030181529082905261199391612f75565b602060405180830381855afa1580156119b0573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906119d39190612f91565b9050600060028084886040516020016119f6929190918252602082015260400190565b60408051601f1981840301815290829052611a1091612f75565b602060405180830381855afa158015611a2d573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611a509190612f91565b6002611a5b876127ca565b604080516020810192909252810186905260600160408051601f1981840301815290829052611a8991612f75565b602060405180830381855afa158015611aa6573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611ac99190612f91565b60408051602081019390935282015260600160408051601f1981840301815290829052611af591612f75565b602060405180830381855afa158015611b12573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611b359190612f91565b90506000611b438647612d47565b9050611b4d612837565b6001600160a01b03166322895118878b8a604051602001611b7091815260200190565b6040516020818303038152906040528c876040518663ffffffff1660e01b8152600401611ba09493929190612fcc565b6000604051808303818588803b158015611bb957600080fd5b505af1158015611bcd573d6000803e3d6000fd5b5050505050804714611bf257604051638051a6bb60e01b815260040160405180910390fd5b7f11553d182c6d24df901ccbb837d640c1ee9994876a88dccc8ddfd7ebab9b6ce189604051611c219190612ae6565b60405180910390a1505050505050505050565b60006107fc6113b260017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8612d47565b610b436113e460017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8612d47565b600080611c9d61166d565b90506000611ca9611c34565b905080821015611cfc576801bc16d674ec800000611cc78383612d47565b611cd19190612d28565b611cd9611382565b611ce1612228565b611ceb9190612cd8565b611cf59190612cd8565b9250505090565b611d04611382565b611ceb612228565b60006107fc612867565b60006107fc6113b260017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37612d47565b6000611d50612373565b60405163e838dfbb60e01b81529091506001600160a01b0382169063e838dfbb90611d7f908690600401612c49565b602060405180830381865afa158015611d9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc09190612d94565b15611de0578260405163e7d05e2760e01b81526004016108929190612c49565b60405163e838dfbb60e01b81526001600160a01b0382169063e838dfbb90611e0c908590600401612c49565b602060405180830381865afa158015611e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4d9190612d94565b15611e6d578160405163e7d05e2760e01b81526004016108929190612c49565b505050565b6000610ef6826121a2565b6000611e89833361214a565b905081811015611ecb57604051637b936de360e01b81526001600160a01b03841660048201523360248201526044810182905260648101839052608401610892565b6000198114611e6d57611e6d8333611ee38585612d47565b611583565b6000611f078483611ef8876121a2565b611f029190612d47565b612897565b611f1f8383611f15866121a2565b611f029190612cd8565b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610ed191815260200190565b60006107fc6113b260017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd612d47565b610b436113e460017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd612d47565b611fcb8161234c565b610b436113e460017f082b6d18de7b10e438e6b1002141db737519cb4ceed679bc815e3aac00cd2227612d47565b612002816128e3565b610b436113e460017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37612d47565b6120398161234c565b610b436113e460017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780612d47565b6120708161234c565b610b436113e460017f3f075dea7ef99b1e5db245018e5e4ed8d2a0d93953f5932b2176bef59bd69061612d47565b6120a782612906565b6040516001600160a01b038316907e043cf7635f276413ae358250286a479a631abd9d74d57d4aa0bb87ebc7d11790600090a26120e38161293d565b6040518181527f4c86ba184ea1a1558f84835ca34f6d67e222e8ee5cc4f324b8861dda4cf1740c9060200160405180910390a15050565b60006107fc6113b260017f8e9e2a1d30fed357d8a000c1131fc77ed65d2052918caf1ccc6eb1e7af3d13b6612d47565b60008061217860017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847612d47565b6001600160a01b039485166000908152602091825260408082209590961681529390525050205490565b6000806121d060017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838612d47565b6001600160a01b0390931660009081526020939093525050604090205490565b6000806121fb612867565b90508061220b5750600092915050565b80612214611c92565b61221e9085612d28565b6112ba9190612cf0565b60006107fc6113b260017ffedfd2c285a57fb23bf45a3fe9ac02d36a76ebb72801b1c8aaf553d74e9d4653612d47565b60006107fc6113b260017f082b6d18de7b10e438e6b1002141db737519cb4ceed679bc815e3aac00cd2227612d47565b600080612293612867565b9050806122a35750600092915050565b6122ab611c92565b61221e8285612d28565b6122be8161234c565b610b436113e460017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb612d47565b60006107fc6113b260017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb612d47565b60006107fc6113b260017f3f075dea7ef99b1e5db245018e5e4ed8d2a0d93953f5932b2176bef59bd69061612d47565b6001600160a01b038116610b435760405163f6b2911f60e01b815260040160405180910390fd5b60006107fc6113b260017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780612d47565b610b436113e460017ffedfd2c285a57fb23bf45a3fe9ac02d36a76ebb72801b1c8aaf553d74e9d4653612d47565b610b436113e460017f0f1e7733641e4d843128fea0d2ec90d3d06a40b0fe244ff603d8c1aa200dc0f9612d47565b610b436113e460017fd7f2d45e512a86049f7a113657b39731b6b558609584243063a52cd31a8eb529612d47565b60008061243861211a565b90506001600160a01b0381166124515750600092915050565b60405163c8a6dfd360e01b81526004810184905247906001600160a01b0383169063c8a6dfd390602401600060405180830381600087803b15801561249557600080fd5b505af11580156124a9573d6000803e3d6000fd5b50505050600081476124bb9190612d47565b90506124c981610795611382565b6040518181527fda841d3042d792e2509a333b9dcbd4b3dd9b9047d382011f8788fab90ca7e3c79060200160405180910390a1949350505050565b600061250e611d0c565b90508061252e57604051630d35acd760e21b815260040160405180910390fd5b6000612538611c92565b90506000612544611d16565b90506000816125538587612d28565b61255d9190612d28565b9050600061256b8387612d28565b61257761271086612d28565b6125819190612d47565b90506000811561259a576125958284612cf0565b61259d565b60005b9050801561262d5760006125af612258565b90506125bb8183612989565b60006125c5611d0c565b905060006125d38a89612d47565b60408051828152602081018c90529081018a9052606081018490529091506001600160a01b038416907f3d1669e813a9845c288f0e1f642a4343a451103b87886d12de37e63b39bbd9429060800160405180910390a25050505b50505050505050565b60008082612642611c92565b61264c9190612d47565b905080612665578291506126608484612989565b61268e565b8061266e611d0c565b6126789085612d28565b6126829190612cf0565b915061268e8483612989565b5092915050565b60006107fc6113b260017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281612d47565b610b43816129f7565b610b4381612a2e565b60006107fc6113b260017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113612d47565b60608182601f01101561272d576040516323d5783d60e11b815260040160405180910390fd5b6127378284612cd8565b8451101561275857604051633b99b53d60e01b815260040160405180910390fd5b60608215801561277757604051915060008252602082016040526127c1565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156127b0578051835260209283019201612798565b5050858452601f01601f1916604052505b50949350505050565b603881901c60ff908116603083901c8216602884901c8316602085901c8416601886901c8516601087901c8616600888811c9790971688881b61ff001617871b17861b17851b17841b17831b1790911b17604082901c801561282e5761282e613017565b5060c01b919050565b60006107fc6113b260017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260612d47565b60006107fc6113b260017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b612d47565b60006128c460017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838612d47565b6001600160a01b03909316600090815260209390935250604090912055565b612710811115610b43576040516358d620b360e01b815260040160405180910390fd5b61290f8161234c565b610b436113e460017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260612d47565b8061295b5760405163a9cb9e0d60e01b815260040160405180910390fd5b610b436113e460017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42612d47565b6129a481612995612867565b61299f9190612cd8565b612a5c565b6129b28282611f15856121a2565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b612a008161234c565b610b436113e460017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113612d47565b610b436113e460017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281612d47565b610b436113e460017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b612d47565b60005b83811015612aa5578181015183820152602001612a8d565b83811115612ab4576000848401525b50505050565b60008151808452612ad2816020860160208601612a8a565b601f01601f19169290920160200192915050565b6020815260006112ba6020830184612aba565b80356001600160a01b0381168114612b1057600080fd5b919050565b60008060408385031215612b2857600080fd5b612b3183612af9565b946020939093013593505050565b600060208284031215612b5157600080fd5b6112ba82612af9565b600060208284031215612b6c57600080fd5b5035919050565b600080600060608486031215612b8857600080fd5b612b9184612af9565b9250612b9f60208501612af9565b9150604084013590509250925092565b60008060008060008060008060006101208a8c031215612bce57600080fd5b612bd78a612af9565b9850612be560208b01612af9565b975060408a01359650612bfa60608b01612af9565b9550612c0860808b01612af9565b9450612c1660a08b01612af9565b9350612c2460c08b01612af9565b9250612c3260e08b01612af9565b91506101008a013590509295985092959850929598565b6001600160a01b0391909116815260200190565b60008060008060808587031215612c7357600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215612ca257600080fd5b612cab83612af9565b9150612cb960208401612af9565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612ceb57612ceb612cc2565b500190565b600082612d0d57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615612d4257612d42612cc2565b500290565b600082821015612d5957612d59612cc2565b500390565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b600060208284031215612da657600080fd5b815180151581146112ba57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612df557612df5612db6565b604052919050565b6000601f8381840112612e0f57600080fd5b8251602067ffffffffffffffff80831115612e2c57612e2c612db6565b8260051b612e3b838201612dcc565b9384528681018301938381019089861115612e5557600080fd5b84890192505b85831015610c0057825184811115612e735760008081fd5b8901603f81018b13612e855760008081fd5b85810151604086821115612e9b57612e9b612db6565b612eac828b01601f19168901612dcc565b8281528d82848601011115612ec15760008081fd5b612ed0838a8301848701612a8a565b85525050509184019190840190612e5b565b60008060408385031215612ef557600080fd5b825167ffffffffffffffff80821115612f0d57600080fd5b612f1986838701612dfd565b93506020850151915080821115612f2f57600080fd5b50612f3c85828601612dfd565b9150509250929050565b60008351612f58818460208801612a8a565b6001600160801b0319939093169190920190815260100192915050565b60008251612f87818460208701612a8a565b9190910192915050565b600060208284031215612fa357600080fd5b5051919050565b60008351612fbc818460208801612a8a565b9190910191825250602001919050565b608081526000612fdf6080830187612aba565b8281036020840152612ff18187612aba565b905082810360408401526130058186612aba565b91505082606083015295945050505050565b634e487b7160e01b600052600160045260246000fdfea2646970667358221220a0ca0e5050c3d44537e9bbacc1c4f8a7319eb9f6a0d9bbaa5d300df1cd91a0b764736f6c634300080a0033",
            "0x60806040526004361061026b5760003560e01c80635639671511610144578063a9059cbb116100b6578063d04681561161007a578063d0468156146106e6578063d0e30db0146106fb578063dd62ed3e14610703578063efd6034714610723578063f79c3f021461072b578063fb5b82d01461074b5761027b565b8063a9059cbb14610669578063ac232bde14610689578063bf15af561461069c578063c5eff3d0146106b1578063cc48cd31146106c65761027b565b80637adbf973116101085780637adbf973146105bc578063833b1fce146105dc57806387f2adfb146105f157806395d89b41146106065780639b498e2614610634578063a457c2d7146106495761027b565b8063563967151461053257806358bf3c7f146105475780636e9960c31461056757806370a082311461057c578063799a19541461059c5761027b565b806323b872dd116101dd57806336bf3325116101a157806336bf33251461049657806339509351146104b35780633af9e669146104d357806346425ef0146104f35780635022820114610508578063540bc5ea1461051d5761027b565b806323b872dd146103f8578063281a312214610418578063291206f6146104385780632cb562e114610458578063313ce5671461047a5761027b565b80631311cf8d1161022f5780631311cf8d1461035957806313d86aed14610379578063143a08d414610399578063147bf6c4146103ae57806318160ddd146103ce5780631bcbfaba146103e35761027b565b806304843a171461029457806306fdde03146102bc578063095ea7b3146102ff5780630e18b6811461032f578063107d7fa0146103445761027b565b3661027b576102793361076b565b005b60405163574b16a760e11b815260040160405180910390fd5b3480156102a057600080fd5b506102a96107f2565b6040519081526020015b60405180910390f35b3480156102c857600080fd5b50604080518082019091526011815270098d2e2ead2c840a6e8c2d6cac8408aa89607b1b60208201525b6040516102b39190612ad7565b34801561030b57600080fd5b5061031f61031a366004612b06565b610801565b60405190151581526020016102b3565b34801561033b57600080fd5b50610279610817565b34801561035057600080fd5b506102a9610877565b34801561036557600080fd5b50610279610374366004612b30565b610881565b34801561038557600080fd5b50610279610394366004612b4b565b6108fc565b3480156103a557600080fd5b506102a9610ab5565b3480156103ba57600080fd5b506102796103c9366004612b30565b610abf565b3480156103da57600080fd5b506102a9610b06565b3480156103ef57600080fd5b506102a9610b10565b34801561040457600080fd5b5061031f610413366004612b64565b610b1a565b34801561042457600080fd5b50610279610433366004612ba0565b610bcd565b34801561044457600080fd5b50610279610453366004612b4b565b610daf565b34801561046457600080fd5b5061046d610e29565b6040516102b39190612c3a565b34801561048657600080fd5b50604051601281526020016102b3565b3480156104a257600080fd5b506102a96801bc16d674ec80000081565b3480156104bf57600080fd5b5061031f6104ce366004612b06565b610e33565b3480156104df57600080fd5b506102a96104ee366004612b30565b610e54565b3480156104ff57600080fd5b506102a9610e6d565b34801561051457600080fd5b5061046d610e77565b34801561052957600080fd5b506102a9606081565b34801561053e57600080fd5b506102a9610e81565b34801561055357600080fd5b50610279610562366004612b30565b610e8b565b34801561057357600080fd5b5061046d610f06565b34801561058857600080fd5b506102a9610597366004612b30565b610f10565b3480156105a857600080fd5b506102a96105b7366004612b4b565b610f1b565b3480156105c857600080fd5b506102796105d7366004612b30565b610f26565b3480156105e857600080fd5b5061046d610fa1565b3480156105fd57600080fd5b506102a9610fab565b34801561061257600080fd5b50604080518082019091526005815264098e68aa8960db1b60208201526102f2565b34801561064057600080fd5b5061046d610fb5565b34801561065557600080fd5b5061031f610664366004612b06565b610fbf565b34801561067557600080fd5b5061031f610684366004612b06565b610fdb565b610279610697366004612b30565b61107a565b3480156106a857600080fd5b506102a9603081565b3480156106bd57600080fd5b5061046d61108c565b3480156106d257600080fd5b506102796106e1366004612c4e565b611096565b3480156106f257600080fd5b5061046d611210565b61027961121a565b34801561070f57600080fd5b506102a961071e366004612c80565b611223565b610279611236565b34801561073757600080fd5b506102a9610746366004612b4b565b611271565b34801561075757600080fd5b50610279610766366004612b30565b61127c565b34610789576040516395b66fe960e01b815260040160405180910390fd5b6107a4346107956112f7565b61079f9190612cc9565b61132b565b6107af33823461135e565b6040513481526001600160a01b0382169033907f3bc57f469ad6d10d7723ea226cd22bd2b9e527def2b529f6ab44645a166895829060200160405180910390a350565b60006107fc6112f7565b905090565b600061080e3384846114f8565b50600192915050565b61081f611567565b6001600160a01b0316336001600160a01b03161461085b573360405163472511eb60e11b81526004016108529190612c3a565b60405180910390fd5b61086b610866611567565b611571565b61087560006115ba565b565b60006107fc6115fa565b61088961162a565b6001600160a01b0316336001600160a01b0316146108bc573360405163472511eb60e11b81526004016108529190612c3a565b6108c581611634565b6040516001600160a01b038216907f1da4c245099590dc40be61880c9b97792f3694d970acc1e67ac0e6cc90f3780d90600090a250565b610904611662565b6001600160a01b0316336001600160a01b031614610937573360405163472511eb60e11b81526004016108529190612c3a565b60006109416112f7565b9050600061096161095b6801bc16d674ec80000084612ce1565b8461166c565b90508061098157604051631036b5ad60e31b815260040160405180910390fd5b60008061098d83611681565b81519193509150806109b25760405163200149ad60e21b815260040160405180910390fd5b838111156109d357604051635993bd5760e01b815260040160405180910390fd5b81518181146109f5576040516322e5ce4360e21b815260040160405180910390fd5b60006109ff611709565b905080610a1f57604051639be7315960e01b815260040160405180910390fd5b60005b83811015610a6f57610a67868281518110610a3f57610a3f612d03565b6020026020010151868381518110610a5957610a59612d03565b602002602001015184611739565b600101610a22565b50610a90610a86846801bc16d674ec800000612d19565b61079f9089612d38565b610aab83610a9c611bc1565b610aa69190612cc9565b611bf1565b5050505050505050565b60006107fc611c1f565b610ac761162a565b6001600160a01b0316336001600160a01b031614610afa573360405163472511eb60e11b81526004016108529190612c3a565b610b03816115ba565b50565b60006107fc611c99565b60006107fc611ca3565b60008383610b288282611cd3565b8380610b47576040516336b216db60e21b815260040160405180910390fd5b868580610b5383611dff565b1015610b72576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b038816610bab57604051637617407560e11b81526001600160a01b038a16600482015260006024820152604401610852565b610bb58988611e0a565b610bc0898989611e70565b9998505050505050505050565b6000610bd7611efe565b8114610c085780610be6611efe565b604051631cfd276760e31b815260048101929092526024820152604401610852565b610c1b610c16826001612cc9565b611f2e565b610c2486611571565b610c2d83611f5c565b6040516001600160a01b038416907f0cc5437d7c9c1d9eab549acbb533eea3e9868e9443dd75309ed5820b33a3774e90600090a2610c6a82611f93565b6040518281527fbd533e726baaf59b36f3914d950053f7e78f527057c97cd3f0043257fc0fc8849060200160405180910390a1610ca689611634565b6040516001600160a01b038a16907f1da4c245099590dc40be61880c9b97792f3694d970acc1e67ac0e6cc90f3780d90600090a2610ce385611fca565b6040516001600160a01b038616907f30f015a5d3c72c0a9414538199baa022323a483fa9e4ba2cd581596cf8ca042490600090a2610d2084612001565b6040516001600160a01b038516907fffc0721ef0563a1b0a51a0dc92113025f33ca434ada9ee3eebff2f385d2a8f9a90600090a2610d5e8a89612038565b610d6787610f61565b7f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610d9b93929190612d4f565b60405180910390a150505050505050505050565b610db761162a565b6001600160a01b0316336001600160a01b031614610dea573360405163472511eb60e11b81526004016108529190612c3a565b610df381611f93565b6040518181527fbd533e726baaf59b36f3914d950053f7e78f527057c97cd3f0043257fc0fc8849060200160405180910390a150565b60006107fc6120b4565b600061080e338484610e4533886120e4565b610e4f9190612cc9565b6114f8565b6000610e67610e628361213c565b61218a565b92915050565b60006107fc6121c2565b60006107fc6121f2565b60006107fc611709565b610e9361162a565b6001600160a01b0316336001600160a01b031614610ec6573360405163472511eb60e11b81526004016108529190612c3a565b610ecf81611fca565b6040516001600160a01b038216907f30f015a5d3c72c0a9414538199baa022323a483fa9e4ba2cd581596cf8ca042490600090a250565b60006107fc61162a565b6000610e6782611dff565b6000610e6782612222565b610f2e611662565b6001600160a01b0316336001600160a01b031614610f61573360405163472511eb60e11b81526004016108529190612c3a565b610f6a8161224f565b6040516001600160a01b038216907fd3b5d1e0ffaeff528910f3663f0adace7694ab8241d58e17a91351ced2e0803190600090a250565b60006107fc612286565b60006107fc611bc1565b60006107fc6122b6565b600061080e338484610fd133886120e4565b610e4f9190612d38565b60003383610fe98282611cd3565b8380611008576040516336b216db60e21b815260040160405180910390fd5b33858061101483611dff565b1015611033576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b03881661106357604051637617407560e11b815233600482015260006024820152604401610852565b61106e338989611e70565b98975050505050505050565b611083816122e6565b610b038161076b565b60006107fc61230d565b61109e612286565b6001600160a01b0316336001600160a01b0316146110d1573360405163472511eb60e11b81526004016108529190612c3a565b6110d9611bc1565b84111561110b57836110e9611bc1565b6040516376179ac560e01b815260048101929092526024820152604401610852565b60006111156115fa565b61111f9086612d38565b90506000611136826801bc16d674ec800000612d19565b61113e6121c2565b6111489190612cc9565b90506111538561233d565b61115c8661236b565b61116584612399565b6000856111728386612cc9565b111561119857611195866111868487612cc9565b6111909190612d38565b6123c7565b90505b6111a28187612cc9565b8210156111c6576111c6826111b78389612cc9565b6111c19190612d38565b61249e565b60408051888152602081018890529081018690527f25d7358447891786a139ae7149548f3232a8c95f2ea6065c69c5bd7c39cd386c9060600160405180910390a150505050505050565b60006107fc611567565b6108753361076b565b600061122f83836120e4565b9392505050565b61123e6120b4565b6001600160a01b0316336001600160a01b031614610875573360405163472511eb60e11b81526004016108529190612c3a565b6000610e678261218a565b61128461162a565b6001600160a01b0316336001600160a01b0316146112b7573360405163472511eb60e11b81526004016108529190612c3a565b6112c081611f5c565b6040516001600160a01b038216907f0cc5437d7c9c1d9eab549acbb533eea3e9868e9443dd75309ed5820b33a3774e90600090a250565b60006107fc61132760017f2b6136e423ab70d76431e2a635e877e16ea2dd9a895e054ad7f35f89d6c7b711612d38565b5490565b610b0361135960017f2b6136e423ab70d76431e2a635e877e16ea2dd9a895e054ad7f35f89d6c7b711612d38565b829055565b600061136a84836125d0565b9050600061137661230d565b9050836001600160a01b0316856001600160a01b031614156113f757604051632d20488160e11b81526001600160a01b03868116600483015260016024830152821690635a4091029060440160006040518083038186803b1580156113da57600080fd5b505afa1580156113ee573d6000803e3d6000fd5b505050506114f1565b604051632d20488160e11b81526001600160a01b03868116600483015260016024830152821690635a4091029060440160006040518083038186803b15801561143f57600080fd5b505afa158015611453573d6000803e3d6000fd5b505060405163e838dfbb60e01b81526001600160a01b038416925063e838dfbb9150611483908790600401612c3a565b602060405180830381865afa1580156114a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c49190612d85565b156114e4578360405163e7d05e2760e01b81526004016108529190612c3a565b6114ef858584611e70565b505b5050505050565b611501836122e6565b61150a826122e6565b61151583838361262f565b816001600160a01b0316836001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161155a91815260200190565b60405180910390a3505050565b60006107fc612686565b61157a816122e6565b611583816126b6565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b6115c3816126bf565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b60006107fc61132760017f0f1e7733641e4d843128fea0d2ec90d3d06a40b0fe244ff603d8c1aa200dc0f9612d38565b60006107fc6126c8565b610b0361135960017f8e9e2a1d30fed357d8a000c1131fc77ed65d2052918caf1ccc6eb1e7af3d13b6612d38565b60006107fc610f06565b600081831161167b578261122f565b50919050565b60608061168c6122b6565b6001600160a01b031663a1947323846040518263ffffffff1660e01b81526004016116b991815260200190565b6000604051808303816000875af11580156116d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117009190810190612ed3565b91509150915091565b60006107fc61132760017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42612d38565b603083511461175b5760405163050cb55360e41b815260040160405180910390fd5b606082511461177d5760405163408ebd3960e01b815260040160405180910390fd5b6801bc16d674ec8000006000611797633b9aca0083612ce1565b90506000600286600060801b6040516020016117b4929190612f37565b60408051601f19818403018152908290526117ce91612f66565b602060405180830381855afa1580156117eb573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061180e9190612f82565b9050600060028061182288600060406126f8565b60405161182f9190612f66565b602060405180830381855afa15801561184c573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061186f9190612f82565b6002611887896040611882816060612d38565b6126f8565b60405161189a9190600090602001612f9b565b60408051601f19818403018152908290526118b491612f66565b602060405180830381855afa1580156118d1573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906118f49190612f82565b60408051602081019390935282015260600160408051601f198184030181529082905261192091612f66565b602060405180830381855afa15801561193d573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906119609190612f82565b905060006002808488604051602001611983929190918252602082015260400190565b60408051601f198184030181529082905261199d91612f66565b602060405180830381855afa1580156119ba573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906119dd9190612f82565b60026119e8876127bb565b604080516020810192909252810186905260600160408051601f1981840301815290829052611a1691612f66565b602060405180830381855afa158015611a33573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611a569190612f82565b60408051602081019390935282015260600160408051601f1981840301815290829052611a8291612f66565b602060405180830381855afa158015611a9f573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611ac29190612f82565b90506000611ad08647612d38565b9050611ada612828565b6001600160a01b03166322895118878b8a604051602001611afd91815260200190565b6040516020818303038152906040528c876040518663ffffffff1660e01b8152600401611b2d9493929190612fbd565b6000604051808303818588803b158015611b4657600080fd5b505af1158015611b5a573d6000803e3d6000fd5b5050505050804714611b7f57604051638051a6bb60e01b815260040160405180910390fd5b7f11553d182c6d24df901ccbb837d640c1ee9994876a88dccc8ddfd7ebab9b6ce189604051611bae9190612ad7565b60405180910390a1505050505050505050565b60006107fc61132760017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8612d38565b610b0361135960017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8612d38565b600080611c2a6115fa565b90506000611c36611bc1565b905080821015611c89576801bc16d674ec800000611c548383612d38565b611c5e9190612d19565b611c666112f7565b611c6e6121c2565b611c789190612cc9565b611c829190612cc9565b9250505090565b611c916112f7565b611c786121c2565b60006107fc612858565b60006107fc61132760017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37612d38565b6000611cdd61230d565b60405163e838dfbb60e01b81529091506001600160a01b0382169063e838dfbb90611d0c908690600401612c3a565b602060405180830381865afa158015611d29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4d9190612d85565b15611d6d578260405163e7d05e2760e01b81526004016108529190612c3a565b60405163e838dfbb60e01b81526001600160a01b0382169063e838dfbb90611d99908590600401612c3a565b602060405180830381865afa158015611db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dda9190612d85565b15611dfa578160405163e7d05e2760e01b81526004016108529190612c3a565b505050565b6000610e678261213c565b6000611e1683336120e4565b905081811015611e5857604051637b936de360e01b81526001600160a01b03841660048201523360248201526044810182905260648101839052608401610852565b6000198114611dfa57611dfa8333610e4f8585612d38565b6000611e8f8483611e808761213c565b611e8a9190612d38565b612888565b611ea78383611e9d8661213c565b611e8a9190612cc9565b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611eec91815260200190565b60405180910390a35060019392505050565b60006107fc61132760017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd612d38565b610b0361135960017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd612d38565b611f65816122e6565b610b0361135960017f082b6d18de7b10e438e6b1002141db737519cb4ceed679bc815e3aac00cd2227612d38565b611f9c816128d4565b610b0361135960017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37612d38565b611fd3816122e6565b610b0361135960017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780612d38565b61200a816122e6565b610b0361135960017f3f075dea7ef99b1e5db245018e5e4ed8d2a0d93953f5932b2176bef59bd69061612d38565b612041826128f7565b6040516001600160a01b038316907e043cf7635f276413ae358250286a479a631abd9d74d57d4aa0bb87ebc7d11790600090a261207d8161292e565b6040518181527f4c86ba184ea1a1558f84835ca34f6d67e222e8ee5cc4f324b8861dda4cf1740c9060200160405180910390a15050565b60006107fc61132760017f8e9e2a1d30fed357d8a000c1131fc77ed65d2052918caf1ccc6eb1e7af3d13b6612d38565b60008061211260017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847612d38565b6001600160a01b039485166000908152602091825260408082209590961681529390525050205490565b60008061216a60017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838612d38565b6001600160a01b0390931660009081526020939093525050604090205490565b600080612195612858565b9050806121a55750600092915050565b806121ae611c1f565b6121b89085612d19565b61122f9190612ce1565b60006107fc61132760017ffedfd2c285a57fb23bf45a3fe9ac02d36a76ebb72801b1c8aaf553d74e9d4653612d38565b60006107fc61132760017f082b6d18de7b10e438e6b1002141db737519cb4ceed679bc815e3aac00cd2227612d38565b60008061222d612858565b90508061223d5750600092915050565b612245611c1f565b6121b88285612d19565b612258816122e6565b610b0361135960017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb612d38565b60006107fc61132760017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb612d38565b60006107fc61132760017f3f075dea7ef99b1e5db245018e5e4ed8d2a0d93953f5932b2176bef59bd69061612d38565b6001600160a01b038116610b035760405163f6b2911f60e01b815260040160405180910390fd5b60006107fc61132760017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780612d38565b610b0361135960017ffedfd2c285a57fb23bf45a3fe9ac02d36a76ebb72801b1c8aaf553d74e9d4653612d38565b610b0361135960017f0f1e7733641e4d843128fea0d2ec90d3d06a40b0fe244ff603d8c1aa200dc0f9612d38565b610b0361135960017fd7f2d45e512a86049f7a113657b39731b6b558609584243063a52cd31a8eb529612d38565b6000806123d26120b4565b90506001600160a01b0381166123eb5750600092915050565b60405163c8a6dfd360e01b81526004810184905247906001600160a01b0383169063c8a6dfd390602401600060405180830381600087803b15801561242f57600080fd5b505af1158015612443573d6000803e3d6000fd5b50505050600081476124559190612d38565b9050612463816107956112f7565b6040518181527fda841d3042d792e2509a333b9dcbd4b3dd9b9047d382011f8788fab90ca7e3c79060200160405180910390a1949350505050565b60006124a8611c99565b9050806124c857604051630d35acd760e21b815260040160405180910390fd5b60006124d2611c1f565b905060006124de611ca3565b90506000816124ed8587612d19565b6124f79190612d19565b905060006125058387612d19565b61251161271086612d19565b61251b9190612d38565b9050600081156125345761252f8284612ce1565b612537565b60005b905080156125c75760006125496121f2565b9050612555818361297a565b600061255f611c99565b9050600061256d8a89612d38565b60408051828152602081018c90529081018a9052606081018490529091506001600160a01b038416907f3d1669e813a9845c288f0e1f642a4343a451103b87886d12de37e63b39bbd9429060800160405180910390a25050505b50505050505050565b600080826125dc611c1f565b6125e69190612d38565b9050806125ff578291506125fa848461297a565b612628565b80612608611c99565b6126129085612d19565b61261c9190612ce1565b9150612628848361297a565b5092915050565b600061265c60017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847612d38565b6001600160a01b039485166000908152602091825260408082209590961681529390525091902055565b60006107fc61132760017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281612d38565b610b03816129e8565b610b0381612a1f565b60006107fc61132760017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113612d38565b60608182601f01101561271e576040516323d5783d60e11b815260040160405180910390fd5b6127288284612cc9565b8451101561274957604051633b99b53d60e01b815260040160405180910390fd5b60608215801561276857604051915060008252602082016040526127b2565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156127a1578051835260209283019201612789565b5050858452601f01601f1916604052505b50949350505050565b603881901c60ff908116603083901c8216602884901c8316602085901c8416601886901c8516601087901c8616600888811c9790971688881b61ff001617871b17861b17851b17841b17831b1790911b17604082901c801561281f5761281f613008565b5060c01b919050565b60006107fc61132760017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260612d38565b60006107fc61132760017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b612d38565b60006128b560017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838612d38565b6001600160a01b03909316600090815260209390935250604090912055565b612710811115610b03576040516358d620b360e01b815260040160405180910390fd5b612900816122e6565b610b0361135960017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260612d38565b8061294c5760405163a9cb9e0d60e01b815260040160405180910390fd5b610b0361135960017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42612d38565b61299581612986612858565b6129909190612cc9565b612a4d565b6129a38282611e9d8561213c565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6129f1816122e6565b610b0361135960017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113612d38565b610b0361135960017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281612d38565b610b0361135960017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b612d38565b60005b83811015612a96578181015183820152602001612a7e565b83811115612aa5576000848401525b50505050565b60008151808452612ac3816020860160208601612a7b565b601f01601f19169290920160200192915050565b60208152600061122f6020830184612aab565b80356001600160a01b0381168114612b0157600080fd5b919050565b60008060408385031215612b1957600080fd5b612b2283612aea565b946020939093013593505050565b600060208284031215612b4257600080fd5b61122f82612aea565b600060208284031215612b5d57600080fd5b5035919050565b600080600060608486031215612b7957600080fd5b612b8284612aea565b9250612b9060208501612aea565b9150604084013590509250925092565b60008060008060008060008060006101208a8c031215612bbf57600080fd5b612bc88a612aea565b9850612bd660208b01612aea565b975060408a01359650612beb60608b01612aea565b9550612bf960808b01612aea565b9450612c0760a08b01612aea565b9350612c1560c08b01612aea565b9250612c2360e08b01612aea565b91506101008a013590509295985092959850929598565b6001600160a01b0391909116815260200190565b60008060008060808587031215612c6457600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215612c9357600080fd5b612c9c83612aea565b9150612caa60208401612aea565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612cdc57612cdc612cb3565b500190565b600082612cfe57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615612d3357612d33612cb3565b500290565b600082821015612d4a57612d4a612cb3565b500390565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b600060208284031215612d9757600080fd5b8151801515811461122f57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612de657612de6612da7565b604052919050565b6000601f8381840112612e0057600080fd5b8251602067ffffffffffffffff80831115612e1d57612e1d612da7565b8260051b612e2c838201612dbd565b9384528681018301938381019089861115612e4657600080fd5b84890192505b85831015610bc057825184811115612e645760008081fd5b8901603f81018b13612e765760008081fd5b85810151604086821115612e8c57612e8c612da7565b612e9d828b01601f19168901612dbd565b8281528d82848601011115612eb25760008081fd5b612ec1838a8301848701612a7b565b85525050509184019190840190612e4c565b60008060408385031215612ee657600080fd5b825167ffffffffffffffff80821115612efe57600080fd5b612f0a86838701612dee565b93506020850151915080821115612f2057600080fd5b50612f2d85828601612dee565b9150509250929050565b60008351612f49818460208801612a7b565b6001600160801b0319939093169190920190815260100192915050565b60008251612f78818460208701612a7b565b9190910192915050565b600060208284031215612f9457600080fd5b5051919050565b60008351612fad818460208801612a7b565b9190910191825250602001919050565b608081526000612fd06080830187612aab565b8281036020840152612fe28187612aab565b90508281036040840152612ff68186612aab565b91505082606083015295945050505050565b634e487b7160e01b600052600160045260246000fdfea26469706673582212204c98ac4f477f06f69f4028fa9440dd9c691d20f120c69e574b4c9dd17f97219264736f6c634300080a0033",
            "0x6080604052600436106102a25760003560e01c80635639671511610165578063a457c2d7116100cc578063d046815611610085578063d046815614610787578063d0e30db01461079c578063d4970524146107a4578063dd62ed3e146107ac578063efd60347146107cc578063f79c3f02146107d4578063fb5b82d0146107f4576102b2565b8063a457c2d7146106ea578063a9059cbb1461070a578063ac232bde1461072a578063bf15af561461073d578063c5eff3d014610752578063cc48cd3114610767576102b2565b80637adbf9731161011e5780637adbf97314610648578063833b1fce1461066857806386a92af71461067d57806387f2adfb1461069257806395d89b41146106a75780639b498e26146106d5576102b2565b8063563967151461059e57806358bf3c7f146105b35780636e9960c3146105d357806370a08231146105e8578063750521f514610608578063799a195414610628576102b2565b80631bcbfaba1161020957806336bf3325116101c257806336bf332514610502578063395093511461051f5780633af9e6691461053f57806346425ef01461055f5780635022820114610574578063540bc5ea14610589576102b2565b80631bcbfaba1461045c57806323b872dd14610471578063281a312214610491578063291206f6146104b15780632cb562e1146104d1578063313ce567146104e6576102b2565b80631311cf8d1161025b5780631311cf8d146103b057806313d86aed146103d0578063143a08d4146103f0578063147bf6c4146104055780631546962b1461042557806318160ddd14610447576102b2565b8063020f086e146102cb57806304843a17146102eb57806306fdde0314610313578063095ea7b3146103565780630e18b68114610386578063107d7fa01461039b576102b2565b366102b2576102b033610814565b005b60405163574b16a760e11b815260040160405180910390fd5b3480156102d757600080fd5b506102b06102e6366004612f96565b61089b565b3480156102f757600080fd5b5061030061091f565b6040519081526020015b60405180910390f35b34801561031f57600080fd5b50604080518082019091526011815270098d2e2ead2c840a6e8c2d6cac8408aa89607b1b60208201525b60405161030a9190613009565b34801561036257600080fd5b5061037661037136600461301c565b61092e565b604051901515815260200161030a565b34801561039257600080fd5b506102b0610944565b3480156103a757600080fd5b5061030061099b565b3480156103bc57600080fd5b506102b06103cb366004612f96565b6109a5565b3480156103dc57600080fd5b506102b06103eb366004613046565b610a20565b3480156103fc57600080fd5b50610300610bd9565b34801561041157600080fd5b506102b0610420366004612f96565b610be3565b34801561043157600080fd5b5061043a610c2a565b60405161030a919061305f565b34801561045357600080fd5b50610300610c34565b34801561046857600080fd5b50610300610c3e565b34801561047d57600080fd5b5061037661048c366004613073565b610c48565b34801561049d57600080fd5b506102b06104ac3660046130af565b610cfb565b3480156104bd57600080fd5b506102b06104cc366004613046565b610edd565b3480156104dd57600080fd5b5061043a610f58565b3480156104f257600080fd5b506040516012815260200161030a565b34801561050e57600080fd5b506103006801bc16d674ec80000081565b34801561052b57600080fd5b5061037661053a36600461301c565b610f62565b34801561054b57600080fd5b5061030061055a366004612f96565b610f83565b34801561056b57600080fd5b50610300610f9c565b34801561058057600080fd5b5061043a610fa6565b34801561059557600080fd5b50610300606081565b3480156105aa57600080fd5b50610300610fb0565b3480156105bf57600080fd5b506102b06105ce366004612f96565b610fba565b3480156105df57600080fd5b5061043a611035565b3480156105f457600080fd5b50610300610603366004612f96565b61103f565b34801561061457600080fd5b506102b06106233660046131b8565b61104a565b34801561063457600080fd5b50610300610643366004613046565b6110c6565b34801561065457600080fd5b506102b0610663366004612f96565b6110d1565b34801561067457600080fd5b5061043a61114c565b34801561068957600080fd5b50610349611156565b34801561069e57600080fd5b50610300611160565b3480156106b357600080fd5b50604080518082019091526005815264098e68aa8960db1b6020820152610349565b3480156106e157600080fd5b5061043a61116a565b3480156106f657600080fd5b5061037661070536600461301c565b611174565b34801561071657600080fd5b5061037661072536600461301c565b611190565b6102b0610738366004612f96565b61122f565b34801561074957600080fd5b50610300603081565b34801561075e57600080fd5b5061043a611241565b34801561077357600080fd5b506102b0610782366004613238565b61124b565b34801561079357600080fd5b5061043a61140b565b6102b0611415565b6102b061141e565b3480156107b857600080fd5b506103006107c736600461326a565b611459565b6102b061146c565b3480156107e057600080fd5b506103006107ef366004613046565b611474565b34801561080057600080fd5b506102b061080f366004612f96565b61147f565b34610832576040516395b66fe960e01b815260040160405180910390fd5b61084d3461083e6114fa565b61084891906132b3565b61152e565b610858338234611561565b6040513481526001600160a01b0382169033907f3bc57f469ad6d10d7723ea226cd22bd2b9e527def2b529f6ab44645a166895829060200160405180910390a350565b6108a36116fb565b6001600160a01b0316336001600160a01b0316146108df573360405163472511eb60e11b81526004016108d6919061305f565b60405180910390fd5b6108e881611705565b6040516001600160a01b038216907f67b26a33f305cc027b2d45b2f6f418793afcd3e22f7376afa7be068ce18604e890600090a250565b60006109296114fa565b905090565b600061093b33848461173c565b50600192915050565b61094c6117ab565b6001600160a01b0316336001600160a01b03161461097f573360405163472511eb60e11b81526004016108d6919061305f565b61098f61098a6117ab565b6117b5565b61099960006117fe565b565b600061092961183e565b6109ad6116fb565b6001600160a01b0316336001600160a01b0316146109e0573360405163472511eb60e11b81526004016108d6919061305f565b6109e98161186e565b6040516001600160a01b038216907f1da4c245099590dc40be61880c9b97792f3694d970acc1e67ac0e6cc90f3780d90600090a250565b610a286118a5565b6001600160a01b0316336001600160a01b031614610a5b573360405163472511eb60e11b81526004016108d6919061305f565b6000610a656114fa565b90506000610a85610a7f6801bc16d674ec800000846132cb565b846118af565b905080610aa557604051631036b5ad60e31b815260040160405180910390fd5b600080610ab1836118c4565b8151919350915080610ad65760405163200149ad60e21b815260040160405180910390fd5b83811115610af757604051635993bd5760e01b815260040160405180910390fd5b8151818114610b19576040516322e5ce4360e21b815260040160405180910390fd5b6000610b2361194c565b905080610b4357604051639be7315960e01b815260040160405180910390fd5b60005b83811015610b9357610b8b868281518110610b6357610b636132ed565b6020026020010151868381518110610b7d57610b7d6132ed565b60200260200101518461197c565b600101610b46565b50610bb4610baa846801bc16d674ec800000613303565b6108489089613322565b610bcf83610bc0611e04565b610bca91906132b3565b611e34565b5050505050505050565b6000610929611e62565b610beb6116fb565b6001600160a01b0316336001600160a01b031614610c1e573360405163472511eb60e11b81526004016108d6919061305f565b610c27816117fe565b50565b6000610929611edc565b6000610929611f0c565b6000610929611f16565b60008383610c568282611f46565b8380610c75576040516336b216db60e21b815260040160405180910390fd5b868580610c8183612072565b1015610ca0576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b038816610cd957604051637617407560e11b81526001600160a01b038a166004820152600060248201526044016108d6565b610ce3898861207d565b610cee8989896120e3565b9998505050505050505050565b6000610d05612171565b8114610d365780610d14612171565b604051631cfd276760e31b8152600481019290925260248201526044016108d6565b610d49610d448260016132b3565b6121a1565b610d52866117b5565b610d5b836121cf565b6040516001600160a01b038416907f0cc5437d7c9c1d9eab549acbb533eea3e9868e9443dd75309ed5820b33a3774e90600090a2610d9882612206565b6040518281527fbd533e726baaf59b36f3914d950053f7e78f527057c97cd3f0043257fc0fc8849060200160405180910390a1610dd48961186e565b6040516001600160a01b038a16907f1da4c245099590dc40be61880c9b97792f3694d970acc1e67ac0e6cc90f3780d90600090a2610e118561223d565b6040516001600160a01b038616907f30f015a5d3c72c0a9414538199baa022323a483fa9e4ba2cd581596cf8ca042490600090a2610e4e84612274565b6040516001600160a01b038516907fffc0721ef0563a1b0a51a0dc92113025f33ca434ada9ee3eebff2f385d2a8f9a90600090a2610e8c8a896122ab565b610e958761110c565b7f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610ec993929190613339565b60405180910390a150505050505050505050565b610ee56116fb565b6001600160a01b0316336001600160a01b031614610f18573360405163472511eb60e11b81526004016108d6919061305f565b610f2181612206565b6040518181527fbd533e726baaf59b36f3914d950053f7e78f527057c97cd3f0043257fc0fc884906020015b60405180910390a150565b6000610929612327565b600061093b338484610f743388612357565b610f7e91906132b3565b61173c565b6000610f96610f91836123af565b6123fd565b92915050565b6000610929612435565b6000610929612465565b600061092961194c565b610fc26116fb565b6001600160a01b0316336001600160a01b031614610ff5573360405163472511eb60e11b81526004016108d6919061305f565b610ffe8161223d565b6040516001600160a01b038216907f30f015a5d3c72c0a9414538199baa022323a483fa9e4ba2cd581596cf8ca042490600090a250565b60006109296116fb565b6000610f9682612072565b6110526116fb565b6001600160a01b0316336001600160a01b031614611085573360405163472511eb60e11b81526004016108d6919061305f565b61108e81612495565b611097816124b4565b7f8d2df192dd17edf92a7964b78aa322f3d717b2ab9de00651bee32bbc4c5da63a81604051610f4d9190613009565b6000610f96826124fe565b6110d96118a5565b6001600160a01b0316336001600160a01b03161461110c573360405163472511eb60e11b81526004016108d6919061305f565b6111158161252b565b6040516001600160a01b038216907fd3b5d1e0ffaeff528910f3663f0adace7694ab8241d58e17a91351ced2e0803190600090a250565b6000610929612562565b6060610929612592565b6000610929611e04565b6000610929612658565b600061093b3384846111863388612357565b610f7e9190613322565b6000338361119e8282611f46565b83806111bd576040516336b216db60e21b815260040160405180910390fd5b3385806111c983612072565b10156111e8576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b03881661121857604051637617407560e11b8152336004820152600060248201526044016108d6565b6112233389896120e3565b98975050505050505050565b61123881612688565b610c2781610814565b60006109296126af565b611253612562565b6001600160a01b0316336001600160a01b031614611286573360405163472511eb60e11b81526004016108d6919061305f565b61128e611e04565b8411156112c0578361129e611e04565b6040516376179ac560e01b8152600481019290925260248201526044016108d6565b60006112ca61183e565b6112d49086613322565b905060006112eb826801bc16d674ec800000613303565b6112f3612435565b6112fd91906132b3565b9050611308856126df565b6113118661270d565b61131a8461273b565b60008561132783866132b3565b111561134d5761134a8661133b84876132b3565b6113459190613322565b612769565b90505b858161135984876132b3565b6113639190613322565b111561139357611391868261137885886132b3565b6113829190613322565b61138c9190613322565b612832565b505b61139d81876132b3565b8210156113c1576113c1826113b283896132b3565b6113bc9190613322565b612904565b60408051888152602081018890529081018690527f25d7358447891786a139ae7149548f3232a8c95f2ea6065c69c5bd7c39cd386c9060600160405180910390a150505050505050565b60006109296117ab565b61099933610814565b611426611edc565b6001600160a01b0316336001600160a01b031614610999573360405163472511eb60e11b81526004016108d6919061305f565b60006114658383612357565b9392505050565b611426612327565b6000610f96826123fd565b6114876116fb565b6001600160a01b0316336001600160a01b0316146114ba573360405163472511eb60e11b81526004016108d6919061305f565b6114c3816121cf565b6040516001600160a01b038216907f0cc5437d7c9c1d9eab549acbb533eea3e9868e9443dd75309ed5820b33a3774e90600090a250565b600061092961152a60017f2b6136e423ab70d76431e2a635e877e16ea2dd9a895e054ad7f35f89d6c7b711613322565b5490565b610c2761155c60017f2b6136e423ab70d76431e2a635e877e16ea2dd9a895e054ad7f35f89d6c7b711613322565b829055565b600061156d8483612a36565b905060006115796126af565b9050836001600160a01b0316856001600160a01b031614156115fa57604051632d20488160e11b81526001600160a01b03868116600483015260016024830152821690635a4091029060440160006040518083038186803b1580156115dd57600080fd5b505afa1580156115f1573d6000803e3d6000fd5b505050506116f4565b604051632d20488160e11b81526001600160a01b03868116600483015260016024830152821690635a4091029060440160006040518083038186803b15801561164257600080fd5b505afa158015611656573d6000803e3d6000fd5b505060405163e838dfbb60e01b81526001600160a01b038416925063e838dfbb915061168690879060040161305f565b602060405180830381865afa1580156116a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c7919061336f565b156116e7578360405163e7d05e2760e01b81526004016108d6919061305f565b6116f28585846120e3565b505b5050505050565b6000610929612a95565b61170e81612688565b610c2761155c60017ff4271262f3552a4108cde54dc75061de8de495709221d793b126e448522d6a80613322565b61174583612688565b61174e82612688565b611759838383612ac5565b816001600160a01b0316836001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161179e91815260200190565b60405180910390a3505050565b6000610929612b1c565b6117be81612688565b6117c781612b4c565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b61180781612b55565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b600061092961152a60017f0f1e7733641e4d843128fea0d2ec90d3d06a40b0fe244ff603d8c1aa200dc0f9613322565b61187781612688565b610c2761155c60017f8e9e2a1d30fed357d8a000c1131fc77ed65d2052918caf1ccc6eb1e7af3d13b6613322565b6000610929611035565b60008183116118be5782611465565b50919050565b6060806118cf612658565b6001600160a01b031663a1947323846040518263ffffffff1660e01b81526004016118fc91815260200190565b6000604051808303816000875af115801561191b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119439190810190613460565b91509150915091565b600061092961152a60017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42613322565b603083511461199e5760405163050cb55360e41b815260040160405180910390fd5b60608251146119c05760405163408ebd3960e01b815260040160405180910390fd5b6801bc16d674ec80000060006119da633b9aca00836132cb565b90506000600286600060801b6040516020016119f79291906134c4565b60408051601f1981840301815290829052611a11916134f3565b602060405180830381855afa158015611a2e573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611a51919061350f565b90506000600280611a658860006040612b5e565b604051611a7291906134f3565b602060405180830381855afa158015611a8f573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611ab2919061350f565b6002611aca896040611ac5816060613322565b612b5e565b604051611add9190600090602001613528565b60408051601f1981840301815290829052611af7916134f3565b602060405180830381855afa158015611b14573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611b37919061350f565b60408051602081019390935282015260600160408051601f1981840301815290829052611b63916134f3565b602060405180830381855afa158015611b80573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611ba3919061350f565b905060006002808488604051602001611bc6929190918252602082015260400190565b60408051601f1981840301815290829052611be0916134f3565b602060405180830381855afa158015611bfd573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611c20919061350f565b6002611c2b87612c21565b604080516020810192909252810186905260600160408051601f1981840301815290829052611c59916134f3565b602060405180830381855afa158015611c76573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611c99919061350f565b60408051602081019390935282015260600160408051601f1981840301815290829052611cc5916134f3565b602060405180830381855afa158015611ce2573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611d05919061350f565b90506000611d138647613322565b9050611d1d612c8e565b6001600160a01b03166322895118878b8a604051602001611d4091815260200190565b6040516020818303038152906040528c876040518663ffffffff1660e01b8152600401611d70949392919061354a565b6000604051808303818588803b158015611d8957600080fd5b505af1158015611d9d573d6000803e3d6000fd5b5050505050804714611dc257604051638051a6bb60e01b815260040160405180910390fd5b7f11553d182c6d24df901ccbb837d640c1ee9994876a88dccc8ddfd7ebab9b6ce189604051611df19190613009565b60405180910390a1505050505050505050565b600061092961152a60017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8613322565b610c2761155c60017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8613322565b600080611e6d61183e565b90506000611e79611e04565b905080821015611ecc576801bc16d674ec800000611e978383613322565b611ea19190613303565b611ea96114fa565b611eb1612435565b611ebb91906132b3565b611ec591906132b3565b9250505090565b611ed46114fa565b611ebb612435565b600061092961152a60017ff4271262f3552a4108cde54dc75061de8de495709221d793b126e448522d6a80613322565b6000610929612cbe565b600061092961152a60017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37613322565b6000611f506126af565b60405163e838dfbb60e01b81529091506001600160a01b0382169063e838dfbb90611f7f90869060040161305f565b602060405180830381865afa158015611f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc0919061336f565b15611fe0578260405163e7d05e2760e01b81526004016108d6919061305f565b60405163e838dfbb60e01b81526001600160a01b0382169063e838dfbb9061200c90859060040161305f565b602060405180830381865afa158015612029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204d919061336f565b1561206d578160405163e7d05e2760e01b81526004016108d6919061305f565b505050565b6000610f96826123af565b60006120898333612357565b9050818110156120cb57604051637b936de360e01b81526001600160a01b038416600482015233602482015260448101829052606481018390526084016108d6565b600019811461206d5761206d8333610f7e8585613322565b600061210284836120f3876123af565b6120fd9190613322565b612cee565b61211a8383612110866123af565b6120fd91906132b3565b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161215f91815260200190565b60405180910390a35060019392505050565b600061092961152a60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd613322565b610c2761155c60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd613322565b6121d881612688565b610c2761155c60017f082b6d18de7b10e438e6b1002141db737519cb4ceed679bc815e3aac00cd2227613322565b61220f81612d3a565b610c2761155c60017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37613322565b61224681612688565b610c2761155c60017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780613322565b61227d81612688565b610c2761155c60017f3f075dea7ef99b1e5db245018e5e4ed8d2a0d93953f5932b2176bef59bd69061613322565b6122b482612d5d565b6040516001600160a01b038316907e043cf7635f276413ae358250286a479a631abd9d74d57d4aa0bb87ebc7d11790600090a26122f081612d94565b6040518181527f4c86ba184ea1a1558f84835ca34f6d67e222e8ee5cc4f324b8861dda4cf1740c9060200160405180910390a15050565b600061092961152a60017f8e9e2a1d30fed357d8a000c1131fc77ed65d2052918caf1ccc6eb1e7af3d13b6613322565b60008061238560017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847613322565b6001600160a01b039485166000908152602091825260408082209590961681529390525050205490565b6000806123dd60017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838613322565b6001600160a01b0390931660009081526020939093525050604090205490565b600080612408612cbe565b9050806124185750600092915050565b80612421611e62565b61242b9085613303565b61146591906132cb565b600061092961152a60017ffedfd2c285a57fb23bf45a3fe9ac02d36a76ebb72801b1c8aaf553d74e9d4653613322565b600061092961152a60017f082b6d18de7b10e438e6b1002141db737519cb4ceed679bc815e3aac00cd2227613322565b8051610c2757604051638d46fe0560e01b815260040160405180910390fd5b60006124e160017fb63f3482ec84cb93d74a71645ad2e9e896fa02723e42170b4aad20a4bed6cdd6613322565b825190915081906124f89082906020860190612ee1565b50505050565b600080612509612cbe565b9050806125195750600092915050565b612521611e62565b61242b8285613303565b61253481612688565b610c2761155c60017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb613322565b600061092961152a60017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb613322565b606060006125c160017fb63f3482ec84cb93d74a71645ad2e9e896fa02723e42170b4aad20a4bed6cdd6613322565b8054909150819081906125d390613595565b80601f01602080910402602001604051908101604052809291908181526020018280546125ff90613595565b801561264c5780601f106126215761010080835404028352916020019161264c565b820191906000526020600020905b81548152906001019060200180831161262f57829003601f168201915b50505050509250505090565b600061092961152a60017f3f075dea7ef99b1e5db245018e5e4ed8d2a0d93953f5932b2176bef59bd69061613322565b6001600160a01b038116610c275760405163f6b2911f60e01b815260040160405180910390fd5b600061092961152a60017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780613322565b610c2761155c60017ffedfd2c285a57fb23bf45a3fe9ac02d36a76ebb72801b1c8aaf553d74e9d4653613322565b610c2761155c60017f0f1e7733641e4d843128fea0d2ec90d3d06a40b0fe244ff603d8c1aa200dc0f9613322565b610c2761155c60017fd7f2d45e512a86049f7a113657b39731b6b558609584243063a52cd31a8eb529613322565b600080612774612327565b60405163c8a6dfd360e01b81526004810185905290915047906001600160a01b0383169063c8a6dfd390602401600060405180830381600087803b1580156127bb57600080fd5b505af11580156127cf573d6000803e3d6000fd5b50505050600081476127e19190613322565b9050801561282a576127f58161083e6114fa565b6040518181527fda841d3042d792e2509a333b9dcbd4b3dd9b9047d382011f8788fab90ca7e3c7906020015b60405180910390a15b949350505050565b60008061283d611edc565b90506001600160a01b0381166128565750600092915050565b604051638ede6b6b60e01b81526004810184905247906001600160a01b03831690638ede6b6b90602401600060405180830381600087803b15801561289a57600080fd5b505af11580156128ae573d6000803e3d6000fd5b50505050600081476128c09190613322565b9050801561282a576128d48161083e6114fa565b6040518181527fd500b67e5bd8019c0af744cadeec120d1b5e3d3a3a011f18cf182aa4c97947b690602001612821565b600061290e611f0c565b90508061292e57604051630d35acd760e21b815260040160405180910390fd5b6000612938611e62565b90506000612944611f16565b90506000816129538587613303565b61295d9190613303565b9050600061296b8387613303565b61297761271086613303565b6129819190613322565b90506000811561299a5761299582846132cb565b61299d565b60005b90508015612a2d5760006129af612465565b90506129bb8183612de0565b60006129c5611f0c565b905060006129d38a89613322565b60408051828152602081018c90529081018a9052606081018490529091506001600160a01b038416907f3d1669e813a9845c288f0e1f642a4343a451103b87886d12de37e63b39bbd9429060800160405180910390a25050505b50505050505050565b60008082612a42611e62565b612a4c9190613322565b905080612a6557829150612a608484612de0565b612a8e565b80612a6e611f0c565b612a789085613303565b612a8291906132cb565b9150612a8e8483612de0565b5092915050565b600061092961152a60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113613322565b6000612af260017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847613322565b6001600160a01b039485166000908152602091825260408082209590961681529390525091902055565b600061092961152a60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281613322565b610c2781612e4e565b610c2781612e85565b60608182601f011015612b84576040516323d5783d60e11b815260040160405180910390fd5b612b8e82846132b3565b84511015612baf57604051633b99b53d60e01b815260040160405180910390fd5b606082158015612bce5760405191506000825260208201604052612c18565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612c07578051835260209283019201612bef565b5050858452601f01601f1916604052505b50949350505050565b603881901c60ff908116603083901c8216602884901c8316602085901c8416601886901c8516601087901c8616600888811c9790971688881b61ff001617871b17861b17851b17841b17831b1790911b17604082901c8015612c8557612c856135ca565b5060c01b919050565b600061092961152a60017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260613322565b600061092961152a60017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b613322565b6000612d1b60017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838613322565b6001600160a01b03909316600090815260209390935250604090912055565b612710811115610c27576040516358d620b360e01b815260040160405180910390fd5b612d6681612688565b610c2761155c60017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260613322565b80612db25760405163a9cb9e0d60e01b815260040160405180910390fd5b610c2761155c60017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42613322565b612dfb81612dec612cbe565b612df691906132b3565b612eb3565b612e098282612110856123af565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b612e5781612688565b610c2761155c60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113613322565b610c2761155c60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281613322565b610c2761155c60017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b613322565b828054612eed90613595565b90600052602060002090601f016020900481019282612f0f5760008555612f55565b82601f10612f2857805160ff1916838001178555612f55565b82800160010185558215612f55579182015b82811115612f55578251825591602001919060010190612f3a565b50612f61929150612f65565b5090565b5b80821115612f615760008155600101612f66565b80356001600160a01b0381168114612f9157600080fd5b919050565b600060208284031215612fa857600080fd5b61146582612f7a565b60005b83811015612fcc578181015183820152602001612fb4565b838111156124f85750506000910152565b60008151808452612ff5816020860160208601612fb1565b601f01601f19169290920160200192915050565b6020815260006114656020830184612fdd565b6000806040838503121561302f57600080fd5b61303883612f7a565b946020939093013593505050565b60006020828403121561305857600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60008060006060848603121561308857600080fd5b61309184612f7a565b925061309f60208501612f7a565b9150604084013590509250925092565b60008060008060008060008060006101208a8c0312156130ce57600080fd5b6130d78a612f7a565b98506130e560208b01612f7a565b975060408a013596506130fa60608b01612f7a565b955061310860808b01612f7a565b945061311660a08b01612f7a565b935061312460c08b01612f7a565b925061313260e08b01612f7a565b91506101008a013590509295985092959850929598565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561318857613188613149565b604052919050565b600067ffffffffffffffff8211156131aa576131aa613149565b50601f01601f191660200190565b6000602082840312156131ca57600080fd5b813567ffffffffffffffff8111156131e157600080fd5b8201601f810184136131f257600080fd5b803561320561320082613190565b61315f565b81815285602083850101111561321a57600080fd5b81602084016020830137600091810160200191909152949350505050565b6000806000806080858703121561324e57600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561327d57600080fd5b61328683612f7a565b915061329460208401612f7a565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b600082198211156132c6576132c661329d565b500190565b6000826132e857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561331d5761331d61329d565b500290565b6000828210156133345761333461329d565b500390565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b60006020828403121561338157600080fd5b8151801515811461146557600080fd5b600082601f8301126133a257600080fd5b8151602067ffffffffffffffff808311156133bf576133bf613149565b8260051b6133ce83820161315f565b93845285810183019383810190888611156133e857600080fd5b84880192505b85831015611223578251848111156134065760008081fd5b8801603f81018a136134185760008081fd5b85810151604061342a61320083613190565b8281528c8284860101111561343f5760008081fd5b61344e838a8301848701612fb1565b855250505091840191908401906133ee565b6000806040838503121561347357600080fd5b825167ffffffffffffffff8082111561348b57600080fd5b61349786838701613391565b935060208501519150808211156134ad57600080fd5b506134ba85828601613391565b9150509250929050565b600083516134d6818460208801612fb1565b6001600160801b0319939093169190920190815260100192915050565b60008251613505818460208701612fb1565b9190910192915050565b60006020828403121561352157600080fd5b5051919050565b6000835161353a818460208801612fb1565b9190910191825250602001919050565b60808152600061355d6080830187612fdd565b828103602084015261356f8187612fdd565b905082810360408401526135838186612fdd565b91505082606083015295945050505050565b600181811c908216806135a957607f821691505b602082108114156118be57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052600160045260246000fdfea2646970667358221220970321c783abf715e67020d8e4b80f54819b7eacd341ba3f4ceafe86e46d3bd764736f6c634300080a0033"
        ],
        "devdoc": [
            {
                "author": "Kiln",
                "errors": {
                    "AllowanceTooLow(address,address,uint256,uint256)": [
                        {
                            "params": {
                                "_allowance": "Current allowance",
                                "_from": "Account where funds are sent from",
                                "_operator": "Account attempting the transfer",
                                "_value": "Requested transfer value in shares"
                            }
                        }
                    ],
                    "Denied(address)": [
                        {
                            "params": {
                                "account": "The account that was denied"
                            }
                        }
                    ],
                    "InvalidInitialization(uint256,uint256)": [
                        {
                            "params": {
                                "expectedVersion": "The version that was expected",
                                "version": "The version that was attempting to be initialized"
                            }
                        }
                    ],
                    "InvalidValidatorCountReport(uint256,uint256)": [
                        {
                            "params": {
                                "depositedValidatorCount": "The number of deposits performed by the system",
                                "providedValidatorCount": "The received validator count value"
                            }
                        }
                    ],
                    "Unauthorized(address)": [
                        {
                            "params": {
                                "caller": "Addres performing the call"
                            }
                        }
                    ],
                    "UnauthorizedTransfer(address,address)": [
                        {
                            "params": {
                                "_from": "Account sending the funds in the invalid transfer",
                                "_to": "Account receiving the funds in the invalid transfer"
                            }
                        }
                    ]
                },
                "kind": "dev",
                "methods": {
                    "acceptAdmin()": {
                        "details": "Only callable by the pending admin. Resets the pending admin if succesful."
                    },
                    "allowance(address,address)": {
                        "params": {
                            "_owner": "Address that issued the allowance",
                            "_spender": "Address that received the allowance"
                        },
                        "returns": {
                            "_0": "The allowance in shares for a given spender"
                        }
                    },
                    "approve(address,uint256)": {
                        "details": "An approved account can use transferFrom to transfer funds on behalf of the token owner",
                        "params": {
                            "_spender": "Address that is allowed to spend the tokens",
                            "_value": "The allowed amount in shares, will override previous value"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "balanceOf(address)": {
                        "params": {
                            "_owner": "Address to be checked"
                        },
                        "returns": {
                            "_0": "The balance of the account in shares"
                        }
                    },
                    "balanceOfUnderlying(address)": {
                        "params": {
                            "_owner": "Address to be checked"
                        },
                        "returns": {
                            "_0": "The underlying balance of the account"
                        }
                    },
                    "decimals()": {
                        "returns": {
                            "_0": "The decimal count"
                        }
                    },
                    "decreaseAllowance(address,uint256)": {
                        "params": {
                            "_spender": "Spender that receives the allowance",
                            "_subtractableValue": "Amount of shares to subtract"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "depositAndTransfer(address)": {
                        "params": {
                            "_recipient": "Address receiving the minted LsETH"
                        }
                    },
                    "depositToConsensusLayer(uint256)": {
                        "params": {
                            "_maxCount": "The maximum amount of validator keys to fund"
                        }
                    },
                    "getAdmin()": {
                        "returns": {
                            "_0": "The admin address"
                        }
                    },
                    "getAllowlist()": {
                        "returns": {
                            "_0": "The allowlist address"
                        }
                    },
                    "getBalanceToDeposit()": {
                        "returns": {
                            "_0": "The amount of pending ETH"
                        }
                    },
                    "getCLValidatorCount()": {
                        "returns": {
                            "_0": "The CL validator count"
                        }
                    },
                    "getCLValidatorTotalBalance()": {
                        "returns": {
                            "_0": "The CL Validator total balance"
                        }
                    },
                    "getCollector()": {
                        "returns": {
                            "_0": "The collector address"
                        }
                    },
                    "getDepositedValidatorCount()": {
                        "returns": {
                            "_0": "The deposited validator count"
                        }
                    },
                    "getELFeeRecipient()": {
                        "returns": {
                            "_0": "The execution layer fee recipient address"
                        }
                    },
                    "getGlobalFee()": {
                        "returns": {
                            "_0": "The global fee"
                        }
                    },
                    "getOperatorsRegistry()": {
                        "returns": {
                            "_0": "The operators registry address"
                        }
                    },
                    "getOracle()": {
                        "returns": {
                            "_0": "The oracle address"
                        }
                    },
                    "getPendingAdmin()": {
                        "returns": {
                            "_0": "The pending admin address"
                        }
                    },
                    "getWithdrawalCredentials()": {
                        "returns": {
                            "_0": "The withdrawal credentials"
                        }
                    },
                    "increaseAllowance(address,uint256)": {
                        "params": {
                            "_additionalValue": "Amount of shares to add",
                            "_spender": "Spender that receives the allowance"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "initRiverV1(address,address,bytes32,address,address,address,address,address,uint256)": {
                        "params": {
                            "_allowlistAddress": "Address of the allowlist contract",
                            "_collectorAddress": "Address receiving the the global fee on revenue",
                            "_depositContractAddress": "Address to make Consensus Layer deposits",
                            "_elFeeRecipientAddress": "Address that receives the execution layer fees",
                            "_globalFee": "Amount retained when the ETH balance increases and sent to the collector",
                            "_operatorRegistryAddress": "Address of the operator registry",
                            "_oracleAddress": "The address of the Oracle contract",
                            "_systemAdministratorAddress": "Administrator address",
                            "_withdrawalCredentials": "Credentials to use for every validator deposit"
                        }
                    },
                    "name()": {
                        "returns": {
                            "_0": "The token name"
                        }
                    },
                    "proposeAdmin(address)": {
                        "details": "This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.",
                        "params": {
                            "_newAdmin": "New admin address"
                        }
                    },
                    "setAllowlist(address)": {
                        "params": {
                            "_newAllowlist": "New address for the allowlist"
                        }
                    },
                    "setCollector(address)": {
                        "params": {
                            "_newCollector": "New address for the collector"
                        }
                    },
                    "setConsensusLayerData(uint256,uint256,bytes32,uint256)": {
                        "details": "Can only be called by the oracle addressThe round id is a blackbox value that should only be used to identify unique reportsWhen a report is performed, River computes the amount of fees that can be pulledfrom the execution layer fee recipient. This amount is capped by the max allowedincrease provided during the report.If the total asset balance increases (from the reported total balance and the pulled funds)we then compute the share that must be taken for the collector on the positive delta.The execution layer fees are taken into account here because they are the product ofnode operator's work, just like consensus layer fees, and both should be handled in thesame manner, as a single revenue stream for the users and the collector.",
                        "params": {
                            "_maxIncrease": "The maximum allowed increase in the total balance",
                            "_roundId": "An identifier for this update",
                            "_validatorCount": "The number of active validators on the consensus layer",
                            "_validatorTotalBalance": "The balance sum of the active validators on the consensus layer"
                        }
                    },
                    "setELFeeRecipient(address)": {
                        "params": {
                            "_newELFeeRecipient": "New address for the recipient"
                        }
                    },
                    "setGlobalFee(uint256)": {
                        "params": {
                            "newFee": "New fee value"
                        }
                    },
                    "setOracle(address)": {
                        "params": {
                            "_oracleAddress": "Address of the oracle"
                        }
                    },
                    "sharesFromUnderlyingBalance(uint256)": {
                        "params": {
                            "_underlyingAssetAmount": "Amount of underlying asset to convert"
                        },
                        "returns": {
                            "_0": "The amount of shares worth the underlying asset amopunt"
                        }
                    },
                    "symbol()": {
                        "returns": {
                            "_0": "The token symbol"
                        }
                    },
                    "totalSupply()": {
                        "returns": {
                            "_0": "The total supply in shares"
                        }
                    },
                    "totalUnderlyingSupply()": {
                        "returns": {
                            "_0": "The total underlying asset supply"
                        }
                    },
                    "transfer(address,uint256)": {
                        "params": {
                            "_to": "Address receiving the tokens",
                            "_value": "Amount of shares to be sent"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "transferFrom(address,address,uint256)": {
                        "params": {
                            "_from": "Address sending the tokens",
                            "_to": "Address receiving the tokens",
                            "_value": "Amount of shares to be sent"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "underlyingBalanceFromShares(uint256)": {
                        "params": {
                            "_shares": "Amount of shares to convert"
                        },
                        "returns": {
                            "_0": "The underlying asset balance represented by the shares"
                        }
                    }
                },
                "title": "River (v1)",
                "version": 1
            },
            {
                "author": "Kiln",
                "errors": {
                    "AllowanceTooLow(address,address,uint256,uint256)": [
                        {
                            "params": {
                                "_allowance": "Current allowance",
                                "_from": "Account where funds are sent from",
                                "_operator": "Account attempting the transfer",
                                "_value": "Requested transfer value in shares"
                            }
                        }
                    ],
                    "Denied(address)": [
                        {
                            "params": {
                                "account": "The account that was denied"
                            }
                        }
                    ],
                    "InvalidInitialization(uint256,uint256)": [
                        {
                            "params": {
                                "expectedVersion": "The version that was expected",
                                "version": "The version that was attempting to be initialized"
                            }
                        }
                    ],
                    "InvalidValidatorCountReport(uint256,uint256)": [
                        {
                            "params": {
                                "depositedValidatorCount": "The number of deposits performed by the system",
                                "providedValidatorCount": "The received validator count value"
                            }
                        }
                    ],
                    "Unauthorized(address)": [
                        {
                            "params": {
                                "caller": "Address performing the call"
                            }
                        }
                    ],
                    "UnauthorizedTransfer(address,address)": [
                        {
                            "params": {
                                "_from": "Account sending the funds in the invalid transfer",
                                "_to": "Account receiving the funds in the invalid transfer"
                            }
                        }
                    ]
                },
                "kind": "dev",
                "methods": {
                    "acceptAdmin()": {
                        "details": "Only callable by the pending admin. Resets the pending admin if succesful."
                    },
                    "allowance(address,address)": {
                        "params": {
                            "_owner": "Address that issued the allowance",
                            "_spender": "Address that received the allowance"
                        },
                        "returns": {
                            "_0": "The allowance in shares for a given spender"
                        }
                    },
                    "approve(address,uint256)": {
                        "details": "An approved account can use transferFrom to transfer funds on behalf of the token owner",
                        "params": {
                            "_spender": "Address that is allowed to spend the tokens",
                            "_value": "The allowed amount in shares, will override previous value"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "balanceOf(address)": {
                        "params": {
                            "_owner": "Address to be checked"
                        },
                        "returns": {
                            "_0": "The balance of the account in shares"
                        }
                    },
                    "balanceOfUnderlying(address)": {
                        "params": {
                            "_owner": "Address to be checked"
                        },
                        "returns": {
                            "_0": "The underlying balance of the account"
                        }
                    },
                    "decimals()": {
                        "returns": {
                            "_0": "The decimal count"
                        }
                    },
                    "decreaseAllowance(address,uint256)": {
                        "params": {
                            "_spender": "Spender that receives the allowance",
                            "_subtractableValue": "Amount of shares to subtract"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "depositAndTransfer(address)": {
                        "params": {
                            "_recipient": "Address receiving the minted LsETH"
                        }
                    },
                    "depositToConsensusLayer(uint256)": {
                        "params": {
                            "_maxCount": "The maximum amount of validator keys to fund"
                        }
                    },
                    "getAdmin()": {
                        "returns": {
                            "_0": "The admin address"
                        }
                    },
                    "getAllowlist()": {
                        "returns": {
                            "_0": "The allowlist address"
                        }
                    },
                    "getBalanceToDeposit()": {
                        "returns": {
                            "_0": "The amount of pending ETH"
                        }
                    },
                    "getCLValidatorCount()": {
                        "returns": {
                            "_0": "The CL validator count"
                        }
                    },
                    "getCLValidatorTotalBalance()": {
                        "returns": {
                            "_0": "The CL Validator total balance"
                        }
                    },
                    "getCollector()": {
                        "returns": {
                            "_0": "The collector address"
                        }
                    },
                    "getDepositedValidatorCount()": {
                        "returns": {
                            "_0": "The deposited validator count"
                        }
                    },
                    "getELFeeRecipient()": {
                        "returns": {
                            "_0": "The execution layer fee recipient address"
                        }
                    },
                    "getGlobalFee()": {
                        "returns": {
                            "_0": "The global fee"
                        }
                    },
                    "getOperatorsRegistry()": {
                        "returns": {
                            "_0": "The operators registry address"
                        }
                    },
                    "getOracle()": {
                        "returns": {
                            "_0": "The oracle address"
                        }
                    },
                    "getPendingAdmin()": {
                        "returns": {
                            "_0": "The pending admin address"
                        }
                    },
                    "getWithdrawalCredentials()": {
                        "returns": {
                            "_0": "The withdrawal credentials"
                        }
                    },
                    "increaseAllowance(address,uint256)": {
                        "params": {
                            "_additionalValue": "Amount of shares to add",
                            "_spender": "Spender that receives the allowance"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "initRiverV1(address,address,bytes32,address,address,address,address,address,uint256)": {
                        "params": {
                            "_allowlistAddress": "Address of the allowlist contract",
                            "_collectorAddress": "Address receiving the the global fee on revenue",
                            "_depositContractAddress": "Address to make Consensus Layer deposits",
                            "_elFeeRecipientAddress": "Address that receives the execution layer fees",
                            "_globalFee": "Amount retained when the ETH balance increases and sent to the collector",
                            "_operatorRegistryAddress": "Address of the operator registry",
                            "_oracleAddress": "The address of the Oracle contract",
                            "_systemAdministratorAddress": "Administrator address",
                            "_withdrawalCredentials": "Credentials to use for every validator deposit"
                        }
                    },
                    "name()": {
                        "returns": {
                            "_0": "The token name"
                        }
                    },
                    "proposeAdmin(address)": {
                        "details": "This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.",
                        "params": {
                            "_newAdmin": "New admin address"
                        }
                    },
                    "setAllowlist(address)": {
                        "params": {
                            "_newAllowlist": "New address for the allowlist"
                        }
                    },
                    "setCollector(address)": {
                        "params": {
                            "_newCollector": "New address for the collector"
                        }
                    },
                    "setConsensusLayerData(uint256,uint256,bytes32,uint256)": {
                        "details": "Can only be called by the oracle addressThe round id is a blackbox value that should only be used to identify unique reportsWhen a report is performed, River computes the amount of fees that can be pulledfrom the execution layer fee recipient. This amount is capped by the max allowedincrease provided during the report.If the total asset balance increases (from the reported total balance and the pulled funds)we then compute the share that must be taken for the collector on the positive delta.The execution layer fees are taken into account here because they are the product ofnode operator's work, just like consensus layer fees, and both should be handled in thesame manner, as a single revenue stream for the users and the collector.",
                        "params": {
                            "_maxIncrease": "The maximum allowed increase in the total balance",
                            "_roundId": "An identifier for this update",
                            "_validatorCount": "The number of active validators on the consensus layer",
                            "_validatorTotalBalance": "The balance sum of the active validators on the consensus layer"
                        }
                    },
                    "setELFeeRecipient(address)": {
                        "params": {
                            "_newELFeeRecipient": "New address for the recipient"
                        }
                    },
                    "setGlobalFee(uint256)": {
                        "params": {
                            "newFee": "New fee value"
                        }
                    },
                    "setOracle(address)": {
                        "params": {
                            "_oracleAddress": "Address of the oracle"
                        }
                    },
                    "sharesFromUnderlyingBalance(uint256)": {
                        "params": {
                            "_underlyingAssetAmount": "Amount of underlying asset to convert"
                        },
                        "returns": {
                            "_0": "The amount of shares worth the underlying asset amopunt"
                        }
                    },
                    "symbol()": {
                        "returns": {
                            "_0": "The token symbol"
                        }
                    },
                    "totalSupply()": {
                        "returns": {
                            "_0": "The total supply in shares"
                        }
                    },
                    "totalUnderlyingSupply()": {
                        "returns": {
                            "_0": "The total underlying asset supply"
                        }
                    },
                    "transfer(address,uint256)": {
                        "params": {
                            "_to": "Address receiving the tokens",
                            "_value": "Amount of shares to be sent"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "transferFrom(address,address,uint256)": {
                        "params": {
                            "_from": "Address sending the tokens",
                            "_to": "Address receiving the tokens",
                            "_value": "Amount of shares to be sent"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "underlyingBalanceFromShares(uint256)": {
                        "params": {
                            "_shares": "Amount of shares to convert"
                        },
                        "returns": {
                            "_0": "The underlying asset balance represented by the shares"
                        }
                    }
                },
                "title": "River (v1)",
                "version": 1
            },
            {
                "author": "Kiln",
                "errors": {
                    "AllowanceTooLow(address,address,uint256,uint256)": [
                        {
                            "params": {
                                "_allowance": "Current allowance",
                                "_from": "Account where funds are sent from",
                                "_operator": "Account attempting the transfer",
                                "_value": "Requested transfer value in shares"
                            }
                        }
                    ],
                    "Denied(address)": [
                        {
                            "params": {
                                "account": "The account that was denied"
                            }
                        }
                    ],
                    "InvalidInitialization(uint256,uint256)": [
                        {
                            "params": {
                                "expectedVersion": "The version that was expected",
                                "version": "The version that was attempting to be initialized"
                            }
                        }
                    ],
                    "InvalidValidatorCountReport(uint256,uint256)": [
                        {
                            "params": {
                                "depositedValidatorCount": "The number of deposits performed by the system",
                                "providedValidatorCount": "The received validator count value"
                            }
                        }
                    ],
                    "Unauthorized(address)": [
                        {
                            "params": {
                                "caller": "Address performing the call"
                            }
                        }
                    ],
                    "UnauthorizedTransfer(address,address)": [
                        {
                            "params": {
                                "_from": "Account sending the funds in the invalid transfer",
                                "_to": "Account receiving the funds in the invalid transfer"
                            }
                        }
                    ]
                },
                "kind": "dev",
                "methods": {
                    "acceptAdmin()": {
                        "details": "Only callable by the pending admin. Resets the pending admin if succesful."
                    },
                    "allowance(address,address)": {
                        "params": {
                            "_owner": "Address that issued the allowance",
                            "_spender": "Address that received the allowance"
                        },
                        "returns": {
                            "_0": "The allowance in shares for a given spender"
                        }
                    },
                    "approve(address,uint256)": {
                        "details": "An approved account can use transferFrom to transfer funds on behalf of the token owner",
                        "params": {
                            "_spender": "Address that is allowed to spend the tokens",
                            "_value": "The allowed amount in shares, will override previous value"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "balanceOf(address)": {
                        "params": {
                            "_owner": "Address to be checked"
                        },
                        "returns": {
                            "_0": "The balance of the account in shares"
                        }
                    },
                    "balanceOfUnderlying(address)": {
                        "params": {
                            "_owner": "Address to be checked"
                        },
                        "returns": {
                            "_0": "The underlying balance of the account"
                        }
                    },
                    "decimals()": {
                        "returns": {
                            "_0": "The decimal count"
                        }
                    },
                    "decreaseAllowance(address,uint256)": {
                        "params": {
                            "_spender": "Spender that receives the allowance",
                            "_subtractableValue": "Amount of shares to subtract"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "depositAndTransfer(address)": {
                        "params": {
                            "_recipient": "Address receiving the minted LsETH"
                        }
                    },
                    "depositToConsensusLayer(uint256)": {
                        "params": {
                            "_maxCount": "The maximum amount of validator keys to fund"
                        }
                    },
                    "getAdmin()": {
                        "returns": {
                            "_0": "The admin address"
                        }
                    },
                    "getAllowlist()": {
                        "returns": {
                            "_0": "The allowlist address"
                        }
                    },
                    "getBalanceToDeposit()": {
                        "returns": {
                            "_0": "The amount of pending ETH"
                        }
                    },
                    "getCLValidatorCount()": {
                        "returns": {
                            "_0": "The CL validator count"
                        }
                    },
                    "getCLValidatorTotalBalance()": {
                        "returns": {
                            "_0": "The CL Validator total balance"
                        }
                    },
                    "getCollector()": {
                        "returns": {
                            "_0": "The collector address"
                        }
                    },
                    "getCoverageFund()": {
                        "returns": {
                            "_0": "The coverage fund address"
                        }
                    },
                    "getDepositedValidatorCount()": {
                        "returns": {
                            "_0": "The deposited validator count"
                        }
                    },
                    "getELFeeRecipient()": {
                        "returns": {
                            "_0": "The execution layer fee recipient address"
                        }
                    },
                    "getGlobalFee()": {
                        "returns": {
                            "_0": "The global fee"
                        }
                    },
                    "getMetadataURI()": {
                        "returns": {
                            "_0": "The metadata uri string value"
                        }
                    },
                    "getOperatorsRegistry()": {
                        "returns": {
                            "_0": "The operators registry address"
                        }
                    },
                    "getOracle()": {
                        "returns": {
                            "_0": "The oracle address"
                        }
                    },
                    "getPendingAdmin()": {
                        "returns": {
                            "_0": "The pending admin address"
                        }
                    },
                    "getWithdrawalCredentials()": {
                        "returns": {
                            "_0": "The withdrawal credentials"
                        }
                    },
                    "increaseAllowance(address,uint256)": {
                        "params": {
                            "_additionalValue": "Amount of shares to add",
                            "_spender": "Spender that receives the allowance"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "initRiverV1(address,address,bytes32,address,address,address,address,address,uint256)": {
                        "params": {
                            "_allowlistAddress": "Address of the allowlist contract",
                            "_collectorAddress": "Address receiving the the global fee on revenue",
                            "_depositContractAddress": "Address to make Consensus Layer deposits",
                            "_elFeeRecipientAddress": "Address that receives the execution layer fees",
                            "_globalFee": "Amount retained when the ETH balance increases and sent to the collector",
                            "_operatorRegistryAddress": "Address of the operator registry",
                            "_oracleAddress": "The address of the Oracle contract",
                            "_systemAdministratorAddress": "Administrator address",
                            "_withdrawalCredentials": "Credentials to use for every validator deposit"
                        }
                    },
                    "name()": {
                        "returns": {
                            "_0": "The token name"
                        }
                    },
                    "proposeAdmin(address)": {
                        "details": "This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.",
                        "params": {
                            "_newAdmin": "New admin address"
                        }
                    },
                    "setAllowlist(address)": {
                        "params": {
                            "_newAllowlist": "New address for the allowlist"
                        }
                    },
                    "setCollector(address)": {
                        "params": {
                            "_newCollector": "New address for the collector"
                        }
                    },
                    "setConsensusLayerData(uint256,uint256,bytes32,uint256)": {
                        "details": "Can only be called by the oracle addressThe round id is a blackbox value that should only be used to identify unique reportsWhen a report is performed, River computes the amount of fees that can be pulledfrom the execution layer fee recipient. This amount is capped by the max allowedincrease provided during the report.If the total asset balance increases (from the reported total balance and the pulled funds)we then compute the share that must be taken for the collector on the positive delta.The execution layer fees are taken into account here because they are the product ofnode operator's work, just like consensus layer fees, and both should be handled in thesame manner, as a single revenue stream for the users and the collector.",
                        "params": {
                            "_maxIncrease": "The maximum allowed increase in the total balance",
                            "_roundId": "An identifier for this update",
                            "_validatorCount": "The number of active validators on the consensus layer",
                            "_validatorTotalBalance": "The balance sum of the active validators on the consensus layer"
                        }
                    },
                    "setCoverageFund(address)": {
                        "params": {
                            "_newCoverageFund": "New address for the fund"
                        }
                    },
                    "setELFeeRecipient(address)": {
                        "params": {
                            "_newELFeeRecipient": "New address for the recipient"
                        }
                    },
                    "setGlobalFee(uint256)": {
                        "params": {
                            "newFee": "New fee value"
                        }
                    },
                    "setMetadataURI(string)": {
                        "params": {
                            "_metadataURI": "The new metadata uri string value"
                        }
                    },
                    "setOracle(address)": {
                        "params": {
                            "_oracleAddress": "Address of the oracle"
                        }
                    },
                    "sharesFromUnderlyingBalance(uint256)": {
                        "params": {
                            "_underlyingAssetAmount": "Amount of underlying asset to convert"
                        },
                        "returns": {
                            "_0": "The amount of shares worth the underlying asset amopunt"
                        }
                    },
                    "symbol()": {
                        "returns": {
                            "_0": "The token symbol"
                        }
                    },
                    "totalSupply()": {
                        "returns": {
                            "_0": "The total supply in shares"
                        }
                    },
                    "totalUnderlyingSupply()": {
                        "returns": {
                            "_0": "The total underlying asset supply"
                        }
                    },
                    "transfer(address,uint256)": {
                        "params": {
                            "_to": "Address receiving the tokens",
                            "_value": "Amount of shares to be sent"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "transferFrom(address,address,uint256)": {
                        "params": {
                            "_from": "Address sending the tokens",
                            "_to": "Address receiving the tokens",
                            "_value": "Amount of shares to be sent"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "underlyingBalanceFromShares(uint256)": {
                        "params": {
                            "_shares": "Amount of shares to convert"
                        },
                        "returns": {
                            "_0": "The underlying asset balance represented by the shares"
                        }
                    }
                },
                "title": "River (v1)",
                "version": 1
            }
        ],
        "userdoc": [
            {
                "errors": {
                    "AllowanceTooLow(address,address,uint256,uint256)": [
                        {
                            "notice": "Allowance too low to perform operation"
                        }
                    ],
                    "BalanceTooLow()": [
                        {
                            "notice": "Balance too low to perform operation"
                        }
                    ],
                    "Denied(address)": [
                        {
                            "notice": "The access was denied"
                        }
                    ],
                    "EmptyDeposit()": [
                        {
                            "notice": "And empty deposit attempt was made"
                        }
                    ],
                    "ErrorOnDeposit()": [
                        {
                            "notice": "An error occured during the deposit"
                        }
                    ],
                    "InconsistentPublicKeys()": [
                        {
                            "notice": "The length of the BLS Public key is invalid during deposit"
                        }
                    ],
                    "InconsistentSignatures()": [
                        {
                            "notice": "The length of the BLS Signature is invalid during deposit"
                        }
                    ],
                    "InvalidArgument()": [
                        {
                            "notice": "The argument was invalid"
                        }
                    ],
                    "InvalidCall()": [
                        {
                            "notice": "The call was invalid"
                        }
                    ],
                    "InvalidFee()": [
                        {
                            "notice": "The fee is invalid"
                        }
                    ],
                    "InvalidInitialization(uint256,uint256)": [
                        {
                            "notice": "An error occured during the initialization"
                        }
                    ],
                    "InvalidPublicKeyCount()": [
                        {
                            "notice": "The received count of public keys to deposit is invalid"
                        }
                    ],
                    "InvalidSignatureCount()": [
                        {
                            "notice": "The received count of signatures to deposit is invalid"
                        }
                    ],
                    "InvalidValidatorCountReport(uint256,uint256)": [
                        {
                            "notice": "The reported validator count is invalid"
                        }
                    ],
                    "InvalidWithdrawalCredentials()": [
                        {
                            "notice": "The withdrawal credentials value is null"
                        }
                    ],
                    "InvalidZeroAddress()": [
                        {
                            "notice": "The address is zero"
                        }
                    ],
                    "NoAvailableValidatorKeys()": [
                        {
                            "notice": "The internal key retrieval returned no keys"
                        }
                    ],
                    "NotEnoughFunds()": [
                        {
                            "notice": "Not enough funds to deposit one validator"
                        }
                    ],
                    "NullTransfer()": [
                        {
                            "notice": "Invalid empty transfer"
                        }
                    ],
                    "SliceOutOfBounds()": [
                        {
                            "notice": "The slice is outside of the initial bytes bounds"
                        }
                    ],
                    "SliceOverflow()": [
                        {
                            "notice": "The length overflows an uint"
                        }
                    ],
                    "Unauthorized(address)": [
                        {
                            "notice": "The operator is unauthorized for the caller"
                        }
                    ],
                    "UnauthorizedTransfer(address,address)": [
                        {
                            "notice": "Invalid transfer recipients"
                        }
                    ],
                    "ZeroMintedShares()": [
                        {
                            "notice": "The computed amount of shares to mint is 0"
                        }
                    ]
                },
                "events": {
                    "ConsensusLayerDataUpdate(uint256,uint256,bytes32)": {
                        "notice": "The consensus layer data provided by the oracle has been updated"
                    },
                    "FundedValidatorKey(bytes)": {
                        "notice": "A validator key got funded on the deposit contract"
                    },
                    "Initialize(uint256,bytes)": {
                        "notice": "Emitted when the contract is properly initialized"
                    },
                    "PulledELFees(uint256)": {
                        "notice": "Funds have been pulled from the Execution Layer Fee Recipient"
                    },
                    "RewardsEarned(address,uint256,uint256,uint256,uint256)": {
                        "notice": "The system underlying supply increased. This is a snapshot of the balances for accounting purposes"
                    },
                    "SetAdmin(address)": {
                        "notice": "The admin address changed"
                    },
                    "SetAllowlist(address)": {
                        "notice": "The stored Allowlist has been changed"
                    },
                    "SetCollector(address)": {
                        "notice": "The stored Collector has been changed"
                    },
                    "SetDepositContractAddress(address)": {
                        "notice": "The stored deposit contract address changed"
                    },
                    "SetELFeeRecipient(address)": {
                        "notice": "The stored Execution Layer Fee Recipient has been changed"
                    },
                    "SetGlobalFee(uint256)": {
                        "notice": "The stored Global Fee has been changed"
                    },
                    "SetOperatorsRegistry(address)": {
                        "notice": "The stored Operators Registry has been changed"
                    },
                    "SetOracle(address)": {
                        "notice": "The stored oracle address changed"
                    },
                    "SetPendingAdmin(address)": {
                        "notice": "The pending admin address changed"
                    },
                    "SetWithdrawalCredentials(bytes32)": {
                        "notice": "The stored withdrawal credentials changed"
                    },
                    "UserDeposit(address,address,uint256)": {
                        "notice": "User deposited ETH in the system"
                    }
                },
                "kind": "user",
                "methods": {
                    "DEPOSIT_SIZE()": {
                        "notice": "Size of a deposit in ETH"
                    },
                    "PUBLIC_KEY_LENGTH()": {
                        "notice": "Size of a BLS Public key in bytes"
                    },
                    "SIGNATURE_LENGTH()": {
                        "notice": "Size of a BLS Signature in bytes"
                    },
                    "acceptAdmin()": {
                        "notice": "Accept the transfer of ownership"
                    },
                    "allowance(address,address)": {
                        "notice": "Retrieve the allowance value for a spender"
                    },
                    "approve(address,uint256)": {
                        "notice": "Approves an account for future spendings"
                    },
                    "balanceOf(address)": {
                        "notice": "Retrieve the balance of an account"
                    },
                    "balanceOfUnderlying(address)": {
                        "notice": "Retrieve the underlying asset balance of an account"
                    },
                    "decimals()": {
                        "notice": "Retrieve the decimal count"
                    },
                    "decreaseAllowance(address,uint256)": {
                        "notice": "Decrease allowance to another account"
                    },
                    "deposit()": {
                        "notice": "Explicit deposit method to mint on msg.sender"
                    },
                    "depositAndTransfer(address)": {
                        "notice": "Explicit deposit method to mint on msg.sender and transfer to _recipient"
                    },
                    "depositToConsensusLayer(uint256)": {
                        "notice": "Deposits current balance to the Consensus Layer by batches of 32 ETH"
                    },
                    "getAdmin()": {
                        "notice": "Retrieves the current admin address"
                    },
                    "getAllowlist()": {
                        "notice": "Retrieve the allowlist address"
                    },
                    "getBalanceToDeposit()": {
                        "notice": "Returns the amount of pending ETH"
                    },
                    "getCLValidatorCount()": {
                        "notice": "Get CL validator count (the amount of validator reported by the oracles)"
                    },
                    "getCLValidatorTotalBalance()": {
                        "notice": "Get CL validator total balance"
                    },
                    "getCollector()": {
                        "notice": "Retrieve the collector address"
                    },
                    "getDepositedValidatorCount()": {
                        "notice": "Get the deposited validator count (the count of deposits made by the contract)"
                    },
                    "getELFeeRecipient()": {
                        "notice": "Retrieve the execution layer fee recipient"
                    },
                    "getGlobalFee()": {
                        "notice": "Get the current global fee"
                    },
                    "getOperatorsRegistry()": {
                        "notice": "Retrieve the operators registry"
                    },
                    "getOracle()": {
                        "notice": "Get oracle address"
                    },
                    "getPendingAdmin()": {
                        "notice": "Retrieve the current pending admin address"
                    },
                    "getWithdrawalCredentials()": {
                        "notice": "Retrieve the withdrawal credentials"
                    },
                    "increaseAllowance(address,uint256)": {
                        "notice": "Increase allowance to another account"
                    },
                    "initRiverV1(address,address,bytes32,address,address,address,address,address,uint256)": {
                        "notice": "Initializes the River system"
                    },
                    "name()": {
                        "notice": "Retrieve the token name"
                    },
                    "proposeAdmin(address)": {
                        "notice": "Proposes a new address as admin"
                    },
                    "sendELFees()": {
                        "notice": "Input for execution layer fee earnings"
                    },
                    "setAllowlist(address)": {
                        "notice": "Changes the allowlist address"
                    },
                    "setCollector(address)": {
                        "notice": "Changes the collector address"
                    },
                    "setConsensusLayerData(uint256,uint256,bytes32,uint256)": {
                        "notice": "Sets the validator count and validator total balance sum reported by the oracle"
                    },
                    "setELFeeRecipient(address)": {
                        "notice": "Changes the execution layer fee recipient"
                    },
                    "setGlobalFee(uint256)": {
                        "notice": "Changes the global fee parameter"
                    },
                    "setOracle(address)": {
                        "notice": "Set the oracle address"
                    },
                    "sharesFromUnderlyingBalance(uint256)": {
                        "notice": "Retrieve the shares count from an underlying asset amount"
                    },
                    "symbol()": {
                        "notice": "Retrieve the token symbol"
                    },
                    "totalSupply()": {
                        "notice": "Retrieve the total token supply"
                    },
                    "totalUnderlyingSupply()": {
                        "notice": "Retrieve the total underlying asset supply"
                    },
                    "transfer(address,uint256)": {
                        "notice": "Performs a transfer from the message sender to the provided account"
                    },
                    "transferFrom(address,address,uint256)": {
                        "notice": "Performs a transfer between two recipients"
                    },
                    "underlyingBalanceFromShares(uint256)": {
                        "notice": "Retrieve the underlying asset balance from an amount of shares"
                    }
                },
                "notice": "This contract merges all the manager contracts and implements all the virtual methods stitching all components together@notice    +---------------------------------------------------------------------+|                                                                     ||                           Consensus Layer                           ||                                                                     || +-------------------+  +-------------------+  +-------------------+ || |                   |  |                   |  |                   | || |  EL Fee Recipient |  |      Oracle       |  |  Deposit Contract | || |                   |  |                   |  |                   | || +---------|---------+  +---------|---------+  +---------|---------+ |+---------------------------------------------------------------------+|         7            |            5         |+-----------------|    |    |-----------------+|    |6   ||    |    |+---------+          +----|----|----|----+            +---------+|         |          |                   |     2      |         ||Operator |          |       River       --------------  User   ||         |          |                   |            |         |+----|----+          +----|---------|----+            +---------+|                    |         ||             4      |         |       3|1     +-------------|         |--------------+|      |                                      ||      |                                      |+------|------|------------+           +-------------|------------+|                          |           |                          ||    Operators Registry    |           |         Allowlist        ||                          |           |                          |+--------------------------+           +--------------------------+@notice      1. Operators are adding BLS Public Keys of validators running in theirinfrastructure.2. User deposit ETH to the system and get shares minted in exchange3. Upon deposit, the system verifies if the User is allowed to depositby querying the Allowlist4. When the system has enough funds to deposit validators, keys are pulledfrom the Operators Registry5. The deposit data is computed and the validators are funded via the officialdeposit contract6. Oracles report the total balance of the running validators and the total countof running validators7. The running validators propose blocks that reward the EL Fee Recipient. The fundsare pulled back in the system.",
                "version": 1
            },
            {
                "errors": {
                    "AllowanceTooLow(address,address,uint256,uint256)": [
                        {
                            "notice": "Allowance too low to perform operation"
                        }
                    ],
                    "BalanceTooLow()": [
                        {
                            "notice": "Balance too low to perform operation"
                        }
                    ],
                    "Denied(address)": [
                        {
                            "notice": "The access was denied"
                        }
                    ],
                    "EmptyDeposit()": [
                        {
                            "notice": "And empty deposit attempt was made"
                        }
                    ],
                    "ErrorOnDeposit()": [
                        {
                            "notice": "An error occured during the deposit"
                        }
                    ],
                    "InconsistentPublicKeys()": [
                        {
                            "notice": "The length of the BLS Public key is invalid during deposit"
                        }
                    ],
                    "InconsistentSignatures()": [
                        {
                            "notice": "The length of the BLS Signature is invalid during deposit"
                        }
                    ],
                    "InvalidArgument()": [
                        {
                            "notice": "The argument was invalid"
                        }
                    ],
                    "InvalidCall()": [
                        {
                            "notice": "The call was invalid"
                        }
                    ],
                    "InvalidFee()": [
                        {
                            "notice": "The fee is invalid"
                        }
                    ],
                    "InvalidInitialization(uint256,uint256)": [
                        {
                            "notice": "An error occured during the initialization"
                        }
                    ],
                    "InvalidPublicKeyCount()": [
                        {
                            "notice": "The received count of public keys to deposit is invalid"
                        }
                    ],
                    "InvalidSignatureCount()": [
                        {
                            "notice": "The received count of signatures to deposit is invalid"
                        }
                    ],
                    "InvalidValidatorCountReport(uint256,uint256)": [
                        {
                            "notice": "The reported validator count is invalid"
                        }
                    ],
                    "InvalidWithdrawalCredentials()": [
                        {
                            "notice": "The withdrawal credentials value is null"
                        }
                    ],
                    "InvalidZeroAddress()": [
                        {
                            "notice": "The address is zero"
                        }
                    ],
                    "NoAvailableValidatorKeys()": [
                        {
                            "notice": "The internal key retrieval returned no keys"
                        }
                    ],
                    "NotEnoughFunds()": [
                        {
                            "notice": "Not enough funds to deposit one validator"
                        }
                    ],
                    "NullTransfer()": [
                        {
                            "notice": "Invalid empty transfer"
                        }
                    ],
                    "SliceOutOfBounds()": [
                        {
                            "notice": "The slice is outside of the initial bytes bounds"
                        }
                    ],
                    "SliceOverflow()": [
                        {
                            "notice": "The length overflows an uint"
                        }
                    ],
                    "Unauthorized(address)": [
                        {
                            "notice": "The operator is unauthorized for the caller"
                        }
                    ],
                    "UnauthorizedTransfer(address,address)": [
                        {
                            "notice": "Invalid transfer recipients"
                        }
                    ],
                    "ZeroMintedShares()": [
                        {
                            "notice": "The computed amount of shares to mint is 0"
                        }
                    ]
                },
                "events": {
                    "ConsensusLayerDataUpdate(uint256,uint256,bytes32)": {
                        "notice": "The consensus layer data provided by the oracle has been updated"
                    },
                    "FundedValidatorKey(bytes)": {
                        "notice": "A validator key got funded on the deposit contract"
                    },
                    "Initialize(uint256,bytes)": {
                        "notice": "Emitted when the contract is properly initialized"
                    },
                    "PulledELFees(uint256)": {
                        "notice": "Funds have been pulled from the Execution Layer Fee Recipient"
                    },
                    "RewardsEarned(address,uint256,uint256,uint256,uint256)": {
                        "notice": "The system underlying supply increased. This is a snapshot of the balances for accounting purposes"
                    },
                    "SetAdmin(address)": {
                        "notice": "The admin address changed"
                    },
                    "SetAllowlist(address)": {
                        "notice": "The stored Allowlist has been changed"
                    },
                    "SetCollector(address)": {
                        "notice": "The stored Collector has been changed"
                    },
                    "SetDepositContractAddress(address)": {
                        "notice": "The stored deposit contract address changed"
                    },
                    "SetELFeeRecipient(address)": {
                        "notice": "The stored Execution Layer Fee Recipient has been changed"
                    },
                    "SetGlobalFee(uint256)": {
                        "notice": "The stored Global Fee has been changed"
                    },
                    "SetOperatorsRegistry(address)": {
                        "notice": "The stored Operators Registry has been changed"
                    },
                    "SetOracle(address)": {
                        "notice": "The stored oracle address changed"
                    },
                    "SetPendingAdmin(address)": {
                        "notice": "The pending admin address changed"
                    },
                    "SetWithdrawalCredentials(bytes32)": {
                        "notice": "The stored withdrawal credentials changed"
                    },
                    "UserDeposit(address,address,uint256)": {
                        "notice": "User deposited ETH in the system"
                    }
                },
                "kind": "user",
                "methods": {
                    "DEPOSIT_SIZE()": {
                        "notice": "Size of a deposit in ETH"
                    },
                    "PUBLIC_KEY_LENGTH()": {
                        "notice": "Size of a BLS Public key in bytes"
                    },
                    "SIGNATURE_LENGTH()": {
                        "notice": "Size of a BLS Signature in bytes"
                    },
                    "acceptAdmin()": {
                        "notice": "Accept the transfer of ownership"
                    },
                    "allowance(address,address)": {
                        "notice": "Retrieve the allowance value for a spender"
                    },
                    "approve(address,uint256)": {
                        "notice": "Approves an account for future spendings"
                    },
                    "balanceOf(address)": {
                        "notice": "Retrieve the balance of an account"
                    },
                    "balanceOfUnderlying(address)": {
                        "notice": "Retrieve the underlying asset balance of an account"
                    },
                    "decimals()": {
                        "notice": "Retrieve the decimal count"
                    },
                    "decreaseAllowance(address,uint256)": {
                        "notice": "Decrease allowance to another account"
                    },
                    "deposit()": {
                        "notice": "Explicit deposit method to mint on msg.sender"
                    },
                    "depositAndTransfer(address)": {
                        "notice": "Explicit deposit method to mint on msg.sender and transfer to _recipient"
                    },
                    "depositToConsensusLayer(uint256)": {
                        "notice": "Deposits current balance to the Consensus Layer by batches of 32 ETH"
                    },
                    "getAdmin()": {
                        "notice": "Retrieves the current admin address"
                    },
                    "getAllowlist()": {
                        "notice": "Retrieve the allowlist address"
                    },
                    "getBalanceToDeposit()": {
                        "notice": "Returns the amount of pending ETH"
                    },
                    "getCLValidatorCount()": {
                        "notice": "Get CL validator count (the amount of validator reported by the oracles)"
                    },
                    "getCLValidatorTotalBalance()": {
                        "notice": "Get CL validator total balance"
                    },
                    "getCollector()": {
                        "notice": "Retrieve the collector address"
                    },
                    "getDepositedValidatorCount()": {
                        "notice": "Get the deposited validator count (the count of deposits made by the contract)"
                    },
                    "getELFeeRecipient()": {
                        "notice": "Retrieve the execution layer fee recipient"
                    },
                    "getGlobalFee()": {
                        "notice": "Get the current global fee"
                    },
                    "getOperatorsRegistry()": {
                        "notice": "Retrieve the operators registry"
                    },
                    "getOracle()": {
                        "notice": "Get oracle address"
                    },
                    "getPendingAdmin()": {
                        "notice": "Retrieve the current pending admin address"
                    },
                    "getWithdrawalCredentials()": {
                        "notice": "Retrieve the withdrawal credentials"
                    },
                    "increaseAllowance(address,uint256)": {
                        "notice": "Increase allowance to another account"
                    },
                    "initRiverV1(address,address,bytes32,address,address,address,address,address,uint256)": {
                        "notice": "Initializes the River system"
                    },
                    "name()": {
                        "notice": "Retrieve the token name"
                    },
                    "proposeAdmin(address)": {
                        "notice": "Proposes a new address as admin"
                    },
                    "sendELFees()": {
                        "notice": "Input for execution layer fee earnings"
                    },
                    "setAllowlist(address)": {
                        "notice": "Changes the allowlist address"
                    },
                    "setCollector(address)": {
                        "notice": "Changes the collector address"
                    },
                    "setConsensusLayerData(uint256,uint256,bytes32,uint256)": {
                        "notice": "Sets the validator count and validator total balance sum reported by the oracle"
                    },
                    "setELFeeRecipient(address)": {
                        "notice": "Changes the execution layer fee recipient"
                    },
                    "setGlobalFee(uint256)": {
                        "notice": "Changes the global fee parameter"
                    },
                    "setOracle(address)": {
                        "notice": "Set the oracle address"
                    },
                    "sharesFromUnderlyingBalance(uint256)": {
                        "notice": "Retrieve the shares count from an underlying asset amount"
                    },
                    "symbol()": {
                        "notice": "Retrieve the token symbol"
                    },
                    "totalSupply()": {
                        "notice": "Retrieve the total token supply"
                    },
                    "totalUnderlyingSupply()": {
                        "notice": "Retrieve the total underlying asset supply"
                    },
                    "transfer(address,uint256)": {
                        "notice": "Performs a transfer from the message sender to the provided account"
                    },
                    "transferFrom(address,address,uint256)": {
                        "notice": "Performs a transfer between two recipients"
                    },
                    "underlyingBalanceFromShares(uint256)": {
                        "notice": "Retrieve the underlying asset balance from an amount of shares"
                    }
                },
                "notice": "This contract merges all the manager contracts and implements all the virtual methods stitching all components together@notice    +---------------------------------------------------------------------+|                                                                     ||                           Consensus Layer                           ||                                                                     || +-------------------+  +-------------------+  +-------------------+ || |                   |  |                   |  |                   | || |  EL Fee Recipient |  |      Oracle       |  |  Deposit Contract | || |                   |  |                   |  |                   | || +---------|---------+  +---------|---------+  +---------|---------+ |+---------------------------------------------------------------------+|         7            |            5         |+-----------------|    |    |-----------------+|    |6   ||    |    |+---------+          +----|----|----|----+            +---------+|         |          |                   |     2      |         ||Operator |          |       River       --------------  User   ||         |          |                   |            |         |+----|----+          +----|---------|----+            +---------+|                    |         ||             4      |         |       3|1     +-------------|         |--------------+|      |                                      ||      |                                      |+------|------|------------+           +-------------|------------+|                          |           |                          ||    Operators Registry    |           |         Allowlist        ||                          |           |                          |+--------------------------+           +--------------------------+@notice      1. Operators are adding BLS Public Keys of validators running in theirinfrastructure.2. User deposit ETH to the system and get shares minted in exchange3. Upon deposit, the system verifies if the User is allowed to depositby querying the Allowlist4. When the system has enough funds to deposit validators, keys are pulledfrom the Operators Registry5. The deposit data is computed and the validators are funded via the officialdeposit contract6. Oracles report the total balance of the running validators and the total countof running validators7. The running validators propose blocks that reward the EL Fee Recipient. The fundsare pulled back in the system.",
                "version": 1
            },
            {
                "errors": {
                    "AllowanceTooLow(address,address,uint256,uint256)": [
                        {
                            "notice": "Allowance too low to perform operation"
                        }
                    ],
                    "BalanceTooLow()": [
                        {
                            "notice": "Balance too low to perform operation"
                        }
                    ],
                    "Denied(address)": [
                        {
                            "notice": "The access was denied"
                        }
                    ],
                    "EmptyDeposit()": [
                        {
                            "notice": "And empty deposit attempt was made"
                        }
                    ],
                    "ErrorOnDeposit()": [
                        {
                            "notice": "An error occured during the deposit"
                        }
                    ],
                    "InconsistentPublicKeys()": [
                        {
                            "notice": "The length of the BLS Public key is invalid during deposit"
                        }
                    ],
                    "InconsistentSignatures()": [
                        {
                            "notice": "The length of the BLS Signature is invalid during deposit"
                        }
                    ],
                    "InvalidArgument()": [
                        {
                            "notice": "The argument was invalid"
                        }
                    ],
                    "InvalidCall()": [
                        {
                            "notice": "The call was invalid"
                        }
                    ],
                    "InvalidEmptyString()": [
                        {
                            "notice": "The string is empty"
                        }
                    ],
                    "InvalidFee()": [
                        {
                            "notice": "The fee is invalid"
                        }
                    ],
                    "InvalidInitialization(uint256,uint256)": [
                        {
                            "notice": "An error occured during the initialization"
                        }
                    ],
                    "InvalidPublicKeyCount()": [
                        {
                            "notice": "The received count of public keys to deposit is invalid"
                        }
                    ],
                    "InvalidSignatureCount()": [
                        {
                            "notice": "The received count of signatures to deposit is invalid"
                        }
                    ],
                    "InvalidValidatorCountReport(uint256,uint256)": [
                        {
                            "notice": "The reported validator count is invalid"
                        }
                    ],
                    "InvalidWithdrawalCredentials()": [
                        {
                            "notice": "The withdrawal credentials value is null"
                        }
                    ],
                    "InvalidZeroAddress()": [
                        {
                            "notice": "The address is zero"
                        }
                    ],
                    "NoAvailableValidatorKeys()": [
                        {
                            "notice": "The internal key retrieval returned no keys"
                        }
                    ],
                    "NotEnoughFunds()": [
                        {
                            "notice": "Not enough funds to deposit one validator"
                        }
                    ],
                    "NullTransfer()": [
                        {
                            "notice": "Invalid empty transfer"
                        }
                    ],
                    "SliceOutOfBounds()": [
                        {
                            "notice": "The slice is outside of the initial bytes bounds"
                        }
                    ],
                    "SliceOverflow()": [
                        {
                            "notice": "The length overflows an uint"
                        }
                    ],
                    "Unauthorized(address)": [
                        {
                            "notice": "The operator is unauthorized for the caller"
                        }
                    ],
                    "UnauthorizedTransfer(address,address)": [
                        {
                            "notice": "Invalid transfer recipients"
                        }
                    ],
                    "ZeroMintedShares()": [
                        {
                            "notice": "The computed amount of shares to mint is 0"
                        }
                    ]
                },
                "events": {
                    "ConsensusLayerDataUpdate(uint256,uint256,bytes32)": {
                        "notice": "The consensus layer data provided by the oracle has been updated"
                    },
                    "FundedValidatorKey(bytes)": {
                        "notice": "A validator key got funded on the deposit contract"
                    },
                    "Initialize(uint256,bytes)": {
                        "notice": "Emitted when the contract is properly initialized"
                    },
                    "PulledCoverageFunds(uint256)": {
                        "notice": "Funds have been pulled from the Coverage Fund"
                    },
                    "PulledELFees(uint256)": {
                        "notice": "Funds have been pulled from the Execution Layer Fee Recipient"
                    },
                    "RewardsEarned(address,uint256,uint256,uint256,uint256)": {
                        "notice": "The system underlying supply increased. This is a snapshot of the balances for accounting purposes"
                    },
                    "SetAdmin(address)": {
                        "notice": "The admin address changed"
                    },
                    "SetAllowlist(address)": {
                        "notice": "The stored Allowlist has been changed"
                    },
                    "SetCollector(address)": {
                        "notice": "The stored Collector has been changed"
                    },
                    "SetCoverageFund(address)": {
                        "notice": "The stored Coverage Fund has been changed"
                    },
                    "SetDepositContractAddress(address)": {
                        "notice": "The stored deposit contract address changed"
                    },
                    "SetELFeeRecipient(address)": {
                        "notice": "The stored Execution Layer Fee Recipient has been changed"
                    },
                    "SetGlobalFee(uint256)": {
                        "notice": "The stored Global Fee has been changed"
                    },
                    "SetMetadataURI(string)": {
                        "notice": "The stored Metadata URI string has been changed"
                    },
                    "SetOperatorsRegistry(address)": {
                        "notice": "The stored Operators Registry has been changed"
                    },
                    "SetOracle(address)": {
                        "notice": "The stored oracle address changed"
                    },
                    "SetPendingAdmin(address)": {
                        "notice": "The pending admin address changed"
                    },
                    "SetWithdrawalCredentials(bytes32)": {
                        "notice": "The stored withdrawal credentials changed"
                    },
                    "UserDeposit(address,address,uint256)": {
                        "notice": "User deposited ETH in the system"
                    }
                },
                "kind": "user",
                "methods": {
                    "DEPOSIT_SIZE()": {
                        "notice": "Size of a deposit in ETH"
                    },
                    "PUBLIC_KEY_LENGTH()": {
                        "notice": "Size of a BLS Public key in bytes"
                    },
                    "SIGNATURE_LENGTH()": {
                        "notice": "Size of a BLS Signature in bytes"
                    },
                    "acceptAdmin()": {
                        "notice": "Accept the transfer of ownership"
                    },
                    "allowance(address,address)": {
                        "notice": "Retrieve the allowance value for a spender"
                    },
                    "approve(address,uint256)": {
                        "notice": "Approves an account for future spendings"
                    },
                    "balanceOf(address)": {
                        "notice": "Retrieve the balance of an account"
                    },
                    "balanceOfUnderlying(address)": {
                        "notice": "Retrieve the underlying asset balance of an account"
                    },
                    "decimals()": {
                        "notice": "Retrieve the decimal count"
                    },
                    "decreaseAllowance(address,uint256)": {
                        "notice": "Decrease allowance to another account"
                    },
                    "deposit()": {
                        "notice": "Explicit deposit method to mint on msg.sender"
                    },
                    "depositAndTransfer(address)": {
                        "notice": "Explicit deposit method to mint on msg.sender and transfer to _recipient"
                    },
                    "depositToConsensusLayer(uint256)": {
                        "notice": "Deposits current balance to the Consensus Layer by batches of 32 ETH"
                    },
                    "getAdmin()": {
                        "notice": "Retrieves the current admin address"
                    },
                    "getAllowlist()": {
                        "notice": "Retrieve the allowlist address"
                    },
                    "getBalanceToDeposit()": {
                        "notice": "Returns the amount of pending ETH"
                    },
                    "getCLValidatorCount()": {
                        "notice": "Get CL validator count (the amount of validator reported by the oracles)"
                    },
                    "getCLValidatorTotalBalance()": {
                        "notice": "Get CL validator total balance"
                    },
                    "getCollector()": {
                        "notice": "Retrieve the collector address"
                    },
                    "getCoverageFund()": {
                        "notice": "Retrieve the coverage fund"
                    },
                    "getDepositedValidatorCount()": {
                        "notice": "Get the deposited validator count (the count of deposits made by the contract)"
                    },
                    "getELFeeRecipient()": {
                        "notice": "Retrieve the execution layer fee recipient"
                    },
                    "getGlobalFee()": {
                        "notice": "Get the current global fee"
                    },
                    "getMetadataURI()": {
                        "notice": "Retrieve the metadata uri string value"
                    },
                    "getOperatorsRegistry()": {
                        "notice": "Retrieve the operators registry"
                    },
                    "getOracle()": {
                        "notice": "Get oracle address"
                    },
                    "getPendingAdmin()": {
                        "notice": "Retrieve the current pending admin address"
                    },
                    "getWithdrawalCredentials()": {
                        "notice": "Retrieve the withdrawal credentials"
                    },
                    "increaseAllowance(address,uint256)": {
                        "notice": "Increase allowance to another account"
                    },
                    "initRiverV1(address,address,bytes32,address,address,address,address,address,uint256)": {
                        "notice": "Initializes the River system"
                    },
                    "name()": {
                        "notice": "Retrieve the token name"
                    },
                    "proposeAdmin(address)": {
                        "notice": "Proposes a new address as admin"
                    },
                    "sendCoverageFunds()": {
                        "notice": "Input for coverage funds"
                    },
                    "sendELFees()": {
                        "notice": "Input for execution layer fee earnings"
                    },
                    "setAllowlist(address)": {
                        "notice": "Changes the allowlist address"
                    },
                    "setCollector(address)": {
                        "notice": "Changes the collector address"
                    },
                    "setConsensusLayerData(uint256,uint256,bytes32,uint256)": {
                        "notice": "Sets the validator count and validator total balance sum reported by the oracle"
                    },
                    "setCoverageFund(address)": {
                        "notice": "Changes the coverage fund"
                    },
                    "setELFeeRecipient(address)": {
                        "notice": "Changes the execution layer fee recipient"
                    },
                    "setGlobalFee(uint256)": {
                        "notice": "Changes the global fee parameter"
                    },
                    "setMetadataURI(string)": {
                        "notice": "Sets the metadata uri string value"
                    },
                    "setOracle(address)": {
                        "notice": "Set the oracle address"
                    },
                    "sharesFromUnderlyingBalance(uint256)": {
                        "notice": "Retrieve the shares count from an underlying asset amount"
                    },
                    "symbol()": {
                        "notice": "Retrieve the token symbol"
                    },
                    "totalSupply()": {
                        "notice": "Retrieve the total token supply"
                    },
                    "totalUnderlyingSupply()": {
                        "notice": "Retrieve the total underlying asset supply"
                    },
                    "transfer(address,uint256)": {
                        "notice": "Performs a transfer from the message sender to the provided account"
                    },
                    "transferFrom(address,address,uint256)": {
                        "notice": "Performs a transfer between two recipients"
                    },
                    "underlyingBalanceFromShares(uint256)": {
                        "notice": "Retrieve the underlying asset balance from an amount of shares"
                    }
                },
                "notice": "This contract merges all the manager contracts and implements all the virtual methods stitching all components together@notice    +---------------------------------------------------------------------+|                                                                     ||                           Consensus Layer                           ||                                                                     || +-------------------+  +-------------------+  +-------------------+ || |                   |  |                   |  |                   | || |  EL Fee Recipient |  |      Oracle       |  |  Deposit Contract | || |                   |  |                   |  |                   | || +---------|---------+  +---------|---------+  +---------|---------+ |+---------------------------------------------------------------------+|         7            |            5         |+-----------------|    |    |-----------------+|    |6   ||    |    |+---------+          +----|----|----|----+            +---------+|         |          |                   |     2      |         ||Operator |          |       River       --------------  User   ||         |          |                   |            |         |+----|----+          +----|---------|----+            +---------+|                    |         ||             4      |         |       3|1     +-------------|         |--------------+|      |                                      ||      |                                      |+------|------|------------+           +-------------|------------+|                          |           |                          ||    Operators Registry    |           |         Allowlist        ||                          |           |                          |+--------------------------+           +--------------------------+@notice      1. Operators are adding BLS Public Keys of validators running in theirinfrastructure.2. User deposit ETH to the system and get shares minted in exchange3. Upon deposit, the system verifies if the User is allowed to depositby querying the Allowlist4. When the system has enough funds to deposit validators, keys are pulledfrom the Operators Registry5. The deposit data is computed and the validators are funded via the officialdeposit contract6. Oracles report the total balance of the running validators and the total countof running validators7. The running validators propose blocks that reward the EL Fee Recipient. The fundsare pulled back in the system.",
                "version": 1
            }
        ],
        "storageLayout": [
            {
                "storage": [],
                "types": null
            },
            {
                "storage": [],
                "types": null
            },
            {
                "storage": [],
                "types": null
            }
        ]
    }
}