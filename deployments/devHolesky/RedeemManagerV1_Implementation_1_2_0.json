{
  "address": "0xC0FbD5Da2f2567d0e311fee77650bc41feDE33b7",
  "abi": [
    {
      "inputs": [],
      "name": "ClaimInitiatorIsDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimRecipientIsDenied",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "rdata",
          "type": "bytes"
        }
      ],
      "name": "ClaimRedeemFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "redeemRequestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawalEventId",
          "type": "uint256"
        }
      ],
      "name": "DoesNotMatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncompatibleArrayLengths",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedVersion",
          "type": "uint256"
        }
      ],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidZeroAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RecipientIsDenied",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "RedeemRequestAlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "RedeemRequestOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalEventOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemDemand",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalExceedsRedeemDemand",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "redeemRequestId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lsEthAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingLsEthAmount",
          "type": "uint256"
        }
      ],
      "name": "ClaimedRedeemRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "cdata",
          "type": "bytes"
        }
      ],
      "name": "Initialize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "height",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        }
      ],
      "name": "ReportedWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "height",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxRedeemableEth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        }
      ],
      "name": "RequestedRedeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "redeemRequestId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "withdrawalEventId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lsEthAmountSatisfied",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethAmountSatisfied",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lsEthAmountRemaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethAmountExceeding",
          "type": "uint256"
        }
      ],
      "name": "SatisfiedRedeemRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRedeemDemand",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRedeemDemand",
          "type": "uint256"
        }
      ],
      "name": "SetRedeemDemand",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "river",
          "type": "address"
        }
      ],
      "name": "SetRiver",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "redeemRequestIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "withdrawalEventIds",
          "type": "uint32[]"
        },
        {
          "internalType": "bool",
          "name": "skipAlreadyClaimed",
          "type": "bool"
        },
        {
          "internalType": "uint16",
          "name": "_depth",
          "type": "uint16"
        }
      ],
      "name": "claimRedeemRequests",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "claimStatuses",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_redeemRequestIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_withdrawalEventIds",
          "type": "uint32[]"
        }
      ],
      "name": "claimRedeemRequests",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "claimStatuses",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBufferedExceedingEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRedeemDemand",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRedeemRequestCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_redeemRequestId",
          "type": "uint32"
        }
      ],
      "name": "getRedeemRequestDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxRedeemableEth",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "initiator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "height",
              "type": "uint256"
            }
          ],
          "internalType": "struct RedeemQueue.RedeemRequest",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawalEventCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_withdrawalEventId",
          "type": "uint32"
        }
      ],
      "name": "getWithdrawalEventDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawnEth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "height",
              "type": "uint256"
            }
          ],
          "internalType": "struct WithdrawalStack.WithdrawalEvent",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_river",
          "type": "address"
        }
      ],
      "name": "initializeRedeemManagerV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "pullExceedingEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lsETHWithdrawable",
          "type": "uint256"
        }
      ],
      "name": "reportWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lsETHAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "requestRedeem",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "redeemRequestId",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lsETHAmount",
          "type": "uint256"
        }
      ],
      "name": "requestRedeem",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "redeemRequestId",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_redeemRequestIds",
          "type": "uint32[]"
        }
      ],
      "name": "resolveRedeemRequests",
      "outputs": [
        {
          "internalType": "int64[]",
          "name": "withdrawalEventIds",
          "type": "int64[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xa5f630f00135d03e013d4c6c2f601b35717947bc22b456f1d26a2674401ff0a8",
  "receipt": {
    "to": null,
    "from": "0x341C40B94bF2afBFa42573cB78f16Ee15a056238",
    "contractAddress": "0xC0FbD5Da2f2567d0e311fee77650bc41feDE33b7",
    "transactionIndex": 16,
    "gasUsed": "1870202",
    "logsBloom": "0x
    "blockHash": "0x6755ead0f545731a27b13a8019cafdf65e2283457afd2be87fac2b18429f8cbd",
    "transactionHash": "0xa5f630f00135d03e013d4c6c2f601b35717947bc22b456f1d26a2674401ff0a8",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 2183926,
        "transactionHash": "0xa5f630f00135d03e013d4c6c2f601b35717947bc22b456f1d26a2674401ff0a8",
        "address": "0xC0FbD5Da2f2567d0e311fee77650bc41feDE33b7",
        "topics": [
          "0x1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a71"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 60,
        "blockHash": "0x6755ead0f545731a27b13a8019cafdf65e2283457afd2be87fac2b18429f8cbd"
      }
    ],
    "blockNumber": 2183926,
    "cumulativeGasUsed": "4462668",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9213235610761b71d3e739f6815540a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ClaimInitiatorIsDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimRecipientIsDenied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rdata\",\"type\":\"bytes\"}],\"name\":\"ClaimRedeemFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemRequestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalEventId\",\"type\":\"uint256\"}],\"name\":\"DoesNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncompatibleArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RecipientIsDenied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"RedeemRequestAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"RedeemRequestOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"WithdrawalEventOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemDemand\",\"type\":\"uint256\"}],\"name\":\"WithdrawalExceedsRedeemDemand\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"redeemRequestId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lsEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingLsEthAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimedRedeemRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"cdata\",\"type\":\"bytes\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"name\":\"ReportedWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRedeemableEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"name\":\"RequestedRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"redeemRequestId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"withdrawalEventId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lsEthAmountSatisfied\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmountSatisfied\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lsEthAmountRemaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmountExceeding\",\"type\":\"uint256\"}],\"name\":\"SatisfiedRedeemRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRedeemDemand\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRedeemDemand\",\"type\":\"uint256\"}],\"name\":\"SetRedeemDemand\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"river\",\"type\":\"address\"}],\"name\":\"SetRiver\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"redeemRequestIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"withdrawalEventIds\",\"type\":\"uint32[]\"},{\"internalType\":\"bool\",\"name\":\"skipAlreadyClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"_depth\",\"type\":\"uint16\"}],\"name\":\"claimRedeemRequests\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"claimStatuses\",\"type\":\"uint8[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_redeemRequestIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_withdrawalEventIds\",\"type\":\"uint32[]\"}],\"name\":\"claimRedeemRequests\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"claimStatuses\",\"type\":\"uint8[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferedExceedingEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedeemDemand\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedeemRequestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_redeemRequestId\",\"type\":\"uint32\"}],\"name\":\"getRedeemRequestDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRedeemableEth\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"internalType\":\"struct RedeemQueue.RedeemRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalEventCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_withdrawalEventId\",\"type\":\"uint32\"}],\"name\":\"getWithdrawalEventDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"internalType\":\"struct WithdrawalStack.WithdrawalEvent\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_river\",\"type\":\"address\"}],\"name\":\"initializeRedeemManagerV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"pullExceedingEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lsETHWithdrawable\",\"type\":\"uint256\"}],\"name\":\"reportWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lsETHAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"requestRedeem\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"redeemRequestId\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lsETHAmount\",\"type\":\"uint256\"}],\"name\":\"requestRedeem\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"redeemRequestId\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_redeemRequestIds\",\"type\":\"uint32[]\"}],\"name\":\"resolveRedeemRequests\",\"outputs\":[{\"internalType\":\"int64[]\",\"name\":\"withdrawalEventIds\",\"type\":\"int64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alluvial Finance Inc.\",\"errors\":{\"ClaimRedeemFailed(address,bytes)\":[{\"params\":{\"rdata\":\"The revert data\",\"recipient\":\"The recipient of the payment\"}}],\"DoesNotMatch(uint256,uint256)\":[{\"params\":{\"redeemRequestId\":\"The provided redeem request id\",\"withdrawalEventId\":\"The provided associated withdrawal event id\"}}],\"InvalidInitialization(uint256,uint256)\":[{\"params\":{\"expectedVersion\":\"The version that was expected\",\"version\":\"The version that was attempting to be initialized\"}}],\"RedeemRequestAlreadyClaimed(uint256)\":[{\"params\":{\"id\":\"The redeem request id\"}}],\"RedeemRequestOutOfBounds(uint256)\":[{\"params\":{\"id\":\"The redeem request id\"}}],\"Unauthorized(address)\":[{\"params\":{\"caller\":\"Address performing the call\"}}],\"WithdrawalEventOutOfBounds(uint256)\":[{\"params\":{\"id\":\"The withdrawal event id\"}}],\"WithdrawalExceedsRedeemDemand(uint256,uint256)\":[{\"params\":{\"redeemDemand\":\"The current redeem demand\",\"withdrawalAmount\":\"The amount of the withdrawal event\"}}]},\"events\":{\"ClaimedRedeemRequest(uint32,address,uint256,uint256,uint256)\":{\"params\":{\"ethAmount\":\"The amount of eth retrieved\",\"lsEthAmount\":\"The total amount of LsETH used to redeem the eth\",\"recipient\":\"The address receiving the redeem request funds\",\"redeemRequestId\":\"The id of the redeem request\",\"remainingLsEthAmount\":\"The amount of LsETH remaining\"}},\"Initialize(uint256,bytes)\":{\"params\":{\"cdata\":\"Complete calldata that was used during the initialization\",\"version\":\"New version of the contracts\"}},\"ReportedWithdrawal(uint256,uint256,uint256,uint32)\":{\"params\":{\"amount\":\"The amount of the withdrawal event in LsETH\",\"ethAmount\":\"The amount of eth to distrubute to claimers\",\"height\":\"The height of the withdrawal event in LsETH\",\"id\":\"The id of the withdrawal event\"}},\"RequestedRedeem(address,uint256,uint256,uint256,uint32)\":{\"params\":{\"amount\":\"The amount of the redeem request in LsETH\",\"height\":\"The height of the redeem request in LsETH\",\"id\":\"The id of the new redeem request\",\"maxRedeemableEth\":\"The maximum amount of eth that can be redeemed from this request\",\"recipient\":\"The recipient of the redeem request\"}},\"SatisfiedRedeemRequest(uint32,uint32,uint256,uint256,uint256,uint256)\":{\"params\":{\"ethAmountExceeding\":\"The amount of eth added to the exceeding buffer\",\"ethAmountSatisfied\":\"The amount of ETH filled\",\"lsEthAmountRemaining\":\"The amount of LsETH remaining\",\"lsEthAmountSatisfied\":\"The amount of LsETH filled\",\"redeemRequestId\":\"The id of the redeem request\",\"withdrawalEventId\":\"The id of the withdrawal event used to fill the request\"}},\"SetRedeemDemand(uint256,uint256)\":{\"params\":{\"newRedeemDemand\":\"The new redeem demand\",\"oldRedeemDemand\":\"The old redeem demand\"}},\"SetRiver(address)\":{\"params\":{\"river\":\"The new river address\"}}},\"kind\":\"dev\",\"methods\":{\"claimRedeemRequests(uint32[],uint32[])\":{\"params\":{\"_redeemRequestIds\":\"The list of redeem requests to claim\",\"_withdrawalEventIds\":\"The list of withdrawal events to use for every redeem request claim\"},\"returns\":{\"claimStatuses\":\"The list of claim statuses. 0 for fully claimed, 1 for partially claimed, 2 for skipped\"}},\"claimRedeemRequests(uint32[],uint32[],bool,uint16)\":{\"params\":{\"_depth\":\"The maximum recursive depth for the resolution of the redeem requests\",\"_redeemRequestIds\":\"The list of redeem requests to claim\",\"_skipAlreadyClaimed\":\"True if the call should not revert on claiming of already claimed requests\",\"_withdrawalEventIds\":\"The list of withdrawal events to use for every redeem request claim\"},\"returns\":{\"claimStatuses\":\"The list of claim statuses. 0 for fully claimed, 1 for partially claimed, 2 for skipped\"}},\"getBufferedExceedingEth()\":{\"returns\":{\"_0\":\"The amount of eth in the buffer\"}},\"getRedeemDemand()\":{\"returns\":{\"_0\":\"The amount of LsETH waiting to be exited\"}},\"getRedeemRequestDetails(uint32)\":{\"params\":{\"_redeemRequestId\":\"The id of the request\"},\"returns\":{\"_0\":\"The redeem request details\"}},\"getRiver()\":{\"returns\":{\"_0\":\"The address of River\"}},\"getWithdrawalEventDetails(uint32)\":{\"params\":{\"_withdrawalEventId\":\"The id of the withdrawal event\"},\"returns\":{\"_0\":\"The withdrawal event details\"}},\"initializeRedeemManagerV1(address)\":{\"params\":{\"_river\":\"The address of the River contract\"}},\"pullExceedingEth(uint256)\":{\"params\":{\"_max\":\"The maximum amount that should be pulled\"}},\"reportWithdraw(uint256)\":{\"params\":{\"_lsETHWithdrawable\":\"The amount of LsETH that can be redeemed due to this new withdraw event\"}},\"requestRedeem(uint256)\":{\"params\":{\"_lsETHAmount\":\"The amount of LsETH to redeem\"},\"returns\":{\"redeemRequestId\":\"The id of the redeem request\"}},\"requestRedeem(uint256,address)\":{\"params\":{\"_lsETHAmount\":\"The amount of LsETH to redeem\",\"_recipient\":\"The recipient owning the redeem request\"},\"returns\":{\"redeemRequestId\":\"The id of the redeem request\"}},\"resolveRedeemRequests(uint32[])\":{\"details\":\"The result is an array of equal length with ids or error code-1 means that the request is not satisfied yet-2 means that the request is out of bounds-3 means that the request has already been claimedThis call was created to be called by an off-chain interface, the output could then be used to perform the claimRewards call in a regular transaction\",\"params\":{\"_redeemRequestIds\":\"The list of redeem requests to resolve\"},\"returns\":{\"withdrawalEventIds\":\"The list of withdrawal events matching every redeem request (or error codes)\"}},\"version()\":{\"returns\":{\"_0\":\"Version of the contract\"}}},\"title\":\"Redeem Manager (v1)\",\"version\":1},\"userdoc\":{\"errors\":{\"ClaimInitiatorIsDenied()\":[{\"notice\":\"Thrown when the claim initiator is denied\"}],\"ClaimRecipientIsDenied()\":[{\"notice\":\"Thrown when the claim recipient is denied\"}],\"ClaimRedeemFailed(address,bytes)\":[{\"notice\":\"Thrown when the payment after a claim failed\"}],\"DoesNotMatch(uint256,uint256)\":[{\"notice\":\"Thrown when the redeem request and withdrawal event are not matching during claim\"}],\"IncompatibleArrayLengths()\":[{\"notice\":\"Thrown when the provided arrays don't have matching lengths\"}],\"InvalidInitialization(uint256,uint256)\":[{\"notice\":\"An error occured during the initialization\"}],\"InvalidZeroAddress()\":[{\"notice\":\"The address is zero\"}],\"InvalidZeroAmount()\":[{\"notice\":\"Thrown When a zero value is provided\"}],\"RecipientIsDenied()\":[{\"notice\":\"Thrown when the recipient of redeemRequest is denied\"}],\"RedeemRequestAlreadyClaimed(uint256)\":[{\"notice\":\"Thrown when\\tthe redeem request id is already claimed\"}],\"RedeemRequestOutOfBounds(uint256)\":[{\"notice\":\"Thrown when the provided redeem request id is out of bounds\"}],\"TransferError()\":[{\"notice\":\"Thrown when a transfer error occured with LsETH\"}],\"Unauthorized(address)\":[{\"notice\":\"The operator is unauthorized for the caller\"}],\"WithdrawalEventOutOfBounds(uint256)\":[{\"notice\":\"Thrown when the withdrawal request id if out of bounds\"}],\"WithdrawalExceedsRedeemDemand(uint256,uint256)\":[{\"notice\":\"Thrown when the provided withdrawal event exceeds the redeem demand\"}]},\"events\":{\"ClaimedRedeemRequest(uint32,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when a redeem request claim has been processed and matched at least once and funds are sent to the recipient\"},\"Initialize(uint256,bytes)\":{\"notice\":\"Emitted when the contract is properly initialized\"},\"ReportedWithdrawal(uint256,uint256,uint256,uint32)\":{\"notice\":\"Emitted when a withdrawal event is created\"},\"RequestedRedeem(address,uint256,uint256,uint256,uint32)\":{\"notice\":\"Emitted when a redeem request is created\"},\"SatisfiedRedeemRequest(uint32,uint32,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted when a redeem request has been satisfied and filled (even partially) from a withdrawal event\"},\"SetRedeemDemand(uint256,uint256)\":{\"notice\":\"Emitted when the redeem demand is set\"},\"SetRiver(address)\":{\"notice\":\"Emitted when the River address is set\"}},\"kind\":\"user\",\"methods\":{\"claimRedeemRequests(uint32[],uint32[])\":{\"notice\":\"Claims the rewards of the provided redeem request ids\"},\"claimRedeemRequests(uint32[],uint32[],bool,uint16)\":{\"notice\":\"Claims the rewards of the provided redeem request ids\"},\"getBufferedExceedingEth()\":{\"notice\":\"Retrieve the amount of redeemed LsETH pending to be supplied with withdrawn ETH\"},\"getRedeemDemand()\":{\"notice\":\"Retrieve the amount of LsETH waiting to be exited\"},\"getRedeemRequestCount()\":{\"notice\":\"Retrieve the global count of redeem requests\"},\"getRedeemRequestDetails(uint32)\":{\"notice\":\"Retrieve the details of a specific redeem request\"},\"getRiver()\":{\"notice\":\"Retrieve River address\"},\"getWithdrawalEventCount()\":{\"notice\":\"Retrieve the global count of withdrawal events\"},\"getWithdrawalEventDetails(uint32)\":{\"notice\":\"Retrieve the details of a specific withdrawal event\"},\"pullExceedingEth(uint256)\":{\"notice\":\"Pulls exceeding buffer eth\"},\"reportWithdraw(uint256)\":{\"notice\":\"Reports a withdraw event from River\"},\"requestRedeem(uint256)\":{\"notice\":\"Creates a redeem request using msg.sender as recipient\"},\"requestRedeem(uint256,address)\":{\"notice\":\"Creates a redeem request\"},\"resolveRedeemRequests(uint32[])\":{\"notice\":\"Resolves the provided list of redeem request ids\"},\"version()\":{\"notice\":\"Retrieves the version of the contract\"}},\"notice\":\"This contract handles the redeem requests of all users\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/RedeemManager.1.sol\":\"RedeemManagerV1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\n/// @title Initializable\\n/// @author Alluvial Finance Inc.\\n/// @notice This contract ensures that initializers are called only once per version\\ncontract Initializable {\\n    /// @notice Disable initialization on implementations\\n    constructor() {\\n        Version.set(type(uint256).max);\\n        emit Initialize(type(uint256).max, msg.data);\\n    }\\n\\n    /// @notice An error occured during the initialization\\n    /// @param version The version that was attempting to be initialized\\n    /// @param expectedVersion The version that was expected\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    /// @notice Emitted when the contract is properly initialized\\n    /// @param version New version of the contracts\\n    /// @param cdata Complete calldata that was used during the initialization\\n    event Initialize(uint256 version, bytes cdata);\\n\\n    /// @notice Use this modifier on initializers along with a hard-coded version number\\n    /// @param _version Version to initialize\\n    modifier init(uint256 _version) {\\n        if (_version != Version.get()) {\\n            revert InvalidInitialization(_version, Version.get());\\n        }\\n        Version.set(_version + 1); // prevents reentrency on the called method\\n        _;\\n        emit Initialize(_version, msg.data);\\n    }\\n}\\n\",\"keccak256\":\"0xd371aeefbb5ed0d3d3b6efdd70044eb949161e6f534730fd0868f85a204c76c9\",\"license\":\"BUSL-1.1\"},\"contracts/src/RedeemManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"./interfaces/IAllowlist.1.sol\\\";\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\nimport \\\"./interfaces/IRedeemManager.1.sol\\\";\\nimport \\\"./interfaces/IProtocolVersion.sol\\\";\\nimport \\\"./libraries/LibAllowlistMasks.sol\\\";\\nimport \\\"./libraries/LibUint256.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\nimport \\\"./state/shared/RiverAddress.sol\\\";\\nimport \\\"./state/redeemManager/RedeemQueue.sol\\\";\\nimport \\\"./state/redeemManager/WithdrawalStack.sol\\\";\\nimport \\\"./state/redeemManager/BufferedExceedingEth.sol\\\";\\nimport \\\"./state/redeemManager/RedeemDemand.sol\\\";\\n\\n/// @title Redeem Manager (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This contract handles the redeem requests of all users\\ncontract RedeemManagerV1 is Initializable, IRedeemManagerV1, IProtocolVersion {\\n    /// @notice Value returned when resolving a redeem request that is unsatisfied\\n    int64 internal constant RESOLVE_UNSATISFIED = -1;\\n    /// @notice Value returned when resolving a redeem request that is out of bounds\\n    int64 internal constant RESOLVE_OUT_OF_BOUNDS = -2;\\n    /// @notice Value returned when resolving a redeem request that is already claimed\\n    int64 internal constant RESOLVE_FULLY_CLAIMED = -3;\\n\\n    /// @notice Status value returned when fully claiming a redeem request\\n    uint8 internal constant CLAIM_FULLY_CLAIMED = 0;\\n    /// @notice Status value returned when partially claiming a redeem request\\n    uint8 internal constant CLAIM_PARTIALLY_CLAIMED = 1;\\n    /// @notice Status value returned when a redeem request is already claimed and skipped during a claim\\n    uint8 internal constant CLAIM_SKIPPED = 2;\\n\\n    modifier onlyRiver() {\\n        if (msg.sender != RiverAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyRedeemerOrRiver() {\\n        {\\n            IRiverV1 river = _castedRiver();\\n            if (msg.sender != address(river)) {\\n                IAllowlistV1(river.getAllowlist()).onlyAllowed(msg.sender, LibAllowlistMasks.REDEEM_MASK);\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier onlyRedeemer() {\\n        {\\n            IRiverV1 river = _castedRiver();\\n            IAllowlistV1(river.getAllowlist()).onlyAllowed(msg.sender, LibAllowlistMasks.REDEEM_MASK);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function initializeRedeemManagerV1(address _river) external init(0) {\\n        RiverAddress.set(_river);\\n        emit SetRiver(_river);\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function getRiver() external view returns (address) {\\n        return RiverAddress.get();\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function getRedeemRequestCount() external view returns (uint256) {\\n        return RedeemQueue.get().length;\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function getRedeemRequestDetails(uint32 _redeemRequestId)\\n        external\\n        view\\n        returns (RedeemQueue.RedeemRequest memory)\\n    {\\n        return RedeemQueue.get()[_redeemRequestId];\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function getWithdrawalEventCount() external view returns (uint256) {\\n        return WithdrawalStack.get().length;\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function getWithdrawalEventDetails(uint32 _withdrawalEventId)\\n        external\\n        view\\n        returns (WithdrawalStack.WithdrawalEvent memory)\\n    {\\n        return WithdrawalStack.get()[_withdrawalEventId];\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function getBufferedExceedingEth() external view returns (uint256) {\\n        return BufferedExceedingEth.get();\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function getRedeemDemand() external view returns (uint256) {\\n        return RedeemDemand.get();\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function resolveRedeemRequests(uint32[] calldata _redeemRequestIds)\\n        external\\n        view\\n        returns (int64[] memory withdrawalEventIds)\\n    {\\n        withdrawalEventIds = new int64[](_redeemRequestIds.length);\\n        WithdrawalStack.WithdrawalEvent memory lastWithdrawalEvent;\\n        WithdrawalStack.WithdrawalEvent[] storage withdrawalEvents = WithdrawalStack.get();\\n        uint256 withdrawalEventsLength = withdrawalEvents.length;\\n        if (withdrawalEventsLength > 0) {\\n            unchecked {\\n                lastWithdrawalEvent = withdrawalEvents[withdrawalEventsLength - 1];\\n            }\\n        }\\n        for (uint256 idx = 0; idx < _redeemRequestIds.length; ++idx) {\\n            withdrawalEventIds[idx] = _resolveRedeemRequestId(_redeemRequestIds[idx], lastWithdrawalEvent);\\n        }\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function requestRedeem(uint256 _lsETHAmount, address _recipient)\\n        external\\n        onlyRedeemerOrRiver\\n        returns (uint32 redeemRequestId)\\n    {\\n        IRiverV1 river = _castedRiver();\\n        if (IAllowlistV1(river.getAllowlist()).isDenied(_recipient)) {\\n            revert RecipientIsDenied();\\n        }\\n        return _requestRedeem(_lsETHAmount, _recipient);\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function requestRedeem(uint256 _lsETHAmount) external onlyRedeemer returns (uint32 redeemRequestId) {\\n        return _requestRedeem(_lsETHAmount, msg.sender);\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function claimRedeemRequests(\\n        uint32[] calldata redeemRequestIds,\\n        uint32[] calldata withdrawalEventIds,\\n        bool skipAlreadyClaimed,\\n        uint16 _depth\\n    ) external returns (uint8[] memory claimStatuses) {\\n        return _claimRedeemRequests(redeemRequestIds, withdrawalEventIds, skipAlreadyClaimed, _depth);\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function claimRedeemRequests(uint32[] calldata _redeemRequestIds, uint32[] calldata _withdrawalEventIds)\\n        external\\n        returns (uint8[] memory claimStatuses)\\n    {\\n        return _claimRedeemRequests(_redeemRequestIds, _withdrawalEventIds, true, type(uint16).max);\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function reportWithdraw(uint256 _lsETHWithdrawable) external payable onlyRiver {\\n        uint256 redeemDemand = RedeemDemand.get();\\n        if (_lsETHWithdrawable > redeemDemand) {\\n            revert WithdrawalExceedsRedeemDemand(_lsETHWithdrawable, redeemDemand);\\n        }\\n        WithdrawalStack.WithdrawalEvent[] storage withdrawalEvents = WithdrawalStack.get();\\n        uint32 withdrawalEventId = uint32(withdrawalEvents.length);\\n        uint256 height = 0;\\n        uint256 msgValue = msg.value;\\n        if (withdrawalEventId != 0) {\\n            WithdrawalStack.WithdrawalEvent memory previousWithdrawalEvent = withdrawalEvents[withdrawalEventId - 1];\\n            height = previousWithdrawalEvent.height + previousWithdrawalEvent.amount;\\n        }\\n        withdrawalEvents.push(\\n            WithdrawalStack.WithdrawalEvent({height: height, amount: _lsETHWithdrawable, withdrawnEth: msgValue})\\n        );\\n        unchecked {\\n            _setRedeemDemand(redeemDemand - _lsETHWithdrawable);\\n        }\\n        emit ReportedWithdrawal(height, _lsETHWithdrawable, msgValue, withdrawalEventId);\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function pullExceedingEth(uint256 _max) external onlyRiver {\\n        uint256 amountToSend = LibUint256.min(BufferedExceedingEth.get(), _max);\\n        if (amountToSend > 0) {\\n            BufferedExceedingEth.set(BufferedExceedingEth.get() - amountToSend);\\n            _castedRiver().sendRedeemManagerExceedingFunds{value: amountToSend}();\\n        }\\n    }\\n\\n    /// @notice Internal utility to load and cast the River address\\n    /// @return The casted river address\\n    function _castedRiver() internal view returns (IRiverV1) {\\n        return IRiverV1(payable(RiverAddress.get()));\\n    }\\n\\n    /// @notice Internal utility to verify if a redeem request and a withdrawal event are matching\\n    /// @param _redeemRequest The loaded redeem request\\n    /// @param _withdrawalEvent The load withdrawal event\\n    /// @return True if matching\\n    function _isMatch(\\n        RedeemQueue.RedeemRequest memory _redeemRequest,\\n        WithdrawalStack.WithdrawalEvent memory _withdrawalEvent\\n    ) internal pure returns (bool) {\\n        return (\\n            _redeemRequest.height < _withdrawalEvent.height + _withdrawalEvent.amount\\n                && _redeemRequest.height >= _withdrawalEvent.height\\n        );\\n    }\\n\\n    /// @notice Internal utility to perform a dichotomic search of the withdrawal event to use to claim the redeem request\\n    /// @param _redeemRequest The redeem request to resolve\\n    /// @return The matching withdrawal event\\n    function _performDichotomicResolution(RedeemQueue.RedeemRequest memory _redeemRequest)\\n        internal\\n        view\\n        returns (int64)\\n    {\\n        WithdrawalStack.WithdrawalEvent[] storage withdrawalEvents = WithdrawalStack.get();\\n\\n        int64 max = int64(int256(WithdrawalStack.get().length - 1));\\n\\n        if (_isMatch(_redeemRequest, withdrawalEvents[uint64(max)])) {\\n            return max;\\n        }\\n\\n        int64 min = 0;\\n\\n        if (_isMatch(_redeemRequest, withdrawalEvents[uint64(min)])) {\\n            return min;\\n        }\\n\\n        // we start a dichotomic search between min and max\\n        while (min != max) {\\n            int64 mid = (min + max) / 2;\\n\\n            // we identify and verify that the middle element is not matching\\n            WithdrawalStack.WithdrawalEvent memory midWithdrawalEvent = withdrawalEvents[uint64(mid)];\\n            if (_isMatch(_redeemRequest, midWithdrawalEvent)) {\\n                return mid;\\n            }\\n\\n            // depending on the position of the middle element, we update max or min to get our min max range\\n            // closer to our redeem request position\\n            if (_redeemRequest.height < midWithdrawalEvent.height) {\\n                max = mid;\\n            } else {\\n                min = mid;\\n            }\\n        }\\n        return min;\\n    }\\n\\n    /// @notice Internal utility to resolve a redeem request and retrieve its satisfying withdrawal event id, or identify possible errors\\n    /// @param _redeemRequestId The redeem request id\\n    /// @param _lastWithdrawalEvent The last withdrawal event loaded in memory\\n    /// @return withdrawalEventId The id of the withdrawal event matching the redeem request or error code\\n    function _resolveRedeemRequestId(\\n        uint32 _redeemRequestId,\\n        WithdrawalStack.WithdrawalEvent memory _lastWithdrawalEvent\\n    ) internal view returns (int64 withdrawalEventId) {\\n        RedeemQueue.RedeemRequest[] storage redeemRequests = RedeemQueue.get();\\n        // if the redeem request id is >= than the size of requests, we know it's out of bounds and doesn't exist\\n        if (_redeemRequestId >= redeemRequests.length) {\\n            return RESOLVE_OUT_OF_BOUNDS;\\n        }\\n        RedeemQueue.RedeemRequest memory redeemRequest = redeemRequests[_redeemRequestId];\\n        // if the redeem request remaining amount is 0, we know that the request has been entirely claimed\\n        if (redeemRequest.amount == 0) {\\n            return RESOLVE_FULLY_CLAIMED;\\n        }\\n        // if there are no existing withdrawal events or if the height of the redeem request is higher than the height and\\n        // amount of the last withdrawal element, we know that the redeem request is not yet satisfied\\n        if (\\n            WithdrawalStack.get().length == 0\\n                || (_lastWithdrawalEvent.height + _lastWithdrawalEvent.amount) <= redeemRequest.height\\n        ) {\\n            return RESOLVE_UNSATISFIED;\\n        }\\n        // we know for sure that the redeem request has funds yet to be claimed and there is a withdrawal event we need to identify\\n        // that would allow the user to claim the redeem request\\n        return _performDichotomicResolution(redeemRequest);\\n    }\\n\\n    /// @notice Perform a new redeem request for the specified recipient\\n    /// @param _lsETHAmount The amount of LsETH to redeem\\n    /// @param _recipient The recipient owning the request\\n    /// @return redeemRequestId The id of the newly created redeem request\\n    function _requestRedeem(uint256 _lsETHAmount, address _recipient) internal returns (uint32 redeemRequestId) {\\n        LibSanitize._notZeroAddress(_recipient);\\n        if (_lsETHAmount == 0) {\\n            revert InvalidZeroAmount();\\n        }\\n        if (!_castedRiver().transferFrom(msg.sender, address(this), _lsETHAmount)) {\\n            revert TransferError();\\n        }\\n        RedeemQueue.RedeemRequest[] storage redeemRequests = RedeemQueue.get();\\n        redeemRequestId = uint32(redeemRequests.length);\\n        uint256 height = 0;\\n        if (redeemRequestId != 0) {\\n            RedeemQueue.RedeemRequest memory previousRedeemRequest = redeemRequests[redeemRequestId - 1];\\n            height = previousRedeemRequest.height + previousRedeemRequest.amount;\\n        }\\n\\n        uint256 maxRedeemableEth = _castedRiver().underlyingBalanceFromShares(_lsETHAmount);\\n\\n        redeemRequests.push(\\n            RedeemQueue.RedeemRequest({\\n                height: height,\\n                amount: _lsETHAmount,\\n                recipient: _recipient,\\n                initiator: msg.sender,\\n                maxRedeemableEth: maxRedeemableEth\\n            })\\n        );\\n\\n        _setRedeemDemand(RedeemDemand.get() + _lsETHAmount);\\n\\n        emit RequestedRedeem(_recipient, height, _lsETHAmount, maxRedeemableEth, redeemRequestId);\\n    }\\n\\n    /// @notice Internal structure used to optimize stack usage in _claimRedeemRequest\\n    struct ClaimRedeemRequestParameters {\\n        /// @custom:attribute The structure of the redeem request to claim\\n        RedeemQueue.RedeemRequest redeemRequest;\\n        /// @custom:attribute The structure of the withdrawal event to use to claim the redeem request\\n        WithdrawalStack.WithdrawalEvent withdrawalEvent;\\n        /// @custom:attribute The id of the redeem request to claim\\n        uint32 redeemRequestId;\\n        /// @custom:attribute The id of the withdrawal event to use to claim the redeem request\\n        uint32 withdrawalEventId;\\n        /// @custom:attribute The count of withdrawal events\\n        uint32 withdrawalEventCount;\\n        /// @custom:attribute The current depth of the recursive call\\n        uint16 depth;\\n        /// @custom:attribute The amount of LsETH redeemed/matched, needs to be reset to 0 for each call/before calling the recursive function\\n        uint256 lsETHAmount;\\n        /// @custom:attribute The amount of eth redeemed/matched, needs to be rest to 0 for each call/before calling the recursive function\\n        uint256 ethAmount;\\n    }\\n\\n    /// @notice Internal structure used to optimize stack usage in _claimRedeemRequest\\n    struct ClaimRedeemRequestInternalVariables {\\n        /// @custom:attribute The eth amount claimed by the user\\n        uint256 ethAmount;\\n        /// @custom:attribute The amount of LsETH matched during this step\\n        uint256 matchingAmount;\\n        /// @custom:attribute The amount of eth redirected to the exceeding eth buffer\\n        uint256 exceedingEthAmount;\\n    }\\n\\n    /// @notice Internal utility to save a redeem request to storage\\n    /// @param _params The parameters of the claim redeem request call\\n    function _saveRedeemRequest(ClaimRedeemRequestParameters memory _params) internal {\\n        RedeemQueue.RedeemRequest[] storage redeemRequests = RedeemQueue.get();\\n        redeemRequests[_params.redeemRequestId].height = _params.redeemRequest.height;\\n        redeemRequests[_params.redeemRequestId].amount = _params.redeemRequest.amount;\\n        redeemRequests[_params.redeemRequestId].maxRedeemableEth = _params.redeemRequest.maxRedeemableEth;\\n    }\\n\\n    /// @notice Internal utility to claim a redeem request if possible\\n    /// @dev Will call itself recursively if the redeem requests overflows its matching withdrawal event\\n    /// @param _params The parameters of the claim redeem request call\\n    function _claimRedeemRequest(ClaimRedeemRequestParameters memory _params) internal {\\n        ClaimRedeemRequestInternalVariables memory vars;\\n        {\\n            uint256 withdrawalEventEndPosition = _params.withdrawalEvent.height + _params.withdrawalEvent.amount;\\n\\n            // it can occur that the redeem request is overlapping the provided withdrawal event\\n            // the amount that is matched in the withdrawal event is adapted depending on this\\n            vars.matchingAmount =\\n                LibUint256.min(_params.redeemRequest.amount, withdrawalEventEndPosition - _params.redeemRequest.height);\\n            // we can now compute the equivalent eth amount based on the withdrawal event details\\n            vars.ethAmount =\\n                (vars.matchingAmount * _params.withdrawalEvent.withdrawnEth) / _params.withdrawalEvent.amount;\\n\\n            // as each request has a maximum withdrawable amount, we verify that the eth amount is not exceeding this amount, pro rata\\n            // the amount that is matched\\n            uint256 maxRedeemableEthAmount =\\n                (vars.matchingAmount * _params.redeemRequest.maxRedeemableEth) / _params.redeemRequest.amount;\\n\\n            if (maxRedeemableEthAmount < vars.ethAmount) {\\n                unchecked {\\n                    vars.exceedingEthAmount = vars.ethAmount - maxRedeemableEthAmount;\\n                }\\n                BufferedExceedingEth.set(BufferedExceedingEth.get() + vars.exceedingEthAmount);\\n                vars.ethAmount = maxRedeemableEthAmount;\\n            }\\n\\n            // height and amount are updated to reflect the amount that was matched.\\n            // we will always keep this invariant true oldRequest.height + oldRequest.amount == newRequest.height + newRequest.amount\\n            // this also means that if the request wasn't entirely matched, it will now be automatically be assigned to the next\\n            // withdrawal event in the queue, because height is updated based on the amount matched and is now equal to the height\\n            // of the next withdrawal event\\n            // the end position of a redeem request (height + amount) is an invariant that never changes throughout the lifetime of a request\\n            // this end position is used to define the starting position of the next redeem request\\n            _params.redeemRequest.height += vars.matchingAmount;\\n            _params.redeemRequest.amount -= vars.matchingAmount;\\n            _params.redeemRequest.maxRedeemableEth -= vars.ethAmount;\\n\\n            _params.lsETHAmount += vars.matchingAmount;\\n            _params.ethAmount += vars.ethAmount;\\n\\n            // this event signals that an amount has been matched from a redeem request on a withdrawal event\\n            // this event can be triggered several times for the same redeem request, depending on its size and\\n            // how many withdrawal events it overlaps.\\n            emit SatisfiedRedeemRequest(\\n                _params.redeemRequestId,\\n                _params.withdrawalEventId,\\n                vars.matchingAmount,\\n                vars.ethAmount,\\n                _params.redeemRequest.amount,\\n                vars.exceedingEthAmount\\n            );\\n        }\\n\\n        // in the case where we haven't claimed all the redeem request AND that there are other withdrawal events\\n        // available next in the stack, we load the next withdrawal event and call this method recursively\\n        // also we stop the claim process if the claim depth is about to be 0\\n        if (\\n            _params.redeemRequest.amount > 0 && _params.withdrawalEventId + 1 < _params.withdrawalEventCount\\n                && _params.depth > 0\\n        ) {\\n            WithdrawalStack.WithdrawalEvent[] storage withdrawalEvents = WithdrawalStack.get();\\n\\n            unchecked {\\n                ++_params.withdrawalEventId;\\n            }\\n            _params.withdrawalEvent = withdrawalEvents[_params.withdrawalEventId];\\n            unchecked {\\n                --_params.depth;\\n            }\\n\\n            _claimRedeemRequest(_params);\\n        } else {\\n            // if we end up here, we either claimed everything or we reached the end of the withdrawal event stack\\n            // in this case we save the current redeem request state to storage and return the status according to the\\n            // remaining claimable amount on the redeem request\\n            _saveRedeemRequest(_params);\\n        }\\n    }\\n\\n    /// @notice Internal utility to claim several redeem requests at once\\n    /// @param _redeemRequestIds The list of redeem requests to claim\\n    /// @param _withdrawalEventIds The list of withdrawal events to use for each redeem request. Should have the same length.\\n    /// @param _skipAlreadyClaimed True if the system should skip redeem requests already claimed, otherwise will revert\\n    /// @param _depth The depth of the recursion to use when claiming a redeem request\\n    /// @return claimStatuses The claim statuses for each redeem request\\n    function _claimRedeemRequests(\\n        uint32[] calldata _redeemRequestIds,\\n        uint32[] calldata _withdrawalEventIds,\\n        bool _skipAlreadyClaimed,\\n        uint16 _depth\\n    ) internal returns (uint8[] memory claimStatuses) {\\n        uint256 redeemRequestIdsLength = _redeemRequestIds.length;\\n        if (redeemRequestIdsLength != _withdrawalEventIds.length) {\\n            revert IncompatibleArrayLengths();\\n        }\\n        claimStatuses = new uint8[](redeemRequestIdsLength);\\n\\n        RedeemQueue.RedeemRequest[] storage redeemRequests = RedeemQueue.get();\\n        WithdrawalStack.WithdrawalEvent[] storage withdrawalEvents = WithdrawalStack.get();\\n\\n        ClaimRedeemRequestParameters memory params;\\n        params.withdrawalEventCount = uint32(withdrawalEvents.length);\\n        uint32 redeemRequestCount = uint32(redeemRequests.length);\\n\\n        IAllowlistV1 allowList = IAllowlistV1(_castedRiver().getAllowlist());\\n\\n        for (uint256 idx = 0; idx < redeemRequestIdsLength;) {\\n            // both ids are loaded into params\\n            params.redeemRequestId = _redeemRequestIds[idx];\\n            params.withdrawalEventId = _withdrawalEventIds[idx];\\n\\n            // we start by checking that the id is not out of bounds for the redeem requests\\n            if (params.redeemRequestId >= redeemRequestCount) {\\n                revert RedeemRequestOutOfBounds(params.redeemRequestId);\\n            }\\n\\n            // we check that the withdrawal event id is not out of bounds\\n            if (params.withdrawalEventId >= params.withdrawalEventCount) {\\n                revert WithdrawalEventOutOfBounds(params.withdrawalEventId);\\n            }\\n\\n            // we load the redeem request in memory\\n            params.redeemRequest = redeemRequests[_redeemRequestIds[idx]];\\n\\n            if (allowList.isDenied(params.redeemRequest.recipient)) {\\n                revert ClaimRecipientIsDenied();\\n            }\\n            if (allowList.isDenied(params.redeemRequest.initiator)) {\\n                revert ClaimInitiatorIsDenied();\\n            }\\n\\n            // we check that the redeem request is not already claimed\\n            if (params.redeemRequest.amount == 0) {\\n                if (_skipAlreadyClaimed) {\\n                    claimStatuses[idx] = CLAIM_SKIPPED;\\n                    unchecked {\\n                        ++idx;\\n                    }\\n                    continue;\\n                }\\n                revert RedeemRequestAlreadyClaimed(params.redeemRequestId);\\n            }\\n\\n            // we load the withdrawal event in memory\\n            params.withdrawalEvent = withdrawalEvents[_withdrawalEventIds[idx]];\\n\\n            // now that both entities are loaded in memory, we verify that they indeed match, otherwise we revert\\n            if (!_isMatch(params.redeemRequest, params.withdrawalEvent)) {\\n                revert DoesNotMatch(params.redeemRequestId, params.withdrawalEventId);\\n            }\\n\\n            params.depth = _depth;\\n            params.ethAmount = 0;\\n            params.lsETHAmount = 0;\\n\\n            _claimRedeemRequest(params);\\n\\n            claimStatuses[idx] = params.redeemRequest.amount == 0 ? CLAIM_FULLY_CLAIMED : CLAIM_PARTIALLY_CLAIMED;\\n\\n            {\\n                (bool success, bytes memory rdata) = params.redeemRequest.recipient.call{value: params.ethAmount}(\\\"\\\");\\n                if (!success) {\\n                    revert ClaimRedeemFailed(params.redeemRequest.recipient, rdata);\\n                }\\n            }\\n            emit ClaimedRedeemRequest(\\n                _redeemRequestIds[idx],\\n                params.redeemRequest.recipient,\\n                params.ethAmount,\\n                params.lsETHAmount,\\n                params.redeemRequest.amount\\n            );\\n\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n    }\\n\\n    /// @notice Internal utility to set the redeem demand\\n    /// @param _newValue The new value to set\\n    function _setRedeemDemand(uint256 _newValue) internal {\\n        emit SetRedeemDemand(RedeemDemand.get(), _newValue);\\n        RedeemDemand.set(_newValue);\\n    }\\n\\n    function version() external pure returns (string memory) {\\n        return \\\"1.2.0\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x48dae56b503639af56a3e7f5eb260afd2eb37c3569f81299c30447071ce0eb45\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAllowlist.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Allowlist Interface (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This interface exposes methods to handle the list of allowed recipients.\\ninterface IAllowlistV1 {\\n    /// @notice The permissions of several accounts have changed\\n    /// @param accounts List of accounts\\n    /// @param permissions New permissions for each account at the same index\\n    event SetAllowlistPermissions(address[] accounts, uint256[] permissions);\\n\\n    /// @notice The stored allower address has been changed\\n    /// @param allower The new allower address\\n    event SetAllower(address indexed allower);\\n\\n    /// @notice The stored denier address has been changed\\n    /// @param denier The new denier address\\n    event SetDenier(address indexed denier);\\n\\n    /// @notice The provided accounts list is empty\\n    error InvalidCount();\\n\\n    /// @notice The account is denied access\\n    /// @param _account The denied account\\n    error Denied(address _account);\\n\\n    /// @notice The provided accounts and permissions list have different lengths\\n    error MismatchedArrayLengths();\\n\\n    /// @notice Allower can't set deny permission\\n    error AttemptToSetDenyPermission();\\n\\n    /// @notice Allower can't remove deny permission\\n    error AttemptToRemoveDenyPermission();\\n\\n    /// @notice Initializes the allowlist\\n    /// @param _admin Address of the Allowlist administrator\\n    /// @param _allower Address of the allower\\n    function initAllowlistV1(address _admin, address _allower) external;\\n\\n    /// @notice Initializes the allowlist denier\\n    /// @param _denier Address of the denier\\n    function initAllowlistV1_1(address _denier) external;\\n\\n    /// @notice Retrieves the allower address\\n    /// @return The address of the allower\\n    function getAllower() external view returns (address);\\n\\n    /// @notice Retrieves the denier address\\n    /// @return The address of the denier\\n    function getDenier() external view returns (address);\\n\\n    /// @notice This method returns true if the user has the expected permission and\\n    ///         is not in the deny list\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    /// @return True if mask is respected and user is allowed\\n    function isAllowed(address _account, uint256 _mask) external view returns (bool);\\n\\n    /// @notice This method returns true if the user is in the deny list\\n    /// @param _account Recipient to verify\\n    /// @return True if user is denied access\\n    function isDenied(address _account) external view returns (bool);\\n\\n    /// @notice This method returns true if the user has the expected permission\\n    ///         ignoring any deny list membership\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    /// @return True if mask is respected\\n    function hasPermission(address _account, uint256 _mask) external view returns (bool);\\n\\n    /// @notice This method retrieves the raw permission value\\n    /// @param _account Recipient to verify\\n    /// @return The raw permissions value of the account\\n    function getPermissions(address _account) external view returns (uint256);\\n\\n    /// @notice This method should be used as a modifier and is expected to revert\\n    ///         if the user hasn't got the required permission or if the user is\\n    ///         in the deny list.\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    function onlyAllowed(address _account, uint256 _mask) external view;\\n\\n    /// @notice Changes the allower address\\n    /// @param _newAllowerAddress New address allowed to edit the allowlist\\n    function setAllower(address _newAllowerAddress) external;\\n\\n    /// @notice Changes the denier address\\n    /// @param _newDenierAddress New address allowed to edit the allowlist\\n    function setDenier(address _newDenierAddress) external;\\n\\n    /// @notice Sets the allow permissions for one or more accounts\\n    /// @dev This function is for allocating or removing deposit, redeem or donate permissions.\\n    ///      This function could be used to give any permissions that we come up with in the future.\\n    ///      An address which was denied has to be undenied first before they could be given any permission(s).\\n    /// @param _accounts Accounts to update\\n    /// @param _permissions New permission values\\n    function setAllowPermissions(address[] calldata _accounts, uint256[] calldata _permissions) external;\\n\\n    /// @notice Sets the deny permissions for one or more accounts\\n    /// @dev This function is for allocating or removing deny permissions.\\n    ///      An address which is undenied has to be given permissions again for them to be able to deposit, donate or redeem.\\n    /// @param _accounts Accounts to update\\n    /// @param _permissions New permission values\\n    function setDenyPermissions(address[] calldata _accounts, uint256[] calldata _permissions) external;\\n}\\n\",\"keccak256\":\"0xa091d5674c42bcfc05e5e35206dfd1235325a630aae6aeae60ff5df8864deab9\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IProtocolVersion.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\ninterface IProtocolVersion {\\n    /// @notice Retrieves the version of the contract\\n    /// @return Version of the contract\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0x2fc810a5c001d641d4b19c28631dac46201e3780e91dfeb5dc836f92f1aee8b3\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRedeemManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../state/redeemManager/RedeemQueue.sol\\\";\\nimport \\\"../state/redeemManager/WithdrawalStack.sol\\\";\\n\\n/// @title Redeem Manager Interface (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This contract handles the redeem requests of all users\\ninterface IRedeemManagerV1 {\\n    /// @notice Emitted when a redeem request is created\\n    /// @param recipient The recipient of the redeem request\\n    /// @param height The height of the redeem request in LsETH\\n    /// @param amount The amount of the redeem request in LsETH\\n    /// @param maxRedeemableEth The maximum amount of eth that can be redeemed from this request\\n    /// @param id The id of the new redeem request\\n    event RequestedRedeem(\\n        address indexed recipient, uint256 height, uint256 amount, uint256 maxRedeemableEth, uint32 id\\n    );\\n\\n    /// @notice Emitted when a withdrawal event is created\\n    /// @param height The height of the withdrawal event in LsETH\\n    /// @param amount The amount of the withdrawal event in LsETH\\n    /// @param ethAmount The amount of eth to distrubute to claimers\\n    /// @param id The id of the withdrawal event\\n    event ReportedWithdrawal(uint256 height, uint256 amount, uint256 ethAmount, uint32 id);\\n\\n    /// @notice Emitted when a redeem request has been satisfied and filled (even partially) from a withdrawal event\\n    /// @param redeemRequestId The id of the redeem request\\n    /// @param withdrawalEventId The id of the withdrawal event used to fill the request\\n    /// @param lsEthAmountSatisfied The amount of LsETH filled\\n    /// @param ethAmountSatisfied The amount of ETH filled\\n    /// @param lsEthAmountRemaining The amount of LsETH remaining\\n    /// @param ethAmountExceeding The amount of eth added to the exceeding buffer\\n    event SatisfiedRedeemRequest(\\n        uint32 indexed redeemRequestId,\\n        uint32 indexed withdrawalEventId,\\n        uint256 lsEthAmountSatisfied,\\n        uint256 ethAmountSatisfied,\\n        uint256 lsEthAmountRemaining,\\n        uint256 ethAmountExceeding\\n    );\\n\\n    /// @notice Emitted when a redeem request claim has been processed and matched at least once and funds are sent to the recipient\\n    /// @param redeemRequestId The id of the redeem request\\n    /// @param recipient The address receiving the redeem request funds\\n    /// @param ethAmount The amount of eth retrieved\\n    /// @param lsEthAmount The total amount of LsETH used to redeem the eth\\n    /// @param remainingLsEthAmount The amount of LsETH remaining\\n    event ClaimedRedeemRequest(\\n        uint32 indexed redeemRequestId,\\n        address indexed recipient,\\n        uint256 ethAmount,\\n        uint256 lsEthAmount,\\n        uint256 remainingLsEthAmount\\n    );\\n\\n    /// @notice Emitted when the redeem demand is set\\n    /// @param oldRedeemDemand The old redeem demand\\n    /// @param newRedeemDemand The new redeem demand\\n    event SetRedeemDemand(uint256 oldRedeemDemand, uint256 newRedeemDemand);\\n\\n    /// @notice Emitted when the River address is set\\n    /// @param river The new river address\\n    event SetRiver(address river);\\n\\n    /// @notice Thrown When a zero value is provided\\n    error InvalidZeroAmount();\\n\\n    /// @notice Thrown when a transfer error occured with LsETH\\n    error TransferError();\\n\\n    /// @notice Thrown when the provided arrays don't have matching lengths\\n    error IncompatibleArrayLengths();\\n\\n    /// @notice Thrown when the provided redeem request id is out of bounds\\n    /// @param id The redeem request id\\n    error RedeemRequestOutOfBounds(uint256 id);\\n\\n    /// @notice Thrown when the withdrawal request id if out of bounds\\n    /// @param id The withdrawal event id\\n    error WithdrawalEventOutOfBounds(uint256 id);\\n\\n    /// @notice Thrown when\\tthe redeem request id is already claimed\\n    /// @param id The redeem request id\\n    error RedeemRequestAlreadyClaimed(uint256 id);\\n\\n    /// @notice Thrown when the redeem request and withdrawal event are not matching during claim\\n    /// @param redeemRequestId The provided redeem request id\\n    /// @param withdrawalEventId The provided associated withdrawal event id\\n    error DoesNotMatch(uint256 redeemRequestId, uint256 withdrawalEventId);\\n\\n    /// @notice Thrown when the provided withdrawal event exceeds the redeem demand\\n    /// @param withdrawalAmount The amount of the withdrawal event\\n    /// @param redeemDemand The current redeem demand\\n    error WithdrawalExceedsRedeemDemand(uint256 withdrawalAmount, uint256 redeemDemand);\\n\\n    /// @notice Thrown when the payment after a claim failed\\n    /// @param recipient The recipient of the payment\\n    /// @param rdata The revert data\\n    error ClaimRedeemFailed(address recipient, bytes rdata);\\n\\n    /// @notice Thrown when the claim recipient is denied\\n    error ClaimRecipientIsDenied();\\n\\n    /// @notice Thrown when the claim initiator is denied\\n    error ClaimInitiatorIsDenied();\\n\\n    /// @notice Thrown when the recipient of redeemRequest is denied\\n    error RecipientIsDenied();\\n\\n    /// @param _river The address of the River contract\\n    function initializeRedeemManagerV1(address _river) external;\\n\\n    /// @notice Retrieve River address\\n    /// @return The address of River\\n    function getRiver() external view returns (address);\\n\\n    /// @notice Retrieve the global count of redeem requests\\n    function getRedeemRequestCount() external view returns (uint256);\\n\\n    /// @notice Retrieve the details of a specific redeem request\\n    /// @param _redeemRequestId The id of the request\\n    /// @return The redeem request details\\n    function getRedeemRequestDetails(uint32 _redeemRequestId)\\n        external\\n        view\\n        returns (RedeemQueue.RedeemRequest memory);\\n\\n    /// @notice Retrieve the global count of withdrawal events\\n    function getWithdrawalEventCount() external view returns (uint256);\\n\\n    /// @notice Retrieve the details of a specific withdrawal event\\n    /// @param _withdrawalEventId The id of the withdrawal event\\n    /// @return The withdrawal event details\\n    function getWithdrawalEventDetails(uint32 _withdrawalEventId)\\n        external\\n        view\\n        returns (WithdrawalStack.WithdrawalEvent memory);\\n\\n    /// @notice Retrieve the amount of redeemed LsETH pending to be supplied with withdrawn ETH\\n    /// @return The amount of eth in the buffer\\n    function getBufferedExceedingEth() external view returns (uint256);\\n\\n    /// @notice Retrieve the amount of LsETH waiting to be exited\\n    /// @return The amount of LsETH waiting to be exited\\n    function getRedeemDemand() external view returns (uint256);\\n\\n    /// @notice Resolves the provided list of redeem request ids\\n    /// @dev The result is an array of equal length with ids or error code\\n    /// @dev -1 means that the request is not satisfied yet\\n    /// @dev -2 means that the request is out of bounds\\n    /// @dev -3 means that the request has already been claimed\\n    /// @dev This call was created to be called by an off-chain interface, the output could then be used to perform the claimRewards call in a regular transaction\\n    /// @param _redeemRequestIds The list of redeem requests to resolve\\n    /// @return withdrawalEventIds The list of withdrawal events matching every redeem request (or error codes)\\n    function resolveRedeemRequests(uint32[] calldata _redeemRequestIds)\\n        external\\n        view\\n        returns (int64[] memory withdrawalEventIds);\\n\\n    /// @notice Creates a redeem request\\n    /// @param _lsETHAmount The amount of LsETH to redeem\\n    /// @param _recipient The recipient owning the redeem request\\n    /// @return redeemRequestId The id of the redeem request\\n    function requestRedeem(uint256 _lsETHAmount, address _recipient) external returns (uint32 redeemRequestId);\\n\\n    /// @notice Creates a redeem request using msg.sender as recipient\\n    /// @param _lsETHAmount The amount of LsETH to redeem\\n    /// @return redeemRequestId The id of the redeem request\\n    function requestRedeem(uint256 _lsETHAmount) external returns (uint32 redeemRequestId);\\n\\n    /// @notice Claims the rewards of the provided redeem request ids\\n    /// @param _redeemRequestIds The list of redeem requests to claim\\n    /// @param _withdrawalEventIds The list of withdrawal events to use for every redeem request claim\\n    /// @param _skipAlreadyClaimed True if the call should not revert on claiming of already claimed requests\\n    /// @param _depth The maximum recursive depth for the resolution of the redeem requests\\n    /// @return claimStatuses The list of claim statuses. 0 for fully claimed, 1 for partially claimed, 2 for skipped\\n    function claimRedeemRequests(\\n        uint32[] calldata _redeemRequestIds,\\n        uint32[] calldata _withdrawalEventIds,\\n        bool _skipAlreadyClaimed,\\n        uint16 _depth\\n    ) external returns (uint8[] memory claimStatuses);\\n\\n    /// @notice Claims the rewards of the provided redeem request ids\\n    /// @param _redeemRequestIds The list of redeem requests to claim\\n    /// @param _withdrawalEventIds The list of withdrawal events to use for every redeem request claim\\n    /// @return claimStatuses The list of claim statuses. 0 for fully claimed, 1 for partially claimed, 2 for skipped\\n    function claimRedeemRequests(uint32[] calldata _redeemRequestIds, uint32[] calldata _withdrawalEventIds)\\n        external\\n        returns (uint8[] memory claimStatuses);\\n\\n    /// @notice Reports a withdraw event from River\\n    /// @param _lsETHWithdrawable The amount of LsETH that can be redeemed due to this new withdraw event\\n    function reportWithdraw(uint256 _lsETHWithdrawable) external payable;\\n\\n    /// @notice Pulls exceeding buffer eth\\n    /// @param _max The maximum amount that should be pulled\\n    function pullExceedingEth(uint256 _max) external;\\n}\\n\",\"keccak256\":\"0x886c427e857e3e366c8b6c5ceb4dbdb4b722f4a773575809e225ba4b47e9df9c\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRiver.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../state/river/DailyCommittableLimits.sol\\\";\\n\\nimport \\\"./components/IConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"./components/IOracleManager.1.sol\\\";\\nimport \\\"./components/ISharesManager.1.sol\\\";\\nimport \\\"./components/IUserDepositManager.1.sol\\\";\\n\\n/// @title River Interface (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice The main system interface\\ninterface IRiverV1 is IConsensusLayerDepositManagerV1, IUserDepositManagerV1, ISharesManagerV1, IOracleManagerV1 {\\n    /// @notice Funds have been pulled from the Execution Layer Fee Recipient\\n    /// @param amount The amount pulled\\n    event PulledELFees(uint256 amount);\\n\\n    /// @notice Funds have been pulled from the Coverage Fund\\n    /// @param amount The amount pulled\\n    event PulledCoverageFunds(uint256 amount);\\n\\n    /// @notice Emitted when funds are pulled from the redeem manager\\n    /// @param amount The amount pulled\\n    event PulledRedeemManagerExceedingEth(uint256 amount);\\n\\n    /// @notice Emitted when funds are pulled from the CL recipient\\n    /// @param pulledSkimmedEthAmount The amount of skimmed ETH pulled\\n    /// @param pullExitedEthAmount The amount of exited ETH pulled\\n    event PulledCLFunds(uint256 pulledSkimmedEthAmount, uint256 pullExitedEthAmount);\\n\\n    /// @notice The stored Execution Layer Fee Recipient has been changed\\n    /// @param elFeeRecipient The new Execution Layer Fee Recipient\\n    event SetELFeeRecipient(address indexed elFeeRecipient);\\n\\n    /// @notice The stored Coverage Fund has been changed\\n    /// @param coverageFund The new Coverage Fund\\n    event SetCoverageFund(address indexed coverageFund);\\n\\n    /// @notice The stored Collector has been changed\\n    /// @param collector The new Collector\\n    event SetCollector(address indexed collector);\\n\\n    /// @notice The stored Allowlist has been changed\\n    /// @param allowlist The new Allowlist\\n    event SetAllowlist(address indexed allowlist);\\n\\n    /// @notice The stored Global Fee has been changed\\n    /// @param fee The new Global Fee\\n    event SetGlobalFee(uint256 fee);\\n\\n    /// @notice The stored Operators Registry has been changed\\n    /// @param operatorRegistry The new Operators Registry\\n    event SetOperatorsRegistry(address indexed operatorRegistry);\\n\\n    /// @notice The stored Metadata URI string has been changed\\n    /// @param metadataURI The new Metadata URI string\\n    event SetMetadataURI(string metadataURI);\\n\\n    /// @notice The system underlying supply increased. This is a snapshot of the balances for accounting purposes\\n    /// @param _collector The address of the collector during this event\\n    /// @param _oldTotalUnderlyingBalance Old total ETH balance under management by River\\n    /// @param _oldTotalSupply Old total supply in shares\\n    /// @param _newTotalUnderlyingBalance New total ETH balance under management by River\\n    /// @param _newTotalSupply New total supply in shares\\n    event RewardsEarned(\\n        address indexed _collector,\\n        uint256 _oldTotalUnderlyingBalance,\\n        uint256 _oldTotalSupply,\\n        uint256 _newTotalUnderlyingBalance,\\n        uint256 _newTotalSupply\\n    );\\n\\n    /// @notice Emitted when the daily committable limits are changed\\n    /// @param minNetAmount The minimum amount that must be used as the daily committable amount\\n    /// @param maxRelativeAmount The maximum amount that can be used as the daily committable amount, relative to the total underlying supply\\n    event SetMaxDailyCommittableAmounts(uint256 minNetAmount, uint256 maxRelativeAmount);\\n\\n    /// @notice Emitted when the redeem manager address is changed\\n    /// @param redeemManager The address of the redeem manager\\n    event SetRedeemManager(address redeemManager);\\n\\n    /// @notice Emitted when the balance to deposit is updated\\n    /// @param oldAmount The old balance to deposit\\n    /// @param newAmount The new balance to deposit\\n    event SetBalanceToDeposit(uint256 oldAmount, uint256 newAmount);\\n\\n    /// @notice Emitted when the balance to redeem is updated\\n    /// @param oldAmount The old balance to redeem\\n    /// @param newAmount The new balance to redeem\\n    event SetBalanceToRedeem(uint256 oldAmount, uint256 newAmount);\\n\\n    /// @notice Emitted when the balance committed to deposit\\n    /// @param oldAmount The old balance committed to deposit\\n    /// @param newAmount The new balance committed to deposit\\n    event SetBalanceCommittedToDeposit(uint256 oldAmount, uint256 newAmount);\\n\\n    /// @notice Emitted when the redeem manager received a withdraw event report\\n    /// @param redeemManagerDemand The total demand in LsETH of the redeem manager\\n    /// @param suppliedRedeemManagerDemand The amount of LsETH demand actually supplied\\n    /// @param suppliedRedeemManagerDemandInEth The amount in ETH of the supplied demand\\n    event ReportedRedeemManager(\\n        uint256 redeemManagerDemand, uint256 suppliedRedeemManagerDemand, uint256 suppliedRedeemManagerDemandInEth\\n    );\\n\\n    /// @notice Thrown when the amount received from the Withdraw contract doe not match the requested amount\\n    /// @param requested The amount that was requested\\n    /// @param received The amount that was received\\n    error InvalidPulledClFundsAmount(uint256 requested, uint256 received);\\n\\n    /// @notice The computed amount of shares to mint is 0\\n    error ZeroMintedShares();\\n\\n    /// @notice The access was denied\\n    /// @param account The account that was denied\\n    error Denied(address account);\\n\\n    /// @notice Initializes the River system\\n    /// @param _depositContractAddress Address to make Consensus Layer deposits\\n    /// @param _elFeeRecipientAddress Address that receives the execution layer fees\\n    /// @param _withdrawalCredentials Credentials to use for every validator deposit\\n    /// @param _oracleAddress The address of the Oracle contract\\n    /// @param _systemAdministratorAddress Administrator address\\n    /// @param _allowlistAddress Address of the allowlist contract\\n    /// @param _operatorRegistryAddress Address of the operator registry\\n    /// @param _collectorAddress Address receiving the the global fee on revenue\\n    /// @param _globalFee Amount retained when the ETH balance increases and sent to the collector\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _operatorRegistryAddress,\\n        address _collectorAddress,\\n        uint256 _globalFee\\n    ) external;\\n\\n    /// @notice Initialized version 1.1 of the River System\\n    /// @param _redeemManager The redeem manager address\\n    /// @param _epochsPerFrame The amounts of epochs in a frame\\n    /// @param _slotsPerEpoch The slots inside an epoch\\n    /// @param _secondsPerSlot The seconds inside a slot\\n    /// @param _genesisTime The genesis timestamp\\n    /// @param _epochsToAssumedFinality The number of epochs before an epoch is considered final on-chain\\n    /// @param _annualAprUpperBound The reporting upper bound\\n    /// @param _relativeLowerBound The reporting lower bound\\n    /// @param _maxDailyNetCommittableAmount_ The net daily committable limit\\n    /// @param _maxDailyRelativeCommittableAmount_ The relative daily committable limit\\n    function initRiverV1_1(\\n        address _redeemManager,\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime,\\n        uint64 _epochsToAssumedFinality,\\n        uint256 _annualAprUpperBound,\\n        uint256 _relativeLowerBound,\\n        uint128 _maxDailyNetCommittableAmount_,\\n        uint128 _maxDailyRelativeCommittableAmount_\\n    ) external;\\n\\n    /// @notice Initializes version 1.2 of the River System\\n    function initRiverV1_2() external;\\n\\n    /// @notice Get the current global fee\\n    /// @return The global fee\\n    function getGlobalFee() external view returns (uint256);\\n\\n    /// @notice Retrieve the allowlist address\\n    /// @return The allowlist address\\n    function getAllowlist() external view returns (address);\\n\\n    /// @notice Retrieve the collector address\\n    /// @return The collector address\\n    function getCollector() external view returns (address);\\n\\n    /// @notice Retrieve the execution layer fee recipient\\n    /// @return The execution layer fee recipient address\\n    function getELFeeRecipient() external view returns (address);\\n\\n    /// @notice Retrieve the coverage fund\\n    /// @return The coverage fund address\\n    function getCoverageFund() external view returns (address);\\n\\n    /// @notice Retrieve the redeem manager\\n    /// @return The redeem manager address\\n    function getRedeemManager() external view returns (address);\\n\\n    /// @notice Retrieve the operators registry\\n    /// @return The operators registry address\\n    function getOperatorsRegistry() external view returns (address);\\n\\n    /// @notice Retrieve the metadata uri string value\\n    /// @return The metadata uri string value\\n    function getMetadataURI() external view returns (string memory);\\n\\n    /// @notice Retrieve the configured daily committable limits\\n    /// @return The daily committable limits structure\\n    function getDailyCommittableLimits()\\n        external\\n        view\\n        returns (DailyCommittableLimits.DailyCommittableLimitsStruct memory);\\n\\n    /// @notice Resolves the provided redeem requests by calling the redeem manager\\n    /// @param _redeemRequestIds The list of redeem requests to resolve\\n    /// @return withdrawalEventIds The list of matching withdrawal events, or error codes\\n    function resolveRedeemRequests(uint32[] calldata _redeemRequestIds)\\n        external\\n        view\\n        returns (int64[] memory withdrawalEventIds);\\n\\n    /// @notice Set the daily committable limits\\n    /// @param _dcl The Daily Committable Limits structure\\n    function setDailyCommittableLimits(DailyCommittableLimits.DailyCommittableLimitsStruct memory _dcl) external;\\n\\n    /// @notice Retrieve the current balance to redeem\\n    /// @return The current balance to redeem\\n    function getBalanceToRedeem() external view returns (uint256);\\n\\n    /// @notice Performs a redeem request on the redeem manager\\n    /// @param _lsETHAmount The amount of LsETH to redeem\\n    /// @param _recipient The address that will own the redeem request\\n    /// @return redeemRequestId The ID of the newly created redeem request\\n    function requestRedeem(uint256 _lsETHAmount, address _recipient) external returns (uint32 redeemRequestId);\\n\\n    /// @notice Claims several redeem requests\\n    /// @param _redeemRequestIds The list of redeem requests to claim\\n    /// @param _withdrawalEventIds The list of resolved withdrawal event ids\\n    /// @return claimStatuses The operation status results\\n    function claimRedeemRequests(uint32[] calldata _redeemRequestIds, uint32[] calldata _withdrawalEventIds)\\n        external\\n        returns (uint8[] memory claimStatuses);\\n\\n    /// @notice Changes the global fee parameter\\n    /// @param _newFee New fee value\\n    function setGlobalFee(uint256 _newFee) external;\\n\\n    /// @notice Changes the allowlist address\\n    /// @param _newAllowlist New address for the allowlist\\n    function setAllowlist(address _newAllowlist) external;\\n\\n    /// @notice Changes the collector address\\n    /// @param _newCollector New address for the collector\\n    function setCollector(address _newCollector) external;\\n\\n    /// @notice Changes the execution layer fee recipient\\n    /// @param _newELFeeRecipient New address for the recipient\\n    function setELFeeRecipient(address _newELFeeRecipient) external;\\n\\n    /// @notice Changes the coverage fund\\n    /// @param _newCoverageFund New address for the fund\\n    function setCoverageFund(address _newCoverageFund) external;\\n\\n    /// @notice Sets the metadata uri string value\\n    /// @param _metadataURI The new metadata uri string value\\n    function setMetadataURI(string memory _metadataURI) external;\\n\\n    /// @notice Input for execution layer fee earnings\\n    function sendELFees() external payable;\\n\\n    /// @notice Input for consensus layer funds, containing both exit and skimming\\n    function sendCLFunds() external payable;\\n\\n    /// @notice Input for coverage funds\\n    function sendCoverageFunds() external payable;\\n\\n    /// @notice Input for the redeem manager funds\\n    function sendRedeemManagerExceedingFunds() external payable;\\n}\\n\",\"keccak256\":\"0xcb57b5480b1849e52fe74552c5aac448fe3c2232a6c72b7d56b34fa9bc878ea1\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IConsensusLayerDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Consensys Layer Deposit Manager Interface (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This interface exposes methods to handle the interactions with the official deposit contract\\ninterface IConsensusLayerDepositManagerV1 {\\n    /// @notice The stored deposit contract address changed\\n    /// @param depositContract Address of the deposit contract\\n    event SetDepositContractAddress(address indexed depositContract);\\n\\n    /// @notice The stored withdrawal credentials changed\\n    /// @param withdrawalCredentials The withdrawal credentials to use for deposits\\n    event SetWithdrawalCredentials(bytes32 withdrawalCredentials);\\n\\n    /// @notice Emitted when the deposited validator count is updated\\n    /// @param oldDepositedValidatorCount The old deposited validator count value\\n    /// @param newDepositedValidatorCount The new deposited validator count value\\n    event SetDepositedValidatorCount(uint256 oldDepositedValidatorCount, uint256 newDepositedValidatorCount);\\n\\n    /// @notice Not enough funds to deposit one validator\\n    error NotEnoughFunds();\\n\\n    /// @notice The length of the BLS Public key is invalid during deposit\\n    error InconsistentPublicKeys();\\n\\n    /// @notice The length of the BLS Signature is invalid during deposit\\n    error InconsistentSignatures();\\n\\n    /// @notice The internal key retrieval returned no keys\\n    error NoAvailableValidatorKeys();\\n\\n    /// @notice The received count of public keys to deposit is invalid\\n    error InvalidPublicKeyCount();\\n\\n    /// @notice The received count of signatures to deposit is invalid\\n    error InvalidSignatureCount();\\n\\n    /// @notice The withdrawal credentials value is null\\n    error InvalidWithdrawalCredentials();\\n\\n    /// @notice An error occured during the deposit\\n    error ErrorOnDeposit();\\n\\n    /// @notice Invalid deposit root\\n    error InvalidDepositRoot();\\n\\n    // @notice Not keeper\\n    error OnlyKeeper();\\n\\n    /// @notice Returns the amount of ETH not yet committed for deposit\\n    /// @return The amount of ETH not yet committed for deposit\\n    function getBalanceToDeposit() external view returns (uint256);\\n\\n    /// @notice Returns the amount of ETH committed for deposit\\n    /// @return The amount of ETH committed for deposit\\n    function getCommittedBalance() external view returns (uint256);\\n\\n    /// @notice Retrieve the withdrawal credentials\\n    /// @return The withdrawal credentials\\n    function getWithdrawalCredentials() external view returns (bytes32);\\n\\n    /// @notice Get the deposited validator count (the count of deposits made by the contract)\\n    /// @return The deposited validator count\\n    function getDepositedValidatorCount() external view returns (uint256);\\n\\n    /// @notice Get the keeper address\\n    /// @return The keeper address\\n    function getKeeper() external view returns (address);\\n\\n    /// @notice Deposits current balance to the Consensus Layer by batches of 32 ETH\\n    /// @param _maxCount The maximum amount of validator keys to fund\\n    /// @param _depositRoot The root of the deposit tree\\n    function depositToConsensusLayerWithDepositRoot(uint256 _maxCount, bytes32 _depositRoot) external;\\n}\\n\",\"keccak256\":\"0xd7e41b30bdc6108f85633988ac53e9196285cee3d28c978054deb76b2268915d\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IOracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../state/river/CLSpec.sol\\\";\\nimport \\\"../../state/river/ReportBounds.sol\\\";\\n\\n/// @title Oracle Manager (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This interface exposes methods to handle the inputs provided by the oracle\\ninterface IOracleManagerV1 {\\n    /// @notice The stored oracle address changed\\n    /// @param oracleAddress The new oracle address\\n    event SetOracle(address indexed oracleAddress);\\n\\n    /// @notice The consensus layer data provided by the oracle has been updated\\n    /// @param validatorCount The new count of validators running on the consensus layer\\n    /// @param validatorTotalBalance The new total balance sum of all validators\\n    /// @param roundId Round identifier\\n    event ConsensusLayerDataUpdate(uint256 validatorCount, uint256 validatorTotalBalance, bytes32 roundId);\\n\\n    /// @notice The Consensus Layer Spec is changed\\n    /// @param epochsPerFrame The number of epochs inside a frame\\n    /// @param slotsPerEpoch The number of slots inside an epoch\\n    /// @param secondsPerSlot The number of seconds inside a slot\\n    /// @param genesisTime The genesis timestamp\\n    /// @param epochsToAssumedFinality The number of epochs before an epoch is considered final\\n    event SetSpec(\\n        uint64 epochsPerFrame,\\n        uint64 slotsPerEpoch,\\n        uint64 secondsPerSlot,\\n        uint64 genesisTime,\\n        uint64 epochsToAssumedFinality\\n    );\\n\\n    /// @notice The Report Bounds are changed\\n    /// @param annualAprUpperBound The reporting upper bound\\n    /// @param relativeLowerBound The reporting lower bound\\n    event SetBounds(uint256 annualAprUpperBound, uint256 relativeLowerBound);\\n\\n    /// @notice The provided report has beend processed\\n    /// @param report The report that was provided\\n    /// @param trace The trace structure providing more insights on internals\\n    event ProcessedConsensusLayerReport(\\n        IOracleManagerV1.ConsensusLayerReport report, ConsensusLayerDataReportingTrace trace\\n    );\\n\\n    /// @notice The reported validator count is invalid\\n    /// @param providedValidatorCount The received validator count value\\n    /// @param depositedValidatorCount The number of deposits performed by the system\\n    /// @param lastReportedValidatorCount The last reported validator count\\n    error InvalidValidatorCountReport(\\n        uint256 providedValidatorCount, uint256 depositedValidatorCount, uint256 lastReportedValidatorCount\\n    );\\n\\n    /// @notice Thrown when an invalid epoch was reported\\n    /// @param epoch Invalid epoch\\n    error InvalidEpoch(uint256 epoch);\\n\\n    /// @notice The balance increase is higher than the maximum allowed by the upper bound\\n    /// @param prevTotalEthIncludingExited The previous total balance, including all exited balance\\n    /// @param postTotalEthIncludingExited The post-report total balance, including all exited balance\\n    /// @param timeElapsed The time in seconds since last report\\n    /// @param annualAprUpperBound The upper bound value that was used\\n    error TotalValidatorBalanceIncreaseOutOfBound(\\n        uint256 prevTotalEthIncludingExited,\\n        uint256 postTotalEthIncludingExited,\\n        uint256 timeElapsed,\\n        uint256 annualAprUpperBound\\n    );\\n\\n    /// @notice The balance decrease is higher than the maximum allowed by the lower bound\\n    /// @param prevTotalEthIncludingExited The previous total balance, including all exited balance\\n    /// @param postTotalEthIncludingExited The post-report total balance, including all exited balance\\n    /// @param timeElapsed The time in seconds since last report\\n    /// @param relativeLowerBound The lower bound value that was used\\n    error TotalValidatorBalanceDecreaseOutOfBound(\\n        uint256 prevTotalEthIncludingExited,\\n        uint256 postTotalEthIncludingExited,\\n        uint256 timeElapsed,\\n        uint256 relativeLowerBound\\n    );\\n\\n    /// @notice The total exited balance decreased\\n    /// @param currentValidatorsExitedBalance The current exited balance\\n    /// @param newValidatorsExitedBalance The new exited balance\\n    error InvalidDecreasingValidatorsExitedBalance(\\n        uint256 currentValidatorsExitedBalance, uint256 newValidatorsExitedBalance\\n    );\\n\\n    /// @notice The total skimmed balance decreased\\n    /// @param currentValidatorsSkimmedBalance The current exited balance\\n    /// @param newValidatorsSkimmedBalance The new exited balance\\n    error InvalidDecreasingValidatorsSkimmedBalance(\\n        uint256 currentValidatorsSkimmedBalance, uint256 newValidatorsSkimmedBalance\\n    );\\n\\n    /// @notice Trace structure emitted via logs during reporting\\n    struct ConsensusLayerDataReportingTrace {\\n        uint256 rewards;\\n        uint256 pulledELFees;\\n        uint256 pulledRedeemManagerExceedingEthBuffer;\\n        uint256 pulledCoverageFunds;\\n    }\\n\\n    /// @notice The format of the oracle report\\n    struct ConsensusLayerReport {\\n        // this is the epoch at which the report was performed\\n        // data should be fetched up to the state of this epoch by the oracles\\n        uint256 epoch;\\n        // the sum of all the validator balances on the consensus layer\\n        // when a validator enters the exit queue, the validator is considered stopped, its balance is accounted in both validatorsExitingBalance and validatorsBalance\\n        // when a validator leaves the exit queue and the funds are sweeped onto the execution layer, the balance is only accounted in validatorsExitedBalance and not in validatorsBalance\\n        // this value can decrease between reports\\n        uint256 validatorsBalance;\\n        // the sum of all the skimmings performed on the validators\\n        // these values can be found in the execution layer block bodies under the withdrawals field\\n        // a withdrawal is considered skimming if\\n        // - the epoch at which it happened is < validator.withdrawableEpoch\\n        // - the epoch at which it happened is >= validator.withdrawableEpoch and in that case we only account for what would be above 32 eth as skimming\\n        // this value cannot decrease over reports\\n        uint256 validatorsSkimmedBalance;\\n        // the sum of all the exits performed on the validators\\n        // these values can be found in the execution layer block bodies under the withdrawals field\\n        // a withdrawal is considered exit if\\n        // - the epoch at which it happened is >= validator.withdrawableEpoch and in that case we only account for what would be <= 32 eth as exit\\n        // this value cannot decrease over reports\\n        uint256 validatorsExitedBalance;\\n        // the sum of all the exiting balance, which is all the validators on their way to get sweeped and exited\\n        // this includes voluntary exits and slashings\\n        // this value can decrease between reports\\n        uint256 validatorsExitingBalance;\\n        // the count of activated validators\\n        // even validators that are exited are still accounted\\n        // this value cannot decrease over reports\\n        uint32 validatorsCount;\\n        // an array containing the count of stopped validators per operator\\n        // the first element of the array is the sum of all stopped validators\\n        // then index 1 would be operator 0\\n        // these values cannot decrease over reports\\n        uint32[] stoppedValidatorCountPerOperator;\\n        // flag enabled by the oracles when the buffer rebalancing is activated\\n        // the activation logic is written in the oracle specification and all oracle members must agree on the activation\\n        // when active, the eth in the deposit buffer can be used to pay for exits in the redeem manager\\n        bool rebalanceDepositToRedeemMode;\\n        // flag enabled by the oracles when the slashing containment is activated\\n        // the activation logic is written in the oracle specification and all oracle members must agree on the activation\\n        // This flag is activated when a pre-defined threshold of slashed validators in our set of validators is reached\\n        // This flag is deactivated when a bottom threshold is met, this means that when we reach the upper threshold and activate the flag, we will deactivate it when we reach the bottom threshold and not before\\n        // when active, no more validator exits can be requested by the protocol\\n        bool slashingContainmentMode;\\n    }\\n\\n    /// @notice The format of the oracle report in storage\\n    /// @notice These fields have the exact same function as the ones in ConsensusLayerReport, but this struct is optimized for storage\\n    struct StoredConsensusLayerReport {\\n        uint256 epoch;\\n        uint256 validatorsBalance;\\n        uint256 validatorsSkimmedBalance;\\n        uint256 validatorsExitedBalance;\\n        uint256 validatorsExitingBalance;\\n        uint32 validatorsCount;\\n        bool rebalanceDepositToRedeemMode;\\n        bool slashingContainmentMode;\\n    }\\n\\n    /// @notice Get oracle address\\n    /// @return The oracle address\\n    function getOracle() external view returns (address);\\n\\n    /// @notice Get CL validator total balance\\n    /// @return The CL Validator total balance\\n    function getCLValidatorTotalBalance() external view returns (uint256);\\n\\n    /// @notice Get CL validator count (the amount of validator reported by the oracles)\\n    /// @return The CL validator count\\n    function getCLValidatorCount() external view returns (uint256);\\n\\n    /// @notice Verifies if the provided epoch is valid\\n    /// @param epoch The epoch to lookup\\n    /// @return True if valid\\n    function isValidEpoch(uint256 epoch) external view returns (bool);\\n\\n    /// @notice Retrieve the block timestamp\\n    /// @return The current timestamp from the EVM context\\n    function getTime() external view returns (uint256);\\n\\n    /// @notice Retrieve expected epoch id\\n    /// @return The current expected epoch id\\n    function getExpectedEpochId() external view returns (uint256);\\n\\n    /// @notice Retrieve the last completed epoch id\\n    /// @return The last completed epoch id\\n    function getLastCompletedEpochId() external view returns (uint256);\\n\\n    /// @notice Retrieve the current epoch id based on block timestamp\\n    /// @return The current epoch id\\n    function getCurrentEpochId() external view returns (uint256);\\n\\n    /// @notice Retrieve the current cl spec\\n    /// @return The Consensus Layer Specification\\n    function getCLSpec() external view returns (CLSpec.CLSpecStruct memory);\\n\\n    /// @notice Retrieve the current frame details\\n    /// @return _startEpochId The epoch at the beginning of the frame\\n    /// @return _startTime The timestamp of the beginning of the frame in seconds\\n    /// @return _endTime The timestamp of the end of the frame in seconds\\n    function getCurrentFrame() external view returns (uint256 _startEpochId, uint256 _startTime, uint256 _endTime);\\n\\n    /// @notice Retrieve the first epoch id of the frame of the provided epoch id\\n    /// @param _epochId Epoch id used to get the frame\\n    /// @return The first epoch id of the frame containing the given epoch id\\n    function getFrameFirstEpochId(uint256 _epochId) external view returns (uint256);\\n\\n    /// @notice Retrieve the report bounds\\n    /// @return The report bounds\\n    function getReportBounds() external view returns (ReportBounds.ReportBoundsStruct memory);\\n\\n    /// @notice Retrieve the last consensus layer report\\n    /// @return The stored consensus layer report\\n    function getLastConsensusLayerReport() external view returns (IOracleManagerV1.StoredConsensusLayerReport memory);\\n\\n    /// @notice Set the oracle address\\n    /// @param _oracleAddress Address of the oracle\\n    function setOracle(address _oracleAddress) external;\\n\\n    /// @notice Set the consensus layer spec\\n    /// @param _newValue The new consensus layer spec value\\n    function setCLSpec(CLSpec.CLSpecStruct calldata _newValue) external;\\n\\n    /// @notice Set the report bounds\\n    /// @param _newValue The new report bounds value\\n    function setReportBounds(ReportBounds.ReportBoundsStruct calldata _newValue) external;\\n\\n    /// @notice Performs all the reporting logics\\n    /// @param _report The consensus layer report structure\\n    function setConsensusLayerData(ConsensusLayerReport calldata _report) external;\\n}\\n\",\"keccak256\":\"0x9109a0a200d62513d217b41d4904d7bbd2a87ec7d3f5a5e683e13ba76c8bcd2e\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/ISharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Shares Manager Interface (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This interface exposes methods to handle the shares of the depositor and the ERC20 interface\\ninterface ISharesManagerV1 is IERC20 {\\n    /// @notice Emitted when the total supply is changed\\n    event SetTotalSupply(uint256 totalSupply);\\n\\n    /// @notice Balance too low to perform operation\\n    error BalanceTooLow();\\n\\n    /// @notice Allowance too low to perform operation\\n    /// @param _from Account where funds are sent from\\n    /// @param _operator Account attempting the transfer\\n    /// @param _allowance Current allowance\\n    /// @param _value Requested transfer value in shares\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n\\n    /// @notice Invalid empty transfer\\n    error NullTransfer();\\n\\n    /// @notice Invalid transfer recipients\\n    /// @param _from Account sending the funds in the invalid transfer\\n    /// @param _to Account receiving the funds in the invalid transfer\\n    error UnauthorizedTransfer(address _from, address _to);\\n\\n    /// @notice Retrieve the token name\\n    /// @return The token name\\n    function name() external pure returns (string memory);\\n\\n    /// @notice Retrieve the token symbol\\n    /// @return The token symbol\\n    function symbol() external pure returns (string memory);\\n\\n    /// @notice Retrieve the decimal count\\n    /// @return The decimal count\\n    function decimals() external pure returns (uint8);\\n\\n    /// @notice Retrieve the total token supply\\n    /// @return The total supply in shares\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the total underlying asset supply\\n    /// @return The total underlying asset supply\\n    function totalUnderlyingSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The balance of the account in shares\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The underlying balance of the account\\n    function balanceOfUnderlying(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance from an amount of shares\\n    /// @param _shares Amount of shares to convert\\n    /// @return The underlying asset balance represented by the shares\\n    function underlyingBalanceFromShares(uint256 _shares) external view returns (uint256);\\n\\n    /// @notice Retrieve the shares count from an underlying asset amount\\n    /// @param _underlyingAssetAmount Amount of underlying asset to convert\\n    /// @return The amount of shares worth the underlying asset amopunt\\n    function sharesFromUnderlyingBalance(uint256 _underlyingAssetAmount) external view returns (uint256);\\n\\n    /// @notice Retrieve the allowance value for a spender\\n    /// @param _owner Address that issued the allowance\\n    /// @param _spender Address that received the allowance\\n    /// @return The allowance in shares for a given spender\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    /// @notice Performs a transfer from the message sender to the provided account\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Performs a transfer between two recipients\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Approves an account for future spendings\\n    /// @dev An approved account can use transferFrom to transfer funds on behalf of the token owner\\n    /// @param _spender Address that is allowed to spend the tokens\\n    /// @param _value The allowed amount in shares, will override previous value\\n    /// @return True if success\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    /// @notice Increase allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _additionalValue Amount of shares to add\\n    /// @return True if success\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool);\\n\\n    /// @notice Decrease allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _subtractableValue Amount of shares to subtract\\n    /// @return True if success\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool);\\n}\\n\",\"keccak256\":\"0xbbbc45cddcad60c43e2f78a0a075f3f171f9606a9142d692138f09093ef3f451\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IUserDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title User Deposit Manager (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This interface exposes methods to handle the inbound transfers cases or the explicit submissions\\ninterface IUserDepositManagerV1 {\\n    /// @notice User deposited ETH in the system\\n    /// @param depositor Address performing the deposit\\n    /// @param recipient Address receiving the minted shares\\n    /// @param amount Amount in ETH deposited\\n    event UserDeposit(address indexed depositor, address indexed recipient, uint256 amount);\\n\\n    /// @notice And empty deposit attempt was made\\n    error EmptyDeposit();\\n\\n    /// @notice Explicit deposit method to mint on msg.sender\\n    function deposit() external payable;\\n\\n    /// @notice Explicit deposit method to mint on msg.sender and transfer to _recipient\\n    /// @param _recipient Address receiving the minted LsETH\\n    function depositAndTransfer(address _recipient) external payable;\\n\\n    /// @notice Implicit deposit method, when the user performs a regular transfer to the contract\\n    receive() external payable;\\n\\n    /// @notice Invalid call, when the user sends a transaction with a data payload but no method matched\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x883f8d2b25d540915ac4cfededee1c4ee3f4ca90e3fe71748fd0e4b46d752c6a\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibAllowlistMasks.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Lib Allowlist Masks\\n/// @notice Holds all the mask values\\nlibrary LibAllowlistMasks {\\n    /// @notice Mask used for denied accounts\\n    uint256 internal constant DENY_MASK = 0x1 << 255;\\n    /// @notice The mask for the deposit right\\n    uint256 internal constant DEPOSIT_MASK = 0x1;\\n    /// @notice The mask for the donation right\\n    uint256 internal constant DONATE_MASK = 0x1 << 1;\\n    /// @notice The mask for the redeem right\\n    uint256 internal constant REDEEM_MASK = 0x1 << 2;\\n}\\n\",\"keccak256\":\"0xa72bc9ec8a96a0eb01f207da9ac1c384415d43490cf2f53b89a190713ff8c359\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibBasisPoints.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Lib Basis Points\\n/// @notice Holds the basis points max value\\nlibrary LibBasisPoints {\\n    /// @notice The max value for basis points (represents 100%)\\n    uint256 internal constant BASIS_POINTS_MAX = 10_000;\\n}\\n\",\"keccak256\":\"0x87e0393c2317b33ae449221747b42f7237362adf9b7a0902433d57574473303a\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibErrors.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Lib Errors\\n/// @notice Library of common errors\\nlibrary LibErrors {\\n    /// @notice The operator is unauthorized for the caller\\n    /// @param caller Address performing the call\\n    error Unauthorized(address caller);\\n\\n    /// @notice The call was invalid\\n    error InvalidCall();\\n\\n    /// @notice The argument was invalid\\n    error InvalidArgument();\\n\\n    /// @notice The address is zero\\n    error InvalidZeroAddress();\\n\\n    /// @notice The string is empty\\n    error InvalidEmptyString();\\n\\n    /// @notice The fee is invalid\\n    error InvalidFee();\\n}\\n\",\"keccak256\":\"0xc6f936719c01ce7ee4ba9ef66e8af75ca8a09b216efd38c0d66d87d08b05bc95\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibSanitize.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"./LibErrors.sol\\\";\\nimport \\\"./LibBasisPoints.sol\\\";\\n\\n/// @title Lib Sanitize\\n/// @notice Utilities to sanitize input values\\nlibrary LibSanitize {\\n    /// @notice Reverts if address is 0\\n    /// @param _address Address to check\\n    function _notZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert LibErrors.InvalidZeroAddress();\\n        }\\n    }\\n\\n    /// @notice Reverts if string is empty\\n    /// @param _string String to check\\n    function _notEmptyString(string memory _string) internal pure {\\n        if (bytes(_string).length == 0) {\\n            revert LibErrors.InvalidEmptyString();\\n        }\\n    }\\n\\n    /// @notice Reverts if fee is invalid\\n    /// @param _fee Fee to check\\n    function _validFee(uint256 _fee) internal pure {\\n        if (_fee > LibBasisPoints.BASIS_POINTS_MAX) {\\n            revert LibErrors.InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce078083ab565058f68cd7be35ffeb0d88ab990a769c905094520a46edbccfee\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibUint256.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Lib Uint256\\n/// @notice Utilities to perform uint operations\\nlibrary LibUint256 {\\n    /// @notice Converts a value to little endian (64 bits)\\n    /// @param _value The value to convert\\n    /// @return result The converted value\\n    function toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n        uint256 tempValue = _value;\\n        result = tempValue & 0xFF;\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        assert(0 == tempValue); // fully converted\\n        result <<= (24 * 8);\\n    }\\n\\n    /// @notice Returns the minimum value\\n    /// @param _a First value\\n    /// @param _b Second value\\n    /// @return Smallest value between _a and _b\\n    function min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a > _b ? _b : _a);\\n    }\\n\\n    /// @notice Returns the max value\\n    /// @param _a First value\\n    /// @param _b Second value\\n    /// @return Highest value between _a and _b\\n    function max(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a < _b ? _b : _a);\\n    }\\n\\n    /// @notice Performs a ceiled division\\n    /// @param _a Numerator\\n    /// @param _b Denominator\\n    /// @return ceil(_a / _b)\\n    function ceil(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a / _b) + (_a % _b > 0 ? 1 : 0);\\n    }\\n}\\n\",\"keccak256\":\"0x18d3a772fd7ee36faa69bd6d97f0d3eeae39b90ff42c1f66352650f09a940e17\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibUnstructuredStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.20;\\n\\n/// @title Lib Unstructured Storage\\n/// @notice Utilities to work with unstructured storage\\nlibrary LibUnstructuredStorage {\\n    /// @notice Retrieve a bool value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bool value\\n    function getStorageBool(bytes32 _position) internal view returns (bool data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an address value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The address value\\n    function getStorageAddress(bytes32 _position) internal view returns (address data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve a bytes32 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bytes32 value\\n    function getStorageBytes32(bytes32 _position) internal view returns (bytes32 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an uint256 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The uint256 value\\n    function getStorageUint256(bytes32 _position) internal view returns (uint256 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Sets a bool value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bool value to set\\n    function setStorageBool(bytes32 _position, bool _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an address value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The address value to set\\n    function setStorageAddress(bytes32 _position, address _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets a bytes32 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bytes32 value to set\\n    function setStorageBytes32(bytes32 _position, bytes32 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an uint256 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The uint256 value to set\\n    function setStorageUint256(bytes32 _position, uint256 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe48b249b789acdd6f9e1b80f6b1dc3fc69d5593c8b836fad803b7d9fd10dd841\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/redeemManager/BufferedExceedingEth.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Buffered Exceeding Eth storage\\n/// @notice Redeen Manager utility to manage the exceeding ETH with a redeem request\\nlibrary BufferedExceedingEth {\\n    /// @notice Storage slot of the Redeem Buffered Eth\\n    bytes32 internal constant BUFFERED_EXCEEDING_ETH_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.bufferedExceedingEth\\\")) - 1);\\n\\n    /// @notice Retrieve the Redeem Buffered Eth Value\\n    /// @return The Redeem Buffered Eth Value\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(BUFFERED_EXCEEDING_ETH_SLOT);\\n    }\\n\\n    /// @notice Sets the Redeem Buffered Eth Value\\n    /// @param newValue The new value\\n    function set(uint256 newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(BUFFERED_EXCEEDING_ETH_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x50dd2ce54265b72c77a8d27828b1967e3e807a2b6a15a901a31114ebe940a5f7\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/redeemManager/RedeemDemand.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Redeem Demand storage\\n/// @notice Redeem Manager utility to store the current demand in LsETH\\nlibrary RedeemDemand {\\n    /// @notice Storage slot of the Redeem Demand\\n    bytes32 internal constant REDEEM_DEMAND_SLOT = bytes32(uint256(keccak256(\\\"river.state.redeemDemand\\\")) - 1);\\n\\n    /// @notice Retrieve the Redeem Demand Value\\n    /// @return The Redeem Demand Value\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(REDEEM_DEMAND_SLOT);\\n    }\\n\\n    /// @notice Sets the Redeem Demand Value\\n    /// @param newValue The new value\\n    function set(uint256 newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(REDEEM_DEMAND_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x1b4b22ba45b6b9a9d9bd54ab9fa358d3aafc325e909ca47022b7c6a5c977d4ec\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/redeemManager/RedeemQueue.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Redeem Manager Redeem Queue storage\\n/// @notice Utility to manage the Redeem Queue in the Redeem Manager\\nlibrary RedeemQueue {\\n    /// @notice Storage slot of the Redeem Queue\\n    bytes32 internal constant REDEEM_QUEUE_ID_SLOT = bytes32(uint256(keccak256(\\\"river.state.redeemQueue\\\")) - 1);\\n\\n    /// @notice The Redeemer structure represents the redeem request made by a user\\n    struct RedeemRequest {\\n        /// @custom:attribute The amount of the redeem request in LsETH\\n        uint256 amount;\\n        /// @custom:attribute The maximum amount of ETH redeemable by this request\\n        uint256 maxRedeemableEth;\\n        /// @custom:attribute The recipient of the redeem request\\n        address recipient;\\n        /// @custom:attribute The initiator of the redeem request\\n        address initiator;\\n        /// @custom:attribute The height is the cumulative sum of all the sizes of preceding redeem requests\\n        uint256 height;\\n    }\\n\\n    /// @notice Retrieve the Redeem Queue array storage pointer\\n    /// @return data The Redeem Queue array storage pointer\\n    function get() internal pure returns (RedeemRequest[] storage data) {\\n        bytes32 position = REDEEM_QUEUE_ID_SLOT;\\n        assembly {\\n            data.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb02d466ec8ddf9ce08c8d640c9c0154881daba26abdf8450fe9d5425fa7ae266\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/redeemManager/WithdrawalStack.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Redeem Manager Withdrawal Stack storage\\n/// @notice Utility to manage the Withdrawal Stack in the Redeem Manager\\nlibrary WithdrawalStack {\\n    /// @notice Storage slot of the Withdrawal Stack\\n    bytes32 internal constant WITHDRAWAL_STACK_ID_SLOT = bytes32(uint256(keccak256(\\\"river.state.withdrawalStack\\\")) - 1);\\n\\n    /// @notice The Redeemer structure represents the withdrawal events made by River\\n    struct WithdrawalEvent {\\n        /// @custom:attribute The amount of the withdrawal event in LsETH\\n        uint256 amount;\\n        /// @custom:attribute The amount of the withdrawal event in ETH\\n        uint256 withdrawnEth;\\n        /// @custom:attribute The height is the cumulative sum of all the sizes of preceding withdrawal events\\n        uint256 height;\\n    }\\n\\n    /// @notice Retrieve the Withdrawal Stack array storage pointer\\n    /// @return data The Withdrawal Stack array storage pointer\\n    function get() internal pure returns (WithdrawalEvent[] storage data) {\\n        bytes32 position = WITHDRAWAL_STACK_ID_SLOT;\\n        assembly {\\n            data.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x42624c8f9744dc2b6ba3a34117d8007438e5c62f84bb685911450a94597d748f\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/CLSpec.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Consensus Layer Spec Storage\\n/// @notice Utility to manage the Consensus Layer Spec in storage\\nlibrary CLSpec {\\n    /// @notice Storage slot of the Consensus Layer Spec\\n    bytes32 internal constant CL_SPEC_SLOT = bytes32(uint256(keccak256(\\\"river.state.clSpec\\\")) - 1);\\n\\n    /// @notice The Consensus Layer Spec structure\\n    struct CLSpecStruct {\\n        /// @custom:attribute The count of epochs per frame, 225 means 24h\\n        uint64 epochsPerFrame;\\n        /// @custom:attribute The count of slots in an epoch (32 on mainnet)\\n        uint64 slotsPerEpoch;\\n        /// @custom:attribute The seconds in a slot (12 on mainnet)\\n        uint64 secondsPerSlot;\\n        /// @custom:attribute The block timestamp of the first consensus layer block\\n        uint64 genesisTime;\\n        /// @custom:attribute The count of epochs before considering an epoch final on-chain\\n        uint64 epochsToAssumedFinality;\\n    }\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        CLSpecStruct value;\\n    }\\n\\n    /// @notice Retrieve the Consensus Layer Spec from storage\\n    /// @return The Consensus Layer Spec\\n    function get() internal view returns (CLSpecStruct memory) {\\n        bytes32 slot = CL_SPEC_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Consensus Layer Spec value in storage\\n    /// @param _newCLSpec The new value to set in storage\\n    function set(CLSpecStruct memory _newCLSpec) internal {\\n        bytes32 slot = CL_SPEC_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newCLSpec;\\n    }\\n}\\n\",\"keccak256\":\"0x111bed0ac40bd03195b1091cb1d01b325af7390d5ec5297955cc5567f70fd2cc\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DailyCommittableLimits.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Daily Committable Limits storage\\n/// @notice Utility to manage the Daily Committable Limits in storage\\nlibrary DailyCommittableLimits {\\n    /// @notice Storage slot of the Daily Committable Limits storage\\n    bytes32 internal constant DAILY_COMMITTABLE_LIMITS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.dailyCommittableLimits\\\")) - 1);\\n\\n    /// @notice The daily committable limits structure\\n    struct DailyCommittableLimitsStruct {\\n        uint128 minDailyNetCommittableAmount;\\n        uint128 maxDailyRelativeCommittableAmount;\\n    }\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        DailyCommittableLimitsStruct value;\\n    }\\n\\n    /// @notice Retrieve the Daily Committable Limits from storage\\n    /// @return The Daily Committable Limits\\n    function get() internal view returns (DailyCommittableLimitsStruct memory) {\\n        bytes32 slot = DAILY_COMMITTABLE_LIMITS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Daily Committable Limits value in storage\\n    /// @param _newValue The new value to set in storage\\n    function set(DailyCommittableLimitsStruct memory _newValue) internal {\\n        bytes32 slot = DAILY_COMMITTABLE_LIMITS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0x5299d5f41a6f24b09b81a1a00da6db15fbe2aa16718bc435ecb60016897f1f90\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/ReportBounds.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Report Bounds Storage\\n/// @notice Utility to manage the Report Bounds in storage\\nlibrary ReportBounds {\\n    /// @notice Storage slot of the Report Bounds\\n    bytes32 internal constant REPORT_BOUNDS_SLOT = bytes32(uint256(keccak256(\\\"river.state.reportBounds\\\")) - 1);\\n\\n    /// @notice The Report Bounds structure\\n    struct ReportBoundsStruct {\\n        /// @custom:attribute The maximum allowed annual apr, checked before submitting a report to River\\n        uint256 annualAprUpperBound;\\n        /// @custom:attribute The maximum allowed balance decrease, also checked before submitting a report to River\\n        uint256 relativeLowerBound;\\n    }\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        ReportBoundsStruct value;\\n    }\\n\\n    /// @notice Retrieve the Report Bounds from storage\\n    /// @return The Report Bounds\\n    function get() internal view returns (ReportBoundsStruct memory) {\\n        bytes32 slot = REPORT_BOUNDS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Report Bounds in storage\\n    /// @param _newReportBounds The new Report Bounds value\\n    function set(ReportBoundsStruct memory _newReportBounds) internal {\\n        bytes32 slot = REPORT_BOUNDS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newReportBounds;\\n    }\\n}\\n\",\"keccak256\":\"0x032757c478e9132a66b7da31e2eb5f85f8f818503b51b3783c088d3625b3403a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/RiverAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title River Address Storage\\n/// @notice Utility to manage the River Address in storage\\nlibrary RiverAddress {\\n    /// @notice Storage slot of the River Address\\n    bytes32 internal constant RIVER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.riverAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the River Address\\n    /// @return The River Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(RIVER_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the River Address\\n    /// @param _newValue New River Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(RIVER_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf8e4d6ce9f7070232e15411daa2d9d3163f98a67f7257fb238911a8d4e51acdc\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Version Storage\\n/// @notice Utility to manage the Version in storage\\nlibrary Version {\\n    /// @notice Storage slot of the Version\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    /// @notice Retrieve the Version\\n    /// @return The Version\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    /// @notice Sets the Version\\n    /// @param _newValue New Version\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(VERSION_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x011c09f065ea555f6fbaa99710c1388bcb047afef30ab6558ca1ee81980ebf01\",\"license\":\"BUSL-1.1\"},\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234610092577f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7190600019807f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfc558152604060208201523660408201523660006060830137600060603683010152606081601f19601f3601168101030190a160405161205f90816100988239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c9081630c77940114611373575080630d8d2a5414611348578063107703ab1461119a578063319798d11461116f57806354fd4d50146111015780635b5985a2146110d65780635f2e5f0714610f925780637c044e5514610acf578063841ecb8514610aa45780638623375414610a4e5780639332525d1461054b5780639b92d6de146104d1578063a519f0601461049b578063aa2f892d1461039b578063b30d8bb7146101e65763c8fade5a146100d157600080fd5b346101e35760203660031901126101e3576004356001600160a01b038116908181036101de577f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfc8054806101c057509160209160017ffc0d749143b04e0d92a3b49edae84a45f6bc88b75e99d9118ec4d7e87fe626c5945561015281611f56565b600080516020611fca83398151915255604051908152a17f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7160405182815260406020820152366040820152368360608301378260603683010152606081601f19601f3601168101030190a180f35b8460449160405191631cfd276760e31b835260048301526024820152fd5b600080fd5b80fd5b5060203660031901126101e357600080516020611fca8339815191525460043591906001600160a01b0316330361038357600080516020611faa83398151915254918281116103655760008051602061200a8339815191529081549363ffffffff851694849386610333575b6040519161025f8361151e565b84835260208301903482526040840192878452600160401b82101561031f5760018201905561028d90611664565b93909361030b57937f05e5b10ca266c2e8cfd73b1fb719694fb6b89fcda9e3739ace4cc19b3e85544597989360026102d8948894610305985184555160018401555191015503611f13565b604051938493349185929363ffffffff919594606093608086019786526020860152604085015216910152565b0390a180f35b634e487b7160e01b88526004889052602488fd5b634e487b7160e01b89526041600452602489fd5b935061035f61035261034c6103478961173a565b611664565b5061168f565b60408101519051906114e8565b93610252565b6044908360405191632ea1a50d60e11b835260048301526024820152fd5b60405163472511eb60e11b8152336004820152602490fd5b50346101e35760203660031901126101e357600080516020611fca83398151915254604051630c5eff3d60e41b81526001600160a01b03916020908290600490829086165afa908115610490578391610462575b501681813b156101e35760449160405192838092632d20488160e11b8252336004830152600460248301525afa801561045757610443575b60206104353360043561192f565b63ffffffff60405191168152f35b61044d829161150b565b6101e35780610427565b6040513d84823e3d90fd5b610483915060203d8111610489575b61047b8183611570565b810190611703565b386103ef565b503d610471565b6040513d85823e3d90fd5b50346101e357806003193601126101e357600080516020611fca833981519152546040516001600160a01b039091168152602090f35b50346101e35760203660031901126101e3576004359063ffffffff821682036101e35760a061051161050b84610505611591565b506115bc565b506115fd565b6080604051918051835260208101516020840152600180851b03806040830151166040850152606082015116606084015201516080820152f35b50346101e35760403660031901126101e3576001600160401b0390600435828111610a4a5761057e90369060040161147a565b9290916024359182116101e3575061059a90369060040161147a565b808403610a38576105aa846116b7565b926105b86040519485611570565b848452601f196105c7866116b7565b01366020860137604051916105db83611554565b6105e3611591565b83526105ed611645565b60208401526000604084015260006060840152600060a0840152600060c0840152600060e084015263ffffffff60008051602061200a8339815191525416608084015263ffffffff600080516020611f8a8339815191525416936004602060018060a01b03600080516020611fca833981519152541660405192838092630c5eff3d60e41b82525afa9081156109ac57600091610a19575b5060005b8881106106a2576040518061069e8a826114aa565b0390f35b63ffffffff6106ba6106b5838c896116ce565b6116de565b16604087015263ffffffff6106d36106b58387876116ce565b16606087015263ffffffff60408701511687811015610a01575063ffffffff60608701511663ffffffff6080880151168110156109e9575061072461050b61071f6106b5848d8a6116ce565b6115bc565b808752604090810151905163e838dfbb60e01b81526001600160a01b039182166004820152906020908290602490829087165afa9081156109ac576000916109ca575b506109b85785516060015160405163e838dfbb60e01b81526001600160a01b039182166004820152906020908290602490829087165afa9081156109ac5760009161097d575b5061096b5785515115610954576107de6107d161034c6103476106b58589896116ce565b8060208901528751611901565b156109255761ffff60a0870152600060e0870152600060c087015261080286611c31565b85515161091e5760005b60ff610818838b6116ef565b91169052600080808060018060a01b0360408b5101511660e08b0151905af13d15610916573d9061084882611bce565b916108566040519384611570565b82523d6000602084013e5b156108da5750806108786106b56001938c896116ce565b877f25f4dfa5f0703d4c509bd7216e70f8378f419433c14840c14f3eaadb60642ad1606063ffffffff835194878060a01b036040870151169560c060e0870151960151905190604051968752602087015260408601521692a301955b95610689565b86604060018060a01b03915101511661091260405192839263f2fc9fa160e01b8452600484015260406024840152604483019061143a565b0390fd5b606090610861565b600161080c565b60448663ffffffff606081604084015116920151166040519163b826420960e01b835260048301526024820152fd5b8060026109636001938b6116ef565b5201956108d4565b604051633de3fb0960e11b8152600490fd5b61099f915060203d6020116109a5575b6109978183611570565b810190611722565b386107ad565b503d61098d565b6040513d6000823e3d90fd5b604051635941eb9d60e01b8152600490fd5b6109e3915060203d6020116109a5576109978183611570565b38610767565b6024906040519063311569d960e01b82526004820152fd5b60249060405190637ba6f8f560e11b82526004820152fd5b610a32915060203d6020116104895761047b8183611570565b38610685565b604051633a5e3f0d60e01b8152600490fd5b5080fd5b50346101e35760203660031901126101e3576004359063ffffffff821682036101e3576060610a8861034c84610a82611645565b50611664565b6040805191805183526020810151602084015201516040820152f35b50346101e357806003193601126101e357602060008051602061200a83398151915254604051908152f35b50346101e35760803660031901126101e3576001600160401b0390600435828111610a4a57610b0290369060040161147a565b92602435908111610f8e57610b1b90369060040161147a565b9091604435151560443503610f8a576064359361ffff851685036101e35750818503610a3857610b4a856116b7565b93610b586040519586611570565b858552601f19610b67876116b7565b0136602087013760405192610b7b84611554565b610b83611591565b8452610b8d611645565b60208501526000604085015260006060850152600060a0850152600060c0850152600060e085015263ffffffff60008051602061200a8339815191525416608085015263ffffffff600080516020611f8a8339815191525416946004602060018060a01b03600080516020611fca833981519152541660405192838092630c5eff3d60e41b82525afa9081156109ac57600091610f6b575b5060005b898110610c3e576040518061069e8b826114aa565b63ffffffff610c516106b5838d8a6116ce565b16604088015263ffffffff610c6a6106b58387876116ce565b16606088015263ffffffff60408801511688811015610a01575063ffffffff60608801511663ffffffff6080890151168110156109e95750610cb661050b61071f6106b5848e8b6116ce565b808852604090810151905163e838dfbb60e01b81526001600160a01b039182166004820152906020908290602490829087165afa9081156109ac57600091610f4c575b506109b85786516060015160405163e838dfbb60e01b81526001600160a01b039182166004820152906020908290602490829087165afa9081156109ac57600091610f2d575b5061096b5786515115610ee457610d70610d6361034c6103476106b58589896116ce565b8060208a01528851611901565b15610eb55761ffff851660a0880152600060e0880152600060c0880152610d9687611c31565b865151610eae5760005b60ff610dac838c6116ef565b91169052600080808060018060a01b0360408c5101511660e08c0151905af13d15610ea6573d90610ddc82611bce565b91610dea6040519384611570565b82523d6000602084013e5b15610e6e575080610e0c6106b56001938d8a6116ce565b887f25f4dfa5f0703d4c509bd7216e70f8378f419433c14840c14f3eaadb60642ad1606063ffffffff835194878060a01b036040870151169560c060e0870151960151905190604051968752602087015260408601521692a301965b96610c29565b87604060018060a01b03915101511661091260405192839263f2fc9fa160e01b8452600484015260406024840152604483019061143a565b606090610df5565b6001610da0565b60448763ffffffff606081604084015116920151166040519163b826420960e01b835260048301526024820152fd5b6044999897969935610f1257602463ffffffff60408c015116604051906339775c8160e01b82526004820152fd5b806002610f256001938b9c9d9a9b6116ef565b520196610e68565b610f46915060203d6020116109a5576109978183611570565b38610d3f565b610f65915060203d6020116109a5576109978183611570565b38610cf9565b610f84915060203d6020116104895761047b8183611570565b38610c25565b8380fd5b8280fd5b50346101e357602080600319360112610a4a576004356001600160401b038111610f8e57610fc490369060040161147a565b91610fce836116b7565b91610fdc6040519384611570565b838352610fe8846116b7565b8383019490601f1901368637610ffc611645565b9060008051602061200a83398151915254806110bc575b5086939594965b818110611066575050505060405193838594850191818652518092526040850193925b82811061104c57505050500390f35b835160070b8552869550938101939281019260010161103d565b6110828361107d6106b58486899d9b9c9a9d6116ce565b61175d565b61108c82886116ef565b9060070b905260001981146110a857600101969395949661101a565b634e487b7160e01b88526011600452602488fd5b6110cf91925061034c9060001901611664565b9038611013565b50346101e357806003193601126101e3576020600080516020611fea83398151915254604051908152f35b50346101e357806003193601126101e35760405160408101908082106001600160401b038311176111595761069e9160405260058152640312e322e360dc1b602082015260405191829160208352602083019061143a565b634e487b7160e01b600052604160045260246000fd5b50346101e357806003193601126101e3576020600080516020611f8a83398151915254604051908152f35b50346101e35760403660031901126101e3576024356001600160a01b0381811692908383036101de5780600080516020611fca83398151915254168033036112ad575b604051948591630c5eff3d60e41b835282600460209889935afa9182156112a257908692918592611280575b50602490604051948593849263e838dfbb60e01b84526004840152165afa9182156112745791611257575b50611245576104359060043561192f565b604051637e0aa9d960e01b8152600490fd5b61126e9150833d85116109a5576109978183611570565b38611234565b604051903d90823e3d90fd5b602491925061129b90843d86116104895761047b8183611570565b9190611209565b6040513d86823e3d90fd5b604051630c5eff3d60e41b8152602081600481855afa9081156112a257908391859161132a575b5016803b15610f8a578360449160405192838092632d20488160e11b8252336004830152600460248301525afa80156112a257908491611316575b50506111dd565b61131f9061150b565b610f8e57823861130f565b611342915060203d81116104895761047b8183611570565b386112d4565b50346101e357806003193601126101e3576020600080516020611faa83398151915254604051908152f35b905034610a4a576020366003190112610a4a576004359060018060a01b03600080516020611fca83398151915254169081330361142557508290600080516020611fea83398151915280549380851160001461141e57935b846113d4578380f35b846113de91611750565b9055803b15610a4a576004604051809481936302b4286360e11b83525af180156104575761140f575b818180808380f35b6114189061150b565b38611407565b50836113cb565b63472511eb60e11b8152336004820152602490fd5b919082519283825260005b848110611466575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611445565b9181601f840112156101de578235916001600160401b0383116101de576020808501948460051b0101116101de57565b6020908160408183019282815285518094520193019160005b8281106114d1575050505090565b835160ff16855293810193928101926001016114c3565b919082018092116114f557565b634e487b7160e01b600052601160045260246000fd5b6001600160401b03811161115957604052565b606081019081106001600160401b0382111761115957604052565b60a081019081106001600160401b0382111761115957604052565b61010081019081106001600160401b0382111761115957604052565b90601f801991011681019081106001600160401b0382111761115957604052565b6040519061159e82611539565b60006080838281528260208201528260408201528260608201520152565b600080516020611f8a83398151915280548210156115e7576000526005602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b9060405161160a81611539565b825481526001830154602082015260028301546001600160a01b03908116604083015260038401541660608201526004909201546080830152565b604051906116528261151e565b60006040838281528260208201520152565b60008051602061200a83398151915280548210156115e7576000526003602060002091020190600090565b9060405161169c8161151e565b60406002829480548452600181015460208501520154910152565b6001600160401b0381116111595760051b60200190565b91908110156115e75760051b0190565b3563ffffffff811681036101de5790565b80518210156115e75760209160051b010190565b908160209103126101de57516001600160a01b03811681036101de5790565b908160209103126101de575180151581036101de5790565b63ffffffff90811660001901919082116114f557565b919082039182116114f557565b600080516020611f8a8339815191525463ffffffff821610156117e65761050b611786916115bc565b908151156117de5760008051602061200a83398151915254159081156117bf575b506117b8576117b5906117ee565b90565b5060001990565b6117d1915060408101519051906114e8565b60808201511015386117a7565b505060021990565b505060011990565b60008051602061200a83398151915280546000198101939291908085116114f55760079185830b9061183561182f61034c6001600160401b03998a16611664565b86611901565b6118f957600092156118e55782526118586118526020842061168f565b85611901565b6118de575b80830b82840b8181146118d45701677fffffffffffffff8113677fffffffffffffff198212176114f557600290840b059061189c61034c838916611664565b6118a68187611901565b6118ca5760406080870151910151116000146118c2575061185d565b91509061185d565b5090955050505050565b5091955050505050565b5093505050565b634e487b7160e01b83526032600452602483fd5b509450505050565b608001908151611919604083019283519051906114e8565b11918261192557505090565b5190511115919050565b91909161193b83611f56565b8015611bbc5760018060a01b0390600080516020611fca833981519152828154169260408051946323b872dd60e01b8652600433818801523060248801528560448801526020968781606481600080975af1908115611bb2578391611b95575b5015611b8757600080516020611f8a833981519152805463ffffffff81169a84978c80611b5b575b5087905416968a8a60248951809b8193637bce1f8160e11b83528a8301525afa978815611b51578698611b1e575b5086519a6119fe8c611539565b8a8c528b0188815281888d0193169b8c8452606081019433865260808201968c8852600160401b821015611b0b57600182019055611a3b906115bc565b989098611af9575051875551600187015590516002860180546001600160a01b03199081169284169290921790559151600386018054909316911617905551910155600080516020611faa833981519152547f9a1bb960783a8679f42036f0c1fe89288fd279ed545a19f86bd284c72947b187949392611af4928992611acb90611ac69088906114e8565b611f13565b5194859485929363ffffffff919594606093608086019786526020860152604085015216910152565b0390a2565b634e487b7160e01b8152808852602490fd5b634e487b7160e01b8a526041895260248afd5b9097508a81813d8311611b4a575b611b368183611570565b81010312611b46575196386119f1565b8580fd5b503d611b2c565b87513d88823e3d90fd5b88919950611b7161050b61071f611b7e9361173a565b60808101519051906114e8565b9890508c6119c3565b82516313ff771f60e21b8152fd5b611bac9150883d8a116109a5576109978183611570565b3861199b565b84513d85823e3d90fd5b604051630dd484e760e41b8152600490fd5b6001600160401b03811161115957601f01601f191660200190565b818102929181159184041417156114f557565b8115611c06570490565b634e487b7160e01b600052601260045260246000fd5b90600163ffffffff809316019182116114f557565b611c39611645565b9060208101611c6c611c53825160408101519051906114e8565b611c668451916080835193015190611750565b90611f78565b611c8f611c86602086019280845260208551015190611be9565b83515190611bfc565b8452611cae611ca5825160208651015190611be9565b84515190611bfc565b8451808210611e8a575b50508051611ccc60808551019182516114e8565b90528051611cdd8451918251611750565b90528351611cf16020855101918251611750565b90528051611d0460c085019182516114e8565b90528351611d1760e085019182516114e8565b9052604083015163ffffffff1660608401947f01d87b0f07b182b784c074487c5a8f901a8e2348275f5480d822a70de74fa8b7611d58875163ffffffff1690565b9351918051611d97604089515193015160405193849363ffffffff80809b16991697859094939260609260808301968352602083015260408201520152565b0390a382515115159081611e4b575b5080611e30575b15611e2557611df361034c61034785611de9611ddf611dd3611e23995163ffffffff1690565b60010163ffffffff1690565b63ffffffff168252565b5163ffffffff1690565b9052611e1e60a08201611e16611e0b825161ffff1690565b6000190161ffff1690565b61ffff169052565b611c31565b565b50611e239150611ec9565b5061ffff611e4360a084015161ffff1690565b161515611dad565b9050611e63611e5e855163ffffffff1690565b611c1c565b90611e81611e78608086015163ffffffff1690565b63ffffffff1690565b91161038611da6565b611eae82611ec09203806040890152600080516020611fea833981519152546114e8565b600080516020611fea83398151915255565b84523880611cb8565b6001611f0e6080835101516020604085019463ffffffff926004611eef858951166115bc565b500155805151611f01848851166115bc565b50555101519351166115bc565b500155565b600080516020611faa8339815191527f81ba2e33f1e91d5b498c91742740d1de8a6149f571c26bec9ae77b5cf099c582604082548151908152846020820152a155565b6001600160a01b031615611f6657565b60405163f6b2911f60e01b8152600490fd5b81811115611f84575090565b90509056fe232f0d723a47bd57c991606dd0525f28484745095475b69dffe8416b3749c3c18ec604dcc41d380ed48f70a4a32dd9623b98c284836361a21b8992d2845ee53c1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973b9afb091d33aa9fdd4ac2dbd1cbba78215a097062e9dbdc7b707ac5bb59049bc00c9122afab04eaf9e9bdaa10927c74406e40c7f08744e32826fff29b1c9e7abca2646970667358221220e3c92afe6a925ad1a5bf11cb934612757add7123c69fb70706671727bcfd695b64736f6c63430008140033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c9081630c77940114611373575080630d8d2a5414611348578063107703ab1461119a578063319798d11461116f57806354fd4d50146111015780635b5985a2146110d65780635f2e5f0714610f925780637c044e5514610acf578063841ecb8514610aa45780638623375414610a4e5780639332525d1461054b5780639b92d6de146104d1578063a519f0601461049b578063aa2f892d1461039b578063b30d8bb7146101e65763c8fade5a146100d157600080fd5b346101e35760203660031901126101e3576004356001600160a01b038116908181036101de577f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfc8054806101c057509160209160017ffc0d749143b04e0d92a3b49edae84a45f6bc88b75e99d9118ec4d7e87fe626c5945561015281611f56565b600080516020611fca83398151915255604051908152a17f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7160405182815260406020820152366040820152368360608301378260603683010152606081601f19601f3601168101030190a180f35b8460449160405191631cfd276760e31b835260048301526024820152fd5b600080fd5b80fd5b5060203660031901126101e357600080516020611fca8339815191525460043591906001600160a01b0316330361038357600080516020611faa83398151915254918281116103655760008051602061200a8339815191529081549363ffffffff851694849386610333575b6040519161025f8361151e565b84835260208301903482526040840192878452600160401b82101561031f5760018201905561028d90611664565b93909361030b57937f05e5b10ca266c2e8cfd73b1fb719694fb6b89fcda9e3739ace4cc19b3e85544597989360026102d8948894610305985184555160018401555191015503611f13565b604051938493349185929363ffffffff919594606093608086019786526020860152604085015216910152565b0390a180f35b634e487b7160e01b88526004889052602488fd5b634e487b7160e01b89526041600452602489fd5b935061035f61035261034c6103478961173a565b611664565b5061168f565b60408101519051906114e8565b93610252565b6044908360405191632ea1a50d60e11b835260048301526024820152fd5b60405163472511eb60e11b8152336004820152602490fd5b50346101e35760203660031901126101e357600080516020611fca83398151915254604051630c5eff3d60e41b81526001600160a01b03916020908290600490829086165afa908115610490578391610462575b501681813b156101e35760449160405192838092632d20488160e11b8252336004830152600460248301525afa801561045757610443575b60206104353360043561192f565b63ffffffff60405191168152f35b61044d829161150b565b6101e35780610427565b6040513d84823e3d90fd5b610483915060203d8111610489575b61047b8183611570565b810190611703565b386103ef565b503d610471565b6040513d85823e3d90fd5b50346101e357806003193601126101e357600080516020611fca833981519152546040516001600160a01b039091168152602090f35b50346101e35760203660031901126101e3576004359063ffffffff821682036101e35760a061051161050b84610505611591565b506115bc565b506115fd565b6080604051918051835260208101516020840152600180851b03806040830151166040850152606082015116606084015201516080820152f35b50346101e35760403660031901126101e3576001600160401b0390600435828111610a4a5761057e90369060040161147a565b9290916024359182116101e3575061059a90369060040161147a565b808403610a38576105aa846116b7565b926105b86040519485611570565b848452601f196105c7866116b7565b01366020860137604051916105db83611554565b6105e3611591565b83526105ed611645565b60208401526000604084015260006060840152600060a0840152600060c0840152600060e084015263ffffffff60008051602061200a8339815191525416608084015263ffffffff600080516020611f8a8339815191525416936004602060018060a01b03600080516020611fca833981519152541660405192838092630c5eff3d60e41b82525afa9081156109ac57600091610a19575b5060005b8881106106a2576040518061069e8a826114aa565b0390f35b63ffffffff6106ba6106b5838c896116ce565b6116de565b16604087015263ffffffff6106d36106b58387876116ce565b16606087015263ffffffff60408701511687811015610a01575063ffffffff60608701511663ffffffff6080880151168110156109e9575061072461050b61071f6106b5848d8a6116ce565b6115bc565b808752604090810151905163e838dfbb60e01b81526001600160a01b039182166004820152906020908290602490829087165afa9081156109ac576000916109ca575b506109b85785516060015160405163e838dfbb60e01b81526001600160a01b039182166004820152906020908290602490829087165afa9081156109ac5760009161097d575b5061096b5785515115610954576107de6107d161034c6103476106b58589896116ce565b8060208901528751611901565b156109255761ffff60a0870152600060e0870152600060c087015261080286611c31565b85515161091e5760005b60ff610818838b6116ef565b91169052600080808060018060a01b0360408b5101511660e08b0151905af13d15610916573d9061084882611bce565b916108566040519384611570565b82523d6000602084013e5b156108da5750806108786106b56001938c896116ce565b877f25f4dfa5f0703d4c509bd7216e70f8378f419433c14840c14f3eaadb60642ad1606063ffffffff835194878060a01b036040870151169560c060e0870151960151905190604051968752602087015260408601521692a301955b95610689565b86604060018060a01b03915101511661091260405192839263f2fc9fa160e01b8452600484015260406024840152604483019061143a565b0390fd5b606090610861565b600161080c565b60448663ffffffff606081604084015116920151166040519163b826420960e01b835260048301526024820152fd5b8060026109636001938b6116ef565b5201956108d4565b604051633de3fb0960e11b8152600490fd5b61099f915060203d6020116109a5575b6109978183611570565b810190611722565b386107ad565b503d61098d565b6040513d6000823e3d90fd5b604051635941eb9d60e01b8152600490fd5b6109e3915060203d6020116109a5576109978183611570565b38610767565b6024906040519063311569d960e01b82526004820152fd5b60249060405190637ba6f8f560e11b82526004820152fd5b610a32915060203d6020116104895761047b8183611570565b38610685565b604051633a5e3f0d60e01b8152600490fd5b5080fd5b50346101e35760203660031901126101e3576004359063ffffffff821682036101e3576060610a8861034c84610a82611645565b50611664565b6040805191805183526020810151602084015201516040820152f35b50346101e357806003193601126101e357602060008051602061200a83398151915254604051908152f35b50346101e35760803660031901126101e3576001600160401b0390600435828111610a4a57610b0290369060040161147a565b92602435908111610f8e57610b1b90369060040161147a565b9091604435151560443503610f8a576064359361ffff851685036101e35750818503610a3857610b4a856116b7565b93610b586040519586611570565b858552601f19610b67876116b7565b0136602087013760405192610b7b84611554565b610b83611591565b8452610b8d611645565b60208501526000604085015260006060850152600060a0850152600060c0850152600060e085015263ffffffff60008051602061200a8339815191525416608085015263ffffffff600080516020611f8a8339815191525416946004602060018060a01b03600080516020611fca833981519152541660405192838092630c5eff3d60e41b82525afa9081156109ac57600091610f6b575b5060005b898110610c3e576040518061069e8b826114aa565b63ffffffff610c516106b5838d8a6116ce565b16604088015263ffffffff610c6a6106b58387876116ce565b16606088015263ffffffff60408801511688811015610a01575063ffffffff60608801511663ffffffff6080890151168110156109e95750610cb661050b61071f6106b5848e8b6116ce565b808852604090810151905163e838dfbb60e01b81526001600160a01b039182166004820152906020908290602490829087165afa9081156109ac57600091610f4c575b506109b85786516060015160405163e838dfbb60e01b81526001600160a01b039182166004820152906020908290602490829087165afa9081156109ac57600091610f2d575b5061096b5786515115610ee457610d70610d6361034c6103476106b58589896116ce565b8060208a01528851611901565b15610eb55761ffff851660a0880152600060e0880152600060c0880152610d9687611c31565b865151610eae5760005b60ff610dac838c6116ef565b91169052600080808060018060a01b0360408c5101511660e08c0151905af13d15610ea6573d90610ddc82611bce565b91610dea6040519384611570565b82523d6000602084013e5b15610e6e575080610e0c6106b56001938d8a6116ce565b887f25f4dfa5f0703d4c509bd7216e70f8378f419433c14840c14f3eaadb60642ad1606063ffffffff835194878060a01b036040870151169560c060e0870151960151905190604051968752602087015260408601521692a301965b96610c29565b87604060018060a01b03915101511661091260405192839263f2fc9fa160e01b8452600484015260406024840152604483019061143a565b606090610df5565b6001610da0565b60448763ffffffff606081604084015116920151166040519163b826420960e01b835260048301526024820152fd5b6044999897969935610f1257602463ffffffff60408c015116604051906339775c8160e01b82526004820152fd5b806002610f256001938b9c9d9a9b6116ef565b520196610e68565b610f46915060203d6020116109a5576109978183611570565b38610d3f565b610f65915060203d6020116109a5576109978183611570565b38610cf9565b610f84915060203d6020116104895761047b8183611570565b38610c25565b8380fd5b8280fd5b50346101e357602080600319360112610a4a576004356001600160401b038111610f8e57610fc490369060040161147a565b91610fce836116b7565b91610fdc6040519384611570565b838352610fe8846116b7565b8383019490601f1901368637610ffc611645565b9060008051602061200a83398151915254806110bc575b5086939594965b818110611066575050505060405193838594850191818652518092526040850193925b82811061104c57505050500390f35b835160070b8552869550938101939281019260010161103d565b6110828361107d6106b58486899d9b9c9a9d6116ce565b61175d565b61108c82886116ef565b9060070b905260001981146110a857600101969395949661101a565b634e487b7160e01b88526011600452602488fd5b6110cf91925061034c9060001901611664565b9038611013565b50346101e357806003193601126101e3576020600080516020611fea83398151915254604051908152f35b50346101e357806003193601126101e35760405160408101908082106001600160401b038311176111595761069e9160405260058152640312e322e360dc1b602082015260405191829160208352602083019061143a565b634e487b7160e01b600052604160045260246000fd5b50346101e357806003193601126101e3576020600080516020611f8a83398151915254604051908152f35b50346101e35760403660031901126101e3576024356001600160a01b0381811692908383036101de5780600080516020611fca83398151915254168033036112ad575b604051948591630c5eff3d60e41b835282600460209889935afa9182156112a257908692918592611280575b50602490604051948593849263e838dfbb60e01b84526004840152165afa9182156112745791611257575b50611245576104359060043561192f565b604051637e0aa9d960e01b8152600490fd5b61126e9150833d85116109a5576109978183611570565b38611234565b604051903d90823e3d90fd5b602491925061129b90843d86116104895761047b8183611570565b9190611209565b6040513d86823e3d90fd5b604051630c5eff3d60e41b8152602081600481855afa9081156112a257908391859161132a575b5016803b15610f8a578360449160405192838092632d20488160e11b8252336004830152600460248301525afa80156112a257908491611316575b50506111dd565b61131f9061150b565b610f8e57823861130f565b611342915060203d81116104895761047b8183611570565b386112d4565b50346101e357806003193601126101e3576020600080516020611faa83398151915254604051908152f35b905034610a4a576020366003190112610a4a576004359060018060a01b03600080516020611fca83398151915254169081330361142557508290600080516020611fea83398151915280549380851160001461141e57935b846113d4578380f35b846113de91611750565b9055803b15610a4a576004604051809481936302b4286360e11b83525af180156104575761140f575b818180808380f35b6114189061150b565b38611407565b50836113cb565b63472511eb60e11b8152336004820152602490fd5b919082519283825260005b848110611466575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611445565b9181601f840112156101de578235916001600160401b0383116101de576020808501948460051b0101116101de57565b6020908160408183019282815285518094520193019160005b8281106114d1575050505090565b835160ff16855293810193928101926001016114c3565b919082018092116114f557565b634e487b7160e01b600052601160045260246000fd5b6001600160401b03811161115957604052565b606081019081106001600160401b0382111761115957604052565b60a081019081106001600160401b0382111761115957604052565b61010081019081106001600160401b0382111761115957604052565b90601f801991011681019081106001600160401b0382111761115957604052565b6040519061159e82611539565b60006080838281528260208201528260408201528260608201520152565b600080516020611f8a83398151915280548210156115e7576000526005602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b9060405161160a81611539565b825481526001830154602082015260028301546001600160a01b03908116604083015260038401541660608201526004909201546080830152565b604051906116528261151e565b60006040838281528260208201520152565b60008051602061200a83398151915280548210156115e7576000526003602060002091020190600090565b9060405161169c8161151e565b60406002829480548452600181015460208501520154910152565b6001600160401b0381116111595760051b60200190565b91908110156115e75760051b0190565b3563ffffffff811681036101de5790565b80518210156115e75760209160051b010190565b908160209103126101de57516001600160a01b03811681036101de5790565b908160209103126101de575180151581036101de5790565b63ffffffff90811660001901919082116114f557565b919082039182116114f557565b600080516020611f8a8339815191525463ffffffff821610156117e65761050b611786916115bc565b908151156117de5760008051602061200a83398151915254159081156117bf575b506117b8576117b5906117ee565b90565b5060001990565b6117d1915060408101519051906114e8565b60808201511015386117a7565b505060021990565b505060011990565b60008051602061200a83398151915280546000198101939291908085116114f55760079185830b9061183561182f61034c6001600160401b03998a16611664565b86611901565b6118f957600092156118e55782526118586118526020842061168f565b85611901565b6118de575b80830b82840b8181146118d45701677fffffffffffffff8113677fffffffffffffff198212176114f557600290840b059061189c61034c838916611664565b6118a68187611901565b6118ca5760406080870151910151116000146118c2575061185d565b91509061185d565b5090955050505050565b5091955050505050565b5093505050565b634e487b7160e01b83526032600452602483fd5b509450505050565b608001908151611919604083019283519051906114e8565b11918261192557505090565b5190511115919050565b91909161193b83611f56565b8015611bbc5760018060a01b0390600080516020611fca833981519152828154169260408051946323b872dd60e01b8652600433818801523060248801528560448801526020968781606481600080975af1908115611bb2578391611b95575b5015611b8757600080516020611f8a833981519152805463ffffffff81169a84978c80611b5b575b5087905416968a8a60248951809b8193637bce1f8160e11b83528a8301525afa978815611b51578698611b1e575b5086519a6119fe8c611539565b8a8c528b0188815281888d0193169b8c8452606081019433865260808201968c8852600160401b821015611b0b57600182019055611a3b906115bc565b989098611af9575051875551600187015590516002860180546001600160a01b03199081169284169290921790559151600386018054909316911617905551910155600080516020611faa833981519152547f9a1bb960783a8679f42036f0c1fe89288fd279ed545a19f86bd284c72947b187949392611af4928992611acb90611ac69088906114e8565b611f13565b5194859485929363ffffffff919594606093608086019786526020860152604085015216910152565b0390a2565b634e487b7160e01b8152808852602490fd5b634e487b7160e01b8a526041895260248afd5b9097508a81813d8311611b4a575b611b368183611570565b81010312611b46575196386119f1565b8580fd5b503d611b2c565b87513d88823e3d90fd5b88919950611b7161050b61071f611b7e9361173a565b60808101519051906114e8565b9890508c6119c3565b82516313ff771f60e21b8152fd5b611bac9150883d8a116109a5576109978183611570565b3861199b565b84513d85823e3d90fd5b604051630dd484e760e41b8152600490fd5b6001600160401b03811161115957601f01601f191660200190565b818102929181159184041417156114f557565b8115611c06570490565b634e487b7160e01b600052601260045260246000fd5b90600163ffffffff809316019182116114f557565b611c39611645565b9060208101611c6c611c53825160408101519051906114e8565b611c668451916080835193015190611750565b90611f78565b611c8f611c86602086019280845260208551015190611be9565b83515190611bfc565b8452611cae611ca5825160208651015190611be9565b84515190611bfc565b8451808210611e8a575b50508051611ccc60808551019182516114e8565b90528051611cdd8451918251611750565b90528351611cf16020855101918251611750565b90528051611d0460c085019182516114e8565b90528351611d1760e085019182516114e8565b9052604083015163ffffffff1660608401947f01d87b0f07b182b784c074487c5a8f901a8e2348275f5480d822a70de74fa8b7611d58875163ffffffff1690565b9351918051611d97604089515193015160405193849363ffffffff80809b16991697859094939260609260808301968352602083015260408201520152565b0390a382515115159081611e4b575b5080611e30575b15611e2557611df361034c61034785611de9611ddf611dd3611e23995163ffffffff1690565b60010163ffffffff1690565b63ffffffff168252565b5163ffffffff1690565b9052611e1e60a08201611e16611e0b825161ffff1690565b6000190161ffff1690565b61ffff169052565b611c31565b565b50611e239150611ec9565b5061ffff611e4360a084015161ffff1690565b161515611dad565b9050611e63611e5e855163ffffffff1690565b611c1c565b90611e81611e78608086015163ffffffff1690565b63ffffffff1690565b91161038611da6565b611eae82611ec09203806040890152600080516020611fea833981519152546114e8565b600080516020611fea83398151915255565b84523880611cb8565b6001611f0e6080835101516020604085019463ffffffff926004611eef858951166115bc565b500155805151611f01848851166115bc565b50555101519351166115bc565b500155565b600080516020611faa8339815191527f81ba2e33f1e91d5b498c91742740d1de8a6149f571c26bec9ae77b5cf099c582604082548151908152846020820152a155565b6001600160a01b031615611f6657565b60405163f6b2911f60e01b8152600490fd5b81811115611f84575090565b90509056fe232f0d723a47bd57c991606dd0525f28484745095475b69dffe8416b3749c3c18ec604dcc41d380ed48f70a4a32dd9623b98c284836361a21b8992d2845ee53c1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973b9afb091d33aa9fdd4ac2dbd1cbba78215a097062e9dbdc7b707ac5bb59049bc00c9122afab04eaf9e9bdaa10927c74406e40c7f08744e32826fff29b1c9e7abca2646970667358221220e3c92afe6a925ad1a5bf11cb934612757add7123c69fb70706671727bcfd695b64736f6c63430008140033",
  "devdoc": {
    "author": "Alluvial Finance Inc.",
    "errors": {
      "ClaimRedeemFailed(address,bytes)": [
        {
          "params": {
            "rdata": "The revert data",
            "recipient": "The recipient of the payment"
          }
        }
      ],
      "DoesNotMatch(uint256,uint256)": [
        {
          "params": {
            "redeemRequestId": "The provided redeem request id",
            "withdrawalEventId": "The provided associated withdrawal event id"
          }
        }
      ],
      "InvalidInitialization(uint256,uint256)": [
        {
          "params": {
            "expectedVersion": "The version that was expected",
            "version": "The version that was attempting to be initialized"
          }
        }
      ],
      "RedeemRequestAlreadyClaimed(uint256)": [
        {
          "params": {
            "id": "The redeem request id"
          }
        }
      ],
      "RedeemRequestOutOfBounds(uint256)": [
        {
          "params": {
            "id": "The redeem request id"
          }
        }
      ],
      "Unauthorized(address)": [
        {
          "params": {
            "caller": "Address performing the call"
          }
        }
      ],
      "WithdrawalEventOutOfBounds(uint256)": [
        {
          "params": {
            "id": "The withdrawal event id"
          }
        }
      ],
      "WithdrawalExceedsRedeemDemand(uint256,uint256)": [
        {
          "params": {
            "redeemDemand": "The current redeem demand",
            "withdrawalAmount": "The amount of the withdrawal event"
          }
        }
      ]
    },
    "events": {
      "ClaimedRedeemRequest(uint32,address,uint256,uint256,uint256)": {
        "params": {
          "ethAmount": "The amount of eth retrieved",
          "lsEthAmount": "The total amount of LsETH used to redeem the eth",
          "recipient": "The address receiving the redeem request funds",
          "redeemRequestId": "The id of the redeem request",
          "remainingLsEthAmount": "The amount of LsETH remaining"
        }
      },
      "Initialize(uint256,bytes)": {
        "params": {
          "cdata": "Complete calldata that was used during the initialization",
          "version": "New version of the contracts"
        }
      },
      "ReportedWithdrawal(uint256,uint256,uint256,uint32)": {
        "params": {
          "amount": "The amount of the withdrawal event in LsETH",
          "ethAmount": "The amount of eth to distrubute to claimers",
          "height": "The height of the withdrawal event in LsETH",
          "id": "The id of the withdrawal event"
        }
      },
      "RequestedRedeem(address,uint256,uint256,uint256,uint32)": {
        "params": {
          "amount": "The amount of the redeem request in LsETH",
          "height": "The height of the redeem request in LsETH",
          "id": "The id of the new redeem request",
          "maxRedeemableEth": "The maximum amount of eth that can be redeemed from this request",
          "recipient": "The recipient of the redeem request"
        }
      },
      "SatisfiedRedeemRequest(uint32,uint32,uint256,uint256,uint256,uint256)": {
        "params": {
          "ethAmountExceeding": "The amount of eth added to the exceeding buffer",
          "ethAmountSatisfied": "The amount of ETH filled",
          "lsEthAmountRemaining": "The amount of LsETH remaining",
          "lsEthAmountSatisfied": "The amount of LsETH filled",
          "redeemRequestId": "The id of the redeem request",
          "withdrawalEventId": "The id of the withdrawal event used to fill the request"
        }
      },
      "SetRedeemDemand(uint256,uint256)": {
        "params": {
          "newRedeemDemand": "The new redeem demand",
          "oldRedeemDemand": "The old redeem demand"
        }
      },
      "SetRiver(address)": {
        "params": {
          "river": "The new river address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "claimRedeemRequests(uint32[],uint32[])": {
        "params": {
          "_redeemRequestIds": "The list of redeem requests to claim",
          "_withdrawalEventIds": "The list of withdrawal events to use for every redeem request claim"
        },
        "returns": {
          "claimStatuses": "The list of claim statuses. 0 for fully claimed, 1 for partially claimed, 2 for skipped"
        }
      },
      "claimRedeemRequests(uint32[],uint32[],bool,uint16)": {
        "params": {
          "_depth": "The maximum recursive depth for the resolution of the redeem requests",
          "_redeemRequestIds": "The list of redeem requests to claim",
          "_skipAlreadyClaimed": "True if the call should not revert on claiming of already claimed requests",
          "_withdrawalEventIds": "The list of withdrawal events to use for every redeem request claim"
        },
        "returns": {
          "claimStatuses": "The list of claim statuses. 0 for fully claimed, 1 for partially claimed, 2 for skipped"
        }
      },
      "getBufferedExceedingEth()": {
        "returns": {
          "_0": "The amount of eth in the buffer"
        }
      },
      "getRedeemDemand()": {
        "returns": {
          "_0": "The amount of LsETH waiting to be exited"
        }
      },
      "getRedeemRequestDetails(uint32)": {
        "params": {
          "_redeemRequestId": "The id of the request"
        },
        "returns": {
          "_0": "The redeem request details"
        }
      },
      "getRiver()": {
        "returns": {
          "_0": "The address of River"
        }
      },
      "getWithdrawalEventDetails(uint32)": {
        "params": {
          "_withdrawalEventId": "The id of the withdrawal event"
        },
        "returns": {
          "_0": "The withdrawal event details"
        }
      },
      "initializeRedeemManagerV1(address)": {
        "params": {
          "_river": "The address of the River contract"
        }
      },
      "pullExceedingEth(uint256)": {
        "params": {
          "_max": "The maximum amount that should be pulled"
        }
      },
      "reportWithdraw(uint256)": {
        "params": {
          "_lsETHWithdrawable": "The amount of LsETH that can be redeemed due to this new withdraw event"
        }
      },
      "requestRedeem(uint256)": {
        "params": {
          "_lsETHAmount": "The amount of LsETH to redeem"
        },
        "returns": {
          "redeemRequestId": "The id of the redeem request"
        }
      },
      "requestRedeem(uint256,address)": {
        "params": {
          "_lsETHAmount": "The amount of LsETH to redeem",
          "_recipient": "The recipient owning the redeem request"
        },
        "returns": {
          "redeemRequestId": "The id of the redeem request"
        }
      },
      "resolveRedeemRequests(uint32[])": {
        "details": "The result is an array of equal length with ids or error code-1 means that the request is not satisfied yet-2 means that the request is out of bounds-3 means that the request has already been claimedThis call was created to be called by an off-chain interface, the output could then be used to perform the claimRewards call in a regular transaction",
        "params": {
          "_redeemRequestIds": "The list of redeem requests to resolve"
        },
        "returns": {
          "withdrawalEventIds": "The list of withdrawal events matching every redeem request (or error codes)"
        }
      },
      "version()": {
        "returns": {
          "_0": "Version of the contract"
        }
      }
    },
    "title": "Redeem Manager (v1)",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ClaimInitiatorIsDenied()": [
        {
          "notice": "Thrown when the claim initiator is denied"
        }
      ],
      "ClaimRecipientIsDenied()": [
        {
          "notice": "Thrown when the claim recipient is denied"
        }
      ],
      "ClaimRedeemFailed(address,bytes)": [
        {
          "notice": "Thrown when the payment after a claim failed"
        }
      ],
      "DoesNotMatch(uint256,uint256)": [
        {
          "notice": "Thrown when the redeem request and withdrawal event are not matching during claim"
        }
      ],
      "IncompatibleArrayLengths()": [
        {
          "notice": "Thrown when the provided arrays don't have matching lengths"
        }
      ],
      "InvalidInitialization(uint256,uint256)": [
        {
          "notice": "An error occured during the initialization"
        }
      ],
      "InvalidZeroAddress()": [
        {
          "notice": "The address is zero"
        }
      ],
      "InvalidZeroAmount()": [
        {
          "notice": "Thrown When a zero value is provided"
        }
      ],
      "RecipientIsDenied()": [
        {
          "notice": "Thrown when the recipient of redeemRequest is denied"
        }
      ],
      "RedeemRequestAlreadyClaimed(uint256)": [
        {
          "notice": "Thrown when\tthe redeem request id is already claimed"
        }
      ],
      "RedeemRequestOutOfBounds(uint256)": [
        {
          "notice": "Thrown when the provided redeem request id is out of bounds"
        }
      ],
      "TransferError()": [
        {
          "notice": "Thrown when a transfer error occured with LsETH"
        }
      ],
      "Unauthorized(address)": [
        {
          "notice": "The operator is unauthorized for the caller"
        }
      ],
      "WithdrawalEventOutOfBounds(uint256)": [
        {
          "notice": "Thrown when the withdrawal request id if out of bounds"
        }
      ],
      "WithdrawalExceedsRedeemDemand(uint256,uint256)": [
        {
          "notice": "Thrown when the provided withdrawal event exceeds the redeem demand"
        }
      ]
    },
    "events": {
      "ClaimedRedeemRequest(uint32,address,uint256,uint256,uint256)": {
        "notice": "Emitted when a redeem request claim has been processed and matched at least once and funds are sent to the recipient"
      },
      "Initialize(uint256,bytes)": {
        "notice": "Emitted when the contract is properly initialized"
      },
      "ReportedWithdrawal(uint256,uint256,uint256,uint32)": {
        "notice": "Emitted when a withdrawal event is created"
      },
      "RequestedRedeem(address,uint256,uint256,uint256,uint32)": {
        "notice": "Emitted when a redeem request is created"
      },
      "SatisfiedRedeemRequest(uint32,uint32,uint256,uint256,uint256,uint256)": {
        "notice": "Emitted when a redeem request has been satisfied and filled (even partially) from a withdrawal event"
      },
      "SetRedeemDemand(uint256,uint256)": {
        "notice": "Emitted when the redeem demand is set"
      },
      "SetRiver(address)": {
        "notice": "Emitted when the River address is set"
      }
    },
    "kind": "user",
    "methods": {
      "claimRedeemRequests(uint32[],uint32[])": {
        "notice": "Claims the rewards of the provided redeem request ids"
      },
      "claimRedeemRequests(uint32[],uint32[],bool,uint16)": {
        "notice": "Claims the rewards of the provided redeem request ids"
      },
      "getBufferedExceedingEth()": {
        "notice": "Retrieve the amount of redeemed LsETH pending to be supplied with withdrawn ETH"
      },
      "getRedeemDemand()": {
        "notice": "Retrieve the amount of LsETH waiting to be exited"
      },
      "getRedeemRequestCount()": {
        "notice": "Retrieve the global count of redeem requests"
      },
      "getRedeemRequestDetails(uint32)": {
        "notice": "Retrieve the details of a specific redeem request"
      },
      "getRiver()": {
        "notice": "Retrieve River address"
      },
      "getWithdrawalEventCount()": {
        "notice": "Retrieve the global count of withdrawal events"
      },
      "getWithdrawalEventDetails(uint32)": {
        "notice": "Retrieve the details of a specific withdrawal event"
      },
      "pullExceedingEth(uint256)": {
        "notice": "Pulls exceeding buffer eth"
      },
      "reportWithdraw(uint256)": {
        "notice": "Reports a withdraw event from River"
      },
      "requestRedeem(uint256)": {
        "notice": "Creates a redeem request using msg.sender as recipient"
      },
      "requestRedeem(uint256,address)": {
        "notice": "Creates a redeem request"
      },
      "resolveRedeemRequests(uint32[])": {
        "notice": "Resolves the provided list of redeem request ids"
      },
      "version()": {
        "notice": "Retrieves the version of the contract"
      }
    },
    "notice": "This contract handles the redeem requests of all users",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}