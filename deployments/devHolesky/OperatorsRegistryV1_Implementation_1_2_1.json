{
  "address": "0xccfcA4493945879911907CEA0e319b28cEDA4f67",
  "abi": [
    {
      "inputs": [],
      "name": "FundedKeyEventMigrationComplete",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "InactiveOperator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArrayLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEmptyArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEmptyStoppedValidatorCountsArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEmptyString",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFundedKeyDeletionAttempt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedVersion",
          "type": "uint256"
        }
      ],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidKeyCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidKeysLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStoppedValidatorCountsSum",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidUnsortedIndexes",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoExitRequestsToPerform",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "keyCount",
          "type": "uint256"
        }
      ],
      "name": "OperatorLimitTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundedKeyCount",
          "type": "uint256"
        }
      ],
      "name": "OperatorLimitTooLow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "OperatorNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "OperatorNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SliceOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SliceOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "operatorIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "stoppedCount",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fundedCount",
          "type": "uint32"
        }
      ],
      "name": "StoppedValidatorCountAboveFundedCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StoppedValidatorCountArrayShrinking",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StoppedValidatorCountsDecreased",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StoppedValidatorCountsTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnorderedOperatorList",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operatorAddress",
          "type": "address"
        }
      ],
      "name": "AddedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "publicKeysAndSignatures",
          "type": "bytes"
        }
      ],
      "name": "AddedValidatorKeys",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "publicKeys",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "deferred",
          "type": "bool"
        }
      ],
      "name": "FundedValidatorKeys",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "cdata",
          "type": "bytes"
        }
      ],
      "name": "Initialize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "latestKeysEditBlockNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "snapshotBlock",
          "type": "uint256"
        }
      ],
      "name": "OperatorEditsAfterSnapshot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "OperatorLimitUnchanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "name": "RemovedValidatorKey",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "RequestedValidatorExits",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "SetAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousValidatorExitsDemand",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextValidatorExitsDemand",
          "type": "uint256"
        }
      ],
      "name": "SetCurrentValidatorExitsDemand",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOperatorAddress",
          "type": "address"
        }
      ],
      "name": "SetOperatorAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        }
      ],
      "name": "SetOperatorLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "SetOperatorName",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "SetOperatorStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStoppedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "SetOperatorStoppedValidatorCount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingAdmin",
          "type": "address"
        }
      ],
      "name": "SetPendingAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "river",
          "type": "address"
        }
      ],
      "name": "SetRiver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousTotalValidatorExitsRequested",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalValidatorExitsRequested",
          "type": "uint256"
        }
      ],
      "name": "SetTotalValidatorExitsRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "oldRequestedExits",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newRequestedExits",
          "type": "uint32"
        }
      ],
      "name": "UpdatedRequestedValidatorExitsUponStopped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32[]",
          "name": "stoppedValidatorCounts",
          "type": "uint32[]"
        }
      ],
      "name": "UpdatedStoppedValidators",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_keyCount",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_publicKeysAndSignatures",
          "type": "bytes"
        }
      ],
      "name": "addValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "demandValidatorExits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountToEmit",
          "type": "uint256"
        }
      ],
      "name": "forceFundedValidatorKeysEventEmission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentValidatorExitsDemand",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "getNextValidatorsToDepositFromActiveOperators",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "publicKeys",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getOperator",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "limit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "funded",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "requestedExits",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "keys",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "latestKeysEditBlockNumber",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "internalType": "struct OperatorsV2.Operator",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "getOperatorStoppedValidatorCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStoppedAndRequestedExitCounts",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStoppedValidatorCountPerOperator",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalStoppedValidatorCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalValidatorExitsRequested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_operatorIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorIndex",
          "type": "uint256"
        }
      ],
      "name": "getValidator",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "funded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_river",
          "type": "address"
        }
      ],
      "name": "initOperatorsRegistryV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initOperatorsRegistryV1_1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listActiveOperators",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "limit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "funded",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "requestedExits",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "keys",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "latestKeysEditBlockNumber",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "internalType": "struct OperatorsV2.Operator[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "pickNextValidatorsToDeposit",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "publicKeys",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "proposeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "removeValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_stoppedValidatorCounts",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256",
          "name": "_depositedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "reportStoppedValidatorCounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "requestValidatorExits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newOperatorAddress",
          "type": "address"
        }
      ],
      "name": "setOperatorAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_operatorIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_newLimits",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256",
          "name": "_snapshotBlock",
          "type": "uint256"
        }
      ],
      "name": "setOperatorLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_newName",
          "type": "string"
        }
      ],
      "name": "setOperatorName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_newStatus",
          "type": "bool"
        }
      ],
      "name": "setOperatorStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x75e89870984f16f6cf1de8049fd74c3267c6af70fafb9480520e15f9094de5ba",
  "receipt": {
    "to": null,
    "from": "0x341C40B94bF2afBFa42573cB78f16Ee15a056238",
    "contractAddress": "0xccfcA4493945879911907CEA0e319b28cEDA4f67",
    "transactionIndex": 13,
    "gasUsed": "3695377",
    "logsBloom": "0x
    "blockHash": "0x6b0b678137034627628060ce89c74a1cdbed75c6dd1e68117100aad4615dd205",
    "transactionHash": "0x75e89870984f16f6cf1de8049fd74c3267c6af70fafb9480520e15f9094de5ba",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 2321835,
        "transactionHash": "0x75e89870984f16f6cf1de8049fd74c3267c6af70fafb9480520e15f9094de5ba",
        "address": "0xccfcA4493945879911907CEA0e319b28cEDA4f67",
        "topics": [
          "0x1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a71"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 43,
        "blockHash": "0x6b0b678137034627628060ce89c74a1cdbed75c6dd1e68117100aad4615dd205"
      }
    ],
    "blockNumber": 2321835,
    "cumulativeGasUsed": "4957219",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b5a6c12eaf1e4350b818d936a5dc2fad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FundedKeyEventMigrationComplete\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"InactiveOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEmptyStoppedValidatorCountsArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEmptyString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFundedKeyDeletionAttempt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidKeyCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidKeysLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStoppedValidatorCountsSum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUnsortedIndexes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoExitRequestsToPerform\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keyCount\",\"type\":\"uint256\"}],\"name\":\"OperatorLimitTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundedKeyCount\",\"type\":\"uint256\"}],\"name\":\"OperatorLimitTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OperatorNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OperatorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"operatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"stoppedCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fundedCount\",\"type\":\"uint32\"}],\"name\":\"StoppedValidatorCountAboveFundedCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StoppedValidatorCountArrayShrinking\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StoppedValidatorCountsDecreased\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StoppedValidatorCountsTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnorderedOperatorList\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"}],\"name\":\"AddedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKeysAndSignatures\",\"type\":\"bytes\"}],\"name\":\"AddedValidatorKeys\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"publicKeys\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"deferred\",\"type\":\"bool\"}],\"name\":\"FundedValidatorKeys\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"cdata\",\"type\":\"bytes\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"latestKeysEditBlockNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"OperatorEditsAfterSnapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"OperatorLimitUnchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"RemovedValidatorKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"RequestedValidatorExits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousValidatorExitsDemand\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextValidatorExitsDemand\",\"type\":\"uint256\"}],\"name\":\"SetCurrentValidatorExitsDemand\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperatorAddress\",\"type\":\"address\"}],\"name\":\"SetOperatorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"SetOperatorLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"SetOperatorName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetOperatorStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStoppedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"SetOperatorStoppedValidatorCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"SetPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"river\",\"type\":\"address\"}],\"name\":\"SetRiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTotalValidatorExitsRequested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalValidatorExitsRequested\",\"type\":\"uint256\"}],\"name\":\"SetTotalValidatorExitsRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"oldRequestedExits\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newRequestedExits\",\"type\":\"uint32\"}],\"name\":\"UpdatedRequestedValidatorExitsUponStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"stoppedValidatorCounts\",\"type\":\"uint32[]\"}],\"name\":\"UpdatedStoppedValidators\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_keyCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_publicKeysAndSignatures\",\"type\":\"bytes\"}],\"name\":\"addValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"demandValidatorExits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToEmit\",\"type\":\"uint256\"}],\"name\":\"forceFundedValidatorKeysEventEmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentValidatorExitsDemand\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getNextValidatorsToDepositFromActiveOperators\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"publicKeys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getOperator\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"funded\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"requestedExits\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"keys\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"latestKeysEditBlockNumber\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"internalType\":\"struct OperatorsV2.Operator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getOperatorStoppedValidatorCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStoppedAndRequestedExitCounts\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStoppedValidatorCountPerOperator\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStoppedValidatorCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValidatorExitsRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorIndex\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"funded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_river\",\"type\":\"address\"}],\"name\":\"initOperatorsRegistryV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initOperatorsRegistryV1_1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listActiveOperators\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"funded\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"requestedExits\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"keys\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"latestKeysEditBlockNumber\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"internalType\":\"struct OperatorsV2.Operator[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"pickNextValidatorsToDeposit\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"publicKeys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"proposeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"removeValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_stoppedValidatorCounts\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"_depositedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"reportStoppedValidatorCounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"requestValidatorExits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOperatorAddress\",\"type\":\"address\"}],\"name\":\"setOperatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_operatorIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_newLimits\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"_snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"setOperatorLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"}],\"name\":\"setOperatorName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"setOperatorStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alluvial Finance Inc.\",\"errors\":{\"InactiveOperator(uint256)\":[{\"params\":{\"index\":\"The operator index\"}}],\"InvalidInitialization(uint256,uint256)\":[{\"params\":{\"expectedVersion\":\"The version that was expected\",\"version\":\"The version that was attempting to be initialized\"}}],\"OperatorLimitTooHigh(uint256,uint256,uint256)\":[{\"params\":{\"index\":\"The operator index\",\"keyCount\":\"The operator key count\",\"limit\":\"The new limit provided\"}}],\"OperatorLimitTooLow(uint256,uint256,uint256)\":[{\"params\":{\"fundedKeyCount\":\"The operator funded key count\",\"index\":\"The operator index\",\"limit\":\"The new limit provided\"}}],\"OperatorNotFound(uint256)\":[{\"params\":{\"index\":\"The provided index\"}},{\"params\":{\"index\":\"The provided index\"}}],\"Unauthorized(address)\":[{\"params\":{\"caller\":\"Address performing the call\"}}]},\"events\":{\"AddedOperator(uint256,string,address)\":{\"params\":{\"index\":\"The operator index\",\"name\":\"The operator display name\",\"operatorAddress\":\"The operator address\"}},\"AddedValidatorKeys(uint256,bytes)\":{\"details\":\"The public keys and signatures are concatenatedA public key is 48 bytes longA signature is 96 bytes long[P1, S1, P2, S2, ..., PN, SN] where N is the bytes length divided by (96 + 48)\",\"params\":{\"index\":\"The operator index\",\"publicKeysAndSignatures\":\"The concatenated public keys and signatures\"}},\"FundedValidatorKeys(uint256,bytes[],bool)\":{\"params\":{\"deferred\":\"True if event has been replayed in the context of a migration\",\"index\":\"The operator index\",\"publicKeys\":\"BLS Public key that got funded\"}},\"Initialize(uint256,bytes)\":{\"params\":{\"cdata\":\"Complete calldata that was used during the initialization\",\"version\":\"New version of the contracts\"}},\"OperatorEditsAfterSnapshot(uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"This means that we cannot assume that its key set is checked by the snapshotThis happens only if the limit was meant to be increased\",\"params\":{\"currentLimit\":\"The current operator limit\",\"index\":\"The operator index\",\"latestKeysEditBlockNumber\":\"The last block number at which the operator changed its keys\",\"newLimit\":\"The new operator limit that was attempted to be set\",\"snapshotBlock\":\"The block number of the snapshot\"}},\"OperatorLimitUnchanged(uint256,uint256)\":{\"params\":{\"index\":\"The operator index\",\"limit\":\"The limit of the operator\"}},\"RemovedValidatorKey(uint256,bytes)\":{\"params\":{\"index\":\"The operator index\",\"publicKey\":\"The BLS public key that has been removed\"}},\"RequestedValidatorExits(uint256,uint256)\":{\"params\":{\"count\":\"The count of requested exits\",\"index\":\"The operator index\"}},\"SetAdmin(address)\":{\"params\":{\"admin\":\"New admin address\"}},\"SetCurrentValidatorExitsDemand(uint256,uint256)\":{\"params\":{\"nextValidatorExitsDemand\":\"The new exit request demand\",\"previousValidatorExitsDemand\":\"The previous exit request demand\"}},\"SetOperatorAddress(uint256,address)\":{\"params\":{\"index\":\"The operator index\",\"newOperatorAddress\":\"The new operator address\"}},\"SetOperatorLimit(uint256,uint256)\":{\"params\":{\"index\":\"The operator index\",\"newLimit\":\"The new operator staking limit\"}},\"SetOperatorName(uint256,string)\":{\"params\":{\"index\":\"The operator index\",\"newName\":\"The new display name\"}},\"SetOperatorStatus(uint256,bool)\":{\"params\":{\"active\":\"True if the operator is active\",\"index\":\"The operator index\"}},\"SetOperatorStoppedValidatorCount(uint256,uint256)\":{\"params\":{\"index\":\"The operator index\",\"newStoppedValidatorCount\":\"The new stopped validator count\"}},\"SetPendingAdmin(address)\":{\"params\":{\"pendingAdmin\":\"New pending admin address\"}},\"SetRiver(address)\":{\"params\":{\"river\":\"The new river address\"}},\"SetTotalValidatorExitsRequested(uint256,uint256)\":{\"params\":{\"newTotalValidatorExitsRequested\":\"The new total requested exit\",\"previousTotalValidatorExitsRequested\":\"The previous total requested exit\"}},\"UpdatedRequestedValidatorExitsUponStopped(uint256,uint32,uint32)\":{\"params\":{\"index\":\"The operator index\",\"newRequestedExits\":\"The new requested exit count\",\"oldRequestedExits\":\"The old requested exit count\"}},\"UpdatedStoppedValidators(uint32[])\":{\"params\":{\"stoppedValidatorCounts\":\"The new stopped validator counts\"}}},\"kind\":\"dev\",\"methods\":{\"acceptAdmin()\":{\"details\":\"Only callable by the pending admin. Resets the pending admin if succesful.\"},\"addOperator(string,address)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_name\":\"The name identifying the operator\",\"_operator\":\"The address representing the operator, receiving the rewards\"},\"returns\":{\"_0\":\"The index of the new operator\"}},\"addValidators(uint256,uint32,bytes)\":{\"details\":\"Only callable by the administrator or the operator address\",\"params\":{\"_index\":\"The operator index\",\"_keyCount\":\"The amount of keys provided\",\"_publicKeysAndSignatures\":\"Public keys of the validator, concatenated\"}},\"demandValidatorExits(uint256,uint256)\":{\"details\":\"This method is only callable by the river contract, and to actually forward the information to the node operators via event emission, the unprotected requestValidatorExits method must be called\",\"params\":{\"_count\":\"The amount of exit requests to add to the demand\",\"_depositedValidatorCount\":\"The total deposited validator count\"}},\"forceFundedValidatorKeysEventEmission(uint256)\":{\"params\":{\"_amountToEmit\":\"The amount of events to emit at maximum in this call\"}},\"getAdmin()\":{\"returns\":{\"_0\":\"The admin address\"}},\"getCurrentValidatorExitsDemand()\":{\"returns\":{\"_0\":\"The current exit request demand\"}},\"getNextValidatorsToDepositFromActiveOperators(uint256)\":{\"params\":{\"_count\":\"Count of validators that would be funded next\"},\"returns\":{\"publicKeys\":\"An array of fundable public keys\",\"signatures\":\"An array of signatures linked to the public keys\"}},\"getOperator(uint256)\":{\"params\":{\"_index\":\"The index of the operator\"},\"returns\":{\"_0\":\"The details of the operator\"}},\"getOperatorCount()\":{\"returns\":{\"_0\":\"The operator count\"}},\"getOperatorStoppedValidatorCount(uint256)\":{\"params\":{\"_idx\":\"The index of the operator\"},\"returns\":{\"_0\":\"The stopped validator count of the operator\"}},\"getPendingAdmin()\":{\"returns\":{\"_0\":\"The pending admin address\"}},\"getRiver()\":{\"returns\":{\"_0\":\"The address of River\"}},\"getStoppedAndRequestedExitCounts()\":{\"returns\":{\"_0\":\"The total stopped count\",\"_1\":\"The total requested exit count\"}},\"getStoppedValidatorCountPerOperator()\":{\"returns\":{\"_0\":\"The stopped validator array\"}},\"getTotalStoppedValidatorCount()\":{\"returns\":{\"_0\":\"The total stopped validator count\"}},\"getTotalValidatorExitsRequested()\":{\"returns\":{\"_0\":\"The total requested exit count\"}},\"getValidator(uint256,uint256)\":{\"params\":{\"_operatorIndex\":\"The index of the operator\",\"_validatorIndex\":\"The index of the validator\"},\"returns\":{\"funded\":\"True if validator has been funded\",\"publicKey\":\"The public key of the validator\",\"signature\":\"The signature used during deposit\"}},\"initOperatorsRegistryV1(address,address)\":{\"params\":{\"_admin\":\"Admin in charge of managing operators\",\"_river\":\"Address of River system\"}},\"listActiveOperators()\":{\"returns\":{\"_0\":\"The list of active operators and their details\"}},\"pickNextValidatorsToDeposit(uint256)\":{\"params\":{\"_count\":\"Max amount of keys requested\"},\"returns\":{\"publicKeys\":\"An array of public keys\",\"signatures\":\"An array of signatures linked to the public keys\"}},\"proposeAdmin(address)\":{\"details\":\"This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.\",\"params\":{\"_newAdmin\":\"New admin address\"}},\"removeValidators(uint256,uint256[])\":{\"details\":\"Only callable by the administrator or the operator addressThe indexes must be provided sorted in decreasing order and duplicate-free, otherwise the method will revertThe operator limit will be set to the lowest deleted key index if the operator's limit wasn't equal to its total key countThe operator or the admin cannot remove funded keysWhen removing validators, the indexes of specific unfunded keys can be changed in order to properlyremove the keys from the storage array. Beware of this specific behavior when chaining calls as thetargeted public key indexes can point to a different key after a first call was made and performedsome swaps\",\"params\":{\"_index\":\"The operator index\",\"_indexes\":\"The indexes of the keys to remove\"}},\"reportStoppedValidatorCounts(uint32[],uint256)\":{\"params\":{\"_depositedValidatorCount\":\"The total deposited validator count\",\"_stoppedValidatorCounts\":\"The new stopped validators array\"}},\"requestValidatorExits(uint256)\":{\"params\":{\"_count\":\"Max amount of exits to request\"}},\"setOperatorAddress(uint256,address)\":{\"details\":\"Only callable by the administrator or the previous operator address\",\"params\":{\"_index\":\"The operator index\",\"_newOperatorAddress\":\"The new address of the operator\"}},\"setOperatorLimits(uint256[],uint32[],uint256)\":{\"details\":\"Only callable by the administratorThe operator indexes must be in increasing order and contain no duplicateThe limit cannot exceed the total key count of the operatorThe _indexes and _newLimits must have the same length.Each limit value is applied to the operator index at the same index in the _indexes array.\",\"params\":{\"_newLimits\":\"The new staking limit of the operators\",\"_operatorIndexes\":\"The operator indexes, in increasing order and duplicate free\",\"_snapshotBlock\":\"The block number at which the snapshot was computed\"}},\"setOperatorName(uint256,string)\":{\"details\":\"Only callable by the administrator or the operator\",\"params\":{\"_index\":\"The operator index\",\"_newName\":\"The new operator name\"}},\"setOperatorStatus(uint256,bool)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_index\":\"The operator index\",\"_newStatus\":\"The new status of the operator\"}},\"version()\":{\"returns\":{\"_0\":\"Version of the contract\"}}},\"title\":\"Operators Registry (v1)\",\"version\":1},\"userdoc\":{\"errors\":{\"FundedKeyEventMigrationComplete()\":[{\"notice\":\"Emitted when the event rebroadcasting is done and we attempt to broadcast new events\"}],\"InactiveOperator(uint256)\":[{\"notice\":\"The calling operator is inactive\"}],\"InvalidArrayLengths()\":[{\"notice\":\"The provided operator and limits array have different lengths\"}],\"InvalidEmptyArray()\":[{\"notice\":\"The provided operator and limits array are empty\"}],\"InvalidEmptyStoppedValidatorCountsArray()\":[{\"notice\":\"Thrown when an invalid empty stopped validator array is provided\"}],\"InvalidEmptyString()\":[{\"notice\":\"The string is empty\"}],\"InvalidFundedKeyDeletionAttempt()\":[{\"notice\":\"A funded key deletion has been attempted\"}],\"InvalidIndexOutOfBounds()\":[{\"notice\":\"The index that is removed is out of bounds\"}],\"InvalidInitialization(uint256,uint256)\":[{\"notice\":\"An error occured during the initialization\"}],\"InvalidKeyCount()\":[{\"notice\":\"The provided key count is 0\"}],\"InvalidKeysLength()\":[{\"notice\":\"The provided concatenated keys do not have the expected length\"}],\"InvalidStoppedValidatorCountsSum()\":[{\"notice\":\"Thrown when the sum of stopped validators is invalid\"}],\"InvalidUnsortedIndexes()\":[{\"notice\":\"The index provided are not sorted properly (descending order)\"}],\"InvalidZeroAddress()\":[{\"notice\":\"The address is zero\"}],\"NoExitRequestsToPerform()\":[{\"notice\":\"Thrown when no exit requests can be performed\"}],\"OperatorLimitTooHigh(uint256,uint256,uint256)\":[{\"notice\":\"The value for the operator limit is too high\"}],\"OperatorLimitTooLow(uint256,uint256,uint256)\":[{\"notice\":\"The value for the limit is too low\"}],\"OperatorNotFound(uint256)\":[{\"notice\":\"The operator was not found\"},{\"notice\":\"The operator was not found\"}],\"SliceOutOfBounds()\":[{\"notice\":\"The slice is outside of the initial bytes bounds\"}],\"SliceOverflow()\":[{\"notice\":\"The length overflows an uint\"}],\"StoppedValidatorCountAboveFundedCount(uint256,uint32,uint32)\":[{\"notice\":\"The provided stopped validator count of an operator is above its funded validator count\"}],\"StoppedValidatorCountArrayShrinking()\":[{\"notice\":\"The provided stopped validator count array is shrinking\"}],\"StoppedValidatorCountsDecreased()\":[{\"notice\":\"Throw when an element in the stopped validator array is decreasing\"}],\"StoppedValidatorCountsTooHigh()\":[{\"notice\":\"Thrown when the number of elements in the array is too high compared to operator count\"}],\"Unauthorized(address)\":[{\"notice\":\"The operator is unauthorized for the caller\"}],\"UnorderedOperatorList()\":[{\"notice\":\"The provided list of operators is not in increasing order\"}]},\"events\":{\"AddedOperator(uint256,string,address)\":{\"notice\":\"A new operator has been added to the registry\"},\"AddedValidatorKeys(uint256,bytes)\":{\"notice\":\"The operator or the admin added new validator keys and signatures\"},\"FundedValidatorKeys(uint256,bytes[],bool)\":{\"notice\":\"A validator key got funded on the deposit contractThis event was introduced during a contract upgrade, in order to cover all possible public keys, this eventwill be replayed for past funded keys in order to have a complete coverage of all the funded public keys.In this particuliar scenario, the deferred value will be set to true, to indicate that we are not going to havethe expected additional events and side effects in the same transaction (deposit to official DepositContract etc ...) becausethe event was synthetically crafted.\"},\"Initialize(uint256,bytes)\":{\"notice\":\"Emitted when the contract is properly initialized\"},\"OperatorEditsAfterSnapshot(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"The operator edited its keys after the snapshot block\"},\"OperatorLimitUnchanged(uint256,uint256)\":{\"notice\":\"The call didn't alter the limit of the operator\"},\"RemovedValidatorKey(uint256,bytes)\":{\"notice\":\"The operator or the admin removed a public key and its signature from the registry\"},\"RequestedValidatorExits(uint256,uint256)\":{\"notice\":\"The requested exit count has been updated\"},\"SetAdmin(address)\":{\"notice\":\"The admin address changed\"},\"SetCurrentValidatorExitsDemand(uint256,uint256)\":{\"notice\":\"The exit request demand has been updated\"},\"SetOperatorAddress(uint256,address)\":{\"notice\":\"The operator address has been changed\"},\"SetOperatorLimit(uint256,uint256)\":{\"notice\":\"The operator limit has been changed\"},\"SetOperatorName(uint256,string)\":{\"notice\":\"The operator display name has been changed\"},\"SetOperatorStatus(uint256,bool)\":{\"notice\":\"The operator status has been changed\"},\"SetOperatorStoppedValidatorCount(uint256,uint256)\":{\"notice\":\"The operator stopped validator count has been changed\"},\"SetPendingAdmin(address)\":{\"notice\":\"The pending admin address changed\"},\"SetRiver(address)\":{\"notice\":\"The stored river address has been changed\"},\"SetTotalValidatorExitsRequested(uint256,uint256)\":{\"notice\":\"The total requested exit has been updated\"},\"UpdatedRequestedValidatorExitsUponStopped(uint256,uint32,uint32)\":{\"notice\":\"The requested exit count has been update to fill the gap with the reported stopped count\"},\"UpdatedStoppedValidators(uint32[])\":{\"notice\":\"The stopped validator array has been changedA validator is considered stopped if exiting, exited or slashedThis event is emitted when the oracle reports new stopped validators counts\"}},\"kind\":\"user\",\"methods\":{\"acceptAdmin()\":{\"notice\":\"Accept the transfer of ownership\"},\"addOperator(string,address)\":{\"notice\":\"Adds an operator to the registry\"},\"addValidators(uint256,uint32,bytes)\":{\"notice\":\"Adds new keys for an operator\"},\"demandValidatorExits(uint256,uint256)\":{\"notice\":\"Increases the exit request demand\"},\"forceFundedValidatorKeysEventEmission(uint256)\":{\"notice\":\"Utility to force the broadcasting of events. Will keep its progress in storage to prevent being DoSed by the number of keys\"},\"getAdmin()\":{\"notice\":\"Retrieves the current admin address\"},\"getCurrentValidatorExitsDemand()\":{\"notice\":\"Get the current exit request demand waiting to be triggeredThis value is the amount of exit requests that are demanded and not yet performed by the contract\"},\"getNextValidatorsToDepositFromActiveOperators(uint256)\":{\"notice\":\"Get the next validators that would be funded\"},\"getOperator(uint256)\":{\"notice\":\"Get operator details\"},\"getOperatorCount()\":{\"notice\":\"Get operator count\"},\"getOperatorStoppedValidatorCount(uint256)\":{\"notice\":\"Retrieve the stopped validator count for an operator index\"},\"getPendingAdmin()\":{\"notice\":\"Retrieve the current pending admin address\"},\"getRiver()\":{\"notice\":\"Retrieve the River address\"},\"getStoppedAndRequestedExitCounts()\":{\"notice\":\"Retrieve the total stopped and requested exit count\"},\"getStoppedValidatorCountPerOperator()\":{\"notice\":\"Retrieve the raw stopped validators array from storage\"},\"getTotalStoppedValidatorCount()\":{\"notice\":\"Retrieve the total stopped validator count\"},\"getTotalValidatorExitsRequested()\":{\"notice\":\"Retrieve the total requested exit countThis value is the amount of exit requests that have been performed, emitting an event for operators to catch\"},\"getValidator(uint256,uint256)\":{\"notice\":\"Get the details of a validator\"},\"initOperatorsRegistryV1(address,address)\":{\"notice\":\"Initializes the operators registry\"},\"initOperatorsRegistryV1_1()\":{\"notice\":\"Initializes the operators registry for V1_1\"},\"listActiveOperators()\":{\"notice\":\"Retrieve the active operator set\"},\"pickNextValidatorsToDeposit(uint256)\":{\"notice\":\"Retrieve validator keys based on operator statuses\"},\"proposeAdmin(address)\":{\"notice\":\"Proposes a new address as admin\"},\"removeValidators(uint256,uint256[])\":{\"notice\":\"Remove validator keys\"},\"reportStoppedValidatorCounts(uint32[],uint256)\":{\"notice\":\"Allows river to override the stopped validators arrayThis actions happens during the Oracle report processing\"},\"requestValidatorExits(uint256)\":{\"notice\":\"Public endpoint to consume the exit request demand and perform the actual exit requestsThe selection algorithm will pick validators based on their active validator countsThis value is computed by using the count of funded keys and taking into account the stopped validator counts and exit requests\"},\"setOperatorAddress(uint256,address)\":{\"notice\":\"Changes the operator address of an operator\"},\"setOperatorLimits(uint256[],uint32[],uint256)\":{\"notice\":\"Changes the operator staking limit\"},\"setOperatorName(uint256,string)\":{\"notice\":\"Changes the operator name\"},\"setOperatorStatus(uint256,bool)\":{\"notice\":\"Changes the operator status\"},\"version()\":{\"notice\":\"Retrieves the version of the contract\"}},\"notice\":\"This contract handles the list of operators and their keys\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/OperatorsRegistry.1.sol\":\"OperatorsRegistryV1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/src/Administrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"./interfaces/IAdministrable.sol\\\";\\n\\nimport \\\"./libraries/LibAdministrable.sol\\\";\\nimport \\\"./libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrable\\n/// @author Alluvial Finance Inc.\\n/// @notice This contract handles the administration of the contracts\\nabstract contract Administrable is IAdministrable {\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() {\\n        if (msg.sender != LibAdministrable._getAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyPendingAdmin() {\\n        if (msg.sender != LibAdministrable._getPendingAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getAdmin() external view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getPendingAdmin() external view returns (address) {\\n        return LibAdministrable._getPendingAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function proposeAdmin(address _newAdmin) external onlyAdmin {\\n        _setPendingAdmin(_newAdmin);\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function acceptAdmin() external onlyPendingAdmin {\\n        _setAdmin(LibAdministrable._getPendingAdmin());\\n        _setPendingAdmin(address(0));\\n    }\\n\\n    /// @notice Internal utility to set the admin address\\n    /// @param _admin Address to set as admin\\n    function _setAdmin(address _admin) internal {\\n        LibAdministrable._setAdmin(_admin);\\n        emit SetAdmin(_admin);\\n    }\\n\\n    /// @notice Internal utility to set the pending admin address\\n    /// @param _pendingAdmin Address to set as pending admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        LibAdministrable._setPendingAdmin(_pendingAdmin);\\n        emit SetPendingAdmin(_pendingAdmin);\\n    }\\n\\n    /// @notice Internal utility to retrieve the address of the current admin\\n    /// @return The address of admin\\n    function _getAdmin() internal view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n}\\n\",\"keccak256\":\"0xe844d17bbc5f95455be27819600a504f83891e7f9fde030fb88c4a4cbb272f76\",\"license\":\"BUSL-1.1\"},\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\n/// @title Initializable\\n/// @author Alluvial Finance Inc.\\n/// @notice This contract ensures that initializers are called only once per version\\ncontract Initializable {\\n    /// @notice Disable initialization on implementations\\n    constructor() {\\n        Version.set(type(uint256).max);\\n        emit Initialize(type(uint256).max, msg.data);\\n    }\\n\\n    /// @notice An error occured during the initialization\\n    /// @param version The version that was attempting to be initialized\\n    /// @param expectedVersion The version that was expected\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    /// @notice Emitted when the contract is properly initialized\\n    /// @param version New version of the contracts\\n    /// @param cdata Complete calldata that was used during the initialization\\n    event Initialize(uint256 version, bytes cdata);\\n\\n    /// @notice Use this modifier on initializers along with a hard-coded version number\\n    /// @param _version Version to initialize\\n    modifier init(uint256 _version) {\\n        if (_version != Version.get()) {\\n            revert InvalidInitialization(_version, Version.get());\\n        }\\n        Version.set(_version + 1); // prevents reentrency on the called method\\n        _;\\n        emit Initialize(_version, msg.data);\\n    }\\n}\\n\",\"keccak256\":\"0xd371aeefbb5ed0d3d3b6efdd70044eb949161e6f534730fd0868f85a204c76c9\",\"license\":\"BUSL-1.1\"},\"contracts/src/OperatorsRegistry.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"./interfaces/IOperatorRegistry.1.sol\\\";\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\nimport \\\"./interfaces/IProtocolVersion.sol\\\";\\n\\nimport \\\"./libraries/LibUint256.sol\\\";\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./Administrable.sol\\\";\\n\\nimport \\\"./state/operatorsRegistry/Operators.1.sol\\\";\\nimport \\\"./state/operatorsRegistry/Operators.2.sol\\\";\\nimport \\\"./state/operatorsRegistry/ValidatorKeys.sol\\\";\\nimport \\\"./state/operatorsRegistry/TotalValidatorExitsRequested.sol\\\";\\nimport \\\"./state/operatorsRegistry/CurrentValidatorExitsDemand.sol\\\";\\nimport \\\"./state/shared/RiverAddress.sol\\\";\\n\\nimport \\\"./state/migration/OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex.sol\\\";\\nimport \\\"./state/migration/OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.sol\\\";\\n\\n/// @title Operators Registry (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This contract handles the list of operators and their keys\\ncontract OperatorsRegistryV1 is IOperatorsRegistryV1, Initializable, Administrable, IProtocolVersion {\\n    /// @notice Maximum validators given to an operator per selection loop round\\n    uint256 internal constant MAX_VALIDATOR_ATTRIBUTION_PER_ROUND = 5;\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function initOperatorsRegistryV1(address _admin, address _river) external init(0) {\\n        _setAdmin(_admin);\\n        RiverAddress.set(_river);\\n        emit SetRiver(_river);\\n    }\\n\\n    /// @notice Internal migration utility to migrate all operators to OperatorsV2 format\\n    function _migrateOperators_V1_1() internal {\\n        uint256 opCount = OperatorsV1.getCount();\\n\\n        for (uint256 idx = 0; idx < opCount;) {\\n            OperatorsV1.Operator memory oldOperatorValue = OperatorsV1.get(idx);\\n\\n            OperatorsV2.push(\\n                OperatorsV2.Operator({\\n                    limit: uint32(oldOperatorValue.limit),\\n                    funded: uint32(oldOperatorValue.funded),\\n                    requestedExits: 0,\\n                    keys: uint32(oldOperatorValue.keys),\\n                    latestKeysEditBlockNumber: uint64(oldOperatorValue.latestKeysEditBlockNumber),\\n                    active: oldOperatorValue.active,\\n                    name: oldOperatorValue.name,\\n                    operator: oldOperatorValue.operator\\n                })\\n            );\\n\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n    }\\n\\n    /// MIGRATION: FUNDED VALIDATOR KEY EVENT REBROADCASTING\\n    /// As the event for funded keys was moved from River to this contract because we needed to be able to bind\\n    /// operator indexes to public keys, we need to rebroadcast the past funded validator keys with the new event\\n    /// to keep retro-compatibility\\n\\n    /// Emitted when the event rebroadcasting is done and we attempt to broadcast new events\\n    error FundedKeyEventMigrationComplete();\\n\\n    /// Utility to force the broadcasting of events. Will keep its progress in storage to prevent being DoSed by the number of keys\\n    /// @param _amountToEmit The amount of events to emit at maximum in this call\\n    function forceFundedValidatorKeysEventEmission(uint256 _amountToEmit) external {\\n        uint256 operatorIndex = OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.get();\\n        if (operatorIndex == type(uint256).max) {\\n            revert FundedKeyEventMigrationComplete();\\n        }\\n        if (OperatorsV2.getCount() == 0) {\\n            OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.set(type(uint256).max);\\n            return;\\n        }\\n        uint256 keyIndex = OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex.get();\\n        while (_amountToEmit > 0 && operatorIndex != type(uint256).max) {\\n            OperatorsV2.Operator memory operator = OperatorsV2.get(operatorIndex);\\n\\n            (bytes[] memory publicKeys,) = ValidatorKeys.getKeys(\\n                operatorIndex, keyIndex, LibUint256.min(_amountToEmit, operator.funded - keyIndex)\\n            );\\n            emit FundedValidatorKeys(operatorIndex, publicKeys, true);\\n            if (keyIndex + publicKeys.length == operator.funded) {\\n                keyIndex = 0;\\n                if (operatorIndex == OperatorsV2.getCount() - 1) {\\n                    operatorIndex = type(uint256).max;\\n                } else {\\n                    unchecked {\\n                        ++operatorIndex;\\n                    }\\n                }\\n            } else {\\n                keyIndex += publicKeys.length;\\n            }\\n            _amountToEmit -= publicKeys.length;\\n        }\\n        OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.set(operatorIndex);\\n        OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex.set(keyIndex);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function initOperatorsRegistryV1_1() external init(1) {\\n        _migrateOperators_V1_1();\\n    }\\n\\n    /// @notice Prevent unauthorized calls\\n    modifier onlyRiver() virtual {\\n        if (msg.sender != RiverAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents anyone except the admin or the given operator to make the call. Also checks if operator is active\\n    /// @notice The admin is able to call this method on behalf of any operator, even if inactive\\n    /// @param _index The index identifying the operator\\n    modifier onlyOperatorOrAdmin(uint256 _index) {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n            return;\\n        }\\n        OperatorsV2.Operator storage operator = OperatorsV2.get(_index);\\n        if (!operator.active) {\\n            revert InactiveOperator(_index);\\n        }\\n        if (msg.sender != operator.operator) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getRiver() external view returns (address) {\\n        return RiverAddress.get();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getOperator(uint256 _index) external view returns (OperatorsV2.Operator memory) {\\n        return OperatorsV2.get(_index);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getOperatorStoppedValidatorCount(uint256 _idx) external view returns (uint32) {\\n        return _getStoppedValidatorsCount(_idx);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getTotalStoppedValidatorCount() external view returns (uint32) {\\n        return _getTotalStoppedValidatorCount();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getTotalValidatorExitsRequested() external view returns (uint256) {\\n        return TotalValidatorExitsRequested.get();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getCurrentValidatorExitsDemand() external view returns (uint256) {\\n        return CurrentValidatorExitsDemand.get();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getStoppedAndRequestedExitCounts() external view returns (uint32, uint256) {\\n        return\\n            (_getTotalStoppedValidatorCount(), TotalValidatorExitsRequested.get() + CurrentValidatorExitsDemand.get());\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getOperatorCount() external view returns (uint256) {\\n        return OperatorsV2.getCount();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getStoppedValidatorCountPerOperator() external view returns (uint32[] memory) {\\n        uint32[] memory completeList = OperatorsV2.getStoppedValidators();\\n        uint256 listLength = completeList.length;\\n\\n        if (listLength > 0) {\\n            assembly {\\n                // no need to use free memory pointer as we reuse the same memory range\\n\\n                // erase previous word storing length\\n                mstore(completeList, 0)\\n\\n                // move memory pointer up by a word\\n                completeList := add(completeList, 0x20)\\n\\n                // store updated length at new memory pointer location\\n                mstore(completeList, sub(listLength, 1))\\n            }\\n        }\\n\\n        return completeList;\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getValidator(uint256 _operatorIndex, uint256 _validatorIndex)\\n        external\\n        view\\n        returns (bytes memory publicKey, bytes memory signature, bool funded)\\n    {\\n        (publicKey, signature) = ValidatorKeys.get(_operatorIndex, _validatorIndex);\\n        funded = _validatorIndex < OperatorsV2.get(_operatorIndex).funded;\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getNextValidatorsToDepositFromActiveOperators(uint256 _count)\\n        external\\n        view\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        (OperatorsV2.CachedOperator[] memory operators, uint256 fundableOperatorCount) = OperatorsV2.getAllFundable();\\n\\n        if (fundableOperatorCount == 0) {\\n            return (publicKeys, signatures);\\n        }\\n\\n        _updateCountOfPickedValidatorsForEachOperator(operators, fundableOperatorCount, _count);\\n\\n        // we loop on all operators\\n        for (uint256 idx = 0; idx < fundableOperatorCount; ++idx) {\\n            // if we picked keys on any operator, we extract the keys from storage and concatenate them in the result\\n            // we then update the funded value\\n            if (operators[idx].picked > 0) {\\n                (bytes[] memory _publicKeys, bytes[] memory _signatures) =\\n                    ValidatorKeys.getKeys(operators[idx].index, operators[idx].funded, operators[idx].picked);\\n                publicKeys = _concatenateByteArrays(publicKeys, _publicKeys);\\n                signatures = _concatenateByteArrays(signatures, _signatures);\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function listActiveOperators() external view returns (OperatorsV2.Operator[] memory) {\\n        return OperatorsV2.getAllActive();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function reportStoppedValidatorCounts(uint32[] calldata _stoppedValidatorCounts, uint256 _depositedValidatorCount)\\n        external\\n        onlyRiver\\n    {\\n        _setStoppedValidatorCounts(_stoppedValidatorCounts, _depositedValidatorCount);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function addOperator(string calldata _name, address _operator) external onlyAdmin returns (uint256) {\\n        OperatorsV2.Operator memory newOperator = OperatorsV2.Operator({\\n            active: true,\\n            operator: _operator,\\n            name: _name,\\n            limit: 0,\\n            funded: 0,\\n            keys: 0,\\n            requestedExits: 0,\\n            latestKeysEditBlockNumber: uint64(block.number)\\n        });\\n\\n        uint256 operatorIndex = OperatorsV2.push(newOperator) - 1;\\n\\n        emit AddedOperator(operatorIndex, _name, _operator);\\n        return operatorIndex;\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorAddress(uint256 _index, address _newOperatorAddress) external onlyOperatorOrAdmin(_index) {\\n        LibSanitize._notZeroAddress(_newOperatorAddress);\\n        OperatorsV2.Operator storage operator = OperatorsV2.get(_index);\\n\\n        operator.operator = _newOperatorAddress;\\n\\n        emit SetOperatorAddress(_index, _newOperatorAddress);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorName(uint256 _index, string calldata _newName) external onlyOperatorOrAdmin(_index) {\\n        LibSanitize._notEmptyString(_newName);\\n        OperatorsV2.Operator storage operator = OperatorsV2.get(_index);\\n        operator.name = _newName;\\n\\n        emit SetOperatorName(_index, _newName);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorStatus(uint256 _index, bool _newStatus) external onlyAdmin {\\n        OperatorsV2.Operator storage operator = OperatorsV2.get(_index);\\n        operator.active = _newStatus;\\n\\n        emit SetOperatorStatus(_index, _newStatus);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorLimits(\\n        uint256[] calldata _operatorIndexes,\\n        uint32[] calldata _newLimits,\\n        uint256 _snapshotBlock\\n    ) external onlyAdmin {\\n        uint256 _operatorIndexesLength = _operatorIndexes.length;\\n        if (_operatorIndexesLength != _newLimits.length) {\\n            revert InvalidArrayLengths();\\n        }\\n        if (_operatorIndexesLength == 0) {\\n            revert InvalidEmptyArray();\\n        }\\n        for (uint256 idx = 0; idx < _operatorIndexesLength;) {\\n            uint256 operatorIndex = _operatorIndexes[idx];\\n            uint32 newLimit = _newLimits[idx];\\n\\n            // prevents duplicates\\n            if (idx > 0 && !(operatorIndex > _operatorIndexes[idx - 1])) {\\n                revert UnorderedOperatorList();\\n            }\\n\\n            OperatorsV2.Operator storage operator = OperatorsV2.get(operatorIndex);\\n\\n            uint32 currentLimit = operator.limit;\\n            if (newLimit == currentLimit) {\\n                emit OperatorLimitUnchanged(operatorIndex, newLimit);\\n                unchecked {\\n                    ++idx;\\n                }\\n                continue;\\n            }\\n\\n            // we enter this condition if the operator edited its keys after the off-chain key audit was made\\n            // we will skip any limit update on that operator unless it was a decrease in the initial limit\\n            if (_snapshotBlock < operator.latestKeysEditBlockNumber && newLimit > currentLimit) {\\n                emit OperatorEditsAfterSnapshot(\\n                    operatorIndex, currentLimit, newLimit, operator.latestKeysEditBlockNumber, _snapshotBlock\\n                );\\n                unchecked {\\n                    ++idx;\\n                }\\n                continue;\\n            }\\n\\n            // otherwise, we check for limit invariants that shouldn't happen if the off-chain key audit\\n            // was made properly, and if everything is respected, we update the limit\\n\\n            if (newLimit > operator.keys) {\\n                revert OperatorLimitTooHigh(operatorIndex, newLimit, operator.keys);\\n            }\\n\\n            if (newLimit < operator.funded) {\\n                revert OperatorLimitTooLow(operatorIndex, newLimit, operator.funded);\\n            }\\n\\n            operator.limit = newLimit;\\n            emit SetOperatorLimit(operatorIndex, newLimit);\\n\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function addValidators(uint256 _index, uint32 _keyCount, bytes calldata _publicKeysAndSignatures)\\n        external\\n        onlyOperatorOrAdmin(_index)\\n    {\\n        if (_keyCount == 0) {\\n            revert InvalidKeyCount();\\n        }\\n\\n        if (\\n            _publicKeysAndSignatures.length\\n                != _keyCount * (ValidatorKeys.PUBLIC_KEY_LENGTH + ValidatorKeys.SIGNATURE_LENGTH)\\n        ) {\\n            revert InvalidKeysLength();\\n        }\\n\\n        OperatorsV2.Operator storage operator = OperatorsV2.get(_index);\\n        uint256 totalKeys = uint256(operator.keys);\\n        for (uint256 idx = 0; idx < _keyCount;) {\\n            bytes memory publicKeyAndSignature = LibBytes.slice(\\n                _publicKeysAndSignatures,\\n                idx * (ValidatorKeys.PUBLIC_KEY_LENGTH + ValidatorKeys.SIGNATURE_LENGTH),\\n                ValidatorKeys.PUBLIC_KEY_LENGTH + ValidatorKeys.SIGNATURE_LENGTH\\n            );\\n            ValidatorKeys.set(_index, totalKeys + idx, publicKeyAndSignature);\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        OperatorsV2.setKeys(_index, uint32(totalKeys) + _keyCount);\\n\\n        emit AddedValidatorKeys(_index, _publicKeysAndSignatures);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function removeValidators(uint256 _index, uint256[] calldata _indexes) external onlyOperatorOrAdmin(_index) {\\n        uint256 indexesLength = _indexes.length;\\n        if (indexesLength == 0) {\\n            revert InvalidKeyCount();\\n        }\\n\\n        OperatorsV2.Operator storage operator = OperatorsV2.get(_index);\\n\\n        uint32 totalKeys = operator.keys;\\n\\n        if (!(_indexes[0] < totalKeys)) {\\n            revert InvalidIndexOutOfBounds();\\n        }\\n\\n        uint256 lastIndex = _indexes[indexesLength - 1];\\n\\n        if (lastIndex < operator.funded) {\\n            revert InvalidFundedKeyDeletionAttempt();\\n        }\\n\\n        bool limitEqualsKeyCount = totalKeys == operator.limit;\\n        OperatorsV2.setKeys(_index, totalKeys - uint32(indexesLength));\\n\\n        uint256 idx;\\n        for (; idx < indexesLength;) {\\n            uint256 keyIndex = _indexes[idx];\\n\\n            if (idx > 0 && !(keyIndex < _indexes[idx - 1])) {\\n                revert InvalidUnsortedIndexes();\\n            }\\n\\n            unchecked {\\n                ++idx;\\n            }\\n\\n            uint256 lastKeyIndex = totalKeys - idx;\\n\\n            (bytes memory removedPublicKey,) = ValidatorKeys.get(_index, keyIndex);\\n            (bytes memory lastPublicKeyAndSignature) = ValidatorKeys.getRaw(_index, lastKeyIndex);\\n            ValidatorKeys.set(_index, keyIndex, lastPublicKeyAndSignature);\\n            ValidatorKeys.set(_index, lastKeyIndex, new bytes(0));\\n\\n            emit RemovedValidatorKey(_index, removedPublicKey);\\n        }\\n\\n        if (limitEqualsKeyCount) {\\n            operator.limit = operator.keys;\\n        } else if (lastIndex < operator.limit) {\\n            operator.limit = uint32(lastIndex);\\n        }\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function pickNextValidatorsToDeposit(uint256 _count)\\n        external\\n        onlyRiver\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        return _pickNextValidatorsToDepositFromActiveOperators(_count);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function requestValidatorExits(uint256 _count) external {\\n        uint256 currentValidatorExitsDemand = CurrentValidatorExitsDemand.get();\\n        uint256 exitRequestsToPerform = LibUint256.min(currentValidatorExitsDemand, _count);\\n        if (exitRequestsToPerform == 0) {\\n            revert NoExitRequestsToPerform();\\n        }\\n        uint256 savedCurrentValidatorExitsDemand = currentValidatorExitsDemand;\\n        currentValidatorExitsDemand -= _pickNextValidatorsToExitFromActiveOperators(exitRequestsToPerform);\\n\\n        _setCurrentValidatorExitsDemand(savedCurrentValidatorExitsDemand, currentValidatorExitsDemand);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function demandValidatorExits(uint256 _count, uint256 _depositedValidatorCount) external onlyRiver {\\n        uint256 currentValidatorExitsDemand = CurrentValidatorExitsDemand.get();\\n        uint256 totalValidatorExitsRequested = TotalValidatorExitsRequested.get();\\n        _count = LibUint256.min(\\n            _count, _depositedValidatorCount - (totalValidatorExitsRequested + currentValidatorExitsDemand)\\n        );\\n        if (_count > 0) {\\n            _setCurrentValidatorExitsDemand(currentValidatorExitsDemand, currentValidatorExitsDemand + _count);\\n        }\\n    }\\n\\n    /// @notice Internal utility to retrieve the total stopped validator count\\n    /// @return The total stopped validator count\\n    function _getTotalStoppedValidatorCount() internal view returns (uint32) {\\n        uint32[] storage stoppedValidatorCounts = OperatorsV2.getStoppedValidators();\\n        if (stoppedValidatorCounts.length == 0) {\\n            return 0;\\n        }\\n        return stoppedValidatorCounts[0];\\n    }\\n\\n    /// @notice Internal utility to set the current validator exits demand\\n    /// @param _currentValue The current value\\n    /// @param _newValue The new value\\n    function _setCurrentValidatorExitsDemand(uint256 _currentValue, uint256 _newValue) internal {\\n        CurrentValidatorExitsDemand.set(_newValue);\\n        emit SetCurrentValidatorExitsDemand(_currentValue, _newValue);\\n    }\\n\\n    /// @notice Internal structure to hold variables for the _setStoppedValidatorCounts method\\n    struct SetStoppedValidatorCountInternalVars {\\n        uint256 stoppedValidatorCountsLength;\\n        uint32[] currentStoppedValidatorCounts;\\n        uint256 currentStoppedValidatorCountsLength;\\n        uint32 totalStoppedValidatorCount;\\n        uint32 count;\\n        uint256 currentValidatorExitsDemand;\\n        uint256 cachedCurrentValidatorExitsDemand;\\n        uint256 totalRequestedExits;\\n        uint256 cachedTotalRequestedExits;\\n    }\\n\\n    /// @notice Internal utiltiy to set the stopped validator array after sanity checks\\n    /// @param _stoppedValidatorCounts The stopped validators counts for every operator + the total count in index 0\\n    /// @param _depositedValidatorCount The current deposited validator count\\n    function _setStoppedValidatorCounts(uint32[] calldata _stoppedValidatorCounts, uint256 _depositedValidatorCount)\\n        internal\\n    {\\n        SetStoppedValidatorCountInternalVars memory vars;\\n        // we check that the array is not empty\\n        vars.stoppedValidatorCountsLength = _stoppedValidatorCounts.length;\\n        if (vars.stoppedValidatorCountsLength == 0) {\\n            revert InvalidEmptyStoppedValidatorCountsArray();\\n        }\\n\\n        OperatorsV2.Operator[] storage operators = OperatorsV2.getAll();\\n\\n        // we check that the cells containing operator stopped values are no more than the current operator count\\n        if (vars.stoppedValidatorCountsLength - 1 > operators.length) {\\n            revert StoppedValidatorCountsTooHigh();\\n        }\\n\\n        vars.currentStoppedValidatorCounts = OperatorsV2.getStoppedValidators();\\n        vars.currentStoppedValidatorCountsLength = vars.currentStoppedValidatorCounts.length;\\n\\n        // we check that the number of stopped values is not decreasing\\n        if (vars.stoppedValidatorCountsLength < vars.currentStoppedValidatorCountsLength) {\\n            revert StoppedValidatorCountArrayShrinking();\\n        }\\n\\n        vars.totalStoppedValidatorCount = _stoppedValidatorCounts[0];\\n        vars.count = 0;\\n\\n        // create value to track unsollicited validator exits (e.g. to cover cases when Node Operator exit a validator without being requested to)\\n        vars.currentValidatorExitsDemand = CurrentValidatorExitsDemand.get();\\n        vars.cachedCurrentValidatorExitsDemand = vars.currentValidatorExitsDemand;\\n        vars.totalRequestedExits = TotalValidatorExitsRequested.get();\\n        vars.cachedTotalRequestedExits = vars.totalRequestedExits;\\n\\n        uint256 idx = 1;\\n        uint256 unsollicitedExitsSum;\\n        for (; idx < vars.currentStoppedValidatorCountsLength;) {\\n            // if the previous array was long enough, we check that the values are not decreasing\\n            if (_stoppedValidatorCounts[idx] < vars.currentStoppedValidatorCounts[idx]) {\\n                revert StoppedValidatorCountsDecreased();\\n            }\\n\\n            // we check that the count of stopped validators is not above the funded validator count of an operator\\n            if (_stoppedValidatorCounts[idx] > operators[idx - 1].funded) {\\n                revert StoppedValidatorCountAboveFundedCount(\\n                    idx - 1, _stoppedValidatorCounts[idx], operators[idx - 1].funded\\n                );\\n            }\\n\\n            // if the stopped validator count is greater than its requested exit count, we update the requested exit count\\n            if (_stoppedValidatorCounts[idx] > operators[idx - 1].requestedExits) {\\n                emit UpdatedRequestedValidatorExitsUponStopped(\\n                    idx - 1, operators[idx - 1].requestedExits, _stoppedValidatorCounts[idx]\\n                );\\n                unsollicitedExitsSum += _stoppedValidatorCounts[idx] - operators[idx - 1].requestedExits;\\n                operators[idx - 1].requestedExits = _stoppedValidatorCounts[idx];\\n            }\\n            emit SetOperatorStoppedValidatorCount(idx - 1, _stoppedValidatorCounts[idx]);\\n\\n            // we recompute the total to ensure it's not an invalid sum\\n            vars.count += _stoppedValidatorCounts[idx];\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        // In case of a new operator we do not check against the current stopped validator count (would revert OOB)\\n        for (; idx < vars.stoppedValidatorCountsLength;) {\\n            // we check that the count of stopped validators is not above the funded validator count of an operator\\n            if (_stoppedValidatorCounts[idx] > operators[idx - 1].funded) {\\n                revert StoppedValidatorCountAboveFundedCount(\\n                    idx - 1, _stoppedValidatorCounts[idx], operators[idx - 1].funded\\n                );\\n            }\\n\\n            // if the stopped validator count is greater than its requested exit count, we update the requested exit count\\n            if (_stoppedValidatorCounts[idx] > operators[idx - 1].requestedExits) {\\n                emit UpdatedRequestedValidatorExitsUponStopped(\\n                    idx - 1, operators[idx - 1].requestedExits, _stoppedValidatorCounts[idx]\\n                );\\n                unsollicitedExitsSum += _stoppedValidatorCounts[idx] - operators[idx - 1].requestedExits;\\n                operators[idx - 1].requestedExits = _stoppedValidatorCounts[idx];\\n            }\\n            emit SetOperatorStoppedValidatorCount(idx - 1, _stoppedValidatorCounts[idx]);\\n\\n            // we recompute the total to ensure it's not an invalid sum\\n            vars.count += _stoppedValidatorCounts[idx];\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        vars.totalRequestedExits += unsollicitedExitsSum;\\n        // we decrease the demand, considering unsollicited exits as if they were answering the demand\\n        vars.currentValidatorExitsDemand -= LibUint256.min(unsollicitedExitsSum, vars.currentValidatorExitsDemand);\\n\\n        if (vars.totalRequestedExits != vars.cachedTotalRequestedExits) {\\n            _setTotalValidatorExitsRequested(vars.cachedTotalRequestedExits, vars.totalRequestedExits);\\n        }\\n\\n        if (vars.currentValidatorExitsDemand != vars.cachedCurrentValidatorExitsDemand) {\\n            _setCurrentValidatorExitsDemand(vars.cachedCurrentValidatorExitsDemand, vars.currentValidatorExitsDemand);\\n        }\\n\\n        // we check that the total is matching the sum of the individual values\\n        if (vars.totalStoppedValidatorCount != vars.count) {\\n            revert InvalidStoppedValidatorCountsSum();\\n        }\\n        // we check that the total is not higher than the current deposited validator count\\n        if (vars.totalStoppedValidatorCount > _depositedValidatorCount) {\\n            revert StoppedValidatorCountsTooHigh();\\n        }\\n        // we set the new stopped validators counts\\n        OperatorsV2.setRawStoppedValidators(_stoppedValidatorCounts);\\n        emit UpdatedStoppedValidators(_stoppedValidatorCounts);\\n    }\\n\\n    /// @notice Internal utility to concatenate bytes arrays together\\n    /// @param _arr1 First array\\n    /// @param _arr2 Second array\\n    /// @return The result of the concatenation of _arr1 + _arr2\\n    function _concatenateByteArrays(bytes[] memory _arr1, bytes[] memory _arr2)\\n        internal\\n        pure\\n        returns (bytes[] memory)\\n    {\\n        bytes[] memory res = new bytes[](_arr1.length + _arr2.length);\\n        for (uint256 idx = 0; idx < _arr1.length;) {\\n            res[idx] = _arr1[idx];\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        for (uint256 idx = 0; idx < _arr2.length;) {\\n            res[idx + _arr1.length] = _arr2[idx];\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        return res;\\n    }\\n\\n    /// @notice Internal utility to verify if an operator has fundable keys during the selection process\\n    /// @param _operator The Operator structure in memory\\n    /// @return True if at least one fundable key is available\\n    function _hasFundableKeys(OperatorsV2.CachedOperator memory _operator) internal pure returns (bool) {\\n        return (_operator.funded + _operator.picked) < _operator.limit;\\n    }\\n\\n    /// @notice Internal utility to retrieve the actual stopped validator count of an operator from the reported array\\n    /// @param _operatorIndex The operator index\\n    /// @return The count of stopped validators\\n    function _getStoppedValidatorsCount(uint256 _operatorIndex) internal view returns (uint32) {\\n        return OperatorsV2._getStoppedValidatorCountAtIndex(OperatorsV2.getStoppedValidators(), _operatorIndex);\\n    }\\n\\n    /// @notice Internal utility to get the count of active validators during the deposit selection process\\n    /// @param _operator The Operator structure in memory\\n    /// @return The count of active validators for the operator\\n    function _getActiveValidatorCountForDeposits(OperatorsV2.CachedOperator memory _operator)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (_operator.funded + _operator.picked) - _getStoppedValidatorsCount(_operator.index);\\n    }\\n\\n    /// @notice Internal utility to retrieve _count or lower fundable keys\\n    /// @dev The selection process starts by retrieving the full list of active operators with at least one fundable key.\\n    /// @dev\\n    /// @dev An operator is considered to have at least one fundable key when their staking limit is higher than their funded key count.\\n    /// @dev\\n    /// @dev    isFundable = operator.active && operator.limit > operator.funded\\n    /// @dev\\n    /// @dev The internal utility will loop on all operators and select the operator with the lowest active validator count.\\n    /// @dev The active validator count is computed by subtracting the stopped validator count to the funded validator count.\\n    /// @dev\\n    /// @dev    activeValidatorCount = operator.funded - operator.stopped\\n    /// @dev\\n    /// @dev During the selection process, we keep in memory all previously selected operators and the number of given validators inside a field\\n    /// @dev called picked that only exists on the CachedOperator structure in memory.\\n    /// @dev\\n    /// @dev    isFundable = operator.active && operator.limit > (operator.funded + operator.picked)\\n    /// @dev    activeValidatorCount = (operator.funded + operator.picked) - operator.stopped\\n    /// @dev\\n    /// @dev When we reach the requested key count or when all available keys are used, we perform a final loop on all the operators and extract keys\\n    /// @dev if any operator has a positive picked count. We then update the storage counters and return the arrays with the public keys and signatures.\\n    /// @param _count Amount of keys required. Contract is expected to send _count or lower.\\n    /// @return publicKeys An array of fundable public keys\\n    /// @return signatures An array of signatures linked to the public keys\\n    function _pickNextValidatorsToDepositFromActiveOperators(uint256 _count)\\n        internal\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        (OperatorsV2.CachedOperator[] memory operators, uint256 fundableOperatorCount) = OperatorsV2.getAllFundable();\\n\\n        if (fundableOperatorCount == 0) {\\n            return (new bytes[](0), new bytes[](0));\\n        }\\n\\n        _updateCountOfPickedValidatorsForEachOperator(operators, fundableOperatorCount, _count);\\n\\n        // we loop on all operators\\n        for (uint256 idx = 0; idx < fundableOperatorCount; ++idx) {\\n            // if we picked keys on any operator, we extract the keys from storage and concatenate them in the result\\n            // we then update the funded value\\n            if (operators[idx].picked > 0) {\\n                (bytes[] memory _publicKeys, bytes[] memory _signatures) =\\n                    ValidatorKeys.getKeys(operators[idx].index, operators[idx].funded, operators[idx].picked);\\n                emit FundedValidatorKeys(operators[idx].index, _publicKeys, false);\\n                publicKeys = _concatenateByteArrays(publicKeys, _publicKeys);\\n                signatures = _concatenateByteArrays(signatures, _signatures);\\n                (OperatorsV2.get(operators[idx].index)).funded += operators[idx].picked;\\n            }\\n        }\\n    }\\n\\n    function _updateCountOfPickedValidatorsForEachOperator(\\n        OperatorsV2.CachedOperator[] memory operators,\\n        uint256 fundableOperatorCount,\\n        uint256 _count\\n    ) internal view {\\n        while (_count > 0) {\\n            // loop on operators to find the first that has fundable keys, taking into account previous loop round attributions\\n            uint256 selectedOperatorIndex = 0;\\n            for (; selectedOperatorIndex < fundableOperatorCount;) {\\n                if (_hasFundableKeys(operators[selectedOperatorIndex])) {\\n                    break;\\n                }\\n                unchecked {\\n                    ++selectedOperatorIndex;\\n                }\\n            }\\n\\n            // if we reach the end, we have allocated all keys\\n            if (selectedOperatorIndex == fundableOperatorCount) {\\n                break;\\n            }\\n\\n            // we start from the next operator and we try to find one that has fundable keys but a lower (funded + picked) - stopped value\\n            for (uint256 idx = selectedOperatorIndex + 1; idx < fundableOperatorCount;) {\\n                if (\\n                    _getActiveValidatorCountForDeposits(operators[idx])\\n                        < _getActiveValidatorCountForDeposits(operators[selectedOperatorIndex])\\n                        && _hasFundableKeys(operators[idx])\\n                ) {\\n                    selectedOperatorIndex = idx;\\n                }\\n                unchecked {\\n                    ++idx;\\n                }\\n            }\\n\\n            // we take the smallest value between limit - (funded + picked), _requestedAmount and MAX_VALIDATOR_ATTRIBUTION_PER_ROUND\\n            uint256 pickedKeyCount = LibUint256.min(\\n                LibUint256.min(\\n                    operators[selectedOperatorIndex].limit\\n                        - (operators[selectedOperatorIndex].funded + operators[selectedOperatorIndex].picked),\\n                    MAX_VALIDATOR_ATTRIBUTION_PER_ROUND\\n                ),\\n                _count\\n            );\\n\\n            // we update the cached picked amount\\n            operators[selectedOperatorIndex].picked += uint32(pickedKeyCount);\\n\\n            // we update the requested amount count\\n            _count -= pickedKeyCount;\\n        }\\n    }\\n\\n    /// @notice Internal utility to get the count of active validators during the exit selection process\\n    /// @param _operator The Operator structure in memory\\n    /// @return The count of active validators for the operator\\n    function _getActiveValidatorCountForExitRequests(OperatorsV2.CachedExitableOperator memory _operator)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        return _operator.funded - (_operator.requestedExits + _operator.picked);\\n    }\\n\\n    /// @notice Internal utility to pick the next validator counts to exit for every operator\\n    /// @param _count The count of validators to request exits for\\n    function _pickNextValidatorsToExitFromActiveOperators(uint256 _count) internal returns (uint256) {\\n        (OperatorsV2.CachedExitableOperator[] memory operators, uint256 exitableOperatorCount) =\\n            OperatorsV2.getAllExitable();\\n\\n        if (exitableOperatorCount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 initialExitRequestDemand = _count;\\n        uint256 totalRequestedExitsValue = TotalValidatorExitsRequested.get();\\n        uint256 totalRequestedExitsCopy = totalRequestedExitsValue;\\n\\n        // we loop to find the highest count of active validators, the number of operators that have this amount and the second highest amount\\n        while (_count > 0) {\\n            uint32 highestActiveCount = 0;\\n            uint32 secondHighestActiveCount = 0;\\n            uint32 siblings = 0;\\n\\n            for (uint256 idx = 0; idx < exitableOperatorCount;) {\\n                uint32 activeCount = _getActiveValidatorCountForExitRequests(operators[idx]);\\n\\n                if (activeCount == highestActiveCount) {\\n                    unchecked {\\n                        ++siblings;\\n                    }\\n                } else if (activeCount > highestActiveCount) {\\n                    secondHighestActiveCount = highestActiveCount;\\n                    highestActiveCount = activeCount;\\n                    siblings = 1;\\n                } else if (activeCount > secondHighestActiveCount) {\\n                    secondHighestActiveCount = activeCount;\\n                }\\n\\n                unchecked {\\n                    ++idx;\\n                }\\n            }\\n\\n            // we exited all exitable validators\\n            if (highestActiveCount == 0) {\\n                break;\\n            }\\n            // The optimal amount is how much we should dispatch to all the operators with the highest count for them to get the same amount\\n            // of active validators as the second highest count. We then take the minimum between this value and the total we need to exit\\n            uint32 optimalTotalDispatchCount =\\n                uint32(LibUint256.min((highestActiveCount - secondHighestActiveCount) * siblings, _count));\\n\\n            // We lookup the operators again to assign the exit requests\\n            uint256 rest = optimalTotalDispatchCount % siblings;\\n            uint32 baseExitRequestAmount = optimalTotalDispatchCount / siblings;\\n            for (uint256 idx = 0; idx < exitableOperatorCount;) {\\n                if (_getActiveValidatorCountForExitRequests(operators[idx]) == highestActiveCount) {\\n                    uint32 additionalRequestedExits = baseExitRequestAmount + (rest > 0 ? 1 : 0);\\n                    operators[idx].picked += additionalRequestedExits;\\n                    if (rest > 0) {\\n                        unchecked {\\n                            --rest;\\n                        }\\n                    }\\n                }\\n                unchecked {\\n                    ++idx;\\n                }\\n            }\\n\\n            totalRequestedExitsValue += optimalTotalDispatchCount;\\n            _count -= optimalTotalDispatchCount;\\n        }\\n\\n        // We loop over the operators and apply the change, also emit the exit request event\\n        for (uint256 idx = 0; idx < exitableOperatorCount;) {\\n            if (operators[idx].picked > 0) {\\n                uint256 opIndex = operators[idx].index;\\n                uint32 newRequestedExits = operators[idx].requestedExits + operators[idx].picked;\\n\\n                OperatorsV2.get(opIndex).requestedExits = newRequestedExits;\\n                emit RequestedValidatorExits(opIndex, newRequestedExits);\\n            }\\n\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        if (totalRequestedExitsValue != totalRequestedExitsCopy) {\\n            _setTotalValidatorExitsRequested(totalRequestedExitsCopy, totalRequestedExitsValue);\\n        }\\n\\n        return initialExitRequestDemand - _count;\\n    }\\n\\n    /// @notice Internal utility to set the total validator exits requested by the system\\n    /// @param _currentValue The current value of the total validator exits requested\\n    /// @param _newValue The new value of the total validator exits requested\\n    function _setTotalValidatorExitsRequested(uint256 _currentValue, uint256 _newValue) internal {\\n        TotalValidatorExitsRequested.set(_newValue);\\n        emit SetTotalValidatorExitsRequested(_currentValue, _newValue);\\n    }\\n\\n    /// @inheritdoc IProtocolVersion\\n    function version() external pure returns (string memory) {\\n        return \\\"1.2.1\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x0dfb73a471274f434b2392d6bdca24aa9df0bc72d94764a936ef701b0614b6b1\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Administrable Interface\\n/// @author Alluvial Finance Inc.\\n/// @notice This interface exposes methods to handle the ownership of the contracts\\ninterface IAdministrable {\\n    /// @notice The pending admin address changed\\n    /// @param pendingAdmin New pending admin address\\n    event SetPendingAdmin(address indexed pendingAdmin);\\n\\n    /// @notice The admin address changed\\n    /// @param admin New admin address\\n    event SetAdmin(address indexed admin);\\n\\n    /// @notice Retrieves the current admin address\\n    /// @return The admin address\\n    function getAdmin() external view returns (address);\\n\\n    /// @notice Retrieve the current pending admin address\\n    /// @return The pending admin address\\n    function getPendingAdmin() external view returns (address);\\n\\n    /// @notice Proposes a new address as admin\\n    /// @dev This security prevents setting an invalid address as an admin. The pending\\n    /// @dev admin has to claim its ownership of the contract, and prove that the new\\n    /// @dev address is able to perform regular transactions.\\n    /// @param _newAdmin New admin address\\n    function proposeAdmin(address _newAdmin) external;\\n\\n    /// @notice Accept the transfer of ownership\\n    /// @dev Only callable by the pending admin. Resets the pending admin if succesful.\\n    function acceptAdmin() external;\\n}\\n\",\"keccak256\":\"0xa125890056d930c3f1bfe09ea58b81fa01a1d1526092d0bcce9d38cd35aeec58\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IOperatorRegistry.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../state/operatorsRegistry/Operators.2.sol\\\";\\n\\n/// @title Operators Registry Interface (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This interface exposes methods to handle the list of operators and their keys\\ninterface IOperatorsRegistryV1 {\\n    /// @notice A new operator has been added to the registry\\n    /// @param index The operator index\\n    /// @param name The operator display name\\n    /// @param operatorAddress The operator address\\n    event AddedOperator(uint256 indexed index, string name, address indexed operatorAddress);\\n\\n    /// @notice The operator status has been changed\\n    /// @param index The operator index\\n    /// @param active True if the operator is active\\n    event SetOperatorStatus(uint256 indexed index, bool active);\\n\\n    /// @notice The operator limit has been changed\\n    /// @param index The operator index\\n    /// @param newLimit The new operator staking limit\\n    event SetOperatorLimit(uint256 indexed index, uint256 newLimit);\\n\\n    /// @notice The operator stopped validator count has been changed\\n    /// @param index The operator index\\n    /// @param newStoppedValidatorCount The new stopped validator count\\n    event SetOperatorStoppedValidatorCount(uint256 indexed index, uint256 newStoppedValidatorCount);\\n\\n    /// @notice The operator address has been changed\\n    /// @param index The operator index\\n    /// @param newOperatorAddress The new operator address\\n    event SetOperatorAddress(uint256 indexed index, address indexed newOperatorAddress);\\n\\n    /// @notice The operator display name has been changed\\n    /// @param index The operator index\\n    /// @param newName The new display name\\n    event SetOperatorName(uint256 indexed index, string newName);\\n\\n    /// @notice The operator or the admin added new validator keys and signatures\\n    /// @dev The public keys and signatures are concatenated\\n    /// @dev A public key is 48 bytes long\\n    /// @dev A signature is 96 bytes long\\n    /// @dev [P1, S1, P2, S2, ..., PN, SN] where N is the bytes length divided by (96 + 48)\\n    /// @param index The operator index\\n    /// @param publicKeysAndSignatures The concatenated public keys and signatures\\n    event AddedValidatorKeys(uint256 indexed index, bytes publicKeysAndSignatures);\\n\\n    /// @notice The operator or the admin removed a public key and its signature from the registry\\n    /// @param index The operator index\\n    /// @param publicKey The BLS public key that has been removed\\n    event RemovedValidatorKey(uint256 indexed index, bytes publicKey);\\n\\n    /// @notice The stored river address has been changed\\n    /// @param river The new river address\\n    event SetRiver(address indexed river);\\n\\n    /// @notice The operator edited its keys after the snapshot block\\n    /// @dev This means that we cannot assume that its key set is checked by the snapshot\\n    /// @dev This happens only if the limit was meant to be increased\\n    /// @param index The operator index\\n    /// @param currentLimit The current operator limit\\n    /// @param newLimit The new operator limit that was attempted to be set\\n    /// @param latestKeysEditBlockNumber The last block number at which the operator changed its keys\\n    /// @param snapshotBlock The block number of the snapshot\\n    event OperatorEditsAfterSnapshot(\\n        uint256 indexed index,\\n        uint256 currentLimit,\\n        uint256 newLimit,\\n        uint256 indexed latestKeysEditBlockNumber,\\n        uint256 indexed snapshotBlock\\n    );\\n\\n    /// @notice The call didn't alter the limit of the operator\\n    /// @param index The operator index\\n    /// @param limit The limit of the operator\\n    event OperatorLimitUnchanged(uint256 indexed index, uint256 limit);\\n\\n    /// @notice The stopped validator array has been changed\\n    /// @notice A validator is considered stopped if exiting, exited or slashed\\n    /// @notice This event is emitted when the oracle reports new stopped validators counts\\n    /// @param stoppedValidatorCounts The new stopped validator counts\\n    event UpdatedStoppedValidators(uint32[] stoppedValidatorCounts);\\n\\n    /// @notice The requested exit count has been updated\\n    /// @param index The operator index\\n    /// @param count The count of requested exits\\n    event RequestedValidatorExits(uint256 indexed index, uint256 count);\\n\\n    /// @notice The exit request demand has been updated\\n    /// @param previousValidatorExitsDemand The previous exit request demand\\n    /// @param nextValidatorExitsDemand The new exit request demand\\n    event SetCurrentValidatorExitsDemand(uint256 previousValidatorExitsDemand, uint256 nextValidatorExitsDemand);\\n\\n    /// @notice The total requested exit has been updated\\n    /// @param previousTotalValidatorExitsRequested The previous total requested exit\\n    /// @param newTotalValidatorExitsRequested The new total requested exit\\n    event SetTotalValidatorExitsRequested(\\n        uint256 previousTotalValidatorExitsRequested, uint256 newTotalValidatorExitsRequested\\n    );\\n\\n    /// @notice A validator key got funded on the deposit contract\\n    /// @notice This event was introduced during a contract upgrade, in order to cover all possible public keys, this event\\n    /// @notice will be replayed for past funded keys in order to have a complete coverage of all the funded public keys.\\n    /// @notice In this particuliar scenario, the deferred value will be set to true, to indicate that we are not going to have\\n    /// @notice the expected additional events and side effects in the same transaction (deposit to official DepositContract etc ...) because\\n    /// @notice the event was synthetically crafted.\\n    /// @param index The operator index\\n    /// @param publicKeys BLS Public key that got funded\\n    /// @param deferred True if event has been replayed in the context of a migration\\n    event FundedValidatorKeys(uint256 indexed index, bytes[] publicKeys, bool deferred);\\n\\n    /// @notice The requested exit count has been update to fill the gap with the reported stopped count\\n    /// @param index The operator index\\n    /// @param oldRequestedExits The old requested exit count\\n    /// @param newRequestedExits The new requested exit count\\n    event UpdatedRequestedValidatorExitsUponStopped(\\n        uint256 indexed index, uint32 oldRequestedExits, uint32 newRequestedExits\\n    );\\n\\n    /// @notice The calling operator is inactive\\n    /// @param index The operator index\\n    error InactiveOperator(uint256 index);\\n\\n    /// @notice A funded key deletion has been attempted\\n    error InvalidFundedKeyDeletionAttempt();\\n\\n    /// @notice The index provided are not sorted properly (descending order)\\n    error InvalidUnsortedIndexes();\\n\\n    /// @notice The provided operator and limits array have different lengths\\n    error InvalidArrayLengths();\\n\\n    /// @notice The provided operator and limits array are empty\\n    error InvalidEmptyArray();\\n\\n    /// @notice The provided key count is 0\\n    error InvalidKeyCount();\\n\\n    /// @notice The provided concatenated keys do not have the expected length\\n    error InvalidKeysLength();\\n\\n    /// @notice The index that is removed is out of bounds\\n    error InvalidIndexOutOfBounds();\\n\\n    /// @notice The value for the operator limit is too high\\n    /// @param index The operator index\\n    /// @param limit The new limit provided\\n    /// @param keyCount The operator key count\\n    error OperatorLimitTooHigh(uint256 index, uint256 limit, uint256 keyCount);\\n\\n    /// @notice The value for the limit is too low\\n    /// @param index The operator index\\n    /// @param limit The new limit provided\\n    /// @param fundedKeyCount The operator funded key count\\n    error OperatorLimitTooLow(uint256 index, uint256 limit, uint256 fundedKeyCount);\\n\\n    /// @notice The provided list of operators is not in increasing order\\n    error UnorderedOperatorList();\\n\\n    /// @notice Thrown when an invalid empty stopped validator array is provided\\n    error InvalidEmptyStoppedValidatorCountsArray();\\n\\n    /// @notice Thrown when the sum of stopped validators is invalid\\n    error InvalidStoppedValidatorCountsSum();\\n\\n    /// @notice Throw when an element in the stopped validator array is decreasing\\n    error StoppedValidatorCountsDecreased();\\n\\n    /// @notice Thrown when the number of elements in the array is too high compared to operator count\\n    error StoppedValidatorCountsTooHigh();\\n\\n    /// @notice Thrown when no exit requests can be performed\\n    error NoExitRequestsToPerform();\\n\\n    /// @notice The provided stopped validator count array is shrinking\\n    error StoppedValidatorCountArrayShrinking();\\n\\n    /// @notice The provided stopped validator count of an operator is above its funded validator count\\n    error StoppedValidatorCountAboveFundedCount(uint256 operatorIndex, uint32 stoppedCount, uint32 fundedCount);\\n\\n    /// @notice Initializes the operators registry\\n    /// @param _admin Admin in charge of managing operators\\n    /// @param _river Address of River system\\n    function initOperatorsRegistryV1(address _admin, address _river) external;\\n\\n    /// @notice Initializes the operators registry for V1_1\\n    function initOperatorsRegistryV1_1() external;\\n\\n    /// @notice Retrieve the River address\\n    /// @return The address of River\\n    function getRiver() external view returns (address);\\n\\n    /// @notice Get operator details\\n    /// @param _index The index of the operator\\n    /// @return The details of the operator\\n    function getOperator(uint256 _index) external view returns (OperatorsV2.Operator memory);\\n\\n    /// @notice Get operator count\\n    /// @return The operator count\\n    function getOperatorCount() external view returns (uint256);\\n\\n    /// @notice Retrieve the stopped validator count for an operator index\\n    /// @param _idx The index of the operator\\n    /// @return The stopped validator count of the operator\\n    function getOperatorStoppedValidatorCount(uint256 _idx) external view returns (uint32);\\n\\n    /// @notice Retrieve the total stopped validator count\\n    /// @return The total stopped validator count\\n    function getTotalStoppedValidatorCount() external view returns (uint32);\\n\\n    /// @notice Retrieve the total requested exit count\\n    /// @notice This value is the amount of exit requests that have been performed, emitting an event for operators to catch\\n    /// @return The total requested exit count\\n    function getTotalValidatorExitsRequested() external view returns (uint256);\\n\\n    /// @notice Get the current exit request demand waiting to be triggered\\n    /// @notice This value is the amount of exit requests that are demanded and not yet performed by the contract\\n    /// @return The current exit request demand\\n    function getCurrentValidatorExitsDemand() external view returns (uint256);\\n\\n    /// @notice Retrieve the total stopped and requested exit count\\n    /// @return The total stopped count\\n    /// @return The total requested exit count\\n    function getStoppedAndRequestedExitCounts() external view returns (uint32, uint256);\\n\\n    /// @notice Retrieve the raw stopped validators array from storage\\n    /// @return The stopped validator array\\n    function getStoppedValidatorCountPerOperator() external view returns (uint32[] memory);\\n\\n    /// @notice Get the details of a validator\\n    /// @param _operatorIndex The index of the operator\\n    /// @param _validatorIndex The index of the validator\\n    /// @return publicKey The public key of the validator\\n    /// @return signature The signature used during deposit\\n    /// @return funded True if validator has been funded\\n    function getValidator(uint256 _operatorIndex, uint256 _validatorIndex)\\n        external\\n        view\\n        returns (bytes memory publicKey, bytes memory signature, bool funded);\\n\\n    /// @notice Get the next validators that would be funded\\n    /// @param _count Count of validators that would be funded next\\n    /// @return publicKeys An array of fundable public keys\\n    /// @return signatures An array of signatures linked to the public keys\\n    function getNextValidatorsToDepositFromActiveOperators(uint256 _count)\\n        external\\n        view\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n\\n    /// @notice Retrieve the active operator set\\n    /// @return The list of active operators and their details\\n    function listActiveOperators() external view returns (OperatorsV2.Operator[] memory);\\n\\n    /// @notice Allows river to override the stopped validators array\\n    /// @notice This actions happens during the Oracle report processing\\n    /// @param _stoppedValidatorCounts The new stopped validators array\\n    /// @param _depositedValidatorCount The total deposited validator count\\n    function reportStoppedValidatorCounts(uint32[] calldata _stoppedValidatorCounts, uint256 _depositedValidatorCount)\\n        external;\\n\\n    /// @notice Adds an operator to the registry\\n    /// @dev Only callable by the administrator\\n    /// @param _name The name identifying the operator\\n    /// @param _operator The address representing the operator, receiving the rewards\\n    /// @return The index of the new operator\\n    function addOperator(string calldata _name, address _operator) external returns (uint256);\\n\\n    /// @notice Changes the operator address of an operator\\n    /// @dev Only callable by the administrator or the previous operator address\\n    /// @param _index The operator index\\n    /// @param _newOperatorAddress The new address of the operator\\n    function setOperatorAddress(uint256 _index, address _newOperatorAddress) external;\\n\\n    /// @notice Changes the operator name\\n    /// @dev Only callable by the administrator or the operator\\n    /// @param _index The operator index\\n    /// @param _newName The new operator name\\n    function setOperatorName(uint256 _index, string calldata _newName) external;\\n\\n    /// @notice Changes the operator status\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStatus The new status of the operator\\n    function setOperatorStatus(uint256 _index, bool _newStatus) external;\\n\\n    /// @notice Changes the operator staking limit\\n    /// @dev Only callable by the administrator\\n    /// @dev The operator indexes must be in increasing order and contain no duplicate\\n    /// @dev The limit cannot exceed the total key count of the operator\\n    /// @dev The _indexes and _newLimits must have the same length.\\n    /// @dev Each limit value is applied to the operator index at the same index in the _indexes array.\\n    /// @param _operatorIndexes The operator indexes, in increasing order and duplicate free\\n    /// @param _newLimits The new staking limit of the operators\\n    /// @param _snapshotBlock The block number at which the snapshot was computed\\n    function setOperatorLimits(\\n        uint256[] calldata _operatorIndexes,\\n        uint32[] calldata _newLimits,\\n        uint256 _snapshotBlock\\n    ) external;\\n\\n    /// @notice Adds new keys for an operator\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @param _index The operator index\\n    /// @param _keyCount The amount of keys provided\\n    /// @param _publicKeysAndSignatures Public keys of the validator, concatenated\\n    function addValidators(uint256 _index, uint32 _keyCount, bytes calldata _publicKeysAndSignatures) external;\\n\\n    /// @notice Remove validator keys\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @dev The indexes must be provided sorted in decreasing order and duplicate-free, otherwise the method will revert\\n    /// @dev The operator limit will be set to the lowest deleted key index if the operator's limit wasn't equal to its total key count\\n    /// @dev The operator or the admin cannot remove funded keys\\n    /// @dev When removing validators, the indexes of specific unfunded keys can be changed in order to properly\\n    /// @dev remove the keys from the storage array. Beware of this specific behavior when chaining calls as the\\n    /// @dev targeted public key indexes can point to a different key after a first call was made and performed\\n    /// @dev some swaps\\n    /// @param _index The operator index\\n    /// @param _indexes The indexes of the keys to remove\\n    function removeValidators(uint256 _index, uint256[] calldata _indexes) external;\\n\\n    /// @notice Retrieve validator keys based on operator statuses\\n    /// @param _count Max amount of keys requested\\n    /// @return publicKeys An array of public keys\\n    /// @return signatures An array of signatures linked to the public keys\\n    function pickNextValidatorsToDeposit(uint256 _count)\\n        external\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n\\n    /// @notice Public endpoint to consume the exit request demand and perform the actual exit requests\\n    /// @notice The selection algorithm will pick validators based on their active validator counts\\n    /// @notice This value is computed by using the count of funded keys and taking into account the stopped validator counts and exit requests\\n    /// @param _count Max amount of exits to request\\n    function requestValidatorExits(uint256 _count) external;\\n\\n    /// @notice Increases the exit request demand\\n    /// @dev This method is only callable by the river contract, and to actually forward the information to the node operators via event emission, the unprotected requestValidatorExits method must be called\\n    /// @param _count The amount of exit requests to add to the demand\\n    /// @param _depositedValidatorCount The total deposited validator count\\n    function demandValidatorExits(uint256 _count, uint256 _depositedValidatorCount) external;\\n}\\n\",\"keccak256\":\"0x6b33da5c97f2a47a95752642475decf2cf411533d8c4236760e97fd6512f2126\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IProtocolVersion.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\ninterface IProtocolVersion {\\n    /// @notice Retrieves the version of the contract\\n    /// @return Version of the contract\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0x2fc810a5c001d641d4b19c28631dac46201e3780e91dfeb5dc836f92f1aee8b3\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRiver.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../state/river/DailyCommittableLimits.sol\\\";\\n\\nimport \\\"./components/IConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"./components/IOracleManager.1.sol\\\";\\nimport \\\"./components/ISharesManager.1.sol\\\";\\nimport \\\"./components/IUserDepositManager.1.sol\\\";\\n\\n/// @title River Interface (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice The main system interface\\ninterface IRiverV1 is IConsensusLayerDepositManagerV1, IUserDepositManagerV1, ISharesManagerV1, IOracleManagerV1 {\\n    /// @notice Funds have been pulled from the Execution Layer Fee Recipient\\n    /// @param amount The amount pulled\\n    event PulledELFees(uint256 amount);\\n\\n    /// @notice Funds have been pulled from the Coverage Fund\\n    /// @param amount The amount pulled\\n    event PulledCoverageFunds(uint256 amount);\\n\\n    /// @notice Emitted when funds are pulled from the redeem manager\\n    /// @param amount The amount pulled\\n    event PulledRedeemManagerExceedingEth(uint256 amount);\\n\\n    /// @notice Emitted when funds are pulled from the CL recipient\\n    /// @param pulledSkimmedEthAmount The amount of skimmed ETH pulled\\n    /// @param pullExitedEthAmount The amount of exited ETH pulled\\n    event PulledCLFunds(uint256 pulledSkimmedEthAmount, uint256 pullExitedEthAmount);\\n\\n    /// @notice The stored Execution Layer Fee Recipient has been changed\\n    /// @param elFeeRecipient The new Execution Layer Fee Recipient\\n    event SetELFeeRecipient(address indexed elFeeRecipient);\\n\\n    /// @notice The stored Coverage Fund has been changed\\n    /// @param coverageFund The new Coverage Fund\\n    event SetCoverageFund(address indexed coverageFund);\\n\\n    /// @notice The stored Collector has been changed\\n    /// @param collector The new Collector\\n    event SetCollector(address indexed collector);\\n\\n    /// @notice The stored Allowlist has been changed\\n    /// @param allowlist The new Allowlist\\n    event SetAllowlist(address indexed allowlist);\\n\\n    /// @notice The stored Global Fee has been changed\\n    /// @param fee The new Global Fee\\n    event SetGlobalFee(uint256 fee);\\n\\n    /// @notice The stored Operators Registry has been changed\\n    /// @param operatorRegistry The new Operators Registry\\n    event SetOperatorsRegistry(address indexed operatorRegistry);\\n\\n    /// @notice The stored Metadata URI string has been changed\\n    /// @param metadataURI The new Metadata URI string\\n    event SetMetadataURI(string metadataURI);\\n\\n    /// @notice The system underlying supply increased. This is a snapshot of the balances for accounting purposes\\n    /// @param _collector The address of the collector during this event\\n    /// @param _oldTotalUnderlyingBalance Old total ETH balance under management by River\\n    /// @param _oldTotalSupply Old total supply in shares\\n    /// @param _newTotalUnderlyingBalance New total ETH balance under management by River\\n    /// @param _newTotalSupply New total supply in shares\\n    event RewardsEarned(\\n        address indexed _collector,\\n        uint256 _oldTotalUnderlyingBalance,\\n        uint256 _oldTotalSupply,\\n        uint256 _newTotalUnderlyingBalance,\\n        uint256 _newTotalSupply\\n    );\\n\\n    /// @notice Emitted when the daily committable limits are changed\\n    /// @param minNetAmount The minimum amount that must be used as the daily committable amount\\n    /// @param maxRelativeAmount The maximum amount that can be used as the daily committable amount, relative to the total underlying supply\\n    event SetMaxDailyCommittableAmounts(uint256 minNetAmount, uint256 maxRelativeAmount);\\n\\n    /// @notice Emitted when the redeem manager address is changed\\n    /// @param redeemManager The address of the redeem manager\\n    event SetRedeemManager(address redeemManager);\\n\\n    /// @notice Emitted when the balance to deposit is updated\\n    /// @param oldAmount The old balance to deposit\\n    /// @param newAmount The new balance to deposit\\n    event SetBalanceToDeposit(uint256 oldAmount, uint256 newAmount);\\n\\n    /// @notice Emitted when the balance to redeem is updated\\n    /// @param oldAmount The old balance to redeem\\n    /// @param newAmount The new balance to redeem\\n    event SetBalanceToRedeem(uint256 oldAmount, uint256 newAmount);\\n\\n    /// @notice Emitted when the balance committed to deposit\\n    /// @param oldAmount The old balance committed to deposit\\n    /// @param newAmount The new balance committed to deposit\\n    event SetBalanceCommittedToDeposit(uint256 oldAmount, uint256 newAmount);\\n\\n    /// @notice Emitted when the redeem manager received a withdraw event report\\n    /// @param redeemManagerDemand The total demand in LsETH of the redeem manager\\n    /// @param suppliedRedeemManagerDemand The amount of LsETH demand actually supplied\\n    /// @param suppliedRedeemManagerDemandInEth The amount in ETH of the supplied demand\\n    event ReportedRedeemManager(\\n        uint256 redeemManagerDemand, uint256 suppliedRedeemManagerDemand, uint256 suppliedRedeemManagerDemandInEth\\n    );\\n\\n    /// @notice Thrown when the amount received from the Withdraw contract doe not match the requested amount\\n    /// @param requested The amount that was requested\\n    /// @param received The amount that was received\\n    error InvalidPulledClFundsAmount(uint256 requested, uint256 received);\\n\\n    /// @notice The computed amount of shares to mint is 0\\n    error ZeroMintedShares();\\n\\n    /// @notice The access was denied\\n    /// @param account The account that was denied\\n    error Denied(address account);\\n\\n    /// @notice Initializes the River system\\n    /// @param _depositContractAddress Address to make Consensus Layer deposits\\n    /// @param _elFeeRecipientAddress Address that receives the execution layer fees\\n    /// @param _withdrawalCredentials Credentials to use for every validator deposit\\n    /// @param _oracleAddress The address of the Oracle contract\\n    /// @param _systemAdministratorAddress Administrator address\\n    /// @param _allowlistAddress Address of the allowlist contract\\n    /// @param _operatorRegistryAddress Address of the operator registry\\n    /// @param _collectorAddress Address receiving the the global fee on revenue\\n    /// @param _globalFee Amount retained when the ETH balance increases and sent to the collector\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _operatorRegistryAddress,\\n        address _collectorAddress,\\n        uint256 _globalFee\\n    ) external;\\n\\n    /// @notice Initialized version 1.1 of the River System\\n    /// @param _redeemManager The redeem manager address\\n    /// @param _epochsPerFrame The amounts of epochs in a frame\\n    /// @param _slotsPerEpoch The slots inside an epoch\\n    /// @param _secondsPerSlot The seconds inside a slot\\n    /// @param _genesisTime The genesis timestamp\\n    /// @param _epochsToAssumedFinality The number of epochs before an epoch is considered final on-chain\\n    /// @param _annualAprUpperBound The reporting upper bound\\n    /// @param _relativeLowerBound The reporting lower bound\\n    /// @param _maxDailyNetCommittableAmount_ The net daily committable limit\\n    /// @param _maxDailyRelativeCommittableAmount_ The relative daily committable limit\\n    function initRiverV1_1(\\n        address _redeemManager,\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime,\\n        uint64 _epochsToAssumedFinality,\\n        uint256 _annualAprUpperBound,\\n        uint256 _relativeLowerBound,\\n        uint128 _maxDailyNetCommittableAmount_,\\n        uint128 _maxDailyRelativeCommittableAmount_\\n    ) external;\\n\\n    /// @notice Initializes version 1.2 of the River System\\n    function initRiverV1_2() external;\\n\\n    /// @notice Get the current global fee\\n    /// @return The global fee\\n    function getGlobalFee() external view returns (uint256);\\n\\n    /// @notice Retrieve the allowlist address\\n    /// @return The allowlist address\\n    function getAllowlist() external view returns (address);\\n\\n    /// @notice Retrieve the collector address\\n    /// @return The collector address\\n    function getCollector() external view returns (address);\\n\\n    /// @notice Retrieve the execution layer fee recipient\\n    /// @return The execution layer fee recipient address\\n    function getELFeeRecipient() external view returns (address);\\n\\n    /// @notice Retrieve the coverage fund\\n    /// @return The coverage fund address\\n    function getCoverageFund() external view returns (address);\\n\\n    /// @notice Retrieve the redeem manager\\n    /// @return The redeem manager address\\n    function getRedeemManager() external view returns (address);\\n\\n    /// @notice Retrieve the operators registry\\n    /// @return The operators registry address\\n    function getOperatorsRegistry() external view returns (address);\\n\\n    /// @notice Retrieve the metadata uri string value\\n    /// @return The metadata uri string value\\n    function getMetadataURI() external view returns (string memory);\\n\\n    /// @notice Retrieve the configured daily committable limits\\n    /// @return The daily committable limits structure\\n    function getDailyCommittableLimits()\\n        external\\n        view\\n        returns (DailyCommittableLimits.DailyCommittableLimitsStruct memory);\\n\\n    /// @notice Resolves the provided redeem requests by calling the redeem manager\\n    /// @param _redeemRequestIds The list of redeem requests to resolve\\n    /// @return withdrawalEventIds The list of matching withdrawal events, or error codes\\n    function resolveRedeemRequests(uint32[] calldata _redeemRequestIds)\\n        external\\n        view\\n        returns (int64[] memory withdrawalEventIds);\\n\\n    /// @notice Set the daily committable limits\\n    /// @param _dcl The Daily Committable Limits structure\\n    function setDailyCommittableLimits(DailyCommittableLimits.DailyCommittableLimitsStruct memory _dcl) external;\\n\\n    /// @notice Retrieve the current balance to redeem\\n    /// @return The current balance to redeem\\n    function getBalanceToRedeem() external view returns (uint256);\\n\\n    /// @notice Performs a redeem request on the redeem manager\\n    /// @param _lsETHAmount The amount of LsETH to redeem\\n    /// @param _recipient The address that will own the redeem request\\n    /// @return redeemRequestId The ID of the newly created redeem request\\n    function requestRedeem(uint256 _lsETHAmount, address _recipient) external returns (uint32 redeemRequestId);\\n\\n    /// @notice Claims several redeem requests\\n    /// @param _redeemRequestIds The list of redeem requests to claim\\n    /// @param _withdrawalEventIds The list of resolved withdrawal event ids\\n    /// @return claimStatuses The operation status results\\n    function claimRedeemRequests(uint32[] calldata _redeemRequestIds, uint32[] calldata _withdrawalEventIds)\\n        external\\n        returns (uint8[] memory claimStatuses);\\n\\n    /// @notice Changes the global fee parameter\\n    /// @param _newFee New fee value\\n    function setGlobalFee(uint256 _newFee) external;\\n\\n    /// @notice Changes the allowlist address\\n    /// @param _newAllowlist New address for the allowlist\\n    function setAllowlist(address _newAllowlist) external;\\n\\n    /// @notice Changes the collector address\\n    /// @param _newCollector New address for the collector\\n    function setCollector(address _newCollector) external;\\n\\n    /// @notice Changes the execution layer fee recipient\\n    /// @param _newELFeeRecipient New address for the recipient\\n    function setELFeeRecipient(address _newELFeeRecipient) external;\\n\\n    /// @notice Changes the coverage fund\\n    /// @param _newCoverageFund New address for the fund\\n    function setCoverageFund(address _newCoverageFund) external;\\n\\n    /// @notice Sets the metadata uri string value\\n    /// @param _metadataURI The new metadata uri string value\\n    function setMetadataURI(string memory _metadataURI) external;\\n\\n    /// @notice Input for execution layer fee earnings\\n    function sendELFees() external payable;\\n\\n    /// @notice Input for consensus layer funds, containing both exit and skimming\\n    function sendCLFunds() external payable;\\n\\n    /// @notice Input for coverage funds\\n    function sendCoverageFunds() external payable;\\n\\n    /// @notice Input for the redeem manager funds\\n    function sendRedeemManagerExceedingFunds() external payable;\\n}\\n\",\"keccak256\":\"0xcb57b5480b1849e52fe74552c5aac448fe3c2232a6c72b7d56b34fa9bc878ea1\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IConsensusLayerDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Consensys Layer Deposit Manager Interface (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This interface exposes methods to handle the interactions with the official deposit contract\\ninterface IConsensusLayerDepositManagerV1 {\\n    /// @notice The stored deposit contract address changed\\n    /// @param depositContract Address of the deposit contract\\n    event SetDepositContractAddress(address indexed depositContract);\\n\\n    /// @notice The stored withdrawal credentials changed\\n    /// @param withdrawalCredentials The withdrawal credentials to use for deposits\\n    event SetWithdrawalCredentials(bytes32 withdrawalCredentials);\\n\\n    /// @notice Emitted when the deposited validator count is updated\\n    /// @param oldDepositedValidatorCount The old deposited validator count value\\n    /// @param newDepositedValidatorCount The new deposited validator count value\\n    event SetDepositedValidatorCount(uint256 oldDepositedValidatorCount, uint256 newDepositedValidatorCount);\\n\\n    /// @notice Not enough funds to deposit one validator\\n    error NotEnoughFunds();\\n\\n    /// @notice The length of the BLS Public key is invalid during deposit\\n    error InconsistentPublicKeys();\\n\\n    /// @notice The length of the BLS Signature is invalid during deposit\\n    error InconsistentSignatures();\\n\\n    /// @notice The internal key retrieval returned no keys\\n    error NoAvailableValidatorKeys();\\n\\n    /// @notice The received count of public keys to deposit is invalid\\n    error InvalidPublicKeyCount();\\n\\n    /// @notice The received count of signatures to deposit is invalid\\n    error InvalidSignatureCount();\\n\\n    /// @notice The withdrawal credentials value is null\\n    error InvalidWithdrawalCredentials();\\n\\n    /// @notice An error occured during the deposit\\n    error ErrorOnDeposit();\\n\\n    /// @notice Invalid deposit root\\n    error InvalidDepositRoot();\\n\\n    // @notice Not keeper\\n    error OnlyKeeper();\\n\\n    /// @notice Returns the amount of ETH not yet committed for deposit\\n    /// @return The amount of ETH not yet committed for deposit\\n    function getBalanceToDeposit() external view returns (uint256);\\n\\n    /// @notice Returns the amount of ETH committed for deposit\\n    /// @return The amount of ETH committed for deposit\\n    function getCommittedBalance() external view returns (uint256);\\n\\n    /// @notice Retrieve the withdrawal credentials\\n    /// @return The withdrawal credentials\\n    function getWithdrawalCredentials() external view returns (bytes32);\\n\\n    /// @notice Get the deposited validator count (the count of deposits made by the contract)\\n    /// @return The deposited validator count\\n    function getDepositedValidatorCount() external view returns (uint256);\\n\\n    /// @notice Get the keeper address\\n    /// @return The keeper address\\n    function getKeeper() external view returns (address);\\n\\n    /// @notice Deposits current balance to the Consensus Layer by batches of 32 ETH\\n    /// @param _maxCount The maximum amount of validator keys to fund\\n    /// @param _depositRoot The root of the deposit tree\\n    function depositToConsensusLayerWithDepositRoot(uint256 _maxCount, bytes32 _depositRoot) external;\\n}\\n\",\"keccak256\":\"0xd7e41b30bdc6108f85633988ac53e9196285cee3d28c978054deb76b2268915d\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IOracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../state/river/CLSpec.sol\\\";\\nimport \\\"../../state/river/ReportBounds.sol\\\";\\n\\n/// @title Oracle Manager (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This interface exposes methods to handle the inputs provided by the oracle\\ninterface IOracleManagerV1 {\\n    /// @notice The stored oracle address changed\\n    /// @param oracleAddress The new oracle address\\n    event SetOracle(address indexed oracleAddress);\\n\\n    /// @notice The consensus layer data provided by the oracle has been updated\\n    /// @param validatorCount The new count of validators running on the consensus layer\\n    /// @param validatorTotalBalance The new total balance sum of all validators\\n    /// @param roundId Round identifier\\n    event ConsensusLayerDataUpdate(uint256 validatorCount, uint256 validatorTotalBalance, bytes32 roundId);\\n\\n    /// @notice The Consensus Layer Spec is changed\\n    /// @param epochsPerFrame The number of epochs inside a frame\\n    /// @param slotsPerEpoch The number of slots inside an epoch\\n    /// @param secondsPerSlot The number of seconds inside a slot\\n    /// @param genesisTime The genesis timestamp\\n    /// @param epochsToAssumedFinality The number of epochs before an epoch is considered final\\n    event SetSpec(\\n        uint64 epochsPerFrame,\\n        uint64 slotsPerEpoch,\\n        uint64 secondsPerSlot,\\n        uint64 genesisTime,\\n        uint64 epochsToAssumedFinality\\n    );\\n\\n    /// @notice The Report Bounds are changed\\n    /// @param annualAprUpperBound The reporting upper bound\\n    /// @param relativeLowerBound The reporting lower bound\\n    event SetBounds(uint256 annualAprUpperBound, uint256 relativeLowerBound);\\n\\n    /// @notice The provided report has beend processed\\n    /// @param report The report that was provided\\n    /// @param trace The trace structure providing more insights on internals\\n    event ProcessedConsensusLayerReport(\\n        IOracleManagerV1.ConsensusLayerReport report, ConsensusLayerDataReportingTrace trace\\n    );\\n\\n    /// @notice The reported validator count is invalid\\n    /// @param providedValidatorCount The received validator count value\\n    /// @param depositedValidatorCount The number of deposits performed by the system\\n    /// @param lastReportedValidatorCount The last reported validator count\\n    error InvalidValidatorCountReport(\\n        uint256 providedValidatorCount, uint256 depositedValidatorCount, uint256 lastReportedValidatorCount\\n    );\\n\\n    /// @notice Thrown when an invalid epoch was reported\\n    /// @param epoch Invalid epoch\\n    error InvalidEpoch(uint256 epoch);\\n\\n    /// @notice The balance increase is higher than the maximum allowed by the upper bound\\n    /// @param prevTotalEthIncludingExited The previous total balance, including all exited balance\\n    /// @param postTotalEthIncludingExited The post-report total balance, including all exited balance\\n    /// @param timeElapsed The time in seconds since last report\\n    /// @param annualAprUpperBound The upper bound value that was used\\n    error TotalValidatorBalanceIncreaseOutOfBound(\\n        uint256 prevTotalEthIncludingExited,\\n        uint256 postTotalEthIncludingExited,\\n        uint256 timeElapsed,\\n        uint256 annualAprUpperBound\\n    );\\n\\n    /// @notice The balance decrease is higher than the maximum allowed by the lower bound\\n    /// @param prevTotalEthIncludingExited The previous total balance, including all exited balance\\n    /// @param postTotalEthIncludingExited The post-report total balance, including all exited balance\\n    /// @param timeElapsed The time in seconds since last report\\n    /// @param relativeLowerBound The lower bound value that was used\\n    error TotalValidatorBalanceDecreaseOutOfBound(\\n        uint256 prevTotalEthIncludingExited,\\n        uint256 postTotalEthIncludingExited,\\n        uint256 timeElapsed,\\n        uint256 relativeLowerBound\\n    );\\n\\n    /// @notice The total exited balance decreased\\n    /// @param currentValidatorsExitedBalance The current exited balance\\n    /// @param newValidatorsExitedBalance The new exited balance\\n    error InvalidDecreasingValidatorsExitedBalance(\\n        uint256 currentValidatorsExitedBalance, uint256 newValidatorsExitedBalance\\n    );\\n\\n    /// @notice The total skimmed balance decreased\\n    /// @param currentValidatorsSkimmedBalance The current exited balance\\n    /// @param newValidatorsSkimmedBalance The new exited balance\\n    error InvalidDecreasingValidatorsSkimmedBalance(\\n        uint256 currentValidatorsSkimmedBalance, uint256 newValidatorsSkimmedBalance\\n    );\\n\\n    /// @notice Trace structure emitted via logs during reporting\\n    struct ConsensusLayerDataReportingTrace {\\n        uint256 rewards;\\n        uint256 pulledELFees;\\n        uint256 pulledRedeemManagerExceedingEthBuffer;\\n        uint256 pulledCoverageFunds;\\n    }\\n\\n    /// @notice The format of the oracle report\\n    struct ConsensusLayerReport {\\n        // this is the epoch at which the report was performed\\n        // data should be fetched up to the state of this epoch by the oracles\\n        uint256 epoch;\\n        // the sum of all the validator balances on the consensus layer\\n        // when a validator enters the exit queue, the validator is considered stopped, its balance is accounted in both validatorsExitingBalance and validatorsBalance\\n        // when a validator leaves the exit queue and the funds are sweeped onto the execution layer, the balance is only accounted in validatorsExitedBalance and not in validatorsBalance\\n        // this value can decrease between reports\\n        uint256 validatorsBalance;\\n        // the sum of all the skimmings performed on the validators\\n        // these values can be found in the execution layer block bodies under the withdrawals field\\n        // a withdrawal is considered skimming if\\n        // - the epoch at which it happened is < validator.withdrawableEpoch\\n        // - the epoch at which it happened is >= validator.withdrawableEpoch and in that case we only account for what would be above 32 eth as skimming\\n        // this value cannot decrease over reports\\n        uint256 validatorsSkimmedBalance;\\n        // the sum of all the exits performed on the validators\\n        // these values can be found in the execution layer block bodies under the withdrawals field\\n        // a withdrawal is considered exit if\\n        // - the epoch at which it happened is >= validator.withdrawableEpoch and in that case we only account for what would be <= 32 eth as exit\\n        // this value cannot decrease over reports\\n        uint256 validatorsExitedBalance;\\n        // the sum of all the exiting balance, which is all the validators on their way to get sweeped and exited\\n        // this includes voluntary exits and slashings\\n        // this value can decrease between reports\\n        uint256 validatorsExitingBalance;\\n        // the count of activated validators\\n        // even validators that are exited are still accounted\\n        // this value cannot decrease over reports\\n        uint32 validatorsCount;\\n        // an array containing the count of stopped validators per operator\\n        // the first element of the array is the sum of all stopped validators\\n        // then index 1 would be operator 0\\n        // these values cannot decrease over reports\\n        uint32[] stoppedValidatorCountPerOperator;\\n        // flag enabled by the oracles when the buffer rebalancing is activated\\n        // the activation logic is written in the oracle specification and all oracle members must agree on the activation\\n        // when active, the eth in the deposit buffer can be used to pay for exits in the redeem manager\\n        bool rebalanceDepositToRedeemMode;\\n        // flag enabled by the oracles when the slashing containment is activated\\n        // the activation logic is written in the oracle specification and all oracle members must agree on the activation\\n        // This flag is activated when a pre-defined threshold of slashed validators in our set of validators is reached\\n        // This flag is deactivated when a bottom threshold is met, this means that when we reach the upper threshold and activate the flag, we will deactivate it when we reach the bottom threshold and not before\\n        // when active, no more validator exits can be requested by the protocol\\n        bool slashingContainmentMode;\\n    }\\n\\n    /// @notice The format of the oracle report in storage\\n    /// @notice These fields have the exact same function as the ones in ConsensusLayerReport, but this struct is optimized for storage\\n    struct StoredConsensusLayerReport {\\n        uint256 epoch;\\n        uint256 validatorsBalance;\\n        uint256 validatorsSkimmedBalance;\\n        uint256 validatorsExitedBalance;\\n        uint256 validatorsExitingBalance;\\n        uint32 validatorsCount;\\n        bool rebalanceDepositToRedeemMode;\\n        bool slashingContainmentMode;\\n    }\\n\\n    /// @notice Get oracle address\\n    /// @return The oracle address\\n    function getOracle() external view returns (address);\\n\\n    /// @notice Get CL validator total balance\\n    /// @return The CL Validator total balance\\n    function getCLValidatorTotalBalance() external view returns (uint256);\\n\\n    /// @notice Get CL validator count (the amount of validator reported by the oracles)\\n    /// @return The CL validator count\\n    function getCLValidatorCount() external view returns (uint256);\\n\\n    /// @notice Verifies if the provided epoch is valid\\n    /// @param epoch The epoch to lookup\\n    /// @return True if valid\\n    function isValidEpoch(uint256 epoch) external view returns (bool);\\n\\n    /// @notice Retrieve the block timestamp\\n    /// @return The current timestamp from the EVM context\\n    function getTime() external view returns (uint256);\\n\\n    /// @notice Retrieve expected epoch id\\n    /// @return The current expected epoch id\\n    function getExpectedEpochId() external view returns (uint256);\\n\\n    /// @notice Retrieve the last completed epoch id\\n    /// @return The last completed epoch id\\n    function getLastCompletedEpochId() external view returns (uint256);\\n\\n    /// @notice Retrieve the current epoch id based on block timestamp\\n    /// @return The current epoch id\\n    function getCurrentEpochId() external view returns (uint256);\\n\\n    /// @notice Retrieve the current cl spec\\n    /// @return The Consensus Layer Specification\\n    function getCLSpec() external view returns (CLSpec.CLSpecStruct memory);\\n\\n    /// @notice Retrieve the current frame details\\n    /// @return _startEpochId The epoch at the beginning of the frame\\n    /// @return _startTime The timestamp of the beginning of the frame in seconds\\n    /// @return _endTime The timestamp of the end of the frame in seconds\\n    function getCurrentFrame() external view returns (uint256 _startEpochId, uint256 _startTime, uint256 _endTime);\\n\\n    /// @notice Retrieve the first epoch id of the frame of the provided epoch id\\n    /// @param _epochId Epoch id used to get the frame\\n    /// @return The first epoch id of the frame containing the given epoch id\\n    function getFrameFirstEpochId(uint256 _epochId) external view returns (uint256);\\n\\n    /// @notice Retrieve the report bounds\\n    /// @return The report bounds\\n    function getReportBounds() external view returns (ReportBounds.ReportBoundsStruct memory);\\n\\n    /// @notice Retrieve the last consensus layer report\\n    /// @return The stored consensus layer report\\n    function getLastConsensusLayerReport() external view returns (IOracleManagerV1.StoredConsensusLayerReport memory);\\n\\n    /// @notice Set the oracle address\\n    /// @param _oracleAddress Address of the oracle\\n    function setOracle(address _oracleAddress) external;\\n\\n    /// @notice Set the consensus layer spec\\n    /// @param _newValue The new consensus layer spec value\\n    function setCLSpec(CLSpec.CLSpecStruct calldata _newValue) external;\\n\\n    /// @notice Set the report bounds\\n    /// @param _newValue The new report bounds value\\n    function setReportBounds(ReportBounds.ReportBoundsStruct calldata _newValue) external;\\n\\n    /// @notice Performs all the reporting logics\\n    /// @param _report The consensus layer report structure\\n    function setConsensusLayerData(ConsensusLayerReport calldata _report) external;\\n}\\n\",\"keccak256\":\"0x9109a0a200d62513d217b41d4904d7bbd2a87ec7d3f5a5e683e13ba76c8bcd2e\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/ISharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Shares Manager Interface (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This interface exposes methods to handle the shares of the depositor and the ERC20 interface\\ninterface ISharesManagerV1 is IERC20 {\\n    /// @notice Emitted when the total supply is changed\\n    event SetTotalSupply(uint256 totalSupply);\\n\\n    /// @notice Balance too low to perform operation\\n    error BalanceTooLow();\\n\\n    /// @notice Allowance too low to perform operation\\n    /// @param _from Account where funds are sent from\\n    /// @param _operator Account attempting the transfer\\n    /// @param _allowance Current allowance\\n    /// @param _value Requested transfer value in shares\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n\\n    /// @notice Invalid empty transfer\\n    error NullTransfer();\\n\\n    /// @notice Invalid transfer recipients\\n    /// @param _from Account sending the funds in the invalid transfer\\n    /// @param _to Account receiving the funds in the invalid transfer\\n    error UnauthorizedTransfer(address _from, address _to);\\n\\n    /// @notice Retrieve the token name\\n    /// @return The token name\\n    function name() external pure returns (string memory);\\n\\n    /// @notice Retrieve the token symbol\\n    /// @return The token symbol\\n    function symbol() external pure returns (string memory);\\n\\n    /// @notice Retrieve the decimal count\\n    /// @return The decimal count\\n    function decimals() external pure returns (uint8);\\n\\n    /// @notice Retrieve the total token supply\\n    /// @return The total supply in shares\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the total underlying asset supply\\n    /// @return The total underlying asset supply\\n    function totalUnderlyingSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The balance of the account in shares\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The underlying balance of the account\\n    function balanceOfUnderlying(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance from an amount of shares\\n    /// @param _shares Amount of shares to convert\\n    /// @return The underlying asset balance represented by the shares\\n    function underlyingBalanceFromShares(uint256 _shares) external view returns (uint256);\\n\\n    /// @notice Retrieve the shares count from an underlying asset amount\\n    /// @param _underlyingAssetAmount Amount of underlying asset to convert\\n    /// @return The amount of shares worth the underlying asset amopunt\\n    function sharesFromUnderlyingBalance(uint256 _underlyingAssetAmount) external view returns (uint256);\\n\\n    /// @notice Retrieve the allowance value for a spender\\n    /// @param _owner Address that issued the allowance\\n    /// @param _spender Address that received the allowance\\n    /// @return The allowance in shares for a given spender\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    /// @notice Performs a transfer from the message sender to the provided account\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Performs a transfer between two recipients\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Approves an account for future spendings\\n    /// @dev An approved account can use transferFrom to transfer funds on behalf of the token owner\\n    /// @param _spender Address that is allowed to spend the tokens\\n    /// @param _value The allowed amount in shares, will override previous value\\n    /// @return True if success\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    /// @notice Increase allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _additionalValue Amount of shares to add\\n    /// @return True if success\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool);\\n\\n    /// @notice Decrease allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _subtractableValue Amount of shares to subtract\\n    /// @return True if success\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool);\\n}\\n\",\"keccak256\":\"0xbbbc45cddcad60c43e2f78a0a075f3f171f9606a9142d692138f09093ef3f451\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IUserDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title User Deposit Manager (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This interface exposes methods to handle the inbound transfers cases or the explicit submissions\\ninterface IUserDepositManagerV1 {\\n    /// @notice User deposited ETH in the system\\n    /// @param depositor Address performing the deposit\\n    /// @param recipient Address receiving the minted shares\\n    /// @param amount Amount in ETH deposited\\n    event UserDeposit(address indexed depositor, address indexed recipient, uint256 amount);\\n\\n    /// @notice And empty deposit attempt was made\\n    error EmptyDeposit();\\n\\n    /// @notice Explicit deposit method to mint on msg.sender\\n    function deposit() external payable;\\n\\n    /// @notice Explicit deposit method to mint on msg.sender and transfer to _recipient\\n    /// @param _recipient Address receiving the minted LsETH\\n    function depositAndTransfer(address _recipient) external payable;\\n\\n    /// @notice Implicit deposit method, when the user performs a regular transfer to the contract\\n    receive() external payable;\\n\\n    /// @notice Invalid call, when the user sends a transaction with a data payload but no method matched\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x883f8d2b25d540915ac4cfededee1c4ee3f4ca90e3fe71748fd0e4b46d752c6a\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\nimport \\\"../state/shared/PendingAdministratorAddress.sol\\\";\\n\\n/// @title Lib Administrable\\n/// @author Alluvial Finance Inc.\\n/// @notice This library handles the admin and pending admin storage vars\\nlibrary LibAdministrable {\\n    /// @notice Retrieve the system admin\\n    /// @return The address of the system admin\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n\\n    /// @notice Retrieve the pending system admin\\n    /// @return The adress of the pending system admin\\n    function _getPendingAdmin() internal view returns (address) {\\n        return PendingAdministratorAddress.get();\\n    }\\n\\n    /// @notice Sets the system admin\\n    /// @param _admin New system admin\\n    function _setAdmin(address _admin) internal {\\n        AdministratorAddress.set(_admin);\\n    }\\n\\n    /// @notice Sets the pending system admin\\n    /// @param _pendingAdmin New pending system admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        PendingAdministratorAddress.set(_pendingAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0x09f683441ee60515cb51439c3e98d94e0ee356381e82ce6b12ee7d4ab41f7448\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibBasisPoints.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Lib Basis Points\\n/// @notice Holds the basis points max value\\nlibrary LibBasisPoints {\\n    /// @notice The max value for basis points (represents 100%)\\n    uint256 internal constant BASIS_POINTS_MAX = 10_000;\\n}\\n\",\"keccak256\":\"0x87e0393c2317b33ae449221747b42f7237362adf9b7a0902433d57574473303a\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibBytes.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Lib Bytes\\n/// @notice This library helps manipulating bytes\\nlibrary LibBytes {\\n    /// @notice The length overflows an uint\\n    error SliceOverflow();\\n\\n    /// @notice The slice is outside of the initial bytes bounds\\n    error SliceOutOfBounds();\\n\\n    /// @notice Slices the provided bytes\\n    /// @param _bytes Bytes to slice\\n    /// @param _start The starting index of the slice\\n    /// @param _length The length of the slice\\n    /// @return The slice of _bytes starting at _start of length _length\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\n        unchecked {\\n            if (_length + 31 < _length) {\\n                revert SliceOverflow();\\n            }\\n        }\\n        if (_bytes.length < _start + _length) {\\n            revert SliceOutOfBounds();\\n        }\\n\\n        bytes memory tempBytes;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } { mstore(mc, mload(cc)) }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0x395f4eb419d1499a9e9f7f9924e07563744827320d0edabdc9caeae0635585f2\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibErrors.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Lib Errors\\n/// @notice Library of common errors\\nlibrary LibErrors {\\n    /// @notice The operator is unauthorized for the caller\\n    /// @param caller Address performing the call\\n    error Unauthorized(address caller);\\n\\n    /// @notice The call was invalid\\n    error InvalidCall();\\n\\n    /// @notice The argument was invalid\\n    error InvalidArgument();\\n\\n    /// @notice The address is zero\\n    error InvalidZeroAddress();\\n\\n    /// @notice The string is empty\\n    error InvalidEmptyString();\\n\\n    /// @notice The fee is invalid\\n    error InvalidFee();\\n}\\n\",\"keccak256\":\"0xc6f936719c01ce7ee4ba9ef66e8af75ca8a09b216efd38c0d66d87d08b05bc95\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibSanitize.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"./LibErrors.sol\\\";\\nimport \\\"./LibBasisPoints.sol\\\";\\n\\n/// @title Lib Sanitize\\n/// @notice Utilities to sanitize input values\\nlibrary LibSanitize {\\n    /// @notice Reverts if address is 0\\n    /// @param _address Address to check\\n    function _notZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert LibErrors.InvalidZeroAddress();\\n        }\\n    }\\n\\n    /// @notice Reverts if string is empty\\n    /// @param _string String to check\\n    function _notEmptyString(string memory _string) internal pure {\\n        if (bytes(_string).length == 0) {\\n            revert LibErrors.InvalidEmptyString();\\n        }\\n    }\\n\\n    /// @notice Reverts if fee is invalid\\n    /// @param _fee Fee to check\\n    function _validFee(uint256 _fee) internal pure {\\n        if (_fee > LibBasisPoints.BASIS_POINTS_MAX) {\\n            revert LibErrors.InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce078083ab565058f68cd7be35ffeb0d88ab990a769c905094520a46edbccfee\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibUint256.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Lib Uint256\\n/// @notice Utilities to perform uint operations\\nlibrary LibUint256 {\\n    /// @notice Converts a value to little endian (64 bits)\\n    /// @param _value The value to convert\\n    /// @return result The converted value\\n    function toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n        uint256 tempValue = _value;\\n        result = tempValue & 0xFF;\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        assert(0 == tempValue); // fully converted\\n        result <<= (24 * 8);\\n    }\\n\\n    /// @notice Returns the minimum value\\n    /// @param _a First value\\n    /// @param _b Second value\\n    /// @return Smallest value between _a and _b\\n    function min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a > _b ? _b : _a);\\n    }\\n\\n    /// @notice Returns the max value\\n    /// @param _a First value\\n    /// @param _b Second value\\n    /// @return Highest value between _a and _b\\n    function max(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a < _b ? _b : _a);\\n    }\\n\\n    /// @notice Performs a ceiled division\\n    /// @param _a Numerator\\n    /// @param _b Denominator\\n    /// @return ceil(_a / _b)\\n    function ceil(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a / _b) + (_a % _b > 0 ? 1 : 0);\\n    }\\n}\\n\",\"keccak256\":\"0x18d3a772fd7ee36faa69bd6d97f0d3eeae39b90ff42c1f66352650f09a940e17\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibUnstructuredStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.20;\\n\\n/// @title Lib Unstructured Storage\\n/// @notice Utilities to work with unstructured storage\\nlibrary LibUnstructuredStorage {\\n    /// @notice Retrieve a bool value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bool value\\n    function getStorageBool(bytes32 _position) internal view returns (bool data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an address value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The address value\\n    function getStorageAddress(bytes32 _position) internal view returns (address data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve a bytes32 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bytes32 value\\n    function getStorageBytes32(bytes32 _position) internal view returns (bytes32 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an uint256 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The uint256 value\\n    function getStorageUint256(bytes32 _position) internal view returns (uint256 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Sets a bool value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bool value to set\\n    function setStorageBool(bytes32 _position, bool _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an address value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The address value to set\\n    function setStorageAddress(bytes32 _position, address _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets a bytes32 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bytes32 value to set\\n    function setStorageBytes32(bytes32 _position, bytes32 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an uint256 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The uint256 value to set\\n    function setStorageUint256(bytes32 _position, uint256 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe48b249b789acdd6f9e1b80f6b1dc3fc69d5593c8b836fad803b7d9fd10dd841\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/migration/OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\nlibrary OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex {\\n    bytes32 internal constant KEY_INDEX_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.migration.operatorsRegistry.fundedKeyEventRebroadcasting.keyIndex\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(KEY_INDEX_SLOT);\\n    }\\n\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(KEY_INDEX_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x9fddb78a3a98b7964606a1361634a94ddd8fac369482ac216fb3cb97269911be\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/migration/OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\nlibrary OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex {\\n    bytes32 internal constant OPERATOR_INDEX_SLOT = bytes32(\\n        uint256(keccak256(\\\"river.state.migration.operatorsRegistry.fundedKeyEventRebroadcasting.operatorIndex\\\")) - 1\\n    );\\n\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(OPERATOR_INDEX_SLOT);\\n    }\\n\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(OPERATOR_INDEX_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x2b977dc30633393fa534fb863191bdfc5a001e5aeef9e9672b46f1329d6c8974\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/operatorsRegistry/CurrentValidatorExitsDemand.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title CurrentValidatorExitsDemand Storage\\n/// @notice This value controls the current demand for exits that still need to be triggered\\n/// @notice in order to notify the operators\\n/// @notice Utility to manage the CurrentValidatorExitsDemand in storage\\nlibrary CurrentValidatorExitsDemand {\\n    /// @notice Storage slot of the CurrentValidatorExitsDemand\\n    bytes32 internal constant CURRENT_VALIDATOR_EXITS_DEMAND_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.currentValidatorExitsDemand\\\")) - 1);\\n\\n    /// @notice Retrieve the CurrentValidatorExitsDemand\\n    /// @return The CurrentValidatorExitsDemand\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(CURRENT_VALIDATOR_EXITS_DEMAND_SLOT);\\n    }\\n\\n    /// @notice Sets the CurrentValidatorExitsDemand\\n    /// @param _newValue New CurrentValidatorExitsDemand\\n    function set(uint256 _newValue) internal {\\n        return LibUnstructuredStorage.setStorageUint256(CURRENT_VALIDATOR_EXITS_DEMAND_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x567ed6c833aebbc413b366b50d41a1f985b22036059c827a4ce9eb4ee260b1b1\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/operatorsRegistry/Operators.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Operators Storage\\n/// @notice Utility to manage the Operators in storage\\n/// @notice This state variable is deprecated and was kept due to migration logic needs\\nlibrary OperatorsV1 {\\n    /// @notice Storage slot of the Operators\\n    bytes32 internal constant OPERATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.operators\\\")) - 1);\\n\\n    /// @notice The Operator structure in storage\\n    struct Operator {\\n        /// @custom:attribute True if the operator is active and allowed to operate on River\\n        bool active;\\n        /// @custom:attribute Display name of the operator\\n        string name;\\n        /// @custom:attribute Address of the operator\\n        address operator;\\n        /// @dev The following values respect this invariant:\\n        /// @dev     keys >= limit >= funded >= stopped\\n\\n        /// @custom:attribute Staking limit of the operator\\n        uint256 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint256 funded;\\n        /// @custom:attribute The total count of keys of the operator\\n        uint256 keys;\\n        /// @custom:attribute The count of stopped validators. Stopped validators are validators\\n        ///                   that exited the consensus layer (voluntary or slashed)\\n        uint256 stopped;\\n        uint256 latestKeysEditBlockNumber;\\n    }\\n\\n    /// @notice The Operator structure when loaded in memory\\n    struct CachedOperator {\\n        /// @custom:attribute True if the operator is active and allowed to operate on River\\n        bool active;\\n        /// @custom:attribute Display name of the operator\\n        string name;\\n        /// @custom:attribute Address of the operator\\n        address operator;\\n        /// @custom:attribute Staking limit of the operator\\n        uint256 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint256 funded;\\n        /// @custom:attribute The total count of keys of the operator\\n        uint256 keys;\\n        /// @custom:attribute The count of stopped validators\\n        uint256 stopped;\\n        /// @custom:attribute The count of stopped validators. Stopped validators are validators\\n        ///                   that exited the consensus layer (voluntary or slashed)\\n        uint256 index;\\n        /// @custom:attribute The amount of picked keys, buffer used before changing funded in storage\\n        uint256 picked;\\n    }\\n\\n    /// @notice The structure at the storage slot\\n    struct SlotOperator {\\n        /// @custom:attribute Array containing all the operators\\n        Operator[] value;\\n    }\\n\\n    /// @notice The operator was not found\\n    /// @param index The provided index\\n    error OperatorNotFound(uint256 index);\\n\\n    /// @notice Retrieve the operator in storage\\n    /// @param _index The index of the operator\\n    /// @return The Operator structure\\n    function get(uint256 _index) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (r.value.length <= _index) {\\n            revert OperatorNotFound(_index);\\n        }\\n\\n        return r.value[_index];\\n    }\\n\\n    /// @notice Retrieve the operator count in storage\\n    /// @return The count of operators in storage\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Retrieve all the active operators\\n    /// @return The list of active operator structures\\n    function getAllActive() internal view returns (Operator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        Operator[] memory activeOperators = new Operator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                activeOperators[activeIdx] = r.value[idx];\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    /// @notice Retrieve all the active and fundable operators\\n    /// @return The list of active and fundable operators\\n    function getAllFundable() internal view returns (CachedOperator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (_hasFundableKeys(r.value[idx])) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        CachedOperator[] memory activeOperators = new CachedOperator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            Operator memory op = r.value[idx];\\n            if (_hasFundableKeys(op)) {\\n                activeOperators[activeIdx] = CachedOperator({\\n                    active: op.active,\\n                    name: op.name,\\n                    operator: op.operator,\\n                    limit: op.limit,\\n                    funded: op.funded,\\n                    keys: op.keys,\\n                    stopped: op.stopped,\\n                    index: idx,\\n                    picked: 0\\n                });\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    /// @notice Add a new operator in storage\\n    /// @param _newOperator Value of the new operator\\n    /// @return The size of the operator array after the operation\\n    function push(Operator memory _newOperator) internal returns (uint256) {\\n        LibSanitize._notZeroAddress(_newOperator.operator);\\n        LibSanitize._notEmptyString(_newOperator.name);\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_newOperator);\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Atomic operation to set the key count and update the latestKeysEditBlockNumber field at the same time\\n    /// @param _index The operator index\\n    /// @param _newKeys The new value for the key count\\n    function setKeys(uint256 _index, uint256 _newKeys) internal {\\n        Operator storage op = get(_index);\\n\\n        op.keys = _newKeys;\\n        op.latestKeysEditBlockNumber = block.number;\\n    }\\n\\n    /// @notice Checks if an operator is active and has fundable keys\\n    /// @param _operator The operator details\\n    /// @return True if active and fundable\\n    function _hasFundableKeys(OperatorsV1.Operator memory _operator) internal pure returns (bool) {\\n        return (_operator.active && _operator.limit > _operator.funded);\\n    }\\n}\\n\",\"keccak256\":\"0xc9f905dcf50b518f816f587c4d1ac3d2ffd5a2713d1c8e38060afd7f73c6ed07\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/operatorsRegistry/Operators.2.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Operators Storage\\n/// @notice Utility to manage the Operators in storage\\nlibrary OperatorsV2 {\\n    /// @notice Storage slot of the Operators\\n    bytes32 internal constant OPERATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.v2.operators\\\")) - 1);\\n\\n    /// @notice The Operator structure in storage\\n    struct Operator {\\n        /// @dev The following values respect this invariant:\\n        /// @dev     keys >= limit >= funded >= RequestedExits\\n\\n        /// @custom:attribute Staking limit of the operator\\n        uint32 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint32 funded;\\n        /// @custom:attribute The count of exit requests made to this operator\\n        uint32 requestedExits;\\n        /// @custom:attribute The total count of keys of the operator\\n        uint32 keys;\\n        /// @custom attribute The block at which the last edit happened in the operator details\\n        uint64 latestKeysEditBlockNumber;\\n        /// @custom:attribute True if the operator is active and allowed to operate on River\\n        bool active;\\n        /// @custom:attribute Display name of the operator\\n        string name;\\n        /// @custom:attribute Address of the operator\\n        address operator;\\n    }\\n\\n    /// @notice The Operator structure when loaded in memory\\n    struct CachedOperator {\\n        /// @custom:attribute Staking limit of the operator\\n        uint32 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint32 funded;\\n        /// @custom:attribute The count of exit requests made to this operator\\n        uint32 requestedExits;\\n        /// @custom:attribute The original index of the operator\\n        uint32 index;\\n        /// @custom:attribute The amount of picked keys, buffer used before changing funded in storage\\n        uint32 picked;\\n    }\\n\\n    /// @notice The Operator structure when loaded in memory for the exit selection\\n    struct CachedExitableOperator {\\n        /// @custom:attribute The count of funded validators\\n        uint32 funded;\\n        /// @custom:attribute The count of exit requests made to this operator\\n        uint32 requestedExits;\\n        /// @custom:attribute The original index of the operator\\n        uint32 index;\\n        /// @custom:attribute The amount of picked keys, buffer used before changing funded in storage\\n        uint32 picked;\\n    }\\n\\n    /// @notice The structure at the storage slot\\n    struct SlotOperator {\\n        /// @custom:attribute Array containing all the operators\\n        Operator[] value;\\n    }\\n\\n    /// @notice The operator was not found\\n    /// @param index The provided index\\n    error OperatorNotFound(uint256 index);\\n\\n    /// @notice Retrieve the operator in storage\\n    /// @param _index The index of the operator\\n    /// @return The Operator structure\\n    function get(uint256 _index) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (r.value.length <= _index) {\\n            revert OperatorNotFound(_index);\\n        }\\n\\n        return r.value[_index];\\n    }\\n\\n    /// @notice Retrieve the operators in storage\\n    /// @return The Operator structure array\\n    function getAll() internal view returns (Operator[] storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Retrieve the operator count in storage\\n    /// @return The count of operators in storage\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Retrieve all the active operators\\n    /// @return The list of active operator structures\\n    function getAllActive() internal view returns (Operator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n        uint256 operatorCount = r.value.length;\\n        Operator[] memory activeOperators = new Operator[](operatorCount);\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                activeOperators[activeCount] = r.value[idx];\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(activeOperators, activeCount)\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    /// @notice Retrieve the stopped validator count for an operator by its index\\n    /// @param stoppedValidatorCounts The storage pointer to the raw array containing the stopped validator counts\\n    /// @param index The index of the operator to lookup\\n    /// @return The amount of stopped validators for the given operator index\\n    function _getStoppedValidatorCountAtIndex(uint32[] storage stoppedValidatorCounts, uint256 index)\\n        internal\\n        view\\n        returns (uint32)\\n    {\\n        if (index + 1 >= stoppedValidatorCounts.length) {\\n            return 0;\\n        }\\n        return stoppedValidatorCounts[index + 1];\\n    }\\n\\n    /// @notice Retrieve all the active and fundable operators\\n    /// @dev This method will return a memory array of length equal to the number of operator, but only\\n    /// @dev populated up to the fundable operator count, also returned by the method\\n    /// @return The list of active and fundable operators\\n    /// @return The count of active and fundable operators\\n    function getAllFundable() internal view returns (CachedOperator[] memory, uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 fundableCount = 0;\\n        uint256 operatorCount = r.value.length;\\n        CachedOperator[] memory fundableOperators = new CachedOperator[](operatorCount);\\n\\n        uint32[] storage stoppedValidatorCounts = getStoppedValidators();\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (\\n                _hasFundableKeys(r.value[idx])\\n                    && _getStoppedValidatorCountAtIndex(stoppedValidatorCounts, idx) >= r.value[idx].requestedExits\\n            ) {\\n                Operator storage op = r.value[idx];\\n                fundableOperators[fundableCount] = CachedOperator({\\n                    limit: op.limit,\\n                    funded: op.funded,\\n                    requestedExits: op.requestedExits,\\n                    index: uint32(idx),\\n                    picked: 0\\n                });\\n                unchecked {\\n                    ++fundableCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(fundableOperators, fundableCount)\\n        }\\n\\n        return (fundableOperators, fundableCount);\\n    }\\n\\n    /// @notice Retrieve all the active and exitable operators\\n    /// @dev This method will return a memory array of length equal to the number of operator, but only\\n    /// @dev populated up to the exitable operator count, also returned by the method\\n    /// @return The list of active and exitable operators\\n    /// @return The count of active and exitable operators\\n    function getAllExitable() internal view returns (CachedExitableOperator[] memory, uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 exitableCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        CachedExitableOperator[] memory exitableOperators = new CachedExitableOperator[](operatorCount);\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (_hasExitableKeys(r.value[idx])) {\\n                Operator storage op = r.value[idx];\\n                exitableOperators[exitableCount] = CachedExitableOperator({\\n                    funded: op.funded,\\n                    requestedExits: op.requestedExits,\\n                    index: uint32(idx),\\n                    picked: 0\\n                });\\n                unchecked {\\n                    ++exitableCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(exitableOperators, exitableCount)\\n        }\\n\\n        return (exitableOperators, exitableCount);\\n    }\\n\\n    /// @notice Add a new operator in storage\\n    /// @param _newOperator Value of the new operator\\n    /// @return The size of the operator array after the operation\\n    function push(Operator memory _newOperator) internal returns (uint256) {\\n        LibSanitize._notZeroAddress(_newOperator.operator);\\n        LibSanitize._notEmptyString(_newOperator.name);\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_newOperator);\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Atomic operation to set the key count and update the latestKeysEditBlockNumber field at the same time\\n    /// @param _index The operator index\\n    /// @param _newKeys The new value for the key count\\n    function setKeys(uint256 _index, uint32 _newKeys) internal {\\n        Operator storage op = get(_index);\\n\\n        op.keys = _newKeys;\\n        op.latestKeysEditBlockNumber = uint64(block.number);\\n    }\\n\\n    /// @notice Checks if an operator is active and has fundable keys\\n    /// @param _operator The operator details\\n    /// @return True if active and fundable\\n    function _hasFundableKeys(OperatorsV2.Operator memory _operator) internal pure returns (bool) {\\n        return (_operator.active && _operator.limit > _operator.funded);\\n    }\\n\\n    /// @notice Checks if an operator is active and has exitable keys\\n    /// @param _operator The operator details\\n    /// @return True if active and exitable\\n    function _hasExitableKeys(OperatorsV2.Operator memory _operator) internal pure returns (bool) {\\n        return (_operator.active && _operator.funded > _operator.requestedExits);\\n    }\\n\\n    /// @notice Storage slot of the Stopped Validators\\n    bytes32 internal constant STOPPED_VALIDATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.stoppedValidators\\\")) - 1);\\n\\n    struct SlotStoppedValidators {\\n        uint32[] value;\\n    }\\n\\n    /// @notice Retrieve the storage pointer of the Stopped Validators array\\n    /// @return The Stopped Validators storage pointer\\n    function getStoppedValidators() internal view returns (uint32[] storage) {\\n        bytes32 slot = STOPPED_VALIDATORS_SLOT;\\n\\n        SlotStoppedValidators storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Sets the entire stopped validators array\\n    /// @param value The new stopped validators array\\n    function setRawStoppedValidators(uint32[] memory value) internal {\\n        bytes32 slot = STOPPED_VALIDATORS_SLOT;\\n\\n        SlotStoppedValidators storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = value;\\n    }\\n}\\n\",\"keccak256\":\"0x553d70a60cb7201d2b82bd0911435637b4055f07039975d1c6a4b26a15c5f1b7\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/operatorsRegistry/TotalValidatorExitsRequested.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title TotalValidatorExitsRequested Storage\\n/// @notice This value is the amount of performed exit requests, only increased when there is current exit demand\\n/// @notice Utility to manage the TotalValidatorExitsRequested in storage\\nlibrary TotalValidatorExitsRequested {\\n    /// @notice Storage slot of the TotalValidatorExitsRequested\\n    bytes32 internal constant TOTAL_VALIDATOR_EXITS_REQUESTED_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.totalValidatorExitsRequested\\\")) - 1);\\n\\n    /// @notice Retrieve the TotalValidatorExitsRequested\\n    /// @return The TotalValidatorExitsRequested\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(TOTAL_VALIDATOR_EXITS_REQUESTED_SLOT);\\n    }\\n\\n    /// @notice Sets the TotalValidatorExitsRequested\\n    /// @param _newValue New TotalValidatorExitsRequested\\n    function set(uint256 _newValue) internal {\\n        return LibUnstructuredStorage.setStorageUint256(TOTAL_VALIDATOR_EXITS_REQUESTED_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf28245145420eb2c5240c01b6425002f44512b7444d5099e28e440cbefd0d534\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/operatorsRegistry/ValidatorKeys.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibBytes.sol\\\";\\n\\n/// @title Validator Keys Storage\\n/// @notice Utility to manage the validator keys in storage\\nlibrary ValidatorKeys {\\n    /// @notice Storage slot of the Validator Keys\\n    bytes32 internal constant VALIDATOR_KEYS_SLOT = bytes32(uint256(keccak256(\\\"river.state.validatorKeys\\\")) - 1);\\n\\n    /// @notice Length in bytes of a BLS Public Key used for validator deposits\\n    uint256 internal constant PUBLIC_KEY_LENGTH = 48;\\n\\n    /// @notice Length in bytes of a BLS Signature used for validator deposits\\n    uint256 internal constant SIGNATURE_LENGTH = 96;\\n\\n    /// @notice The provided public key is not matching the expected length\\n    error InvalidPublicKey();\\n\\n    /// @notice The provided signature is not matching the expected length\\n    error InvalidSignature();\\n\\n    /// @notice Structure of the Validator Keys in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from operator index to key index to key value\\n        mapping(uint256 => mapping(uint256 => bytes)) value;\\n    }\\n\\n    /// @notice Retrieve the Validator Key of an operator at a specific index\\n    /// @param _operatorIndex The operator index\\n    /// @param _idx the Validator Key index\\n    /// @return publicKey The Validator Key public key\\n    /// @return signature The Validator Key signature\\n    function get(uint256 _operatorIndex, uint256 _idx)\\n        internal\\n        view\\n        returns (bytes memory publicKey, bytes memory signature)\\n    {\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        bytes storage entry = r.value[_operatorIndex][_idx];\\n\\n        publicKey = LibBytes.slice(entry, 0, PUBLIC_KEY_LENGTH);\\n        signature = LibBytes.slice(entry, PUBLIC_KEY_LENGTH, SIGNATURE_LENGTH);\\n    }\\n\\n    /// @notice Retrieve the raw concatenated Validator Keys\\n    /// @param _operatorIndex The operator index\\n    /// @param _idx The Validator Key index\\n    /// @return The concatenated public key and signature\\n    function getRaw(uint256 _operatorIndex, uint256 _idx) internal view returns (bytes memory) {\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_operatorIndex][_idx];\\n    }\\n\\n    /// @notice Retrieve multiple keys of an operator starting at an index\\n    /// @param _operatorIndex The operator index\\n    /// @param _startIdx The starting index to retrieve the keys from\\n    /// @param _amount The amount of keys to retrieve\\n    /// @return publicKeys The public keys retrieved\\n    /// @return signatures The signatures associated with the public keys\\n    function getKeys(uint256 _operatorIndex, uint256 _startIdx, uint256 _amount)\\n        internal\\n        view\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        publicKeys = new bytes[](_amount);\\n        signatures = new bytes[](_amount);\\n\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n        uint256 idx;\\n        for (; idx < _amount;) {\\n            bytes memory rawCredentials = r.value[_operatorIndex][idx + _startIdx];\\n            publicKeys[idx] = LibBytes.slice(rawCredentials, 0, PUBLIC_KEY_LENGTH);\\n            signatures[idx] = LibBytes.slice(rawCredentials, PUBLIC_KEY_LENGTH, SIGNATURE_LENGTH);\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n    }\\n\\n    /// @notice Set the concatenated Validator Keys at an index for an operator\\n    /// @param _operatorIndex The operator index\\n    /// @param _idx The key index to write on\\n    /// @param _publicKeyAndSignature The concatenated Validator Keys\\n    function set(uint256 _operatorIndex, uint256 _idx, bytes memory _publicKeyAndSignature) internal {\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_operatorIndex][_idx] = _publicKeyAndSignature;\\n    }\\n}\\n\",\"keccak256\":\"0xf92826b0723592d9e0d1d53057514caba760d4fc0f3793b973b853be22b4445b\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/CLSpec.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Consensus Layer Spec Storage\\n/// @notice Utility to manage the Consensus Layer Spec in storage\\nlibrary CLSpec {\\n    /// @notice Storage slot of the Consensus Layer Spec\\n    bytes32 internal constant CL_SPEC_SLOT = bytes32(uint256(keccak256(\\\"river.state.clSpec\\\")) - 1);\\n\\n    /// @notice The Consensus Layer Spec structure\\n    struct CLSpecStruct {\\n        /// @custom:attribute The count of epochs per frame, 225 means 24h\\n        uint64 epochsPerFrame;\\n        /// @custom:attribute The count of slots in an epoch (32 on mainnet)\\n        uint64 slotsPerEpoch;\\n        /// @custom:attribute The seconds in a slot (12 on mainnet)\\n        uint64 secondsPerSlot;\\n        /// @custom:attribute The block timestamp of the first consensus layer block\\n        uint64 genesisTime;\\n        /// @custom:attribute The count of epochs before considering an epoch final on-chain\\n        uint64 epochsToAssumedFinality;\\n    }\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        CLSpecStruct value;\\n    }\\n\\n    /// @notice Retrieve the Consensus Layer Spec from storage\\n    /// @return The Consensus Layer Spec\\n    function get() internal view returns (CLSpecStruct memory) {\\n        bytes32 slot = CL_SPEC_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Consensus Layer Spec value in storage\\n    /// @param _newCLSpec The new value to set in storage\\n    function set(CLSpecStruct memory _newCLSpec) internal {\\n        bytes32 slot = CL_SPEC_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newCLSpec;\\n    }\\n}\\n\",\"keccak256\":\"0x111bed0ac40bd03195b1091cb1d01b325af7390d5ec5297955cc5567f70fd2cc\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DailyCommittableLimits.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Daily Committable Limits storage\\n/// @notice Utility to manage the Daily Committable Limits in storage\\nlibrary DailyCommittableLimits {\\n    /// @notice Storage slot of the Daily Committable Limits storage\\n    bytes32 internal constant DAILY_COMMITTABLE_LIMITS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.dailyCommittableLimits\\\")) - 1);\\n\\n    /// @notice The daily committable limits structure\\n    struct DailyCommittableLimitsStruct {\\n        uint128 minDailyNetCommittableAmount;\\n        uint128 maxDailyRelativeCommittableAmount;\\n    }\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        DailyCommittableLimitsStruct value;\\n    }\\n\\n    /// @notice Retrieve the Daily Committable Limits from storage\\n    /// @return The Daily Committable Limits\\n    function get() internal view returns (DailyCommittableLimitsStruct memory) {\\n        bytes32 slot = DAILY_COMMITTABLE_LIMITS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Daily Committable Limits value in storage\\n    /// @param _newValue The new value to set in storage\\n    function set(DailyCommittableLimitsStruct memory _newValue) internal {\\n        bytes32 slot = DAILY_COMMITTABLE_LIMITS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0x5299d5f41a6f24b09b81a1a00da6db15fbe2aa16718bc435ecb60016897f1f90\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/ReportBounds.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Report Bounds Storage\\n/// @notice Utility to manage the Report Bounds in storage\\nlibrary ReportBounds {\\n    /// @notice Storage slot of the Report Bounds\\n    bytes32 internal constant REPORT_BOUNDS_SLOT = bytes32(uint256(keccak256(\\\"river.state.reportBounds\\\")) - 1);\\n\\n    /// @notice The Report Bounds structure\\n    struct ReportBoundsStruct {\\n        /// @custom:attribute The maximum allowed annual apr, checked before submitting a report to River\\n        uint256 annualAprUpperBound;\\n        /// @custom:attribute The maximum allowed balance decrease, also checked before submitting a report to River\\n        uint256 relativeLowerBound;\\n    }\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        ReportBoundsStruct value;\\n    }\\n\\n    /// @notice Retrieve the Report Bounds from storage\\n    /// @return The Report Bounds\\n    function get() internal view returns (ReportBoundsStruct memory) {\\n        bytes32 slot = REPORT_BOUNDS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Report Bounds in storage\\n    /// @param _newReportBounds The new Report Bounds value\\n    function set(ReportBoundsStruct memory _newReportBounds) internal {\\n        bytes32 slot = REPORT_BOUNDS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newReportBounds;\\n    }\\n}\\n\",\"keccak256\":\"0x032757c478e9132a66b7da31e2eb5f85f8f818503b51b3783c088d3625b3403a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrator Address Storage\\n/// @notice Utility to manage the Administrator Address in storage\\nlibrary AdministratorAddress {\\n    /// @notice Storage slot of the Administrator Address\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Administrator Address\\n    /// @return The Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Administrator Address\\n    /// @param _newValue New Administrator Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x9a8ea493ee319ecf7bb3955c0fcb7108c89193084b642f441f2858316d2dc7ae\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/PendingAdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Pending Administrator Address Storage\\n/// @notice Utility to manage the Pending Administrator Address in storage\\nlibrary PendingAdministratorAddress {\\n    /// @notice Storage slot of the Pending Administrator Address\\n    bytes32 public constant PENDING_ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.pendingAdministratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Pending Administrator Address\\n    /// @return The Pending Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Pending Administrator Address\\n    /// @param _newValue New Pending Administrator Address\\n    function set(address _newValue) internal {\\n        LibUnstructuredStorage.setStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xeb7b867d4df38b08393f42a7fd5d93dbb1ade1f9d30d47551f63ffc77816685b\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/RiverAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title River Address Storage\\n/// @notice Utility to manage the River Address in storage\\nlibrary RiverAddress {\\n    /// @notice Storage slot of the River Address\\n    bytes32 internal constant RIVER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.riverAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the River Address\\n    /// @return The River Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(RIVER_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the River Address\\n    /// @param _newValue New River Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(RIVER_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf8e4d6ce9f7070232e15411daa2d9d3163f98a67f7257fb238911a8d4e51acdc\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Version Storage\\n/// @notice Utility to manage the Version in storage\\nlibrary Version {\\n    /// @notice Storage slot of the Version\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    /// @notice Retrieve the Version\\n    /// @return The Version\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    /// @notice Sets the Version\\n    /// @param _newValue New Version\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(VERSION_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x011c09f065ea555f6fbaa99710c1388bcb047afef30ab6558ca1ee81980ebf01\",\"license\":\"BUSL-1.1\"},\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234610092577f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7190600019807f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfc558152604060208201523660408201523660006060830137600060603683010152606081601f19601f3601168101030190a160405161415e90816100988239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806305f63c8a146102075780630e18b68114610202578063147bf6c4146101fd5780631864636c146101f85780631a4a7c61146101f3578063217aad3c146101ee578063277c9d45146101e95780632d1fc39d146101e4578063354454c5146101df5780633587ad60146101da57806339251321146101d55780634a3c63bb146101d057806350545d2f146101cb57806354001d09146101c657806354fd4d50146101c15780635876220f146101bc5780635a16f135146101b757806361685d9f146101b257806363b4118f146101ad5780636e9960c3146101a857806370b23845146101a3578063718929ad1461019e5780638cb310031461019957806390de236f14610194578063a519f0601461018f578063b0da59b21461018a578063b405e17414610185578063b53b937b14610180578063d04681561461017b578063eb47adc6146101765763f87e52961461017157600080fd5b611a13565b6119f7565b6119c1565b6119a6565b6112af565b611284565b61124e565b611223565b611144565b611082565b611039565b610ff5565b610f8b565b610f5f565b610ec7565b610e46565b610de9565b610cf5565b610bc1565b610b69565b610b2d565b610ae4565b6107fc565b61076a565b61071f565b6104dd565b6104b2565b610474565b6103d0565b610322565b6102d5565b919082519283825260005b848110610238575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610217565b906102d29063ffffffff80845116825280602085015116602083015280604085015116604083015260608401511660608201526001600160401b0360808401511660808201526102a560a084015160a083019015159052565b60e0806102c160c08601516101008060c087015285019061020c565b9401516001600160a01b0316910152565b90565b3461031d57602036600319011261031d576102ee612017565b50610319610305610300600435613647565b611ce1565b60405191829160208352602083019061024c565b0390f35b600080fd5b3461031d576000806003193601126103a1576000805160206140498339815191528054906001600160a01b0382163303610389576103608392611a37565b55807f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f48180a280f35b60405163472511eb60e11b8152336004820152602490fd5b80fd5b600435906001600160a01b038216820361031d57565b602435906001600160a01b038216820361031d57565b3461031d57602036600319011261031d576103e96103a4565b6000805160206140e9833981519152546001600160a01b03919082163303610389578060008051602061404983398151915255167f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f4600080a2005b9181601f8401121561031d578235916001600160401b03831161031d576020808501948460051b01011161031d57565b3461031d57604036600319011261031d576024356001600160401b03811161031d576104a76104b0913690600401610444565b906004356128a4565b005b3461031d57600036600319011261031d57602060008051602061410983398151915254604051908152f35b3461031d576000806003193601126103a1577f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfc8054906001918083036106805750600290557f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe1011254825b81811061058357837f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a716040518061057d3682611ad5565b0390a180f35b8061058e84926135ec565b61059790611fa2565b606090818101516105ab9063ffffffff1690565b9160809088828401516105c19063ffffffff1690565b9160a090818601516105d69063ffffffff1690565b9460e095868801516105ee906001600160401b031690565b9288516105fa90151590565b956020998a810151986040809201516106189060018060a01b031690565b9b610621611c96565b63ffffffff909e168e5263ffffffff909116908d01528b015263ffffffff909116908901526001600160401b03909116908701529015159085015260c08401526001600160a01b039091169082015261067990613a5b565b5001610546565b8260449160405191631cfd276760e31b835260048301526024820152fd5b908082519081815260208091019281808460051b8301019501936000915b8483106106cc5750505050505090565b90919293949584806106ea600193601f198682030187528a5161020c565b98019301930191949392906106bc565b90916107116102d29360408452604084019061069e565b91602081840391015261069e565b3461031d57602036600319011261031d576000805160206140c9833981519152546001600160a01b031633036103895761075a600435612e26565b90610319604051928392836106fa565b3461031d57604036600319011261031d576000805160206140c983398151915254602435906001600160a01b03163303610389576000805160206140298339815191525490600080516020614009833981519152548281018091116107f75781039081116107f7576107de906004356135db565b806107e557005b81018082116107f7576104b091612b85565b611a82565b3461031d5760608060031936011261031d576001600160401b03906004803583811161031d5761082f9036908301610444565b92909160243585811161031d576108499036908301610444565b6000805160206140e98339815191525491969091604435906001600160a01b03163303610acd57828703610abc578615610aab5760005b87811061088957005b88610895828a8a6126f6565b356108aa6108a5848884956126f6565b612706565b9083151580610a88575b610a77576108c181613647565b90815463ffffffff908782821683871694818614610a2457508a8360801c169081831080610a1b575b6109ca5750505081818d1c16808411610995575060201c1680911061095b5750805463ffffffff191663ffffffff92909216918217905560405190815260019291907f3adbeb5fbb94c52b64d90b31188c68a740868dde2238e03a04d581cae22cedf090602090a201965b96610880565b60405163044816df60e51b8152938493610991935090848b0190815263ffffffff91821660208201529116604082015260600190565b0390fd5b60408051630d7bdb4960e41b8152808e0189815263ffffffff808a166020830152909316918301919091529081906060010390fd5b6040805163ffffffff92831681529890911660208901526001999892979196509194507f5482b63bdf9e3775fdd3157e4933cfbc1d6fa1ec354ed3fc9a547e5438fd3e4e9350909150a40196610955565b508086116108ea565b60405163ffffffff90981688526001999850967fe8b22569f1f7ba3802b89b579382ccac4e223f8062d6dd73f9cd757bd46ff8aa9650945084935050602083019150610a6d9050565b0390a20196610955565b6040516357e557ed60e11b81528890fd5b50610aa6610a9f610a9886611d9e565b8d8d6126f6565b3582111590565b6108b4565b604051637b329aa360e01b81528490fd5b60405163a9854bc960e01b81528490fd5b60405163472511eb60e11b81523381860152602490fd5b3461031d57602036600319011261031d5761075a6004356122a6565b9181601f8401121561031d578235916001600160401b03831161031d576020838186019501011161031d57565b3461031d57604036600319011261031d576024356001600160401b03811161031d57610b606104b0913690600401610b00565b906004356124d2565b3461031d57600036600319011261031d57610b82612b57565b60008051602061400983398151915254906000805160206140298339815191525482018092116107f75760409163ffffffff8351921682526020820152f35b3461031d5760408060031936011261031d576001600160401b0360043581811161031d57610bf3903690600401610b00565b9091610bfd6103ba565b6000805160206140e9833981519152546001600160a01b03929083163303610cde57610ccd9492869492610cbd610cb87f28febbb5486eda5a1e47ad578f9cb32c8a1983c86c80ab823ea5dc1fc04ede5e94610c8d6103199b5191610c6183611c21565b600083526000602084015260008b84015260006060840152431660808301906001600160401b03169052565b600160a0820152610c9f36888a612373565b60c08201526001600160a01b03841660e0820152613a5b565b611d9e565b96879487519384931696836123b9565b0390a3519081529081906020820190565b855163472511eb60e11b8152336004820152602490fd5b3461031d57604036600319011261031d57610d0e6103a4565b610d166103ba565b7f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfc805480610dca57507f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a71926001610d6d9255611a37565b610d7681613590565b6000805160206140c9833981519152819055604051906001600160a01b03167ffc0d749143b04e0d92a3b49edae84a45f6bc88b75e99d9118ec4d7e87fe626c5600080a280610dc53682611aed565b0390a1005b60449060405190631cfd276760e31b8252600060048301526024820152fd5b3461031d57600036600319011261031d5760405160408101908082106001600160401b03831117610e4157610319916040526005815264312e322e3160d81b602082015260405191829160208352602083019061020c565b611c0b565b3461031d57600036600319011261031d57610e5f612056565b805180610eb1575b50604051809160208083018184528251809152816040850193019160005b828110610e9457505050500390f35b835163ffffffff1685528695509381019392810192600101610e85565b6000825260001901602090910190815238610e67565b3461031d57604036600319011261031d576004356024358015159081810361031d576000805160206140e9833981519152546001600160a01b03163303610389577fe3bc5e5d3b000a1f65d146c40a38d89b1743b5729f4c6fe65f2e4b2dc620f2f291610f56602092610f3986613647565b805460ff60c01b191691151560c01b60ff60c01b16919091179055565b604051908152a2005b3461031d57602036600319011261031d576020610f7d600435613683565b63ffffffff60405191168152f35b3461031d57604036600319011261031d57610fd8600435610fc260243563ffffffff610fe6610fba8386613e27565b949095613647565b549360405196879660608852606088019061020c565b90868203602088015261020c565b9260201c161160408301520390f35b3461031d57600036600319011261031d576000805160206140e9833981519152546040516001600160a01b039091168152602090f35b63ffffffff81160361031d57565b3461031d57606036600319011261031d576024356110568161102b565b604435906001600160401b03821161031d576110796104b0923690600401610b00565b91600435612710565b3461031d57602036600319011261031d57600080516020614029833981519152546110af600435826135db565b80156110d0576110be90613178565b81038181116107f7576104b091612b85565b60405163ed94f97f60e01b8152600490fd5b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106111165750505050505090565b9091929394958480611134600193603f198682030187528a5161024c565b9801930193019194939290611106565b3461031d576000806003193601126103a157806000805160206141098339815191525461117081612c77565b9161117e6040519384611c58565b818352601f1961118d83612c77565b01815b81811061120c5750505b8181106111b2578383526040518061031985826110e2565b6111c96111be82612c29565b505460c01c60ff1690565b6111d6575b60010161119a565b92600180916111ed6111e787612c29565b50611ce1565b6111f7828761228d565b52611202818661228d565b50019390506111ce565b602090611217612017565b82828801015201611190565b3461031d57600036600319011261031d57602060008051602061400983398151915254604051908152f35b3461031d57600036600319011261031d576000805160206140c9833981519152546040516001600160a01b039091168152602090f35b3461031d57600036600319011261031d57602060008051602061402983398151915254604051908152f35b3461031d5760408060031936011261031d57600480356001600160401b03811161031d576112e09036908301610444565b6000805160206140c9833981519152549091906001600160a01b031633036119905761130a612bd2565b9382855282156119815761131e8551611d9e565b6000805160206141098339815191525410611972576020850161133f612056565b808252519082870191808352875110611962578196956113626108a587876126ed565b63ffffffff1660608801908152608088019760008952600080516020614029833981519152549060a081019082825260c08101928352600080516020614009833981519152549060e0810190828252610100810192835260016000995b5181101561167c576113d56108a5828f8f6126f6565b6113f96113f06113e6848d5161228d565b5163ffffffff1690565b63ffffffff1690565b63ffffffff8092161061166c576114166108a58f8f9085916126f6565b8161143c6113f061142e61142987611d9e565b612c29565b505460201c63ffffffff1690565b911611611610578d8f918d8f916114576108a58786866126f6565b906114786113f061146a6114298a611d9e565b505460401c63ffffffff1690565b911611611511575b6114ee6108a58661150a95819795611500957f773694db4f98cd263e42d4f798bcf603781d4491e48e8cbe96c219c1f13b777d6114e66114c160019d611d9e565b926114d06108a58888886126f6565b905163ffffffff90911681529081906020820190565b0390a26126f6565b825163ffffffff166127ab565b6127ab565b63ffffffff169052565b018e6113bf565b9c908493918e61152086611d9e565b9061152a87611d9e565b61153390612c29565b505460401c63ffffffff169061154a8888876126f6565b61155390612706565b905163ffffffff9283168152911660208201527f281aaa50816d3a5bf2911e3c0854a3f2ebe4880698575d799ff5becfd74d777890604090a26115978585846126f6565b6115a090612706565b6115a986611d9e565b6115b290612c29565b505460401c63ffffffff166115c69161290f565b63ffffffff166115d591611aa6565b9d6115e18585846126f6565b6115ea90612706565b6115f386611d9e565b6115fc90612c29565b509061160791612c54565b90919350611480565b8c898f8e8561163e61142e6114296116386108a5856109919861163282611d9e565b9b6126f6565b93611d9e565b915163febc7af160e01b8152948594850190815263ffffffff91821660208201529116604082015260600190565b8b516333bbc48560e21b81528990fd5b909c9b9a999897505b8c518110156118555761169c6108a5828d8d6126f6565b6116ae6113f061142e61142985611d9e565b63ffffffff80921611611833578b8b8b8f936116ce6108a58786866126f6565b906116e16113f061146a6114298a611d9e565b911611611730575b6114ee6108a58661172a95819795611500957f773694db4f98cd263e42d4f798bcf603781d4491e48e8cbe96c219c1f13b777d6114e66114c160019d611d9e565b01611685565b505050509661173e88611d9e565b8b8b8a61174a81611d9e565b61175390612c29565b505460401c63ffffffff1692611768926126f6565b61177190612706565b8b5163ffffffff9283168152911660208201527f281aaa50816d3a5bf2911e3c0854a3f2ebe4880698575d799ff5becfd74d777890604090a26117b5888c8c6126f6565b6117be90612706565b6117c789611d9e565b6117d090612c29565b505460401c63ffffffff166117e49161290f565b63ffffffff166117f391611aa6565b96808b8d8c8c6118048585846126f6565b61180d90612706565b61181686611d9e565b61181f90612c29565b509061182a91612c54565b909193506116e9565b8a886109918c8f61163e61142e6114296116386108a58b809661163282611d9e565b506118808b9596979a99989a61186c818451611aa6565b835261187a855180926135db565b90611dad565b835251905190818103611952575b505051905190818103611942575b50506118bd6113f06118b2845163ffffffff1690565b925163ffffffff1690565b63ffffffff80921603611932576118db602435925163ffffffff1690565b16116119245750610dc57fb795d99e37bbcdcebb613387f4e924b750cbae0af45b48ba52bfe1137c10e9929361191a611915368686612c8e565b613d27565b5192839283612ce6565b8351634eb7083160e01b8152fd5b8551636be992a360e11b81528390fd5b61194b91612b85565b868061189c565b61195b9161344d565b888061188e565b8251634dbe00c960e01b81528690fd5b51634eb7083160e01b81528390fd5b516397791ee160e01b81528390fd5b835163472511eb60e11b81523381850152602490fd5b3461031d57600036600319011261031d576020610f7d612b57565b3461031d57600036600319011261031d57600080516020614049833981519152546040516001600160a01b039091168152602090f35b3461031d57602036600319011261031d576104b0600435611def565b3461031d57604036600319011261031d576104b0611a2f6103ba565b6004356123e1565b611a4081613590565b6000805160206140e98339815191528190556001600160a01b03167f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a1600080a2565b634e487b7160e01b600052601160045260246000fd5b90600182018092116107f757565b919082018092116107f757565b90602091808252806000848401376000828201840152601f01601f1916010190565b9060406102d292600181528160208201520190611ab3565b9060406102d292600081528160208201520190611ab3565b90600182811c92168015611b35575b6020831014611b1f57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611b14565b6000805160206140a98339815191526000527f95aa751b3a4112433a8300d32b75142a98253c58b18f312756921c204709ced890565b9060009291805491611b8683611b05565b918282526001938481169081600014611be85750600114611ba8575b50505050565b90919394506000526020928360002092846000945b838610611bd4575050505001019038808080611ba2565b805485870183015294019385908201611bbd565b9294505050602093945060ff191683830152151560051b01019038808080611ba2565b634e487b7160e01b600052604160045260246000fd5b61010081019081106001600160401b03821117610e4157604052565b602081019081106001600160401b03821117610e4157604052565b90601f801991011681019081106001600160401b03821117610e4157604052565b90611c94611c8d9260405193848092611b75565b0383611c58565b565b60405190611c9482611c21565b6040519060a082018281106001600160401b03821117610e4157604052565b60405190608082018281106001600160401b03821117610e4157604052565b90611c94604051611cf181611c21565b60e0611d9060028396611d7160ff8254611d5263ffffffff8083168a52611d26818460201c1660208c019063ffffffff169052565b611d3e818460401c1660408c019063ffffffff169052565b8260601c1660608a019063ffffffff169052565b608081811c6001600160401b03169089015260c01c16151560a0870152565b611d7d60018201611c79565b60c086015201546001600160a01b031690565b6001600160a01b0316910152565b6000198101919082116107f757565b919082039182116107f757565b91906020611dd260019260408652604086019061069e565b930152565b91906020611dd260009260408652604086019061069e565b60008051602061408983398151915254600019808214611f905760008051602061410983398151915291825415611f745791927fbd3f712f2cd882f839e84eb12fdaf64f8227409d140027dbdcd5e2ee4d57fa1f54905b80151580611f6a575b15611f28576020611e6261030086613647565b0191611e91611e8a611e8483611e7f6113f0885163ffffffff1690565b611dad565b846135db565b8287613e89565b5092857f0786596b8e43634ef53d523fd318795a1182175b0b0a658bc4aac58ecfcc541160405180611ec38882611dba565b0390a2611ed76113f06118b2865185611aa6565b03611f105750611eff90600094611eee8754611d9e565b8103611f07575083925b5190611dad565b929092611e46565b60010192611ef8565b90611f22611eff928496945190611aa6565b94611ef8565b5091611c949350611f46915060008051602061408983398151915255565b7fbd3f712f2cd882f839e84eb12fdaf64f8227409d140027dbdcd5e2ee4d57fa1f55565b5082841415611e4f565b50505050611c9460001960008051602061408983398151915255565b604051630871a03f60e01b8152600490fd5b906007611fad611c96565b92611fc2611fbc825460ff1690565b15158552565b611fce60018201611c79565b602085015260028101546001600160a01b031660408501526003810154606085015260048101546080850152600581015460a0850152600681015460c0850152015460e0830152565b6040519061202482611c21565b8160e06000918281528260208201528260408201528260608201528260808201528260a0820152606060c08201520152565b604080516000805160206140a9833981519152548082529092918390602082019061207f611b3f565b9360005b8160078201106121a457611c9495549282821061218b575b82821061216e575b828210612154575b50818110612139575b81811061211e575b818110612103575b8181106120e8575b106120da575b500383611c58565b60e01c8152602001386120d2565b60c083901c63ffffffff1684529260019060200193016120cc565b60a083901c63ffffffff1684529260019060200193016120c4565b608083901c63ffffffff1684529260019060200193016120bc565b606083901c63ffffffff1684529260019060200193016120b4565b83901c63ffffffff168452926001906020019301386120ab565b602084811c63ffffffff16865291949091600191019401906120a3565b63ffffffff84168552909360019060200194019061209b565b919350916001610100600892612258885461224d63ffffffff6121ce8582851663ffffffff169052565b6121e560208285828901921c1663ffffffff169052565b63ffffffff838c1c821616858c015261220b60608285828901921c1663ffffffff169052565b61222260808285828901921c1663ffffffff169052565b61223960a08285828901921c1663ffffffff169052565b60c09083828701921c1663ffffffff169052565b60e090811c90830152565b0195019101918693919492612083565b60001981146107f75760010190565b634e487b7160e01b600052603260045260246000fd5b80518210156122a15760209160051b010190565b612277565b60609182916122b3613752565b91821561236a576122c5908383612f83565b60005b8281106122d457505050565b60806122f36113f0826122e7858761228d565b51015163ffffffff1690565b612307575b5061230290612268565b6122c8565b81959661235d6123576123639361232660606122e7612302988a61228d565b6122e78b8961234d61233d60206122e7858561228d565b9563ffffffff948594859461228d565b1693169116613e89565b92612d8e565b97612d8e565b94906122f8565b50606093505050565b9291926001600160401b038211610e41576040519161239c601f8201601f191660200184611c58565b82948184528183011161031d578281602093846000960137010152565b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b9060018060a01b036000805160206140e9833981519152541633146124635761240982613647565b80546124199060c01c60ff161590565b61244a576002015461243b906001600160a01b03165b6001600160a01b031690565b330361038957611c9491612468565b6040516301550a7360e41b815260048101849052602490fd5b611c94915b9061247281613590565b6124a181600261248185613647565b0180546001600160a01b0319166001600160a01b03909216919091179055565b6001600160a01b0316907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e7600080a3565b919060018060a01b036000805160206140e98339815191525416331461254d576124fb83613647565b805461250b9060c01c60ff161590565b6125345760020154612525906001600160a01b031661242f565b330361038957611c94926125b2565b6040516301550a7360e41b815260048101859052602490fd5b611c94926125b2565b818110612561575050565b60008155600101612556565b9190601f811161257c57505050565b611c94926000526020600020906020601f840160051c830193106125a8575b601f0160051c0190612556565b909150819061259b565b9092916125c86125c3368387612373565b6135b2565b600193846125d584613647565b016001600160401b038311610e41576125f8836125f28354611b05565b8361256d565b600095601f8411600114612665578380917f9ad13f126d3d603b0b284edba7645ca0e423840767c48809bb5f87e72197e11496979860009361265a575b501b906000198560031b1c19161790555b612655604051928392836123b9565b0390a2565b850135925038612635565b601f1984169661267a83600052602060002090565b90805b8981106126d75750857f9ad13f126d3d603b0b284edba7645ca0e423840767c48809bb5f87e72197e114979899106126bd575b505083811b019055612646565b840135600019600387901b60f8161c1916905538806126b0565b858201358355918301916020918201910161267d565b90156122a15790565b91908110156122a15760051b0190565b356102d28161102b565b92919060018060a01b036000805160206140e98339815191525416331461278c5761273a84613647565b805461274a9060c01c60ff161590565b6127735760020154612764906001600160a01b031661242f565b330361038957611c94936127c3565b6040516301550a7360e41b815260048101869052602490fd5b611c94936127c3565b906090820291808304609014901517156107f757565b91909163ffffffff808094169116019182116107f757565b919392909363ffffffff94858116958615612892576127e187612795565b8403612880576128036113f06127f687613647565b5460601c63ffffffff1690565b9660005b81811061284857505061264691612842917f402e5ac3e483073137c527378b15e69f7f4a1c75c1adc0aa36f0c456876c05a0969798166127ab565b85613c08565b8061287a61286a61285a600194612795565b612865368b8b612373565b61353c565b612874838d611aa6565b8a613f3c565b01612807565b604051630368f86360e41b8152600490fd5b6040516379b348ff60e11b8152600490fd5b919060018060a01b036000805160206140e983398151915254163314612906576128cd83613647565b80546128dd9060c01c60ff161590565b61253457600201546128f7906001600160a01b031661242f565b330361038957611c949261294e565b611c949261294e565b63ffffffff91821690821603919082116107f757565b60405161293181611c3d565b60008152906000368137565b9060206102d292818152019061020c565b91909181156128925761296081613647565b91825463ffffffff92838260601c16928361297b82896126ed565b351015612b455761299561298e82611d9e565b82896126f6565b3596858460201c168810612b335790859392916129bd6129b78684168861290f565b84613c08565b6000915b808310612a2c575050505016036129f757508054611c94925060601c63ffffffff1663ffffffff1663ffffffff19825416179055565b612a086113f0835463ffffffff1690565b8310612a1357505050565b611c94921663ffffffff1663ffffffff19825416179055565b909192939450612a3d8382846126f6565b359280151580612b10575b612afe577f70cf8064c7574b284afe278226e25779f45a4c3715653674aa651b34e9a19092612af0600187930195612ae4612a83888c611dad565b612ad5612a908488613e27565b5093612ace612ac984612aba8b600052600080516020614069833981519152602052604060002090565b90600052602052604060002090565b611c79565b9088613f3c565b612add612925565b9086613f3c565b6040519182918261293d565b0390a29086949392916129c1565b60405163c9ee26af60e01b8152600490fd5b50612b2e612b27612b2083611d9e565b84866126f6565b3585101590565b612a48565b60405163213af80760e21b8152600490fd5b6040516317df2d8d60e01b8152600490fd5b6000805160206140a9833981519152805415612b7f5760005263ffffffff6020600020541690565b50600090565b6000805160206140298339815191528290556040805191825260208201929092527f209bf6aaa2d8c150b27b3c081f8c86a46f008cc41d11f2ffaeb0a08d9b933e0691819081015b0390a1565b6040519061012082018281106001600160401b03821117610e415760405281610100600091828152606060208201528260408201528260608201528260808201528260a08201528260c08201528260e08201520152565b60008051602061410983398151915280548210156122a1576000526003602060002091020190600090565b805463ffffffff60401b191660409290921b63ffffffff60401b16919091179055565b6001600160401b038111610e415760051b60200190565b9291612c9982612c77565b91612ca76040519384611c58565b829481845260208094019160051b810192831161031d57905b828210612ccd5750505050565b8380918335612cdb8161102b565b815201910190612cc0565b90916040602092828482018583525201929160005b828110612d09575050505090565b90919293828060019263ffffffff8835612d228161102b565b16815201950193929101612cfb565b604051612d3d81611c3d565b6000815290565b90612d4e82612c77565b612d5b6040519182611c58565b8281528092612d6c601f1991612c77565b019060005b828110612d7d57505050565b806060602080938501015201612d71565b918251825181018091116107f757612da590612d44565b9060005b8451811015612ddc5780612dbf6001928761228d565b51612dca828661228d565b52612dd5818561228d565b5001612da9565b509160005b8151811015612e1f5780612e18612dfa6001938561228d565b51612e06885184611aa6565b90612e11828861228d565b528561228d565b5001612de1565b5090925050565b6060918291612e33613752565b918215612f6c57612e45908383612f83565b60005b828110612e5457505050565b6080612e676113f0826122e7858761228d565b612e7b575b50612e7690612268565b612e48565b949590612f66612f15612f0a83612f0487612e7697612ecd6113f060608f612ec56122e791612eae846122e78c8b61228d565b6122e78b8a61234d61233d60206122e7858561228d565b98909661228d565b7f0786596b8e43634ef53d523fd318795a1182175b0b0a658bc4aac58ecfcc541160405180612efc8682611dd7565b0390a2612d8e565b9a612d8e565b976122e7848761228d565b612f45612f32612f2d6113f060606122e7888b61228d565b613647565b916114fb835463ffffffff9060201c1690565b67ffffffff0000000082549160201b169067ffffffff000000001916179055565b90612e6c565b505050915050612f7a612d31565b906102d2612d31565b91805b612f8f57505050565b6000905b82821061309b575b828214611ba257612fab82611a98565b83811061304657509081611e7f8261302661301f6130409661301a6130156113f08c61300f612fe8612fdd8a8461228d565b515163ffffffff1690565b91613009612ffb60206122e78d8561228d565b916122e760809c8d9261228d565b906127ab565b9061290f565b6135cc565b6135db565b948861228d565b510161150063ffffffff85166114fb835163ffffffff1690565b80612f86565b613059613053828761228d565b516130e5565b613066613053858861228d565b1180613082575b61307a575b600101612fab565b915081613072565b50613096613090828761228d565b516130bf565b61306d565b91906130aa613090828661228d565b6130b8576001019091612f93565b9091612f9b565b63ffffffff806130dc8160208501511682608086015116906127ab565b92511691161090565b61311463ffffffff9161300f83606061310b8260208601511683608087015116906127ab565b93015116613683565b1690565b91909163ffffffff808094169116029182169182036107f757565b634e487b7160e01b600052601260045260246000fd5b9063ffffffff80911691821561315e57160690565b613133565b9063ffffffff80911691821561315e57160490565b906131816138bb565b8093919315613420576000805160206140098339815191525482918190835b613281575b60005b8181106131d65750506102d29495508181036131c6575b5050611dad565b6131cf9161344d565b38806131bf565b60019060606131ec6113f0826122e7858e61228d565b6131f8575b50016131a8565b7f0377278faa3eeab09525915d783771e1b00fec4797719afc368b56f68562792561327860406132508d6130096132366113f0856122e78b8661228d565b966122e78961324a60206122e7838861228d565b9461228d565b906132638261325e87613647565b612c54565b5163ffffffff90911681529081906020820190565b0390a2386131f1565b939060008081825b888110613399575063ffffffff9283831692831561338d578661301a6113f0856132b96132be966113f09661290f565b613118565b916132d66132cf6113f08486613149565b9284613163565b9060005b8c8b82106133055750505050506132fe92916132f891168092611aa6565b92611dad565b93846131a0565b61331c6113f061331684869461228d565b51613428565b1461332a575b6001016132da565b8c613368851515916000848460001461337957611500915061335760609161324a60ff60015b168b6127ab565b5101916114fb835163ffffffff1690565b156133225760001990930192613322565b61335760609161324a60ff61150095613350565b505050505090936131a5565b9497959398906133ae613316878d9a9d61228d565b63ffffffff91908281168584168181036133de5750505090600180920116955b0199969998939597949098613289565b819297939491969596116000146133fe57505050509190600180956133ce565b8296929893989594951610613417575b506001906133ce565b9350600161340e565b506000925050565b6102d29061300f63ffffffff91828151169260608160208401511692015116906127ab565b6000805160206140098339815191528290556040805191825260208201929092527f0aa79fd8feb16e52ff075abb8f8bec67362d3b06b2ed230008e7810515286bf09181908101612bcd565b60308151106134e2576040519060108201906010604084019101905b8083106134cf57505060308252601f01601f191660405290565b90918251815260208091019201906134b5565b604051633b99b53d60e01b8152600490fd5b60908151106134e2576040519060208083019160500190608084015b80841061352b5750506060835250601f01601f191660405290565b825184529281019291810191613510565b90815160908201908183116107f757106134e2576040519160108084019260a08501920101905b80831061357d57505060908252601f01601f191660405290565b9091825181526020809101920190613563565b6001600160a01b0316156135a057565b60405163f6b2911f60e01b8152600490fd5b51156135ba57565b604051638d46fe0560e01b8152600490fd5b60058111156102d25750600590565b818111156135e7575090565b905090565b7f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe1011280548281111561362e578210156122a15760005260206000209060031b0190565b6040516302d72d2160e01b815260048101849052602490fd5b8060008051602061410983398151915254111561366b5761366790612c29565b5090565b602490604051906302d72d2160e01b82526004820152fd5b600181018091116107f7576000805160206140a98339815191529081548110156136c75763ffffffff9160005260e060206000208260031c01549160051b161c1690565b5050600090565b906136d882612c77565b60406136e681519283611c58565b83825281936136f7601f1991612c77565b019060005b8281106137095750505050565b81519060a08201918083106001600160401b03841117610e41576020928452600081528260008183015260008583015260006060830152600060808301528287010152016136fc565b600090816000805160206141098339815191525461376f816136ce565b91805b828110613783575050508281529190565b6137976137926111e783612c29565b613c61565b80613817575b6137aa575b600101613772565b94600180916137b888612c29565b50546137f26137c5611ca3565b63ffffffff8381168252602084811c821690830152604093841c811693820193909352918a166060830152565b846080820152613802828861228d565b5261380d818761228d565b50019590506137a2565b5061382181613683565b63ffffffff6138356113f061146a85612c29565b9116101561379d565b9061384882612c77565b604061385681519283611c58565b8382528193613867601f1991612c77565b019060005b8281106138795750505050565b81519060808201918083106001600160401b03841117610e4157602092845260008152826000818301526000858301526000606083015282870101520161386c565b60009081600080516020614109833981519152546138d88161383e565b91805b8281106138ec575050508281529190565b6139006138fb6111e783612c29565b613c87565b61390d575b6001016138db565b946001809161391b88612c29565b5054613968613928611cc2565b9163ffffffff61395a60206139478385831c16879063ffffffff169052565b63ffffffff604094851c84161690860152565b8b1663ffffffff1690830152565b846060820152613978828861228d565b52613983818761228d565b5001959050613905565b91909182516001600160401b038111610e41576139b4816139ae8454611b05565b8461256d565b602080601f83116001146139f05750819293946000926139e5575b50508160011b916000199060031b1c1916179055565b0151905038806139cf565b90601f19831695613a0685600052602060002090565b926000905b888210613a4357505083600195969710613a2a575b505050811b019055565b015160001960f88460031b161c19169055388080613a20565b80600185968294968601518155019501930190613a0b565b60e081018051613a73906001600160a01b0316613590565b60c08201613a8181516135b2565b600080516020614109833981519152928354600160401b811015610e4157806001613aae92018655612c29565b929092613bf257613bee93613bc0613bcd92613bb6613b9c60a0600297613b2263ffffffff613af0818451168d9063ffffffff1663ffffffff19825416179055565b6020838101518d5467ffffffff00000000191690831690911b67ffffffff0000000016178c556040830151168b612c54565b613b56613b36606083015163ffffffff1690565b8b5463ffffffff60601b191660609190911b63ffffffff60601b16178b55565b613b95613b6d60808301516001600160401b031690565b8b5467ffffffffffffffff60801b191660809190911b67ffffffffffffffff60801b16178b55565b0151151590565b875460ff60c01b191690151560c01b60ff60c01b16178755565b516001860161398d565b516001600160a01b031690565b910180546001600160a01b0319166001600160a01b03909216919091179055565b5490565b634e487b7160e01b600052600060045260246000fd5b90613c3b613c18611c9493613647565b805463ffffffff60601b191660609390931b63ffffffff60601b16929092178255565b805467ffffffffffffffff60801b19164360801b67ffffffffffffffff60801b16179055565b60a081015115159081613c72575090565b905063ffffffff602081835116920151161090565b60a081015115159081613c98575090565b905063ffffffff604081602084015116920151161090565b600160401b8111610e41576000805160206140a9833981519152908154818355808210613cdc57505050565b611c94926000526007602060002091601c82850160031c84019460021b1680613d0c575b500160031c0190612556565b600019908186019182549160200360031b1c16905538613d00565b8051906001600160401b038211610e4157613d4182613cb0565b602080910191613d4f611b3f565b908060031c9260005b848110613dd3575060071982169091039081613d76575b5050505050565b9390600094855b828110613d94575050505001553880808080613d6f565b9091929582613dc8600192613dad8a5163ffffffff1690565b908560021b60031b9163ffffffff809116831b921b19161790565b970193929101613d7d565b6000805b60088110613dec575084820155600101613d58565b969083613e1e600192613e03855163ffffffff1690565b908b60021b60031b9163ffffffff809116831b921b19161790565b92019701613dd7565b6000526000805160206140698339815191526020526040600020906000526020526040600020906102d2613e6b613e84613e77604051613e7281613e6b818a611b75565b0382611c58565b613499565b9460405192838092611b75565b6134f4565b919290613e9584612d44565b93613e9f81612d44565b9360005b828110613eb05750505050565b81600052602090600080516020614069833981519152825260409182600020908683018084116107f757600194613f2093613e6b93613efc936000525280600020905192838092611b75565b613f0581613499565b613f0f848c61228d565b52613f1a838b61228d565b506134f4565b613f2a828961228d565b52613f35818861228d565b5001613ea3565b9092916000918252602093600080516020614069833981519152855260408320908352845260408220918151916001600160401b038311610e4157613f8b83613f858654611b05565b8661256d565b8591601f8411600114613fb8578394959650926139e55750508160011b916000199060031b1c1916179055565b9190601f19841696613fcf86600052602060002090565b93905b888210613ff057505083600195969710613a2a57505050811b019055565b80600185968294968601518155019501930190613fd256fe880a06be809dc0e7b0a5d0337dde6feeb9b73d3fb19eb22d618ab89523593500454a273f43f7a440caab7e87ede33c979fd5ce1089b8f9673df5cd96eee6fa606e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a98472806018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285573fd9ec671ae9f85315a7ebfb0534d94239eaacef5a704bcb705c041ce12491356ca4f80ba17934f16b2ab62d95f37e3941e8ecf8da46337200d0a2c44b7d6be371ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973bb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb112d952c686c15834d48f07b553712c51f877261827559f149880caa855efa22f7ca264697066735822122006556d236321c54667c36d1b516c486f5e2a5cb18e0d804712733d1cb05c5e2464736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806305f63c8a146102075780630e18b68114610202578063147bf6c4146101fd5780631864636c146101f85780631a4a7c61146101f3578063217aad3c146101ee578063277c9d45146101e95780632d1fc39d146101e4578063354454c5146101df5780633587ad60146101da57806339251321146101d55780634a3c63bb146101d057806350545d2f146101cb57806354001d09146101c657806354fd4d50146101c15780635876220f146101bc5780635a16f135146101b757806361685d9f146101b257806363b4118f146101ad5780636e9960c3146101a857806370b23845146101a3578063718929ad1461019e5780638cb310031461019957806390de236f14610194578063a519f0601461018f578063b0da59b21461018a578063b405e17414610185578063b53b937b14610180578063d04681561461017b578063eb47adc6146101765763f87e52961461017157600080fd5b611a13565b6119f7565b6119c1565b6119a6565b6112af565b611284565b61124e565b611223565b611144565b611082565b611039565b610ff5565b610f8b565b610f5f565b610ec7565b610e46565b610de9565b610cf5565b610bc1565b610b69565b610b2d565b610ae4565b6107fc565b61076a565b61071f565b6104dd565b6104b2565b610474565b6103d0565b610322565b6102d5565b919082519283825260005b848110610238575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610217565b906102d29063ffffffff80845116825280602085015116602083015280604085015116604083015260608401511660608201526001600160401b0360808401511660808201526102a560a084015160a083019015159052565b60e0806102c160c08601516101008060c087015285019061020c565b9401516001600160a01b0316910152565b90565b3461031d57602036600319011261031d576102ee612017565b50610319610305610300600435613647565b611ce1565b60405191829160208352602083019061024c565b0390f35b600080fd5b3461031d576000806003193601126103a1576000805160206140498339815191528054906001600160a01b0382163303610389576103608392611a37565b55807f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f48180a280f35b60405163472511eb60e11b8152336004820152602490fd5b80fd5b600435906001600160a01b038216820361031d57565b602435906001600160a01b038216820361031d57565b3461031d57602036600319011261031d576103e96103a4565b6000805160206140e9833981519152546001600160a01b03919082163303610389578060008051602061404983398151915255167f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f4600080a2005b9181601f8401121561031d578235916001600160401b03831161031d576020808501948460051b01011161031d57565b3461031d57604036600319011261031d576024356001600160401b03811161031d576104a76104b0913690600401610444565b906004356128a4565b005b3461031d57600036600319011261031d57602060008051602061410983398151915254604051908152f35b3461031d576000806003193601126103a1577f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfc8054906001918083036106805750600290557f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe1011254825b81811061058357837f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a716040518061057d3682611ad5565b0390a180f35b8061058e84926135ec565b61059790611fa2565b606090818101516105ab9063ffffffff1690565b9160809088828401516105c19063ffffffff1690565b9160a090818601516105d69063ffffffff1690565b9460e095868801516105ee906001600160401b031690565b9288516105fa90151590565b956020998a810151986040809201516106189060018060a01b031690565b9b610621611c96565b63ffffffff909e168e5263ffffffff909116908d01528b015263ffffffff909116908901526001600160401b03909116908701529015159085015260c08401526001600160a01b039091169082015261067990613a5b565b5001610546565b8260449160405191631cfd276760e31b835260048301526024820152fd5b908082519081815260208091019281808460051b8301019501936000915b8483106106cc5750505050505090565b90919293949584806106ea600193601f198682030187528a5161020c565b98019301930191949392906106bc565b90916107116102d29360408452604084019061069e565b91602081840391015261069e565b3461031d57602036600319011261031d576000805160206140c9833981519152546001600160a01b031633036103895761075a600435612e26565b90610319604051928392836106fa565b3461031d57604036600319011261031d576000805160206140c983398151915254602435906001600160a01b03163303610389576000805160206140298339815191525490600080516020614009833981519152548281018091116107f75781039081116107f7576107de906004356135db565b806107e557005b81018082116107f7576104b091612b85565b611a82565b3461031d5760608060031936011261031d576001600160401b03906004803583811161031d5761082f9036908301610444565b92909160243585811161031d576108499036908301610444565b6000805160206140e98339815191525491969091604435906001600160a01b03163303610acd57828703610abc578615610aab5760005b87811061088957005b88610895828a8a6126f6565b356108aa6108a5848884956126f6565b612706565b9083151580610a88575b610a77576108c181613647565b90815463ffffffff908782821683871694818614610a2457508a8360801c169081831080610a1b575b6109ca5750505081818d1c16808411610995575060201c1680911061095b5750805463ffffffff191663ffffffff92909216918217905560405190815260019291907f3adbeb5fbb94c52b64d90b31188c68a740868dde2238e03a04d581cae22cedf090602090a201965b96610880565b60405163044816df60e51b8152938493610991935090848b0190815263ffffffff91821660208201529116604082015260600190565b0390fd5b60408051630d7bdb4960e41b8152808e0189815263ffffffff808a166020830152909316918301919091529081906060010390fd5b6040805163ffffffff92831681529890911660208901526001999892979196509194507f5482b63bdf9e3775fdd3157e4933cfbc1d6fa1ec354ed3fc9a547e5438fd3e4e9350909150a40196610955565b508086116108ea565b60405163ffffffff90981688526001999850967fe8b22569f1f7ba3802b89b579382ccac4e223f8062d6dd73f9cd757bd46ff8aa9650945084935050602083019150610a6d9050565b0390a20196610955565b6040516357e557ed60e11b81528890fd5b50610aa6610a9f610a9886611d9e565b8d8d6126f6565b3582111590565b6108b4565b604051637b329aa360e01b81528490fd5b60405163a9854bc960e01b81528490fd5b60405163472511eb60e11b81523381860152602490fd5b3461031d57602036600319011261031d5761075a6004356122a6565b9181601f8401121561031d578235916001600160401b03831161031d576020838186019501011161031d57565b3461031d57604036600319011261031d576024356001600160401b03811161031d57610b606104b0913690600401610b00565b906004356124d2565b3461031d57600036600319011261031d57610b82612b57565b60008051602061400983398151915254906000805160206140298339815191525482018092116107f75760409163ffffffff8351921682526020820152f35b3461031d5760408060031936011261031d576001600160401b0360043581811161031d57610bf3903690600401610b00565b9091610bfd6103ba565b6000805160206140e9833981519152546001600160a01b03929083163303610cde57610ccd9492869492610cbd610cb87f28febbb5486eda5a1e47ad578f9cb32c8a1983c86c80ab823ea5dc1fc04ede5e94610c8d6103199b5191610c6183611c21565b600083526000602084015260008b84015260006060840152431660808301906001600160401b03169052565b600160a0820152610c9f36888a612373565b60c08201526001600160a01b03841660e0820152613a5b565b611d9e565b96879487519384931696836123b9565b0390a3519081529081906020820190565b855163472511eb60e11b8152336004820152602490fd5b3461031d57604036600319011261031d57610d0e6103a4565b610d166103ba565b7f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfc805480610dca57507f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a71926001610d6d9255611a37565b610d7681613590565b6000805160206140c9833981519152819055604051906001600160a01b03167ffc0d749143b04e0d92a3b49edae84a45f6bc88b75e99d9118ec4d7e87fe626c5600080a280610dc53682611aed565b0390a1005b60449060405190631cfd276760e31b8252600060048301526024820152fd5b3461031d57600036600319011261031d5760405160408101908082106001600160401b03831117610e4157610319916040526005815264312e322e3160d81b602082015260405191829160208352602083019061020c565b611c0b565b3461031d57600036600319011261031d57610e5f612056565b805180610eb1575b50604051809160208083018184528251809152816040850193019160005b828110610e9457505050500390f35b835163ffffffff1685528695509381019392810192600101610e85565b6000825260001901602090910190815238610e67565b3461031d57604036600319011261031d576004356024358015159081810361031d576000805160206140e9833981519152546001600160a01b03163303610389577fe3bc5e5d3b000a1f65d146c40a38d89b1743b5729f4c6fe65f2e4b2dc620f2f291610f56602092610f3986613647565b805460ff60c01b191691151560c01b60ff60c01b16919091179055565b604051908152a2005b3461031d57602036600319011261031d576020610f7d600435613683565b63ffffffff60405191168152f35b3461031d57604036600319011261031d57610fd8600435610fc260243563ffffffff610fe6610fba8386613e27565b949095613647565b549360405196879660608852606088019061020c565b90868203602088015261020c565b9260201c161160408301520390f35b3461031d57600036600319011261031d576000805160206140e9833981519152546040516001600160a01b039091168152602090f35b63ffffffff81160361031d57565b3461031d57606036600319011261031d576024356110568161102b565b604435906001600160401b03821161031d576110796104b0923690600401610b00565b91600435612710565b3461031d57602036600319011261031d57600080516020614029833981519152546110af600435826135db565b80156110d0576110be90613178565b81038181116107f7576104b091612b85565b60405163ed94f97f60e01b8152600490fd5b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106111165750505050505090565b9091929394958480611134600193603f198682030187528a5161024c565b9801930193019194939290611106565b3461031d576000806003193601126103a157806000805160206141098339815191525461117081612c77565b9161117e6040519384611c58565b818352601f1961118d83612c77565b01815b81811061120c5750505b8181106111b2578383526040518061031985826110e2565b6111c96111be82612c29565b505460c01c60ff1690565b6111d6575b60010161119a565b92600180916111ed6111e787612c29565b50611ce1565b6111f7828761228d565b52611202818661228d565b50019390506111ce565b602090611217612017565b82828801015201611190565b3461031d57600036600319011261031d57602060008051602061400983398151915254604051908152f35b3461031d57600036600319011261031d576000805160206140c9833981519152546040516001600160a01b039091168152602090f35b3461031d57600036600319011261031d57602060008051602061402983398151915254604051908152f35b3461031d5760408060031936011261031d57600480356001600160401b03811161031d576112e09036908301610444565b6000805160206140c9833981519152549091906001600160a01b031633036119905761130a612bd2565b9382855282156119815761131e8551611d9e565b6000805160206141098339815191525410611972576020850161133f612056565b808252519082870191808352875110611962578196956113626108a587876126ed565b63ffffffff1660608801908152608088019760008952600080516020614029833981519152549060a081019082825260c08101928352600080516020614009833981519152549060e0810190828252610100810192835260016000995b5181101561167c576113d56108a5828f8f6126f6565b6113f96113f06113e6848d5161228d565b5163ffffffff1690565b63ffffffff1690565b63ffffffff8092161061166c576114166108a58f8f9085916126f6565b8161143c6113f061142e61142987611d9e565b612c29565b505460201c63ffffffff1690565b911611611610578d8f918d8f916114576108a58786866126f6565b906114786113f061146a6114298a611d9e565b505460401c63ffffffff1690565b911611611511575b6114ee6108a58661150a95819795611500957f773694db4f98cd263e42d4f798bcf603781d4491e48e8cbe96c219c1f13b777d6114e66114c160019d611d9e565b926114d06108a58888886126f6565b905163ffffffff90911681529081906020820190565b0390a26126f6565b825163ffffffff166127ab565b6127ab565b63ffffffff169052565b018e6113bf565b9c908493918e61152086611d9e565b9061152a87611d9e565b61153390612c29565b505460401c63ffffffff169061154a8888876126f6565b61155390612706565b905163ffffffff9283168152911660208201527f281aaa50816d3a5bf2911e3c0854a3f2ebe4880698575d799ff5becfd74d777890604090a26115978585846126f6565b6115a090612706565b6115a986611d9e565b6115b290612c29565b505460401c63ffffffff166115c69161290f565b63ffffffff166115d591611aa6565b9d6115e18585846126f6565b6115ea90612706565b6115f386611d9e565b6115fc90612c29565b509061160791612c54565b90919350611480565b8c898f8e8561163e61142e6114296116386108a5856109919861163282611d9e565b9b6126f6565b93611d9e565b915163febc7af160e01b8152948594850190815263ffffffff91821660208201529116604082015260600190565b8b516333bbc48560e21b81528990fd5b909c9b9a999897505b8c518110156118555761169c6108a5828d8d6126f6565b6116ae6113f061142e61142985611d9e565b63ffffffff80921611611833578b8b8b8f936116ce6108a58786866126f6565b906116e16113f061146a6114298a611d9e565b911611611730575b6114ee6108a58661172a95819795611500957f773694db4f98cd263e42d4f798bcf603781d4491e48e8cbe96c219c1f13b777d6114e66114c160019d611d9e565b01611685565b505050509661173e88611d9e565b8b8b8a61174a81611d9e565b61175390612c29565b505460401c63ffffffff1692611768926126f6565b61177190612706565b8b5163ffffffff9283168152911660208201527f281aaa50816d3a5bf2911e3c0854a3f2ebe4880698575d799ff5becfd74d777890604090a26117b5888c8c6126f6565b6117be90612706565b6117c789611d9e565b6117d090612c29565b505460401c63ffffffff166117e49161290f565b63ffffffff166117f391611aa6565b96808b8d8c8c6118048585846126f6565b61180d90612706565b61181686611d9e565b61181f90612c29565b509061182a91612c54565b909193506116e9565b8a886109918c8f61163e61142e6114296116386108a58b809661163282611d9e565b506118808b9596979a99989a61186c818451611aa6565b835261187a855180926135db565b90611dad565b835251905190818103611952575b505051905190818103611942575b50506118bd6113f06118b2845163ffffffff1690565b925163ffffffff1690565b63ffffffff80921603611932576118db602435925163ffffffff1690565b16116119245750610dc57fb795d99e37bbcdcebb613387f4e924b750cbae0af45b48ba52bfe1137c10e9929361191a611915368686612c8e565b613d27565b5192839283612ce6565b8351634eb7083160e01b8152fd5b8551636be992a360e11b81528390fd5b61194b91612b85565b868061189c565b61195b9161344d565b888061188e565b8251634dbe00c960e01b81528690fd5b51634eb7083160e01b81528390fd5b516397791ee160e01b81528390fd5b835163472511eb60e11b81523381850152602490fd5b3461031d57600036600319011261031d576020610f7d612b57565b3461031d57600036600319011261031d57600080516020614049833981519152546040516001600160a01b039091168152602090f35b3461031d57602036600319011261031d576104b0600435611def565b3461031d57604036600319011261031d576104b0611a2f6103ba565b6004356123e1565b611a4081613590565b6000805160206140e98339815191528190556001600160a01b03167f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a1600080a2565b634e487b7160e01b600052601160045260246000fd5b90600182018092116107f757565b919082018092116107f757565b90602091808252806000848401376000828201840152601f01601f1916010190565b9060406102d292600181528160208201520190611ab3565b9060406102d292600081528160208201520190611ab3565b90600182811c92168015611b35575b6020831014611b1f57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611b14565b6000805160206140a98339815191526000527f95aa751b3a4112433a8300d32b75142a98253c58b18f312756921c204709ced890565b9060009291805491611b8683611b05565b918282526001938481169081600014611be85750600114611ba8575b50505050565b90919394506000526020928360002092846000945b838610611bd4575050505001019038808080611ba2565b805485870183015294019385908201611bbd565b9294505050602093945060ff191683830152151560051b01019038808080611ba2565b634e487b7160e01b600052604160045260246000fd5b61010081019081106001600160401b03821117610e4157604052565b602081019081106001600160401b03821117610e4157604052565b90601f801991011681019081106001600160401b03821117610e4157604052565b90611c94611c8d9260405193848092611b75565b0383611c58565b565b60405190611c9482611c21565b6040519060a082018281106001600160401b03821117610e4157604052565b60405190608082018281106001600160401b03821117610e4157604052565b90611c94604051611cf181611c21565b60e0611d9060028396611d7160ff8254611d5263ffffffff8083168a52611d26818460201c1660208c019063ffffffff169052565b611d3e818460401c1660408c019063ffffffff169052565b8260601c1660608a019063ffffffff169052565b608081811c6001600160401b03169089015260c01c16151560a0870152565b611d7d60018201611c79565b60c086015201546001600160a01b031690565b6001600160a01b0316910152565b6000198101919082116107f757565b919082039182116107f757565b91906020611dd260019260408652604086019061069e565b930152565b91906020611dd260009260408652604086019061069e565b60008051602061408983398151915254600019808214611f905760008051602061410983398151915291825415611f745791927fbd3f712f2cd882f839e84eb12fdaf64f8227409d140027dbdcd5e2ee4d57fa1f54905b80151580611f6a575b15611f28576020611e6261030086613647565b0191611e91611e8a611e8483611e7f6113f0885163ffffffff1690565b611dad565b846135db565b8287613e89565b5092857f0786596b8e43634ef53d523fd318795a1182175b0b0a658bc4aac58ecfcc541160405180611ec38882611dba565b0390a2611ed76113f06118b2865185611aa6565b03611f105750611eff90600094611eee8754611d9e565b8103611f07575083925b5190611dad565b929092611e46565b60010192611ef8565b90611f22611eff928496945190611aa6565b94611ef8565b5091611c949350611f46915060008051602061408983398151915255565b7fbd3f712f2cd882f839e84eb12fdaf64f8227409d140027dbdcd5e2ee4d57fa1f55565b5082841415611e4f565b50505050611c9460001960008051602061408983398151915255565b604051630871a03f60e01b8152600490fd5b906007611fad611c96565b92611fc2611fbc825460ff1690565b15158552565b611fce60018201611c79565b602085015260028101546001600160a01b031660408501526003810154606085015260048101546080850152600581015460a0850152600681015460c0850152015460e0830152565b6040519061202482611c21565b8160e06000918281528260208201528260408201528260608201528260808201528260a0820152606060c08201520152565b604080516000805160206140a9833981519152548082529092918390602082019061207f611b3f565b9360005b8160078201106121a457611c9495549282821061218b575b82821061216e575b828210612154575b50818110612139575b81811061211e575b818110612103575b8181106120e8575b106120da575b500383611c58565b60e01c8152602001386120d2565b60c083901c63ffffffff1684529260019060200193016120cc565b60a083901c63ffffffff1684529260019060200193016120c4565b608083901c63ffffffff1684529260019060200193016120bc565b606083901c63ffffffff1684529260019060200193016120b4565b83901c63ffffffff168452926001906020019301386120ab565b602084811c63ffffffff16865291949091600191019401906120a3565b63ffffffff84168552909360019060200194019061209b565b919350916001610100600892612258885461224d63ffffffff6121ce8582851663ffffffff169052565b6121e560208285828901921c1663ffffffff169052565b63ffffffff838c1c821616858c015261220b60608285828901921c1663ffffffff169052565b61222260808285828901921c1663ffffffff169052565b61223960a08285828901921c1663ffffffff169052565b60c09083828701921c1663ffffffff169052565b60e090811c90830152565b0195019101918693919492612083565b60001981146107f75760010190565b634e487b7160e01b600052603260045260246000fd5b80518210156122a15760209160051b010190565b612277565b60609182916122b3613752565b91821561236a576122c5908383612f83565b60005b8281106122d457505050565b60806122f36113f0826122e7858761228d565b51015163ffffffff1690565b612307575b5061230290612268565b6122c8565b81959661235d6123576123639361232660606122e7612302988a61228d565b6122e78b8961234d61233d60206122e7858561228d565b9563ffffffff948594859461228d565b1693169116613e89565b92612d8e565b97612d8e565b94906122f8565b50606093505050565b9291926001600160401b038211610e41576040519161239c601f8201601f191660200184611c58565b82948184528183011161031d578281602093846000960137010152565b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b9060018060a01b036000805160206140e9833981519152541633146124635761240982613647565b80546124199060c01c60ff161590565b61244a576002015461243b906001600160a01b03165b6001600160a01b031690565b330361038957611c9491612468565b6040516301550a7360e41b815260048101849052602490fd5b611c94915b9061247281613590565b6124a181600261248185613647565b0180546001600160a01b0319166001600160a01b03909216919091179055565b6001600160a01b0316907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e7600080a3565b919060018060a01b036000805160206140e98339815191525416331461254d576124fb83613647565b805461250b9060c01c60ff161590565b6125345760020154612525906001600160a01b031661242f565b330361038957611c94926125b2565b6040516301550a7360e41b815260048101859052602490fd5b611c94926125b2565b818110612561575050565b60008155600101612556565b9190601f811161257c57505050565b611c94926000526020600020906020601f840160051c830193106125a8575b601f0160051c0190612556565b909150819061259b565b9092916125c86125c3368387612373565b6135b2565b600193846125d584613647565b016001600160401b038311610e41576125f8836125f28354611b05565b8361256d565b600095601f8411600114612665578380917f9ad13f126d3d603b0b284edba7645ca0e423840767c48809bb5f87e72197e11496979860009361265a575b501b906000198560031b1c19161790555b612655604051928392836123b9565b0390a2565b850135925038612635565b601f1984169661267a83600052602060002090565b90805b8981106126d75750857f9ad13f126d3d603b0b284edba7645ca0e423840767c48809bb5f87e72197e114979899106126bd575b505083811b019055612646565b840135600019600387901b60f8161c1916905538806126b0565b858201358355918301916020918201910161267d565b90156122a15790565b91908110156122a15760051b0190565b356102d28161102b565b92919060018060a01b036000805160206140e98339815191525416331461278c5761273a84613647565b805461274a9060c01c60ff161590565b6127735760020154612764906001600160a01b031661242f565b330361038957611c94936127c3565b6040516301550a7360e41b815260048101869052602490fd5b611c94936127c3565b906090820291808304609014901517156107f757565b91909163ffffffff808094169116019182116107f757565b919392909363ffffffff94858116958615612892576127e187612795565b8403612880576128036113f06127f687613647565b5460601c63ffffffff1690565b9660005b81811061284857505061264691612842917f402e5ac3e483073137c527378b15e69f7f4a1c75c1adc0aa36f0c456876c05a0969798166127ab565b85613c08565b8061287a61286a61285a600194612795565b612865368b8b612373565b61353c565b612874838d611aa6565b8a613f3c565b01612807565b604051630368f86360e41b8152600490fd5b6040516379b348ff60e11b8152600490fd5b919060018060a01b036000805160206140e983398151915254163314612906576128cd83613647565b80546128dd9060c01c60ff161590565b61253457600201546128f7906001600160a01b031661242f565b330361038957611c949261294e565b611c949261294e565b63ffffffff91821690821603919082116107f757565b60405161293181611c3d565b60008152906000368137565b9060206102d292818152019061020c565b91909181156128925761296081613647565b91825463ffffffff92838260601c16928361297b82896126ed565b351015612b455761299561298e82611d9e565b82896126f6565b3596858460201c168810612b335790859392916129bd6129b78684168861290f565b84613c08565b6000915b808310612a2c575050505016036129f757508054611c94925060601c63ffffffff1663ffffffff1663ffffffff19825416179055565b612a086113f0835463ffffffff1690565b8310612a1357505050565b611c94921663ffffffff1663ffffffff19825416179055565b909192939450612a3d8382846126f6565b359280151580612b10575b612afe577f70cf8064c7574b284afe278226e25779f45a4c3715653674aa651b34e9a19092612af0600187930195612ae4612a83888c611dad565b612ad5612a908488613e27565b5093612ace612ac984612aba8b600052600080516020614069833981519152602052604060002090565b90600052602052604060002090565b611c79565b9088613f3c565b612add612925565b9086613f3c565b6040519182918261293d565b0390a29086949392916129c1565b60405163c9ee26af60e01b8152600490fd5b50612b2e612b27612b2083611d9e565b84866126f6565b3585101590565b612a48565b60405163213af80760e21b8152600490fd5b6040516317df2d8d60e01b8152600490fd5b6000805160206140a9833981519152805415612b7f5760005263ffffffff6020600020541690565b50600090565b6000805160206140298339815191528290556040805191825260208201929092527f209bf6aaa2d8c150b27b3c081f8c86a46f008cc41d11f2ffaeb0a08d9b933e0691819081015b0390a1565b6040519061012082018281106001600160401b03821117610e415760405281610100600091828152606060208201528260408201528260608201528260808201528260a08201528260c08201528260e08201520152565b60008051602061410983398151915280548210156122a1576000526003602060002091020190600090565b805463ffffffff60401b191660409290921b63ffffffff60401b16919091179055565b6001600160401b038111610e415760051b60200190565b9291612c9982612c77565b91612ca76040519384611c58565b829481845260208094019160051b810192831161031d57905b828210612ccd5750505050565b8380918335612cdb8161102b565b815201910190612cc0565b90916040602092828482018583525201929160005b828110612d09575050505090565b90919293828060019263ffffffff8835612d228161102b565b16815201950193929101612cfb565b604051612d3d81611c3d565b6000815290565b90612d4e82612c77565b612d5b6040519182611c58565b8281528092612d6c601f1991612c77565b019060005b828110612d7d57505050565b806060602080938501015201612d71565b918251825181018091116107f757612da590612d44565b9060005b8451811015612ddc5780612dbf6001928761228d565b51612dca828661228d565b52612dd5818561228d565b5001612da9565b509160005b8151811015612e1f5780612e18612dfa6001938561228d565b51612e06885184611aa6565b90612e11828861228d565b528561228d565b5001612de1565b5090925050565b6060918291612e33613752565b918215612f6c57612e45908383612f83565b60005b828110612e5457505050565b6080612e676113f0826122e7858761228d565b612e7b575b50612e7690612268565b612e48565b949590612f66612f15612f0a83612f0487612e7697612ecd6113f060608f612ec56122e791612eae846122e78c8b61228d565b6122e78b8a61234d61233d60206122e7858561228d565b98909661228d565b7f0786596b8e43634ef53d523fd318795a1182175b0b0a658bc4aac58ecfcc541160405180612efc8682611dd7565b0390a2612d8e565b9a612d8e565b976122e7848761228d565b612f45612f32612f2d6113f060606122e7888b61228d565b613647565b916114fb835463ffffffff9060201c1690565b67ffffffff0000000082549160201b169067ffffffff000000001916179055565b90612e6c565b505050915050612f7a612d31565b906102d2612d31565b91805b612f8f57505050565b6000905b82821061309b575b828214611ba257612fab82611a98565b83811061304657509081611e7f8261302661301f6130409661301a6130156113f08c61300f612fe8612fdd8a8461228d565b515163ffffffff1690565b91613009612ffb60206122e78d8561228d565b916122e760809c8d9261228d565b906127ab565b9061290f565b6135cc565b6135db565b948861228d565b510161150063ffffffff85166114fb835163ffffffff1690565b80612f86565b613059613053828761228d565b516130e5565b613066613053858861228d565b1180613082575b61307a575b600101612fab565b915081613072565b50613096613090828761228d565b516130bf565b61306d565b91906130aa613090828661228d565b6130b8576001019091612f93565b9091612f9b565b63ffffffff806130dc8160208501511682608086015116906127ab565b92511691161090565b61311463ffffffff9161300f83606061310b8260208601511683608087015116906127ab565b93015116613683565b1690565b91909163ffffffff808094169116029182169182036107f757565b634e487b7160e01b600052601260045260246000fd5b9063ffffffff80911691821561315e57160690565b613133565b9063ffffffff80911691821561315e57160490565b906131816138bb565b8093919315613420576000805160206140098339815191525482918190835b613281575b60005b8181106131d65750506102d29495508181036131c6575b5050611dad565b6131cf9161344d565b38806131bf565b60019060606131ec6113f0826122e7858e61228d565b6131f8575b50016131a8565b7f0377278faa3eeab09525915d783771e1b00fec4797719afc368b56f68562792561327860406132508d6130096132366113f0856122e78b8661228d565b966122e78961324a60206122e7838861228d565b9461228d565b906132638261325e87613647565b612c54565b5163ffffffff90911681529081906020820190565b0390a2386131f1565b939060008081825b888110613399575063ffffffff9283831692831561338d578661301a6113f0856132b96132be966113f09661290f565b613118565b916132d66132cf6113f08486613149565b9284613163565b9060005b8c8b82106133055750505050506132fe92916132f891168092611aa6565b92611dad565b93846131a0565b61331c6113f061331684869461228d565b51613428565b1461332a575b6001016132da565b8c613368851515916000848460001461337957611500915061335760609161324a60ff60015b168b6127ab565b5101916114fb835163ffffffff1690565b156133225760001990930192613322565b61335760609161324a60ff61150095613350565b505050505090936131a5565b9497959398906133ae613316878d9a9d61228d565b63ffffffff91908281168584168181036133de5750505090600180920116955b0199969998939597949098613289565b819297939491969596116000146133fe57505050509190600180956133ce565b8296929893989594951610613417575b506001906133ce565b9350600161340e565b506000925050565b6102d29061300f63ffffffff91828151169260608160208401511692015116906127ab565b6000805160206140098339815191528290556040805191825260208201929092527f0aa79fd8feb16e52ff075abb8f8bec67362d3b06b2ed230008e7810515286bf09181908101612bcd565b60308151106134e2576040519060108201906010604084019101905b8083106134cf57505060308252601f01601f191660405290565b90918251815260208091019201906134b5565b604051633b99b53d60e01b8152600490fd5b60908151106134e2576040519060208083019160500190608084015b80841061352b5750506060835250601f01601f191660405290565b825184529281019291810191613510565b90815160908201908183116107f757106134e2576040519160108084019260a08501920101905b80831061357d57505060908252601f01601f191660405290565b9091825181526020809101920190613563565b6001600160a01b0316156135a057565b60405163f6b2911f60e01b8152600490fd5b51156135ba57565b604051638d46fe0560e01b8152600490fd5b60058111156102d25750600590565b818111156135e7575090565b905090565b7f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe1011280548281111561362e578210156122a15760005260206000209060031b0190565b6040516302d72d2160e01b815260048101849052602490fd5b8060008051602061410983398151915254111561366b5761366790612c29565b5090565b602490604051906302d72d2160e01b82526004820152fd5b600181018091116107f7576000805160206140a98339815191529081548110156136c75763ffffffff9160005260e060206000208260031c01549160051b161c1690565b5050600090565b906136d882612c77565b60406136e681519283611c58565b83825281936136f7601f1991612c77565b019060005b8281106137095750505050565b81519060a08201918083106001600160401b03841117610e41576020928452600081528260008183015260008583015260006060830152600060808301528287010152016136fc565b600090816000805160206141098339815191525461376f816136ce565b91805b828110613783575050508281529190565b6137976137926111e783612c29565b613c61565b80613817575b6137aa575b600101613772565b94600180916137b888612c29565b50546137f26137c5611ca3565b63ffffffff8381168252602084811c821690830152604093841c811693820193909352918a166060830152565b846080820152613802828861228d565b5261380d818761228d565b50019590506137a2565b5061382181613683565b63ffffffff6138356113f061146a85612c29565b9116101561379d565b9061384882612c77565b604061385681519283611c58565b8382528193613867601f1991612c77565b019060005b8281106138795750505050565b81519060808201918083106001600160401b03841117610e4157602092845260008152826000818301526000858301526000606083015282870101520161386c565b60009081600080516020614109833981519152546138d88161383e565b91805b8281106138ec575050508281529190565b6139006138fb6111e783612c29565b613c87565b61390d575b6001016138db565b946001809161391b88612c29565b5054613968613928611cc2565b9163ffffffff61395a60206139478385831c16879063ffffffff169052565b63ffffffff604094851c84161690860152565b8b1663ffffffff1690830152565b846060820152613978828861228d565b52613983818761228d565b5001959050613905565b91909182516001600160401b038111610e41576139b4816139ae8454611b05565b8461256d565b602080601f83116001146139f05750819293946000926139e5575b50508160011b916000199060031b1c1916179055565b0151905038806139cf565b90601f19831695613a0685600052602060002090565b926000905b888210613a4357505083600195969710613a2a575b505050811b019055565b015160001960f88460031b161c19169055388080613a20565b80600185968294968601518155019501930190613a0b565b60e081018051613a73906001600160a01b0316613590565b60c08201613a8181516135b2565b600080516020614109833981519152928354600160401b811015610e4157806001613aae92018655612c29565b929092613bf257613bee93613bc0613bcd92613bb6613b9c60a0600297613b2263ffffffff613af0818451168d9063ffffffff1663ffffffff19825416179055565b6020838101518d5467ffffffff00000000191690831690911b67ffffffff0000000016178c556040830151168b612c54565b613b56613b36606083015163ffffffff1690565b8b5463ffffffff60601b191660609190911b63ffffffff60601b16178b55565b613b95613b6d60808301516001600160401b031690565b8b5467ffffffffffffffff60801b191660809190911b67ffffffffffffffff60801b16178b55565b0151151590565b875460ff60c01b191690151560c01b60ff60c01b16178755565b516001860161398d565b516001600160a01b031690565b910180546001600160a01b0319166001600160a01b03909216919091179055565b5490565b634e487b7160e01b600052600060045260246000fd5b90613c3b613c18611c9493613647565b805463ffffffff60601b191660609390931b63ffffffff60601b16929092178255565b805467ffffffffffffffff60801b19164360801b67ffffffffffffffff60801b16179055565b60a081015115159081613c72575090565b905063ffffffff602081835116920151161090565b60a081015115159081613c98575090565b905063ffffffff604081602084015116920151161090565b600160401b8111610e41576000805160206140a9833981519152908154818355808210613cdc57505050565b611c94926000526007602060002091601c82850160031c84019460021b1680613d0c575b500160031c0190612556565b600019908186019182549160200360031b1c16905538613d00565b8051906001600160401b038211610e4157613d4182613cb0565b602080910191613d4f611b3f565b908060031c9260005b848110613dd3575060071982169091039081613d76575b5050505050565b9390600094855b828110613d94575050505001553880808080613d6f565b9091929582613dc8600192613dad8a5163ffffffff1690565b908560021b60031b9163ffffffff809116831b921b19161790565b970193929101613d7d565b6000805b60088110613dec575084820155600101613d58565b969083613e1e600192613e03855163ffffffff1690565b908b60021b60031b9163ffffffff809116831b921b19161790565b92019701613dd7565b6000526000805160206140698339815191526020526040600020906000526020526040600020906102d2613e6b613e84613e77604051613e7281613e6b818a611b75565b0382611c58565b613499565b9460405192838092611b75565b6134f4565b919290613e9584612d44565b93613e9f81612d44565b9360005b828110613eb05750505050565b81600052602090600080516020614069833981519152825260409182600020908683018084116107f757600194613f2093613e6b93613efc936000525280600020905192838092611b75565b613f0581613499565b613f0f848c61228d565b52613f1a838b61228d565b506134f4565b613f2a828961228d565b52613f35818861228d565b5001613ea3565b9092916000918252602093600080516020614069833981519152855260408320908352845260408220918151916001600160401b038311610e4157613f8b83613f858654611b05565b8661256d565b8591601f8411600114613fb8578394959650926139e55750508160011b916000199060031b1c1916179055565b9190601f19841696613fcf86600052602060002090565b93905b888210613ff057505083600195969710613a2a57505050811b019055565b80600185968294968601518155019501930190613fd256fe880a06be809dc0e7b0a5d0337dde6feeb9b73d3fb19eb22d618ab89523593500454a273f43f7a440caab7e87ede33c979fd5ce1089b8f9673df5cd96eee6fa606e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a98472806018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285573fd9ec671ae9f85315a7ebfb0534d94239eaacef5a704bcb705c041ce12491356ca4f80ba17934f16b2ab62d95f37e3941e8ecf8da46337200d0a2c44b7d6be371ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973bb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb112d952c686c15834d48f07b553712c51f877261827559f149880caa855efa22f7ca264697066735822122006556d236321c54667c36d1b516c486f5e2a5cb18e0d804712733d1cb05c5e2464736f6c63430008140033",
  "devdoc": {
    "author": "Alluvial Finance Inc.",
    "errors": {
      "InactiveOperator(uint256)": [
        {
          "params": {
            "index": "The operator index"
          }
        }
      ],
      "InvalidInitialization(uint256,uint256)": [
        {
          "params": {
            "expectedVersion": "The version that was expected",
            "version": "The version that was attempting to be initialized"
          }
        }
      ],
      "OperatorLimitTooHigh(uint256,uint256,uint256)": [
        {
          "params": {
            "index": "The operator index",
            "keyCount": "The operator key count",
            "limit": "The new limit provided"
          }
        }
      ],
      "OperatorLimitTooLow(uint256,uint256,uint256)": [
        {
          "params": {
            "fundedKeyCount": "The operator funded key count",
            "index": "The operator index",
            "limit": "The new limit provided"
          }
        }
      ],
      "OperatorNotFound(uint256)": [
        {
          "params": {
            "index": "The provided index"
          }
        },
        {
          "params": {
            "index": "The provided index"
          }
        }
      ],
      "Unauthorized(address)": [
        {
          "params": {
            "caller": "Address performing the call"
          }
        }
      ]
    },
    "events": {
      "AddedOperator(uint256,string,address)": {
        "params": {
          "index": "The operator index",
          "name": "The operator display name",
          "operatorAddress": "The operator address"
        }
      },
      "AddedValidatorKeys(uint256,bytes)": {
        "details": "The public keys and signatures are concatenatedA public key is 48 bytes longA signature is 96 bytes long[P1, S1, P2, S2, ..., PN, SN] where N is the bytes length divided by (96 + 48)",
        "params": {
          "index": "The operator index",
          "publicKeysAndSignatures": "The concatenated public keys and signatures"
        }
      },
      "FundedValidatorKeys(uint256,bytes[],bool)": {
        "params": {
          "deferred": "True if event has been replayed in the context of a migration",
          "index": "The operator index",
          "publicKeys": "BLS Public key that got funded"
        }
      },
      "Initialize(uint256,bytes)": {
        "params": {
          "cdata": "Complete calldata that was used during the initialization",
          "version": "New version of the contracts"
        }
      },
      "OperatorEditsAfterSnapshot(uint256,uint256,uint256,uint256,uint256)": {
        "details": "This means that we cannot assume that its key set is checked by the snapshotThis happens only if the limit was meant to be increased",
        "params": {
          "currentLimit": "The current operator limit",
          "index": "The operator index",
          "latestKeysEditBlockNumber": "The last block number at which the operator changed its keys",
          "newLimit": "The new operator limit that was attempted to be set",
          "snapshotBlock": "The block number of the snapshot"
        }
      },
      "OperatorLimitUnchanged(uint256,uint256)": {
        "params": {
          "index": "The operator index",
          "limit": "The limit of the operator"
        }
      },
      "RemovedValidatorKey(uint256,bytes)": {
        "params": {
          "index": "The operator index",
          "publicKey": "The BLS public key that has been removed"
        }
      },
      "RequestedValidatorExits(uint256,uint256)": {
        "params": {
          "count": "The count of requested exits",
          "index": "The operator index"
        }
      },
      "SetAdmin(address)": {
        "params": {
          "admin": "New admin address"
        }
      },
      "SetCurrentValidatorExitsDemand(uint256,uint256)": {
        "params": {
          "nextValidatorExitsDemand": "The new exit request demand",
          "previousValidatorExitsDemand": "The previous exit request demand"
        }
      },
      "SetOperatorAddress(uint256,address)": {
        "params": {
          "index": "The operator index",
          "newOperatorAddress": "The new operator address"
        }
      },
      "SetOperatorLimit(uint256,uint256)": {
        "params": {
          "index": "The operator index",
          "newLimit": "The new operator staking limit"
        }
      },
      "SetOperatorName(uint256,string)": {
        "params": {
          "index": "The operator index",
          "newName": "The new display name"
        }
      },
      "SetOperatorStatus(uint256,bool)": {
        "params": {
          "active": "True if the operator is active",
          "index": "The operator index"
        }
      },
      "SetOperatorStoppedValidatorCount(uint256,uint256)": {
        "params": {
          "index": "The operator index",
          "newStoppedValidatorCount": "The new stopped validator count"
        }
      },
      "SetPendingAdmin(address)": {
        "params": {
          "pendingAdmin": "New pending admin address"
        }
      },
      "SetRiver(address)": {
        "params": {
          "river": "The new river address"
        }
      },
      "SetTotalValidatorExitsRequested(uint256,uint256)": {
        "params": {
          "newTotalValidatorExitsRequested": "The new total requested exit",
          "previousTotalValidatorExitsRequested": "The previous total requested exit"
        }
      },
      "UpdatedRequestedValidatorExitsUponStopped(uint256,uint32,uint32)": {
        "params": {
          "index": "The operator index",
          "newRequestedExits": "The new requested exit count",
          "oldRequestedExits": "The old requested exit count"
        }
      },
      "UpdatedStoppedValidators(uint32[])": {
        "params": {
          "stoppedValidatorCounts": "The new stopped validator counts"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "acceptAdmin()": {
        "details": "Only callable by the pending admin. Resets the pending admin if succesful."
      },
      "addOperator(string,address)": {
        "details": "Only callable by the administrator",
        "params": {
          "_name": "The name identifying the operator",
          "_operator": "The address representing the operator, receiving the rewards"
        },
        "returns": {
          "_0": "The index of the new operator"
        }
      },
      "addValidators(uint256,uint32,bytes)": {
        "details": "Only callable by the administrator or the operator address",
        "params": {
          "_index": "The operator index",
          "_keyCount": "The amount of keys provided",
          "_publicKeysAndSignatures": "Public keys of the validator, concatenated"
        }
      },
      "demandValidatorExits(uint256,uint256)": {
        "details": "This method is only callable by the river contract, and to actually forward the information to the node operators via event emission, the unprotected requestValidatorExits method must be called",
        "params": {
          "_count": "The amount of exit requests to add to the demand",
          "_depositedValidatorCount": "The total deposited validator count"
        }
      },
      "forceFundedValidatorKeysEventEmission(uint256)": {
        "params": {
          "_amountToEmit": "The amount of events to emit at maximum in this call"
        }
      },
      "getAdmin()": {
        "returns": {
          "_0": "The admin address"
        }
      },
      "getCurrentValidatorExitsDemand()": {
        "returns": {
          "_0": "The current exit request demand"
        }
      },
      "getNextValidatorsToDepositFromActiveOperators(uint256)": {
        "params": {
          "_count": "Count of validators that would be funded next"
        },
        "returns": {
          "publicKeys": "An array of fundable public keys",
          "signatures": "An array of signatures linked to the public keys"
        }
      },
      "getOperator(uint256)": {
        "params": {
          "_index": "The index of the operator"
        },
        "returns": {
          "_0": "The details of the operator"
        }
      },
      "getOperatorCount()": {
        "returns": {
          "_0": "The operator count"
        }
      },
      "getOperatorStoppedValidatorCount(uint256)": {
        "params": {
          "_idx": "The index of the operator"
        },
        "returns": {
          "_0": "The stopped validator count of the operator"
        }
      },
      "getPendingAdmin()": {
        "returns": {
          "_0": "The pending admin address"
        }
      },
      "getRiver()": {
        "returns": {
          "_0": "The address of River"
        }
      },
      "getStoppedAndRequestedExitCounts()": {
        "returns": {
          "_0": "The total stopped count",
          "_1": "The total requested exit count"
        }
      },
      "getStoppedValidatorCountPerOperator()": {
        "returns": {
          "_0": "The stopped validator array"
        }
      },
      "getTotalStoppedValidatorCount()": {
        "returns": {
          "_0": "The total stopped validator count"
        }
      },
      "getTotalValidatorExitsRequested()": {
        "returns": {
          "_0": "The total requested exit count"
        }
      },
      "getValidator(uint256,uint256)": {
        "params": {
          "_operatorIndex": "The index of the operator",
          "_validatorIndex": "The index of the validator"
        },
        "returns": {
          "funded": "True if validator has been funded",
          "publicKey": "The public key of the validator",
          "signature": "The signature used during deposit"
        }
      },
      "initOperatorsRegistryV1(address,address)": {
        "params": {
          "_admin": "Admin in charge of managing operators",
          "_river": "Address of River system"
        }
      },
      "listActiveOperators()": {
        "returns": {
          "_0": "The list of active operators and their details"
        }
      },
      "pickNextValidatorsToDeposit(uint256)": {
        "params": {
          "_count": "Max amount of keys requested"
        },
        "returns": {
          "publicKeys": "An array of public keys",
          "signatures": "An array of signatures linked to the public keys"
        }
      },
      "proposeAdmin(address)": {
        "details": "This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.",
        "params": {
          "_newAdmin": "New admin address"
        }
      },
      "removeValidators(uint256,uint256[])": {
        "details": "Only callable by the administrator or the operator addressThe indexes must be provided sorted in decreasing order and duplicate-free, otherwise the method will revertThe operator limit will be set to the lowest deleted key index if the operator's limit wasn't equal to its total key countThe operator or the admin cannot remove funded keysWhen removing validators, the indexes of specific unfunded keys can be changed in order to properlyremove the keys from the storage array. Beware of this specific behavior when chaining calls as thetargeted public key indexes can point to a different key after a first call was made and performedsome swaps",
        "params": {
          "_index": "The operator index",
          "_indexes": "The indexes of the keys to remove"
        }
      },
      "reportStoppedValidatorCounts(uint32[],uint256)": {
        "params": {
          "_depositedValidatorCount": "The total deposited validator count",
          "_stoppedValidatorCounts": "The new stopped validators array"
        }
      },
      "requestValidatorExits(uint256)": {
        "params": {
          "_count": "Max amount of exits to request"
        }
      },
      "setOperatorAddress(uint256,address)": {
        "details": "Only callable by the administrator or the previous operator address",
        "params": {
          "_index": "The operator index",
          "_newOperatorAddress": "The new address of the operator"
        }
      },
      "setOperatorLimits(uint256[],uint32[],uint256)": {
        "details": "Only callable by the administratorThe operator indexes must be in increasing order and contain no duplicateThe limit cannot exceed the total key count of the operatorThe _indexes and _newLimits must have the same length.Each limit value is applied to the operator index at the same index in the _indexes array.",
        "params": {
          "_newLimits": "The new staking limit of the operators",
          "_operatorIndexes": "The operator indexes, in increasing order and duplicate free",
          "_snapshotBlock": "The block number at which the snapshot was computed"
        }
      },
      "setOperatorName(uint256,string)": {
        "details": "Only callable by the administrator or the operator",
        "params": {
          "_index": "The operator index",
          "_newName": "The new operator name"
        }
      },
      "setOperatorStatus(uint256,bool)": {
        "details": "Only callable by the administrator",
        "params": {
          "_index": "The operator index",
          "_newStatus": "The new status of the operator"
        }
      },
      "version()": {
        "returns": {
          "_0": "Version of the contract"
        }
      }
    },
    "title": "Operators Registry (v1)",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "FundedKeyEventMigrationComplete()": [
        {
          "notice": "Emitted when the event rebroadcasting is done and we attempt to broadcast new events"
        }
      ],
      "InactiveOperator(uint256)": [
        {
          "notice": "The calling operator is inactive"
        }
      ],
      "InvalidArrayLengths()": [
        {
          "notice": "The provided operator and limits array have different lengths"
        }
      ],
      "InvalidEmptyArray()": [
        {
          "notice": "The provided operator and limits array are empty"
        }
      ],
      "InvalidEmptyStoppedValidatorCountsArray()": [
        {
          "notice": "Thrown when an invalid empty stopped validator array is provided"
        }
      ],
      "InvalidEmptyString()": [
        {
          "notice": "The string is empty"
        }
      ],
      "InvalidFundedKeyDeletionAttempt()": [
        {
          "notice": "A funded key deletion has been attempted"
        }
      ],
      "InvalidIndexOutOfBounds()": [
        {
          "notice": "The index that is removed is out of bounds"
        }
      ],
      "InvalidInitialization(uint256,uint256)": [
        {
          "notice": "An error occured during the initialization"
        }
      ],
      "InvalidKeyCount()": [
        {
          "notice": "The provided key count is 0"
        }
      ],
      "InvalidKeysLength()": [
        {
          "notice": "The provided concatenated keys do not have the expected length"
        }
      ],
      "InvalidStoppedValidatorCountsSum()": [
        {
          "notice": "Thrown when the sum of stopped validators is invalid"
        }
      ],
      "InvalidUnsortedIndexes()": [
        {
          "notice": "The index provided are not sorted properly (descending order)"
        }
      ],
      "InvalidZeroAddress()": [
        {
          "notice": "The address is zero"
        }
      ],
      "NoExitRequestsToPerform()": [
        {
          "notice": "Thrown when no exit requests can be performed"
        }
      ],
      "OperatorLimitTooHigh(uint256,uint256,uint256)": [
        {
          "notice": "The value for the operator limit is too high"
        }
      ],
      "OperatorLimitTooLow(uint256,uint256,uint256)": [
        {
          "notice": "The value for the limit is too low"
        }
      ],
      "OperatorNotFound(uint256)": [
        {
          "notice": "The operator was not found"
        },
        {
          "notice": "The operator was not found"
        }
      ],
      "SliceOutOfBounds()": [
        {
          "notice": "The slice is outside of the initial bytes bounds"
        }
      ],
      "SliceOverflow()": [
        {
          "notice": "The length overflows an uint"
        }
      ],
      "StoppedValidatorCountAboveFundedCount(uint256,uint32,uint32)": [
        {
          "notice": "The provided stopped validator count of an operator is above its funded validator count"
        }
      ],
      "StoppedValidatorCountArrayShrinking()": [
        {
          "notice": "The provided stopped validator count array is shrinking"
        }
      ],
      "StoppedValidatorCountsDecreased()": [
        {
          "notice": "Throw when an element in the stopped validator array is decreasing"
        }
      ],
      "StoppedValidatorCountsTooHigh()": [
        {
          "notice": "Thrown when the number of elements in the array is too high compared to operator count"
        }
      ],
      "Unauthorized(address)": [
        {
          "notice": "The operator is unauthorized for the caller"
        }
      ],
      "UnorderedOperatorList()": [
        {
          "notice": "The provided list of operators is not in increasing order"
        }
      ]
    },
    "events": {
      "AddedOperator(uint256,string,address)": {
        "notice": "A new operator has been added to the registry"
      },
      "AddedValidatorKeys(uint256,bytes)": {
        "notice": "The operator or the admin added new validator keys and signatures"
      },
      "FundedValidatorKeys(uint256,bytes[],bool)": {
        "notice": "A validator key got funded on the deposit contractThis event was introduced during a contract upgrade, in order to cover all possible public keys, this eventwill be replayed for past funded keys in order to have a complete coverage of all the funded public keys.In this particuliar scenario, the deferred value will be set to true, to indicate that we are not going to havethe expected additional events and side effects in the same transaction (deposit to official DepositContract etc ...) becausethe event was synthetically crafted."
      },
      "Initialize(uint256,bytes)": {
        "notice": "Emitted when the contract is properly initialized"
      },
      "OperatorEditsAfterSnapshot(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "The operator edited its keys after the snapshot block"
      },
      "OperatorLimitUnchanged(uint256,uint256)": {
        "notice": "The call didn't alter the limit of the operator"
      },
      "RemovedValidatorKey(uint256,bytes)": {
        "notice": "The operator or the admin removed a public key and its signature from the registry"
      },
      "RequestedValidatorExits(uint256,uint256)": {
        "notice": "The requested exit count has been updated"
      },
      "SetAdmin(address)": {
        "notice": "The admin address changed"
      },
      "SetCurrentValidatorExitsDemand(uint256,uint256)": {
        "notice": "The exit request demand has been updated"
      },
      "SetOperatorAddress(uint256,address)": {
        "notice": "The operator address has been changed"
      },
      "SetOperatorLimit(uint256,uint256)": {
        "notice": "The operator limit has been changed"
      },
      "SetOperatorName(uint256,string)": {
        "notice": "The operator display name has been changed"
      },
      "SetOperatorStatus(uint256,bool)": {
        "notice": "The operator status has been changed"
      },
      "SetOperatorStoppedValidatorCount(uint256,uint256)": {
        "notice": "The operator stopped validator count has been changed"
      },
      "SetPendingAdmin(address)": {
        "notice": "The pending admin address changed"
      },
      "SetRiver(address)": {
        "notice": "The stored river address has been changed"
      },
      "SetTotalValidatorExitsRequested(uint256,uint256)": {
        "notice": "The total requested exit has been updated"
      },
      "UpdatedRequestedValidatorExitsUponStopped(uint256,uint32,uint32)": {
        "notice": "The requested exit count has been update to fill the gap with the reported stopped count"
      },
      "UpdatedStoppedValidators(uint32[])": {
        "notice": "The stopped validator array has been changedA validator is considered stopped if exiting, exited or slashedThis event is emitted when the oracle reports new stopped validators counts"
      }
    },
    "kind": "user",
    "methods": {
      "acceptAdmin()": {
        "notice": "Accept the transfer of ownership"
      },
      "addOperator(string,address)": {
        "notice": "Adds an operator to the registry"
      },
      "addValidators(uint256,uint32,bytes)": {
        "notice": "Adds new keys for an operator"
      },
      "demandValidatorExits(uint256,uint256)": {
        "notice": "Increases the exit request demand"
      },
      "forceFundedValidatorKeysEventEmission(uint256)": {
        "notice": "Utility to force the broadcasting of events. Will keep its progress in storage to prevent being DoSed by the number of keys"
      },
      "getAdmin()": {
        "notice": "Retrieves the current admin address"
      },
      "getCurrentValidatorExitsDemand()": {
        "notice": "Get the current exit request demand waiting to be triggeredThis value is the amount of exit requests that are demanded and not yet performed by the contract"
      },
      "getNextValidatorsToDepositFromActiveOperators(uint256)": {
        "notice": "Get the next validators that would be funded"
      },
      "getOperator(uint256)": {
        "notice": "Get operator details"
      },
      "getOperatorCount()": {
        "notice": "Get operator count"
      },
      "getOperatorStoppedValidatorCount(uint256)": {
        "notice": "Retrieve the stopped validator count for an operator index"
      },
      "getPendingAdmin()": {
        "notice": "Retrieve the current pending admin address"
      },
      "getRiver()": {
        "notice": "Retrieve the River address"
      },
      "getStoppedAndRequestedExitCounts()": {
        "notice": "Retrieve the total stopped and requested exit count"
      },
      "getStoppedValidatorCountPerOperator()": {
        "notice": "Retrieve the raw stopped validators array from storage"
      },
      "getTotalStoppedValidatorCount()": {
        "notice": "Retrieve the total stopped validator count"
      },
      "getTotalValidatorExitsRequested()": {
        "notice": "Retrieve the total requested exit countThis value is the amount of exit requests that have been performed, emitting an event for operators to catch"
      },
      "getValidator(uint256,uint256)": {
        "notice": "Get the details of a validator"
      },
      "initOperatorsRegistryV1(address,address)": {
        "notice": "Initializes the operators registry"
      },
      "initOperatorsRegistryV1_1()": {
        "notice": "Initializes the operators registry for V1_1"
      },
      "listActiveOperators()": {
        "notice": "Retrieve the active operator set"
      },
      "pickNextValidatorsToDeposit(uint256)": {
        "notice": "Retrieve validator keys based on operator statuses"
      },
      "proposeAdmin(address)": {
        "notice": "Proposes a new address as admin"
      },
      "removeValidators(uint256,uint256[])": {
        "notice": "Remove validator keys"
      },
      "reportStoppedValidatorCounts(uint32[],uint256)": {
        "notice": "Allows river to override the stopped validators arrayThis actions happens during the Oracle report processing"
      },
      "requestValidatorExits(uint256)": {
        "notice": "Public endpoint to consume the exit request demand and perform the actual exit requestsThe selection algorithm will pick validators based on their active validator countsThis value is computed by using the count of funded keys and taking into account the stopped validator counts and exit requests"
      },
      "setOperatorAddress(uint256,address)": {
        "notice": "Changes the operator address of an operator"
      },
      "setOperatorLimits(uint256[],uint32[],uint256)": {
        "notice": "Changes the operator staking limit"
      },
      "setOperatorName(uint256,string)": {
        "notice": "Changes the operator name"
      },
      "setOperatorStatus(uint256,bool)": {
        "notice": "Changes the operator status"
      },
      "version()": {
        "notice": "Retrieves the version of the contract"
      }
    },
    "notice": "This contract handles the list of operators and their keys",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}