{
  "address": "0x4991E4a88A87454DB0b2Ad35D296e20F6851015a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "AllowanceTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceTooLow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Denied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorOnDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentPublicKeys",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentSignatures",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentValidatorsExitedBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newValidatorsExitedBalance",
          "type": "uint256"
        }
      ],
      "name": "InvalidDecreasingValidatorsExitedBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentValidatorsSkimmedBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newValidatorsSkimmedBalance",
          "type": "uint256"
        }
      ],
      "name": "InvalidDecreasingValidatorsSkimmedBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDepositRoot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEmptyString",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "InvalidEpoch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFee",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedVersion",
          "type": "uint256"
        }
      ],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPublicKeyCount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requested",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        }
      ],
      "name": "InvalidPulledClFundsAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignatureCount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "providedValidatorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositedValidatorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastReportedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "InvalidValidatorCountReport",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWithdrawalCredentials",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoAvailableValidatorKeys",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullTransfer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyKeeper",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SliceOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SliceOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prevTotalEthIncludingExited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "postTotalEthIncludingExited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeElapsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "relativeLowerBound",
          "type": "uint256"
        }
      ],
      "name": "TotalValidatorBalanceDecreaseOutOfBound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prevTotalEthIncludingExited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "postTotalEthIncludingExited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeElapsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "annualAprUpperBound",
          "type": "uint256"
        }
      ],
      "name": "TotalValidatorBalanceIncreaseOutOfBound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "UnauthorizedTransfer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroMintedShares",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validatorCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validatorTotalBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "roundId",
          "type": "bytes32"
        }
      ],
      "name": "ConsensusLayerDataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "cdata",
          "type": "bytes"
        }
      ],
      "name": "Initialize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "epoch",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validatorsBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validatorsSkimmedBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validatorsExitedBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validatorsExitingBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "validatorsCount",
              "type": "uint32"
            },
            {
              "internalType": "uint32[]",
              "name": "stoppedValidatorCountPerOperator",
              "type": "uint32[]"
            },
            {
              "internalType": "bool",
              "name": "rebalanceDepositToRedeemMode",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "slashingContainmentMode",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct IOracleManagerV1.ConsensusLayerReport",
          "name": "report",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pulledELFees",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pulledRedeemManagerExceedingEthBuffer",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pulledCoverageFunds",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IOracleManagerV1.ConsensusLayerDataReportingTrace",
          "name": "trace",
          "type": "tuple"
        }
      ],
      "name": "ProcessedConsensusLayerReport",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pulledSkimmedEthAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pullExitedEthAmount",
          "type": "uint256"
        }
      ],
      "name": "PulledCLFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PulledCoverageFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PulledELFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PulledRedeemManagerExceedingEth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemManagerDemand",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "suppliedRedeemManagerDemand",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "suppliedRedeemManagerDemandInEth",
          "type": "uint256"
        }
      ],
      "name": "ReportedRedeemManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_collector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldTotalUnderlyingBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldTotalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newTotalUnderlyingBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "RewardsEarned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "SetAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "allowlist",
          "type": "address"
        }
      ],
      "name": "SetAllowlist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "SetBalanceCommittedToDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "SetBalanceToDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "SetBalanceToRedeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "annualAprUpperBound",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "relativeLowerBound",
          "type": "uint256"
        }
      ],
      "name": "SetBounds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collector",
          "type": "address"
        }
      ],
      "name": "SetCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "coverageFund",
          "type": "address"
        }
      ],
      "name": "SetCoverageFund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositContract",
          "type": "address"
        }
      ],
      "name": "SetDepositContractAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDepositedValidatorCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDepositedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "SetDepositedValidatorCount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "elFeeRecipient",
          "type": "address"
        }
      ],
      "name": "SetELFeeRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SetGlobalFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minNetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxRelativeAmount",
          "type": "uint256"
        }
      ],
      "name": "SetMaxDailyCommittableAmounts",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "SetMetadataURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operatorRegistry",
          "type": "address"
        }
      ],
      "name": "SetOperatorsRegistry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracleAddress",
          "type": "address"
        }
      ],
      "name": "SetOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingAdmin",
          "type": "address"
        }
      ],
      "name": "SetPendingAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemManager",
          "type": "address"
        }
      ],
      "name": "SetRedeemManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "epochsPerFrame",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "slotsPerEpoch",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "secondsPerSlot",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "genesisTime",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "epochsToAssumedFinality",
          "type": "uint64"
        }
      ],
      "name": "SetSpec",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "SetTotalSupply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "withdrawalCredentials",
          "type": "bytes32"
        }
      ],
      "name": "SetWithdrawalCredentials",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UserDeposit",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_KEY_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIGNATURE_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_DEPOSIT_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_redeemRequestIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_withdrawalEventIds",
          "type": "uint32[]"
        }
      ],
      "name": "claimRedeemRequests",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "claimStatuses",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_subtractableValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "depositAndTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxCount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_depositRoot",
          "type": "bytes32"
        }
      ],
      "name": "depositToConsensusLayerWithDepositRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowlist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalanceToDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalanceToRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCLSpec",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "epochsPerFrame",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "slotsPerEpoch",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "secondsPerSlot",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "genesisTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "epochsToAssumedFinality",
              "type": "uint64"
            }
          ],
          "internalType": "struct CLSpec.CLSpecStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCLValidatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCLValidatorTotalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCommittedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCoverageFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentFrame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_startEpochId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDailyCommittableLimits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "minDailyNetCommittableAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "maxDailyRelativeCommittableAmount",
              "type": "uint128"
            }
          ],
          "internalType": "struct DailyCommittableLimits.DailyCommittableLimitsStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositedValidatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getELFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExpectedEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epochId",
          "type": "uint256"
        }
      ],
      "name": "getFrameFirstEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGlobalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getKeeper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastCompletedEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastConsensusLayerReport",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "epoch",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validatorsBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validatorsSkimmedBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validatorsExitedBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validatorsExitingBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "validatorsCount",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "rebalanceDepositToRedeemMode",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "slashingContainmentMode",
              "type": "bool"
            }
          ],
          "internalType": "struct IOracleManagerV1.StoredConsensusLayerReport",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMetadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperatorsRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRedeemManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReportBounds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "annualAprUpperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "relativeLowerBound",
              "type": "uint256"
            }
          ],
          "internalType": "struct ReportBounds.ReportBoundsStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawalCredentials",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_additionalValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_elFeeRecipientAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_withdrawalCredentials",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_systemAdministratorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_allowlistAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operatorRegistryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collectorAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_globalFee",
          "type": "uint256"
        }
      ],
      "name": "initRiverV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_redeemManager",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_epochsPerFrame",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_slotsPerEpoch",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_secondsPerSlot",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_genesisTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_epochsToAssumedFinality",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_annualAprUpperBound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_relativeLowerBound",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "_minDailyNetCommittableAmount_",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_maxDailyRelativeCommittableAmount_",
          "type": "uint128"
        }
      ],
      "name": "initRiverV1_1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initRiverV1_2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "isValidEpoch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "proposeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lsETHAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "requestRedeem",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "_redeemRequestId",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_redeemRequestIds",
          "type": "uint32[]"
        }
      ],
      "name": "resolveRedeemRequests",
      "outputs": [
        {
          "internalType": "int64[]",
          "name": "withdrawalEventIds",
          "type": "int64[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendCLFunds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendCoverageFunds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendELFees",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendRedeemManagerExceedingFunds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAllowlist",
          "type": "address"
        }
      ],
      "name": "setAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "epochsPerFrame",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "slotsPerEpoch",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "secondsPerSlot",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "genesisTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "epochsToAssumedFinality",
              "type": "uint64"
            }
          ],
          "internalType": "struct CLSpec.CLSpecStruct",
          "name": "_newValue",
          "type": "tuple"
        }
      ],
      "name": "setCLSpec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newCollector",
          "type": "address"
        }
      ],
      "name": "setCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "epoch",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validatorsBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validatorsSkimmedBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validatorsExitedBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validatorsExitingBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "validatorsCount",
              "type": "uint32"
            },
            {
              "internalType": "uint32[]",
              "name": "stoppedValidatorCountPerOperator",
              "type": "uint32[]"
            },
            {
              "internalType": "bool",
              "name": "rebalanceDepositToRedeemMode",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "slashingContainmentMode",
              "type": "bool"
            }
          ],
          "internalType": "struct IOracleManagerV1.ConsensusLayerReport",
          "name": "_report",
          "type": "tuple"
        }
      ],
      "name": "setConsensusLayerData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newCoverageFund",
          "type": "address"
        }
      ],
      "name": "setCoverageFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "minDailyNetCommittableAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "maxDailyRelativeCommittableAmount",
              "type": "uint128"
            }
          ],
          "internalType": "struct DailyCommittableLimits.DailyCommittableLimitsStruct",
          "name": "_dcl",
          "type": "tuple"
        }
      ],
      "name": "setDailyCommittableLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newELFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setELFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setGlobalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        }
      ],
      "name": "setKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        }
      ],
      "name": "setMetadataURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "annualAprUpperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "relativeLowerBound",
              "type": "uint256"
            }
          ],
          "internalType": "struct ReportBounds.ReportBoundsStruct",
          "name": "_newValue",
          "type": "tuple"
        }
      ],
      "name": "setReportBounds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_underlyingAssetAmount",
          "type": "uint256"
        }
      ],
      "name": "sharesFromUnderlyingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUnderlyingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "underlyingBalanceFromShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x05a49d3cdb5787b6b026f58a9c17efc08b3a785277892c6cbcdd4beb79477438",
  "receipt": {
    "to": null,
    "from": "0x341C40B94bF2afBFa42573cB78f16Ee15a056238",
    "contractAddress": "0x4991E4a88A87454DB0b2Ad35D296e20F6851015a",
    "transactionIndex": 14,
    "gasUsed": "4995885",
    "logsBloom": "0x
    "blockHash": "0xb3d8c38b5dd149748440cf7a55222e9180a1cde9044ca584c91d96ffc813a5ed",
    "transactionHash": "0x05a49d3cdb5787b6b026f58a9c17efc08b3a785277892c6cbcdd4beb79477438",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 2183928,
        "transactionHash": "0x05a49d3cdb5787b6b026f58a9c17efc08b3a785277892c6cbcdd4beb79477438",
        "address": "0x4991E4a88A87454DB0b2Ad35D296e20F6851015a",
        "topics": [
          "0x1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a71"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 521,
        "blockHash": "0xb3d8c38b5dd149748440cf7a55222e9180a1cde9044ca584c91d96ffc813a5ed"
      }
    ],
    "blockNumber": 2183928,
    "cumulativeGasUsed": "22089110",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9213235610761b71d3e739f6815540a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"AllowanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Denied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorOnDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentPublicKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentValidatorsExitedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newValidatorsExitedBalance\",\"type\":\"uint256\"}],\"name\":\"InvalidDecreasingValidatorsExitedBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentValidatorsSkimmedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newValidatorsSkimmedBalance\",\"type\":\"uint256\"}],\"name\":\"InvalidDecreasingValidatorsSkimmedBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDepositRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEmptyString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"InvalidEpoch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicKeyCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"name\":\"InvalidPulledClFundsAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"providedValidatorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedValidatorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReportedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"InvalidValidatorCountReport\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawalCredentials\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAvailableValidatorKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyKeeper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prevTotalEthIncludingExited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postTotalEthIncludingExited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relativeLowerBound\",\"type\":\"uint256\"}],\"name\":\"TotalValidatorBalanceDecreaseOutOfBound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prevTotalEthIncludingExited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postTotalEthIncludingExited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"annualAprUpperBound\",\"type\":\"uint256\"}],\"name\":\"TotalValidatorBalanceIncreaseOutOfBound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"UnauthorizedTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroMintedShares\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorTotalBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"roundId\",\"type\":\"bytes32\"}],\"name\":\"ConsensusLayerDataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"cdata\",\"type\":\"bytes\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorsBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorsSkimmedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorsExitedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorsExitingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"validatorsCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"stoppedValidatorCountPerOperator\",\"type\":\"uint32[]\"},{\"internalType\":\"bool\",\"name\":\"rebalanceDepositToRedeemMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"slashingContainmentMode\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IOracleManagerV1.ConsensusLayerReport\",\"name\":\"report\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pulledELFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pulledRedeemManagerExceedingEthBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pulledCoverageFunds\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IOracleManagerV1.ConsensusLayerDataReportingTrace\",\"name\":\"trace\",\"type\":\"tuple\"}],\"name\":\"ProcessedConsensusLayerReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pulledSkimmedEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pullExitedEthAmount\",\"type\":\"uint256\"}],\"name\":\"PulledCLFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PulledCoverageFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PulledELFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PulledRedeemManagerExceedingEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemManagerDemand\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"suppliedRedeemManagerDemand\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"suppliedRedeemManagerDemandInEth\",\"type\":\"uint256\"}],\"name\":\"ReportedRedeemManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldTotalUnderlyingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalUnderlyingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"RewardsEarned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"allowlist\",\"type\":\"address\"}],\"name\":\"SetAllowlist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"SetBalanceCommittedToDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"SetBalanceToDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"SetBalanceToRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"annualAprUpperBound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"relativeLowerBound\",\"type\":\"uint256\"}],\"name\":\"SetBounds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"SetCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"coverageFund\",\"type\":\"address\"}],\"name\":\"SetCoverageFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositContract\",\"type\":\"address\"}],\"name\":\"SetDepositContractAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDepositedValidatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDepositedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"SetDepositedValidatorCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"elFeeRecipient\",\"type\":\"address\"}],\"name\":\"SetELFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetGlobalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minNetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRelativeAmount\",\"type\":\"uint256\"}],\"name\":\"SetMaxDailyCommittableAmounts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"SetMetadataURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorRegistry\",\"type\":\"address\"}],\"name\":\"SetOperatorsRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"SetOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"SetPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemManager\",\"type\":\"address\"}],\"name\":\"SetRedeemManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"epochsPerFrame\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"slotsPerEpoch\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"secondsPerSlot\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"genesisTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"epochsToAssumedFinality\",\"type\":\"uint64\"}],\"name\":\"SetSpec\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"SetTotalSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawalCredentials\",\"type\":\"bytes32\"}],\"name\":\"SetWithdrawalCredentials\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserDeposit\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEPOSIT_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_KEY_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNATURE_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DEPOSIT_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_redeemRequestIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_withdrawalEventIds\",\"type\":\"uint32[]\"}],\"name\":\"claimRedeemRequests\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"claimStatuses\",\"type\":\"uint8[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractableValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"depositAndTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_depositRoot\",\"type\":\"bytes32\"}],\"name\":\"depositToConsensusLayerWithDepositRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowlist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceToDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceToRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCLSpec\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"epochsPerFrame\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"slotsPerEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondsPerSlot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"genesisTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"epochsToAssumedFinality\",\"type\":\"uint64\"}],\"internalType\":\"struct CLSpec.CLSpecStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCLValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCLValidatorTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommittedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCoverageFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentFrame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_startEpochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDailyCommittableLimits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"minDailyNetCommittableAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxDailyRelativeCommittableAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct DailyCommittableLimits.DailyCommittableLimitsStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositedValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getELFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpectedEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"}],\"name\":\"getFrameFirstEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKeeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastCompletedEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastConsensusLayerReport\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorsBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorsSkimmedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorsExitedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorsExitingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"validatorsCount\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"rebalanceDepositToRedeemMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"slashingContainmentMode\",\"type\":\"bool\"}],\"internalType\":\"struct IOracleManagerV1.StoredConsensusLayerReport\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorsRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedeemManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReportBounds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"annualAprUpperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relativeLowerBound\",\"type\":\"uint256\"}],\"internalType\":\"struct ReportBounds.ReportBoundsStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalCredentials\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_additionalValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_elFeeRecipientAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_withdrawalCredentials\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_systemAdministratorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowlistAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operatorRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collectorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_globalFee\",\"type\":\"uint256\"}],\"name\":\"initRiverV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_redeemManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_epochsPerFrame\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_slotsPerEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_secondsPerSlot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_genesisTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_epochsToAssumedFinality\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_annualAprUpperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_relativeLowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_minDailyNetCommittableAmount_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxDailyRelativeCommittableAmount_\",\"type\":\"uint128\"}],\"name\":\"initRiverV1_1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initRiverV1_2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"isValidEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"proposeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lsETHAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"requestRedeem\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"_redeemRequestId\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_redeemRequestIds\",\"type\":\"uint32[]\"}],\"name\":\"resolveRedeemRequests\",\"outputs\":[{\"internalType\":\"int64[]\",\"name\":\"withdrawalEventIds\",\"type\":\"int64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCLFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCoverageFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendELFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendRedeemManagerExceedingFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAllowlist\",\"type\":\"address\"}],\"name\":\"setAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"epochsPerFrame\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"slotsPerEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondsPerSlot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"genesisTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"epochsToAssumedFinality\",\"type\":\"uint64\"}],\"internalType\":\"struct CLSpec.CLSpecStruct\",\"name\":\"_newValue\",\"type\":\"tuple\"}],\"name\":\"setCLSpec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCollector\",\"type\":\"address\"}],\"name\":\"setCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorsBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorsSkimmedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorsExitedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorsExitingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"validatorsCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"stoppedValidatorCountPerOperator\",\"type\":\"uint32[]\"},{\"internalType\":\"bool\",\"name\":\"rebalanceDepositToRedeemMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"slashingContainmentMode\",\"type\":\"bool\"}],\"internalType\":\"struct IOracleManagerV1.ConsensusLayerReport\",\"name\":\"_report\",\"type\":\"tuple\"}],\"name\":\"setConsensusLayerData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCoverageFund\",\"type\":\"address\"}],\"name\":\"setCoverageFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"minDailyNetCommittableAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxDailyRelativeCommittableAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct DailyCommittableLimits.DailyCommittableLimitsStruct\",\"name\":\"_dcl\",\"type\":\"tuple\"}],\"name\":\"setDailyCommittableLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newELFeeRecipient\",\"type\":\"address\"}],\"name\":\"setELFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setGlobalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"setMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"annualAprUpperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relativeLowerBound\",\"type\":\"uint256\"}],\"internalType\":\"struct ReportBounds.ReportBoundsStruct\",\"name\":\"_newValue\",\"type\":\"tuple\"}],\"name\":\"setReportBounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_underlyingAssetAmount\",\"type\":\"uint256\"}],\"name\":\"sharesFromUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlyingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"underlyingBalanceFromShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Alluvial Finance Inc.\",\"errors\":{\"AllowanceTooLow(address,address,uint256,uint256)\":[{\"params\":{\"_allowance\":\"Current allowance\",\"_from\":\"Account where funds are sent from\",\"_operator\":\"Account attempting the transfer\",\"_value\":\"Requested transfer value in shares\"}}],\"Denied(address)\":[{\"params\":{\"account\":\"The account that was denied\"}}],\"InvalidDecreasingValidatorsExitedBalance(uint256,uint256)\":[{\"params\":{\"currentValidatorsExitedBalance\":\"The current exited balance\",\"newValidatorsExitedBalance\":\"The new exited balance\"}}],\"InvalidDecreasingValidatorsSkimmedBalance(uint256,uint256)\":[{\"params\":{\"currentValidatorsSkimmedBalance\":\"The current exited balance\",\"newValidatorsSkimmedBalance\":\"The new exited balance\"}}],\"InvalidEpoch(uint256)\":[{\"params\":{\"epoch\":\"Invalid epoch\"}}],\"InvalidInitialization(uint256,uint256)\":[{\"params\":{\"expectedVersion\":\"The version that was expected\",\"version\":\"The version that was attempting to be initialized\"}}],\"InvalidPulledClFundsAmount(uint256,uint256)\":[{\"params\":{\"received\":\"The amount that was received\",\"requested\":\"The amount that was requested\"}}],\"InvalidValidatorCountReport(uint256,uint256,uint256)\":[{\"params\":{\"depositedValidatorCount\":\"The number of deposits performed by the system\",\"lastReportedValidatorCount\":\"The last reported validator count\",\"providedValidatorCount\":\"The received validator count value\"}}],\"TotalValidatorBalanceDecreaseOutOfBound(uint256,uint256,uint256,uint256)\":[{\"params\":{\"postTotalEthIncludingExited\":\"The post-report total balance, including all exited balance\",\"prevTotalEthIncludingExited\":\"The previous total balance, including all exited balance\",\"relativeLowerBound\":\"The lower bound value that was used\",\"timeElapsed\":\"The time in seconds since last report\"}}],\"TotalValidatorBalanceIncreaseOutOfBound(uint256,uint256,uint256,uint256)\":[{\"params\":{\"annualAprUpperBound\":\"The upper bound value that was used\",\"postTotalEthIncludingExited\":\"The post-report total balance, including all exited balance\",\"prevTotalEthIncludingExited\":\"The previous total balance, including all exited balance\",\"timeElapsed\":\"The time in seconds since last report\"}}],\"Unauthorized(address)\":[{\"params\":{\"caller\":\"Address performing the call\"}}],\"UnauthorizedTransfer(address,address)\":[{\"params\":{\"_from\":\"Account sending the funds in the invalid transfer\",\"_to\":\"Account receiving the funds in the invalid transfer\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"ConsensusLayerDataUpdate(uint256,uint256,bytes32)\":{\"params\":{\"roundId\":\"Round identifier\",\"validatorCount\":\"The new count of validators running on the consensus layer\",\"validatorTotalBalance\":\"The new total balance sum of all validators\"}},\"Initialize(uint256,bytes)\":{\"params\":{\"cdata\":\"Complete calldata that was used during the initialization\",\"version\":\"New version of the contracts\"}},\"ProcessedConsensusLayerReport((uint256,uint256,uint256,uint256,uint256,uint32,uint32[],bool,bool),(uint256,uint256,uint256,uint256))\":{\"params\":{\"report\":\"The report that was provided\",\"trace\":\"The trace structure providing more insights on internals\"}},\"PulledCLFunds(uint256,uint256)\":{\"params\":{\"pullExitedEthAmount\":\"The amount of exited ETH pulled\",\"pulledSkimmedEthAmount\":\"The amount of skimmed ETH pulled\"}},\"PulledCoverageFunds(uint256)\":{\"params\":{\"amount\":\"The amount pulled\"}},\"PulledELFees(uint256)\":{\"params\":{\"amount\":\"The amount pulled\"}},\"PulledRedeemManagerExceedingEth(uint256)\":{\"params\":{\"amount\":\"The amount pulled\"}},\"ReportedRedeemManager(uint256,uint256,uint256)\":{\"params\":{\"redeemManagerDemand\":\"The total demand in LsETH of the redeem manager\",\"suppliedRedeemManagerDemand\":\"The amount of LsETH demand actually supplied\",\"suppliedRedeemManagerDemandInEth\":\"The amount in ETH of the supplied demand\"}},\"RewardsEarned(address,uint256,uint256,uint256,uint256)\":{\"params\":{\"_collector\":\"The address of the collector during this event\",\"_newTotalSupply\":\"New total supply in shares\",\"_newTotalUnderlyingBalance\":\"New total ETH balance under management by River\",\"_oldTotalSupply\":\"Old total supply in shares\",\"_oldTotalUnderlyingBalance\":\"Old total ETH balance under management by River\"}},\"SetAdmin(address)\":{\"params\":{\"admin\":\"New admin address\"}},\"SetAllowlist(address)\":{\"params\":{\"allowlist\":\"The new Allowlist\"}},\"SetBalanceCommittedToDeposit(uint256,uint256)\":{\"params\":{\"newAmount\":\"The new balance committed to deposit\",\"oldAmount\":\"The old balance committed to deposit\"}},\"SetBalanceToDeposit(uint256,uint256)\":{\"params\":{\"newAmount\":\"The new balance to deposit\",\"oldAmount\":\"The old balance to deposit\"}},\"SetBalanceToRedeem(uint256,uint256)\":{\"params\":{\"newAmount\":\"The new balance to redeem\",\"oldAmount\":\"The old balance to redeem\"}},\"SetBounds(uint256,uint256)\":{\"params\":{\"annualAprUpperBound\":\"The reporting upper bound\",\"relativeLowerBound\":\"The reporting lower bound\"}},\"SetCollector(address)\":{\"params\":{\"collector\":\"The new Collector\"}},\"SetCoverageFund(address)\":{\"params\":{\"coverageFund\":\"The new Coverage Fund\"}},\"SetDepositContractAddress(address)\":{\"params\":{\"depositContract\":\"Address of the deposit contract\"}},\"SetDepositedValidatorCount(uint256,uint256)\":{\"params\":{\"newDepositedValidatorCount\":\"The new deposited validator count value\",\"oldDepositedValidatorCount\":\"The old deposited validator count value\"}},\"SetELFeeRecipient(address)\":{\"params\":{\"elFeeRecipient\":\"The new Execution Layer Fee Recipient\"}},\"SetGlobalFee(uint256)\":{\"params\":{\"fee\":\"The new Global Fee\"}},\"SetMaxDailyCommittableAmounts(uint256,uint256)\":{\"params\":{\"maxRelativeAmount\":\"The maximum amount that can be used as the daily committable amount, relative to the total underlying supply\",\"minNetAmount\":\"The minimum amount that must be used as the daily committable amount\"}},\"SetMetadataURI(string)\":{\"params\":{\"metadataURI\":\"The new Metadata URI string\"}},\"SetOperatorsRegistry(address)\":{\"params\":{\"operatorRegistry\":\"The new Operators Registry\"}},\"SetOracle(address)\":{\"params\":{\"oracleAddress\":\"The new oracle address\"}},\"SetPendingAdmin(address)\":{\"params\":{\"pendingAdmin\":\"New pending admin address\"}},\"SetRedeemManager(address)\":{\"params\":{\"redeemManager\":\"The address of the redeem manager\"}},\"SetSpec(uint64,uint64,uint64,uint64,uint64)\":{\"params\":{\"epochsPerFrame\":\"The number of epochs inside a frame\",\"epochsToAssumedFinality\":\"The number of epochs before an epoch is considered final\",\"genesisTime\":\"The genesis timestamp\",\"secondsPerSlot\":\"The number of seconds inside a slot\",\"slotsPerEpoch\":\"The number of slots inside an epoch\"}},\"SetWithdrawalCredentials(bytes32)\":{\"params\":{\"withdrawalCredentials\":\"The withdrawal credentials to use for deposits\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"UserDeposit(address,address,uint256)\":{\"params\":{\"amount\":\"Amount in ETH deposited\",\"depositor\":\"Address performing the deposit\",\"recipient\":\"Address receiving the minted shares\"}}},\"kind\":\"dev\",\"methods\":{\"acceptAdmin()\":{\"details\":\"Only callable by the pending admin. Resets the pending admin if succesful.\"},\"allowance(address,address)\":{\"params\":{\"_owner\":\"Address that issued the allowance\",\"_spender\":\"Address that received the allowance\"},\"returns\":{\"_0\":\"The allowance in shares for a given spender\"}},\"approve(address,uint256)\":{\"details\":\"An approved account can use transferFrom to transfer funds on behalf of the token owner\",\"params\":{\"_spender\":\"Address that is allowed to spend the tokens\",\"_value\":\"The allowed amount in shares, will override previous value\"},\"returns\":{\"_0\":\"True if success\"}},\"balanceOf(address)\":{\"params\":{\"_owner\":\"Address to be checked\"},\"returns\":{\"_0\":\"The balance of the account in shares\"}},\"balanceOfUnderlying(address)\":{\"params\":{\"_owner\":\"Address to be checked\"},\"returns\":{\"_0\":\"The underlying balance of the account\"}},\"claimRedeemRequests(uint32[],uint32[])\":{\"params\":{\"_redeemRequestIds\":\"The list of redeem requests to claim\",\"_withdrawalEventIds\":\"The list of resolved withdrawal event ids\"},\"returns\":{\"claimStatuses\":\"The operation status results\"}},\"decimals()\":{\"returns\":{\"_0\":\"The decimal count\"}},\"decreaseAllowance(address,uint256)\":{\"params\":{\"_spender\":\"Spender that receives the allowance\",\"_subtractableValue\":\"Amount of shares to subtract\"},\"returns\":{\"_0\":\"True if success\"}},\"depositAndTransfer(address)\":{\"params\":{\"_recipient\":\"Address receiving the minted LsETH\"}},\"depositToConsensusLayerWithDepositRoot(uint256,bytes32)\":{\"params\":{\"_depositRoot\":\"The root of the deposit tree\",\"_maxCount\":\"The maximum amount of validator keys to fund\"}},\"getAdmin()\":{\"returns\":{\"_0\":\"The admin address\"}},\"getAllowlist()\":{\"returns\":{\"_0\":\"The allowlist address\"}},\"getBalanceToDeposit()\":{\"returns\":{\"_0\":\"The amount of ETH not yet committed for deposit\"}},\"getBalanceToRedeem()\":{\"returns\":{\"_0\":\"The current balance to redeem\"}},\"getCLSpec()\":{\"returns\":{\"_0\":\"The Consensus Layer Specification\"}},\"getCLValidatorCount()\":{\"returns\":{\"_0\":\"The CL validator count\"}},\"getCLValidatorTotalBalance()\":{\"returns\":{\"_0\":\"The CL Validator total balance\"}},\"getCollector()\":{\"returns\":{\"_0\":\"The collector address\"}},\"getCommittedBalance()\":{\"returns\":{\"_0\":\"The amount of ETH committed for deposit\"}},\"getCoverageFund()\":{\"returns\":{\"_0\":\"The coverage fund address\"}},\"getCurrentEpochId()\":{\"returns\":{\"_0\":\"The current epoch id\"}},\"getCurrentFrame()\":{\"returns\":{\"_endTime\":\"The timestamp of the end of the frame in seconds\",\"_startEpochId\":\"The epoch at the beginning of the frame\",\"_startTime\":\"The timestamp of the beginning of the frame in seconds\"}},\"getDailyCommittableLimits()\":{\"returns\":{\"_0\":\"The daily committable limits structure\"}},\"getDepositedValidatorCount()\":{\"returns\":{\"_0\":\"The deposited validator count\"}},\"getELFeeRecipient()\":{\"returns\":{\"_0\":\"The execution layer fee recipient address\"}},\"getExpectedEpochId()\":{\"returns\":{\"_0\":\"The current expected epoch id\"}},\"getFrameFirstEpochId(uint256)\":{\"params\":{\"_epochId\":\"Epoch id used to get the frame\"},\"returns\":{\"_0\":\"The first epoch id of the frame containing the given epoch id\"}},\"getGlobalFee()\":{\"returns\":{\"_0\":\"The global fee\"}},\"getKeeper()\":{\"returns\":{\"_0\":\"The keeper address\"}},\"getLastCompletedEpochId()\":{\"returns\":{\"_0\":\"The last completed epoch id\"}},\"getLastConsensusLayerReport()\":{\"returns\":{\"_0\":\"The stored consensus layer report\"}},\"getMetadataURI()\":{\"returns\":{\"_0\":\"The metadata uri string value\"}},\"getOperatorsRegistry()\":{\"returns\":{\"_0\":\"The operators registry address\"}},\"getOracle()\":{\"returns\":{\"_0\":\"The oracle address\"}},\"getPendingAdmin()\":{\"returns\":{\"_0\":\"The pending admin address\"}},\"getRedeemManager()\":{\"returns\":{\"_0\":\"The redeem manager address\"}},\"getReportBounds()\":{\"returns\":{\"_0\":\"The report bounds\"}},\"getTime()\":{\"returns\":{\"_0\":\"The current timestamp from the EVM context\"}},\"getWithdrawalCredentials()\":{\"returns\":{\"_0\":\"The withdrawal credentials\"}},\"increaseAllowance(address,uint256)\":{\"params\":{\"_additionalValue\":\"Amount of shares to add\",\"_spender\":\"Spender that receives the allowance\"},\"returns\":{\"_0\":\"True if success\"}},\"initRiverV1(address,address,bytes32,address,address,address,address,address,uint256)\":{\"params\":{\"_allowlistAddress\":\"Address of the allowlist contract\",\"_collectorAddress\":\"Address receiving the the global fee on revenue\",\"_depositContractAddress\":\"Address to make Consensus Layer deposits\",\"_elFeeRecipientAddress\":\"Address that receives the execution layer fees\",\"_globalFee\":\"Amount retained when the ETH balance increases and sent to the collector\",\"_operatorRegistryAddress\":\"Address of the operator registry\",\"_oracleAddress\":\"The address of the Oracle contract\",\"_systemAdministratorAddress\":\"Administrator address\",\"_withdrawalCredentials\":\"Credentials to use for every validator deposit\"}},\"initRiverV1_1(address,uint64,uint64,uint64,uint64,uint64,uint256,uint256,uint128,uint128)\":{\"params\":{\"_annualAprUpperBound\":\"The reporting upper bound\",\"_epochsPerFrame\":\"The amounts of epochs in a frame\",\"_epochsToAssumedFinality\":\"The number of epochs before an epoch is considered final on-chain\",\"_genesisTime\":\"The genesis timestamp\",\"_maxDailyNetCommittableAmount_\":\"The net daily committable limit\",\"_maxDailyRelativeCommittableAmount_\":\"The relative daily committable limit\",\"_redeemManager\":\"The redeem manager address\",\"_relativeLowerBound\":\"The reporting lower bound\",\"_secondsPerSlot\":\"The seconds inside a slot\",\"_slotsPerEpoch\":\"The slots inside an epoch\"}},\"isValidEpoch(uint256)\":{\"params\":{\"epoch\":\"The epoch to lookup\"},\"returns\":{\"_0\":\"True if valid\"}},\"name()\":{\"returns\":{\"_0\":\"The token name\"}},\"proposeAdmin(address)\":{\"details\":\"This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.\",\"params\":{\"_newAdmin\":\"New admin address\"}},\"requestRedeem(uint256,address)\":{\"params\":{\"_lsETHAmount\":\"The amount of LsETH to redeem\",\"_recipient\":\"The address that will own the redeem request\"},\"returns\":{\"_redeemRequestId\":\"The ID of the newly created redeem request\"}},\"resolveRedeemRequests(uint32[])\":{\"params\":{\"_redeemRequestIds\":\"The list of redeem requests to resolve\"},\"returns\":{\"withdrawalEventIds\":\"The list of matching withdrawal events, or error codes\"}},\"setAllowlist(address)\":{\"params\":{\"_newAllowlist\":\"New address for the allowlist\"}},\"setCLSpec((uint64,uint64,uint64,uint64,uint64))\":{\"params\":{\"_newValue\":\"The new consensus layer spec value\"}},\"setCollector(address)\":{\"params\":{\"_newCollector\":\"New address for the collector\"}},\"setConsensusLayerData((uint256,uint256,uint256,uint256,uint256,uint32,uint32[],bool,bool))\":{\"params\":{\"_report\":\"The consensus layer report structure\"}},\"setCoverageFund(address)\":{\"params\":{\"_newCoverageFund\":\"New address for the fund\"}},\"setDailyCommittableLimits((uint128,uint128))\":{\"params\":{\"_dcl\":\"The Daily Committable Limits structure\"}},\"setELFeeRecipient(address)\":{\"params\":{\"_newELFeeRecipient\":\"New address for the recipient\"}},\"setGlobalFee(uint256)\":{\"params\":{\"_newFee\":\"New fee value\"}},\"setMetadataURI(string)\":{\"params\":{\"_metadataURI\":\"The new metadata uri string value\"}},\"setOracle(address)\":{\"params\":{\"_oracleAddress\":\"Address of the oracle\"}},\"setReportBounds((uint256,uint256))\":{\"params\":{\"_newValue\":\"The new report bounds value\"}},\"sharesFromUnderlyingBalance(uint256)\":{\"params\":{\"_underlyingAssetAmount\":\"Amount of underlying asset to convert\"},\"returns\":{\"_0\":\"The amount of shares worth the underlying asset amopunt\"}},\"symbol()\":{\"returns\":{\"_0\":\"The token symbol\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"The total supply in shares\"}},\"totalUnderlyingSupply()\":{\"returns\":{\"_0\":\"The total underlying asset supply\"}},\"transfer(address,uint256)\":{\"params\":{\"_to\":\"Address receiving the tokens\",\"_value\":\"Amount of shares to be sent\"},\"returns\":{\"_0\":\"True if success\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"_from\":\"Address sending the tokens\",\"_to\":\"Address receiving the tokens\",\"_value\":\"Amount of shares to be sent\"},\"returns\":{\"_0\":\"True if success\"}},\"underlyingBalanceFromShares(uint256)\":{\"params\":{\"_shares\":\"Amount of shares to convert\"},\"returns\":{\"_0\":\"The underlying asset balance represented by the shares\"}},\"version()\":{\"returns\":{\"_0\":\"Version of the contract\"}}},\"title\":\"River (v1)\",\"version\":1},\"userdoc\":{\"errors\":{\"AllowanceTooLow(address,address,uint256,uint256)\":[{\"notice\":\"Allowance too low to perform operation\"}],\"BalanceTooLow()\":[{\"notice\":\"Balance too low to perform operation\"}],\"Denied(address)\":[{\"notice\":\"The access was denied\"}],\"EmptyDeposit()\":[{\"notice\":\"And empty deposit attempt was made\"}],\"ErrorOnDeposit()\":[{\"notice\":\"An error occured during the deposit\"}],\"InconsistentPublicKeys()\":[{\"notice\":\"The length of the BLS Public key is invalid during deposit\"}],\"InconsistentSignatures()\":[{\"notice\":\"The length of the BLS Signature is invalid during deposit\"}],\"InvalidArgument()\":[{\"notice\":\"The argument was invalid\"}],\"InvalidCall()\":[{\"notice\":\"The call was invalid\"}],\"InvalidDecreasingValidatorsExitedBalance(uint256,uint256)\":[{\"notice\":\"The total exited balance decreased\"}],\"InvalidDecreasingValidatorsSkimmedBalance(uint256,uint256)\":[{\"notice\":\"The total skimmed balance decreased\"}],\"InvalidDepositRoot()\":[{\"notice\":\"Invalid deposit root\"}],\"InvalidEmptyString()\":[{\"notice\":\"The string is empty\"}],\"InvalidEpoch(uint256)\":[{\"notice\":\"Thrown when an invalid epoch was reported\"}],\"InvalidFee()\":[{\"notice\":\"The fee is invalid\"}],\"InvalidInitialization(uint256,uint256)\":[{\"notice\":\"An error occured during the initialization\"}],\"InvalidPublicKeyCount()\":[{\"notice\":\"The received count of public keys to deposit is invalid\"}],\"InvalidPulledClFundsAmount(uint256,uint256)\":[{\"notice\":\"Thrown when the amount received from the Withdraw contract doe not match the requested amount\"}],\"InvalidSignatureCount()\":[{\"notice\":\"The received count of signatures to deposit is invalid\"}],\"InvalidValidatorCountReport(uint256,uint256,uint256)\":[{\"notice\":\"The reported validator count is invalid\"}],\"InvalidWithdrawalCredentials()\":[{\"notice\":\"The withdrawal credentials value is null\"}],\"InvalidZeroAddress()\":[{\"notice\":\"The address is zero\"}],\"NoAvailableValidatorKeys()\":[{\"notice\":\"The internal key retrieval returned no keys\"}],\"NotEnoughFunds()\":[{\"notice\":\"Not enough funds to deposit one validator\"}],\"NullTransfer()\":[{\"notice\":\"Invalid empty transfer\"}],\"SliceOutOfBounds()\":[{\"notice\":\"The slice is outside of the initial bytes bounds\"}],\"SliceOverflow()\":[{\"notice\":\"The length overflows an uint\"}],\"TotalValidatorBalanceDecreaseOutOfBound(uint256,uint256,uint256,uint256)\":[{\"notice\":\"The balance decrease is higher than the maximum allowed by the lower bound\"}],\"TotalValidatorBalanceIncreaseOutOfBound(uint256,uint256,uint256,uint256)\":[{\"notice\":\"The balance increase is higher than the maximum allowed by the upper bound\"}],\"Unauthorized(address)\":[{\"notice\":\"The operator is unauthorized for the caller\"}],\"UnauthorizedTransfer(address,address)\":[{\"notice\":\"Invalid transfer recipients\"}],\"ZeroMintedShares()\":[{\"notice\":\"The computed amount of shares to mint is 0\"}]},\"events\":{\"ConsensusLayerDataUpdate(uint256,uint256,bytes32)\":{\"notice\":\"The consensus layer data provided by the oracle has been updated\"},\"Initialize(uint256,bytes)\":{\"notice\":\"Emitted when the contract is properly initialized\"},\"ProcessedConsensusLayerReport((uint256,uint256,uint256,uint256,uint256,uint32,uint32[],bool,bool),(uint256,uint256,uint256,uint256))\":{\"notice\":\"The provided report has beend processed\"},\"PulledCLFunds(uint256,uint256)\":{\"notice\":\"Emitted when funds are pulled from the CL recipient\"},\"PulledCoverageFunds(uint256)\":{\"notice\":\"Funds have been pulled from the Coverage Fund\"},\"PulledELFees(uint256)\":{\"notice\":\"Funds have been pulled from the Execution Layer Fee Recipient\"},\"PulledRedeemManagerExceedingEth(uint256)\":{\"notice\":\"Emitted when funds are pulled from the redeem manager\"},\"ReportedRedeemManager(uint256,uint256,uint256)\":{\"notice\":\"Emitted when the redeem manager received a withdraw event report\"},\"RewardsEarned(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"The system underlying supply increased. This is a snapshot of the balances for accounting purposes\"},\"SetAdmin(address)\":{\"notice\":\"The admin address changed\"},\"SetAllowlist(address)\":{\"notice\":\"The stored Allowlist has been changed\"},\"SetBalanceCommittedToDeposit(uint256,uint256)\":{\"notice\":\"Emitted when the balance committed to deposit\"},\"SetBalanceToDeposit(uint256,uint256)\":{\"notice\":\"Emitted when the balance to deposit is updated\"},\"SetBalanceToRedeem(uint256,uint256)\":{\"notice\":\"Emitted when the balance to redeem is updated\"},\"SetBounds(uint256,uint256)\":{\"notice\":\"The Report Bounds are changed\"},\"SetCollector(address)\":{\"notice\":\"The stored Collector has been changed\"},\"SetCoverageFund(address)\":{\"notice\":\"The stored Coverage Fund has been changed\"},\"SetDepositContractAddress(address)\":{\"notice\":\"The stored deposit contract address changed\"},\"SetDepositedValidatorCount(uint256,uint256)\":{\"notice\":\"Emitted when the deposited validator count is updated\"},\"SetELFeeRecipient(address)\":{\"notice\":\"The stored Execution Layer Fee Recipient has been changed\"},\"SetGlobalFee(uint256)\":{\"notice\":\"The stored Global Fee has been changed\"},\"SetMaxDailyCommittableAmounts(uint256,uint256)\":{\"notice\":\"Emitted when the daily committable limits are changed\"},\"SetMetadataURI(string)\":{\"notice\":\"The stored Metadata URI string has been changed\"},\"SetOperatorsRegistry(address)\":{\"notice\":\"The stored Operators Registry has been changed\"},\"SetOracle(address)\":{\"notice\":\"The stored oracle address changed\"},\"SetPendingAdmin(address)\":{\"notice\":\"The pending admin address changed\"},\"SetRedeemManager(address)\":{\"notice\":\"Emitted when the redeem manager address is changed\"},\"SetSpec(uint64,uint64,uint64,uint64,uint64)\":{\"notice\":\"The Consensus Layer Spec is changed\"},\"SetTotalSupply(uint256)\":{\"notice\":\"Emitted when the total supply is changed\"},\"SetWithdrawalCredentials(bytes32)\":{\"notice\":\"The stored withdrawal credentials changed\"},\"UserDeposit(address,address,uint256)\":{\"notice\":\"User deposited ETH in the system\"}},\"kind\":\"user\",\"methods\":{\"DEPOSIT_SIZE()\":{\"notice\":\"Size of a deposit in ETH\"},\"PUBLIC_KEY_LENGTH()\":{\"notice\":\"Size of a BLS Public key in bytes\"},\"SIGNATURE_LENGTH()\":{\"notice\":\"Size of a BLS Signature in bytes\"},\"_DEPOSIT_SIZE()\":{\"notice\":\"Size of a deposit in ETH\"},\"acceptAdmin()\":{\"notice\":\"Accept the transfer of ownership\"},\"allowance(address,address)\":{\"notice\":\"Retrieve the allowance value for a spender\"},\"approve(address,uint256)\":{\"notice\":\"Approves an account for future spendings\"},\"balanceOf(address)\":{\"notice\":\"Retrieve the balance of an account\"},\"balanceOfUnderlying(address)\":{\"notice\":\"Retrieve the underlying asset balance of an account\"},\"claimRedeemRequests(uint32[],uint32[])\":{\"notice\":\"Claims several redeem requests\"},\"decimals()\":{\"notice\":\"Retrieve the decimal count\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Decrease allowance to another account\"},\"deposit()\":{\"notice\":\"Explicit deposit method to mint on msg.sender\"},\"depositAndTransfer(address)\":{\"notice\":\"Explicit deposit method to mint on msg.sender and transfer to _recipient\"},\"depositToConsensusLayerWithDepositRoot(uint256,bytes32)\":{\"notice\":\"Deposits current balance to the Consensus Layer by batches of 32 ETH\"},\"getAdmin()\":{\"notice\":\"Retrieves the current admin address\"},\"getAllowlist()\":{\"notice\":\"Retrieve the allowlist address\"},\"getBalanceToDeposit()\":{\"notice\":\"Returns the amount of ETH not yet committed for deposit\"},\"getBalanceToRedeem()\":{\"notice\":\"Retrieve the current balance to redeem\"},\"getCLSpec()\":{\"notice\":\"Retrieve the current cl spec\"},\"getCLValidatorCount()\":{\"notice\":\"Get CL validator count (the amount of validator reported by the oracles)\"},\"getCLValidatorTotalBalance()\":{\"notice\":\"Get CL validator total balance\"},\"getCollector()\":{\"notice\":\"Retrieve the collector address\"},\"getCommittedBalance()\":{\"notice\":\"Returns the amount of ETH committed for deposit\"},\"getCoverageFund()\":{\"notice\":\"Retrieve the coverage fund\"},\"getCurrentEpochId()\":{\"notice\":\"Retrieve the current epoch id based on block timestamp\"},\"getCurrentFrame()\":{\"notice\":\"Retrieve the current frame details\"},\"getDailyCommittableLimits()\":{\"notice\":\"Retrieve the configured daily committable limits\"},\"getDepositedValidatorCount()\":{\"notice\":\"Get the deposited validator count (the count of deposits made by the contract)\"},\"getELFeeRecipient()\":{\"notice\":\"Retrieve the execution layer fee recipient\"},\"getExpectedEpochId()\":{\"notice\":\"Retrieve expected epoch id\"},\"getFrameFirstEpochId(uint256)\":{\"notice\":\"Retrieve the first epoch id of the frame of the provided epoch id\"},\"getGlobalFee()\":{\"notice\":\"Get the current global fee\"},\"getKeeper()\":{\"notice\":\"Get the keeper address\"},\"getLastCompletedEpochId()\":{\"notice\":\"Retrieve the last completed epoch id\"},\"getLastConsensusLayerReport()\":{\"notice\":\"Retrieve the last consensus layer report\"},\"getMetadataURI()\":{\"notice\":\"Retrieve the metadata uri string value\"},\"getOperatorsRegistry()\":{\"notice\":\"Retrieve the operators registry\"},\"getOracle()\":{\"notice\":\"Get oracle address\"},\"getPendingAdmin()\":{\"notice\":\"Retrieve the current pending admin address\"},\"getRedeemManager()\":{\"notice\":\"Retrieve the redeem manager\"},\"getReportBounds()\":{\"notice\":\"Retrieve the report bounds\"},\"getTime()\":{\"notice\":\"Retrieve the block timestamp\"},\"getWithdrawalCredentials()\":{\"notice\":\"Retrieve the withdrawal credentials\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Increase allowance to another account\"},\"initRiverV1(address,address,bytes32,address,address,address,address,address,uint256)\":{\"notice\":\"Initializes the River system\"},\"initRiverV1_1(address,uint64,uint64,uint64,uint64,uint64,uint256,uint256,uint128,uint128)\":{\"notice\":\"Initialized version 1.1 of the River System\"},\"initRiverV1_2()\":{\"notice\":\"Initializes version 1.2 of the River System\"},\"isValidEpoch(uint256)\":{\"notice\":\"Verifies if the provided epoch is valid\"},\"name()\":{\"notice\":\"Retrieve the token name\"},\"proposeAdmin(address)\":{\"notice\":\"Proposes a new address as admin\"},\"requestRedeem(uint256,address)\":{\"notice\":\"Performs a redeem request on the redeem manager\"},\"resolveRedeemRequests(uint32[])\":{\"notice\":\"Resolves the provided redeem requests by calling the redeem manager\"},\"sendCLFunds()\":{\"notice\":\"Input for consensus layer funds, containing both exit and skimming\"},\"sendCoverageFunds()\":{\"notice\":\"Input for coverage funds\"},\"sendELFees()\":{\"notice\":\"Input for execution layer fee earnings\"},\"sendRedeemManagerExceedingFunds()\":{\"notice\":\"Input for the redeem manager funds\"},\"setAllowlist(address)\":{\"notice\":\"Changes the allowlist address\"},\"setCLSpec((uint64,uint64,uint64,uint64,uint64))\":{\"notice\":\"Set the consensus layer spec\"},\"setCollector(address)\":{\"notice\":\"Changes the collector address\"},\"setConsensusLayerData((uint256,uint256,uint256,uint256,uint256,uint32,uint32[],bool,bool))\":{\"notice\":\"Performs all the reporting logics\"},\"setCoverageFund(address)\":{\"notice\":\"Changes the coverage fund\"},\"setDailyCommittableLimits((uint128,uint128))\":{\"notice\":\"Set the daily committable limits\"},\"setELFeeRecipient(address)\":{\"notice\":\"Changes the execution layer fee recipient\"},\"setGlobalFee(uint256)\":{\"notice\":\"Changes the global fee parameter\"},\"setMetadataURI(string)\":{\"notice\":\"Sets the metadata uri string value\"},\"setOracle(address)\":{\"notice\":\"Set the oracle address\"},\"setReportBounds((uint256,uint256))\":{\"notice\":\"Set the report bounds\"},\"sharesFromUnderlyingBalance(uint256)\":{\"notice\":\"Retrieve the shares count from an underlying asset amount\"},\"symbol()\":{\"notice\":\"Retrieve the token symbol\"},\"totalSupply()\":{\"notice\":\"Retrieve the total token supply\"},\"totalUnderlyingSupply()\":{\"notice\":\"Retrieve the total underlying asset supply\"},\"transfer(address,uint256)\":{\"notice\":\"Performs a transfer from the message sender to the provided account\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Performs a transfer between two recipients\"},\"underlyingBalanceFromShares(uint256)\":{\"notice\":\"Retrieve the underlying asset balance from an amount of shares\"},\"version()\":{\"notice\":\"Retrieves the version of the contract\"}},\"notice\":\"This contract merges all the manager contracts and implements all the virtual methods stitching all components together\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/River.1.sol\":\"RiverV1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/src/Administrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"./interfaces/IAdministrable.sol\\\";\\n\\nimport \\\"./libraries/LibAdministrable.sol\\\";\\nimport \\\"./libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrable\\n/// @author Alluvial Finance Inc.\\n/// @notice This contract handles the administration of the contracts\\nabstract contract Administrable is IAdministrable {\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() {\\n        if (msg.sender != LibAdministrable._getAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyPendingAdmin() {\\n        if (msg.sender != LibAdministrable._getPendingAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getAdmin() external view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getPendingAdmin() external view returns (address) {\\n        return LibAdministrable._getPendingAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function proposeAdmin(address _newAdmin) external onlyAdmin {\\n        _setPendingAdmin(_newAdmin);\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function acceptAdmin() external onlyPendingAdmin {\\n        _setAdmin(LibAdministrable._getPendingAdmin());\\n        _setPendingAdmin(address(0));\\n    }\\n\\n    /// @notice Internal utility to set the admin address\\n    /// @param _admin Address to set as admin\\n    function _setAdmin(address _admin) internal {\\n        LibAdministrable._setAdmin(_admin);\\n        emit SetAdmin(_admin);\\n    }\\n\\n    /// @notice Internal utility to set the pending admin address\\n    /// @param _pendingAdmin Address to set as pending admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        LibAdministrable._setPendingAdmin(_pendingAdmin);\\n        emit SetPendingAdmin(_pendingAdmin);\\n    }\\n\\n    /// @notice Internal utility to retrieve the address of the current admin\\n    /// @return The address of admin\\n    function _getAdmin() internal view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n}\\n\",\"keccak256\":\"0xe844d17bbc5f95455be27819600a504f83891e7f9fde030fb88c4a4cbb272f76\",\"license\":\"BUSL-1.1\"},\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\n/// @title Initializable\\n/// @author Alluvial Finance Inc.\\n/// @notice This contract ensures that initializers are called only once per version\\ncontract Initializable {\\n    /// @notice Disable initialization on implementations\\n    constructor() {\\n        Version.set(type(uint256).max);\\n        emit Initialize(type(uint256).max, msg.data);\\n    }\\n\\n    /// @notice An error occured during the initialization\\n    /// @param version The version that was attempting to be initialized\\n    /// @param expectedVersion The version that was expected\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    /// @notice Emitted when the contract is properly initialized\\n    /// @param version New version of the contracts\\n    /// @param cdata Complete calldata that was used during the initialization\\n    event Initialize(uint256 version, bytes cdata);\\n\\n    /// @notice Use this modifier on initializers along with a hard-coded version number\\n    /// @param _version Version to initialize\\n    modifier init(uint256 _version) {\\n        if (_version != Version.get()) {\\n            revert InvalidInitialization(_version, Version.get());\\n        }\\n        Version.set(_version + 1); // prevents reentrency on the called method\\n        _;\\n        emit Initialize(_version, msg.data);\\n    }\\n}\\n\",\"keccak256\":\"0xd371aeefbb5ed0d3d3b6efdd70044eb949161e6f534730fd0868f85a204c76c9\",\"license\":\"BUSL-1.1\"},\"contracts/src/River.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"./interfaces/IAllowlist.1.sol\\\";\\nimport \\\"./interfaces/IOperatorRegistry.1.sol\\\";\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\nimport \\\"./interfaces/IWithdraw.1.sol\\\";\\nimport \\\"./interfaces/IELFeeRecipient.1.sol\\\";\\nimport \\\"./interfaces/ICoverageFund.1.sol\\\";\\nimport \\\"./interfaces/IProtocolVersion.sol\\\";\\n\\nimport \\\"./components/ConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"./components/UserDepositManager.1.sol\\\";\\nimport \\\"./components/SharesManager.1.sol\\\";\\nimport \\\"./components/OracleManager.1.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./Administrable.sol\\\";\\n\\nimport \\\"./libraries/LibAllowlistMasks.sol\\\";\\n\\nimport \\\"./state/river/AllowlistAddress.sol\\\";\\nimport \\\"./state/river/RedeemManagerAddress.sol\\\";\\nimport \\\"./state/river/OperatorsRegistryAddress.sol\\\";\\nimport \\\"./state/river/CollectorAddress.sol\\\";\\nimport \\\"./state/river/ELFeeRecipientAddress.sol\\\";\\nimport \\\"./state/river/CoverageFundAddress.sol\\\";\\nimport \\\"./state/river/BalanceToRedeem.sol\\\";\\nimport \\\"./state/river/GlobalFee.sol\\\";\\nimport \\\"./state/river/MetadataURI.sol\\\";\\nimport \\\"./state/river/LastConsensusLayerReport.sol\\\";\\n\\n/// @title River (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This contract merges all the manager contracts and implements all the virtual methods stitching all components together\\ncontract RiverV1 is\\n    ConsensusLayerDepositManagerV1,\\n    UserDepositManagerV1,\\n    SharesManagerV1,\\n    OracleManagerV1,\\n    Initializable,\\n    Administrable,\\n    IProtocolVersion,\\n    IRiverV1\\n{\\n    /// @inheritdoc IRiverV1\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _operatorRegistryAddress,\\n        address _collectorAddress,\\n        uint256 _globalFee\\n    ) external init(0) {\\n        _setAdmin(_systemAdministratorAddress);\\n\\n        CollectorAddress.set(_collectorAddress);\\n        emit SetCollector(_collectorAddress);\\n\\n        GlobalFee.set(_globalFee);\\n        emit SetGlobalFee(_globalFee);\\n\\n        ELFeeRecipientAddress.set(_elFeeRecipientAddress);\\n        emit SetELFeeRecipient(_elFeeRecipientAddress);\\n\\n        AllowlistAddress.set(_allowlistAddress);\\n        emit SetAllowlist(_allowlistAddress);\\n\\n        OperatorsRegistryAddress.set(_operatorRegistryAddress);\\n        emit SetOperatorsRegistry(_operatorRegistryAddress);\\n\\n        ConsensusLayerDepositManagerV1.initConsensusLayerDepositManagerV1(\\n            _depositContractAddress, _withdrawalCredentials\\n        );\\n\\n        OracleManagerV1.initOracleManagerV1(_oracleAddress);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function initRiverV1_1(\\n        address _redeemManager,\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime,\\n        uint64 _epochsToAssumedFinality,\\n        uint256 _annualAprUpperBound,\\n        uint256 _relativeLowerBound,\\n        uint128 _minDailyNetCommittableAmount_,\\n        uint128 _maxDailyRelativeCommittableAmount_\\n    ) external init(1) {\\n        RedeemManagerAddress.set(_redeemManager);\\n        emit SetRedeemManager(_redeemManager);\\n\\n        _setDailyCommittableLimits(\\n            DailyCommittableLimits.DailyCommittableLimitsStruct({\\n                minDailyNetCommittableAmount: _minDailyNetCommittableAmount_,\\n                maxDailyRelativeCommittableAmount: _maxDailyRelativeCommittableAmount_\\n            })\\n        );\\n\\n        initOracleManagerV1_1(\\n            _epochsPerFrame,\\n            _slotsPerEpoch,\\n            _secondsPerSlot,\\n            _genesisTime,\\n            _epochsToAssumedFinality,\\n            _annualAprUpperBound,\\n            _relativeLowerBound\\n        );\\n\\n        _approve(address(this), _redeemManager, type(uint256).max);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function initRiverV1_2() external init(2) {\\n        // force committed balance to a multiple of 32 ETH and\\n        // move extra funds back to the deposit buffer\\n        uint256 dustToUncommit = CommittedBalance.get() % DEPOSIT_SIZE;\\n        unchecked {\\n            _setCommittedBalance(CommittedBalance.get() - dustToUncommit);\\n            _setBalanceToDeposit(BalanceToDeposit.get() + dustToUncommit);\\n        }\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getGlobalFee() external view returns (uint256) {\\n        return GlobalFee.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getAllowlist() external view returns (address) {\\n        return AllowlistAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getCollector() external view returns (address) {\\n        return CollectorAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getELFeeRecipient() external view returns (address) {\\n        return ELFeeRecipientAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getCoverageFund() external view returns (address) {\\n        return CoverageFundAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getRedeemManager() external view returns (address) {\\n        return RedeemManagerAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getMetadataURI() external view returns (string memory) {\\n        return MetadataURI.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getDailyCommittableLimits()\\n        external\\n        view\\n        returns (DailyCommittableLimits.DailyCommittableLimitsStruct memory)\\n    {\\n        return DailyCommittableLimits.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setDailyCommittableLimits(DailyCommittableLimits.DailyCommittableLimitsStruct memory _dcl)\\n        external\\n        onlyAdmin\\n    {\\n        _setDailyCommittableLimits(_dcl);\\n    }\\n\\n    function setKeeper(address _keeper) external onlyAdmin {\\n        _setKeeper(_keeper);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getBalanceToRedeem() external view returns (uint256) {\\n        return BalanceToRedeem.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function resolveRedeemRequests(uint32[] calldata _redeemRequestIds)\\n        external\\n        view\\n        returns (int64[] memory withdrawalEventIds)\\n    {\\n        return IRedeemManagerV1(RedeemManagerAddress.get()).resolveRedeemRequests(_redeemRequestIds);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function requestRedeem(uint256 _lsETHAmount, address _recipient) external returns (uint32 _redeemRequestId) {\\n        IAllowlistV1(AllowlistAddress.get()).onlyAllowed(msg.sender, LibAllowlistMasks.REDEEM_MASK);\\n        _transfer(msg.sender, address(this), _lsETHAmount);\\n        return IRedeemManagerV1(RedeemManagerAddress.get()).requestRedeem(_lsETHAmount, _recipient);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function claimRedeemRequests(uint32[] calldata _redeemRequestIds, uint32[] calldata _withdrawalEventIds)\\n        external\\n        returns (uint8[] memory claimStatuses)\\n    {\\n        return IRedeemManagerV1(RedeemManagerAddress.get()).claimRedeemRequests(\\n            _redeemRequestIds, _withdrawalEventIds, true, type(uint16).max\\n        );\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setGlobalFee(uint256 _newFee) external onlyAdmin {\\n        GlobalFee.set(_newFee);\\n        emit SetGlobalFee(_newFee);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setAllowlist(address _newAllowlist) external onlyAdmin {\\n        AllowlistAddress.set(_newAllowlist);\\n        emit SetAllowlist(_newAllowlist);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setCollector(address _newCollector) external onlyAdmin {\\n        CollectorAddress.set(_newCollector);\\n        emit SetCollector(_newCollector);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setELFeeRecipient(address _newELFeeRecipient) external onlyAdmin {\\n        ELFeeRecipientAddress.set(_newELFeeRecipient);\\n        emit SetELFeeRecipient(_newELFeeRecipient);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setCoverageFund(address _newCoverageFund) external onlyAdmin {\\n        CoverageFundAddress.set(_newCoverageFund);\\n        emit SetCoverageFund(_newCoverageFund);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setMetadataURI(string memory _metadataURI) external onlyAdmin {\\n        LibSanitize._notEmptyString(_metadataURI);\\n        MetadataURI.set(_metadataURI);\\n        emit SetMetadataURI(_metadataURI);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getOperatorsRegistry() external view returns (address) {\\n        return OperatorsRegistryAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function sendELFees() external payable {\\n        if (msg.sender != ELFeeRecipientAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function sendCLFunds() external payable {\\n        if (msg.sender != WithdrawalCredentials.getAddress()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function sendCoverageFunds() external payable {\\n        if (msg.sender != CoverageFundAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function sendRedeemManagerExceedingFunds() external payable {\\n        if (msg.sender != RedeemManagerAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n    }\\n\\n    /// @notice Overridden handler to pass the system admin inside components\\n    /// @return The address of the admin\\n    function _getRiverAdmin()\\n        internal\\n        view\\n        override(OracleManagerV1, ConsensusLayerDepositManagerV1)\\n        returns (address)\\n    {\\n        return Administrable._getAdmin();\\n    }\\n\\n    /// @notice Overridden handler called whenever a token transfer is triggered\\n    /// @param _from Token sender\\n    /// @param _to Token receiver\\n    function _onTransfer(address _from, address _to) internal view override {\\n        IAllowlistV1 allowlist = IAllowlistV1(AllowlistAddress.get());\\n        if (allowlist.isDenied(_from)) {\\n            revert Denied(_from);\\n        }\\n        if (allowlist.isDenied(_to)) {\\n            revert Denied(_to);\\n        }\\n    }\\n\\n    /// @notice Overridden handler called whenever a user deposits ETH to the system. Mints the adequate amount of shares.\\n    /// @param _depositor User address that made the deposit\\n    /// @param _amount Amount of ETH deposited\\n    function _onDeposit(address _depositor, address _recipient, uint256 _amount) internal override {\\n        uint256 mintedShares = SharesManagerV1._mintShares(_depositor, _amount);\\n        IAllowlistV1 allowlist = IAllowlistV1(AllowlistAddress.get());\\n        allowlist.onlyAllowed(_depositor, LibAllowlistMasks.DEPOSIT_MASK); // this call reverts if unauthorized or denied\\n        if (_depositor != _recipient) {\\n            if (allowlist.isDenied(_recipient)) {\\n                revert Denied(_recipient);\\n            }\\n            _transfer(_depositor, _recipient, mintedShares);\\n        }\\n    }\\n\\n    /// @notice Overridden handler called whenever a deposit to the consensus layer is made. Should retrieve _requestedAmount or lower keys\\n    /// @param _requestedAmount Amount of keys required. Contract is expected to send _requestedAmount or lower.\\n    /// @return publicKeys Array of fundable public keys\\n    /// @return signatures Array of signatures linked to the public keys\\n    function _getNextValidators(uint256 _requestedAmount)\\n        internal\\n        override\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        return IOperatorsRegistryV1(OperatorsRegistryAddress.get()).pickNextValidatorsToDeposit(_requestedAmount);\\n    }\\n\\n    /// @notice Overridden handler to pull funds from the execution layer fee recipient to River and return the delta in the balance\\n    /// @param _max The maximum amount to pull from the execution layer fee recipient\\n    /// @return The amount pulled from the execution layer fee recipient\\n    function _pullELFees(uint256 _max) internal override returns (uint256) {\\n        address elFeeRecipient = ELFeeRecipientAddress.get();\\n        uint256 initialBalance = address(this).balance;\\n        IELFeeRecipientV1(payable(elFeeRecipient)).pullELFees(_max);\\n        uint256 collectedELFees = address(this).balance - initialBalance;\\n        if (collectedELFees > 0) {\\n            _setBalanceToDeposit(BalanceToDeposit.get() + collectedELFees);\\n        }\\n        emit PulledELFees(collectedELFees);\\n        return collectedELFees;\\n    }\\n\\n    /// @notice Overridden handler to pull funds from the coverage fund to River and return the delta in the balance\\n    /// @param _max The maximum amount to pull from the coverage fund\\n    /// @return The amount pulled from the coverage fund\\n    function _pullCoverageFunds(uint256 _max) internal override returns (uint256) {\\n        address coverageFund = CoverageFundAddress.get();\\n        if (coverageFund == address(0)) {\\n            return 0;\\n        }\\n        uint256 initialBalance = address(this).balance;\\n        ICoverageFundV1(payable(coverageFund)).pullCoverageFunds(_max);\\n        uint256 collectedCoverageFunds = address(this).balance - initialBalance;\\n        if (collectedCoverageFunds > 0) {\\n            _setBalanceToDeposit(BalanceToDeposit.get() + collectedCoverageFunds);\\n        }\\n        emit PulledCoverageFunds(collectedCoverageFunds);\\n        return collectedCoverageFunds;\\n    }\\n\\n    /// @notice Overridden handler called whenever the balance of ETH handled by the system increases. Computes the fees paid to the collector\\n    /// @param _amount Additional ETH received\\n    function _onEarnings(uint256 _amount) internal override {\\n        uint256 oldTotalSupply = _totalSupply();\\n        if (oldTotalSupply == 0) {\\n            revert ZeroMintedShares();\\n        }\\n        uint256 newTotalBalance = _assetBalance();\\n        uint256 globalFee = GlobalFee.get();\\n        uint256 numerator = _amount * oldTotalSupply * globalFee;\\n        uint256 denominator = (newTotalBalance * LibBasisPoints.BASIS_POINTS_MAX) - (_amount * globalFee);\\n        uint256 sharesToMint = denominator == 0 ? 0 : (numerator / denominator);\\n\\n        if (sharesToMint > 0) {\\n            address collector = CollectorAddress.get();\\n            _mintRawShares(collector, sharesToMint);\\n            uint256 newTotalSupply = _totalSupply();\\n            uint256 oldTotalBalance = newTotalBalance - _amount;\\n            emit RewardsEarned(collector, oldTotalBalance, oldTotalSupply, newTotalBalance, newTotalSupply);\\n        }\\n    }\\n\\n    /// @notice Overridden handler called whenever the total balance of ETH is requested\\n    /// @return The current total asset balance managed by River\\n    function _assetBalance() internal view override(SharesManagerV1, OracleManagerV1) returns (uint256) {\\n        IOracleManagerV1.StoredConsensusLayerReport storage storedReport = LastConsensusLayerReport.get();\\n        uint256 clValidatorCount = storedReport.validatorsCount;\\n        uint256 depositedValidatorCount = DepositedValidatorCount.get();\\n        if (clValidatorCount < depositedValidatorCount) {\\n            return storedReport.validatorsBalance + BalanceToDeposit.get() + CommittedBalance.get()\\n                + BalanceToRedeem.get()\\n                + (depositedValidatorCount - clValidatorCount) * ConsensusLayerDepositManagerV1.DEPOSIT_SIZE;\\n        } else {\\n            return\\n                storedReport.validatorsBalance + BalanceToDeposit.get() + CommittedBalance.get() + BalanceToRedeem.get();\\n        }\\n    }\\n\\n    /// @notice Internal utility to set the daily committable limits\\n    /// @param _dcl The new daily committable limits\\n    function _setDailyCommittableLimits(DailyCommittableLimits.DailyCommittableLimitsStruct memory _dcl) internal {\\n        DailyCommittableLimits.set(_dcl);\\n        emit SetMaxDailyCommittableAmounts(_dcl.minDailyNetCommittableAmount, _dcl.maxDailyRelativeCommittableAmount);\\n    }\\n\\n    /// @notice Sets the balance to deposit, but not yet committed\\n    /// @param _newBalanceToDeposit The new balance to deposit value\\n    function _setBalanceToDeposit(uint256 _newBalanceToDeposit) internal override(UserDepositManagerV1) {\\n        emit SetBalanceToDeposit(BalanceToDeposit.get(), _newBalanceToDeposit);\\n        BalanceToDeposit.set(_newBalanceToDeposit);\\n    }\\n\\n    /// @notice Sets the balance to redeem, to be used to satisfy redeem requests on the redeem manager\\n    /// @param _newBalanceToRedeem The new balance to redeem value\\n    function _setBalanceToRedeem(uint256 _newBalanceToRedeem) internal {\\n        emit SetBalanceToRedeem(BalanceToRedeem.get(), _newBalanceToRedeem);\\n        BalanceToRedeem.set(_newBalanceToRedeem);\\n    }\\n\\n    /// @notice Sets the committed balance, ready to be deposited to the consensus layer\\n    /// @param _newCommittedBalance The new committed balance value\\n    function _setCommittedBalance(uint256 _newCommittedBalance) internal override(ConsensusLayerDepositManagerV1) {\\n        emit SetBalanceCommittedToDeposit(CommittedBalance.get(), _newCommittedBalance);\\n        CommittedBalance.set(_newCommittedBalance);\\n    }\\n\\n    /// @notice Pulls funds from the Withdraw contract, and adds funds to deposit and redeem balances\\n    /// @param _skimmedEthAmount The new amount of skimmed eth to pull\\n    /// @param _exitedEthAmount The new amount of exited eth to pull\\n    function _pullCLFunds(uint256 _skimmedEthAmount, uint256 _exitedEthAmount) internal override {\\n        uint256 currentBalance = address(this).balance;\\n        uint256 totalAmountToPull = _skimmedEthAmount + _exitedEthAmount;\\n        IWithdrawV1(WithdrawalCredentials.getAddress()).pullEth(totalAmountToPull);\\n        uint256 collectedCLFunds = address(this).balance - currentBalance;\\n        if (collectedCLFunds != _skimmedEthAmount + _exitedEthAmount) {\\n            revert InvalidPulledClFundsAmount(_skimmedEthAmount + _exitedEthAmount, collectedCLFunds);\\n        }\\n        if (_skimmedEthAmount > 0) {\\n            _setBalanceToDeposit(BalanceToDeposit.get() + _skimmedEthAmount);\\n        }\\n        if (_exitedEthAmount > 0) {\\n            _setBalanceToRedeem(BalanceToRedeem.get() + _exitedEthAmount);\\n        }\\n        emit PulledCLFunds(_skimmedEthAmount, _exitedEthAmount);\\n    }\\n\\n    /// @notice Pulls funds from the redeem manager exceeding eth buffer\\n    /// @param _max The maximum amount to pull\\n    function _pullRedeemManagerExceedingEth(uint256 _max) internal override returns (uint256) {\\n        uint256 currentBalance = address(this).balance;\\n        IRedeemManagerV1(RedeemManagerAddress.get()).pullExceedingEth(_max);\\n        uint256 collectedExceedingEth = address(this).balance - currentBalance;\\n        if (collectedExceedingEth > 0) {\\n            _setBalanceToDeposit(BalanceToDeposit.get() + collectedExceedingEth);\\n        }\\n        emit PulledRedeemManagerExceedingEth(collectedExceedingEth);\\n        return collectedExceedingEth;\\n    }\\n\\n    /// @notice Use the balance to redeem to report a withdrawal event on the redeem manager\\n    function _reportWithdrawToRedeemManager() internal override {\\n        IRedeemManagerV1 redeemManager_ = IRedeemManagerV1(RedeemManagerAddress.get());\\n        uint256 underlyingAssetBalance = _assetBalance();\\n        uint256 totalSupply = _totalSupply();\\n\\n        if (underlyingAssetBalance > 0 && totalSupply > 0) {\\n            // we compute the redeem manager demands in eth and lsEth based on current conversion rate\\n            uint256 redeemManagerDemand = redeemManager_.getRedeemDemand();\\n            uint256 suppliedRedeemManagerDemand = redeemManagerDemand;\\n            uint256 suppliedRedeemManagerDemandInEth = _balanceFromShares(suppliedRedeemManagerDemand);\\n            uint256 availableBalanceToRedeem = BalanceToRedeem.get();\\n\\n            // if demand is higher than available eth, we update demand values to use the available eth\\n            if (suppliedRedeemManagerDemandInEth > availableBalanceToRedeem) {\\n                suppliedRedeemManagerDemandInEth = availableBalanceToRedeem;\\n                suppliedRedeemManagerDemand = _sharesFromBalance(suppliedRedeemManagerDemandInEth);\\n            }\\n\\n            emit ReportedRedeemManager(\\n                redeemManagerDemand, suppliedRedeemManagerDemand, suppliedRedeemManagerDemandInEth\\n            );\\n\\n            if (suppliedRedeemManagerDemandInEth > 0) {\\n                // the available balance to redeem is updated\\n                unchecked {\\n                    _setBalanceToRedeem(availableBalanceToRedeem - suppliedRedeemManagerDemandInEth);\\n                }\\n\\n                // we burn the shares of the redeem manager associated with the amount of eth provided\\n                _burnRawShares(address(redeemManager_), suppliedRedeemManagerDemand);\\n\\n                // perform a report withdraw call to the redeem manager\\n                redeemManager_.reportWithdraw{value: suppliedRedeemManagerDemandInEth}(suppliedRedeemManagerDemand);\\n            }\\n        }\\n    }\\n\\n    /// @notice Requests exits of validators after possibly rebalancing deposit and redeem balances\\n    /// @param _exitingBalance The currently exiting funds, soon to be received on the execution layer\\n    /// @param _depositToRedeemRebalancingAllowed True if rebalancing from deposit to redeem is allowed\\n    function _requestExitsBasedOnRedeemDemandAfterRebalancings(\\n        uint256 _exitingBalance,\\n        uint32[] memory _stoppedValidatorCounts,\\n        bool _depositToRedeemRebalancingAllowed,\\n        bool _slashingContainmentModeEnabled\\n    ) internal override {\\n        IOperatorsRegistryV1(OperatorsRegistryAddress.get()).reportStoppedValidatorCounts(\\n            _stoppedValidatorCounts, DepositedValidatorCount.get()\\n        );\\n\\n        if (_slashingContainmentModeEnabled) {\\n            return;\\n        }\\n\\n        uint256 totalSupply = _totalSupply();\\n        if (totalSupply > 0) {\\n            uint256 availableBalanceToRedeem = BalanceToRedeem.get();\\n            uint256 availableBalanceToDeposit = BalanceToDeposit.get();\\n            uint256 redeemManagerDemandInEth =\\n                _balanceFromShares(IRedeemManagerV1(RedeemManagerAddress.get()).getRedeemDemand());\\n\\n            // if after all rebalancings, the redeem manager demand is still higher than the balance to redeem and exiting eth, we compute\\n            // the amount of validators to exit in order to cover the remaining demand\\n            if (availableBalanceToRedeem + _exitingBalance < redeemManagerDemandInEth) {\\n                // if reblancing is enabled and the redeem manager demand is higher than exiting eth, we add eth for deposit buffer to redeem buffer\\n                if (_depositToRedeemRebalancingAllowed && availableBalanceToDeposit > 0) {\\n                    uint256 rebalancingAmount = LibUint256.min(\\n                        availableBalanceToDeposit, redeemManagerDemandInEth - _exitingBalance - availableBalanceToRedeem\\n                    );\\n                    if (rebalancingAmount > 0) {\\n                        availableBalanceToRedeem += rebalancingAmount;\\n                        _setBalanceToRedeem(availableBalanceToRedeem);\\n                        _setBalanceToDeposit(availableBalanceToDeposit - rebalancingAmount);\\n                    }\\n                }\\n\\n                IOperatorsRegistryV1 or = IOperatorsRegistryV1(OperatorsRegistryAddress.get());\\n\\n                (uint256 totalStoppedValidatorCount, uint256 totalRequestedExitsCount) =\\n                    or.getStoppedAndRequestedExitCounts();\\n\\n                // what we are calling pre-exiting balance is the amount of eth that should soon enter the exiting balance\\n                // because exit requests have been made and operators might have a lag to process them\\n                // we take them into account to not exit too many validators\\n                uint256 preExitingBalance = (\\n                    totalRequestedExitsCount > totalStoppedValidatorCount\\n                        ? (totalRequestedExitsCount - totalStoppedValidatorCount)\\n                        : 0\\n                ) * DEPOSIT_SIZE;\\n\\n                if (availableBalanceToRedeem + _exitingBalance + preExitingBalance < redeemManagerDemandInEth) {\\n                    uint256 validatorCountToExit = LibUint256.ceil(\\n                        redeemManagerDemandInEth - (availableBalanceToRedeem + _exitingBalance + preExitingBalance),\\n                        DEPOSIT_SIZE\\n                    );\\n\\n                    or.demandValidatorExits(validatorCountToExit, DepositedValidatorCount.get());\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Skims the redeem balance and sends remaining funds to the deposit balance\\n    function _skimExcessBalanceToRedeem() internal override {\\n        uint256 availableBalanceToRedeem = BalanceToRedeem.get();\\n\\n        // if the available balance to redeem is not 0, it means that all the redeem requests are fulfilled, we should redirect funds for deposits\\n        if (availableBalanceToRedeem > 0) {\\n            _setBalanceToDeposit(BalanceToDeposit.get() + availableBalanceToRedeem);\\n            _setBalanceToRedeem(0);\\n        }\\n    }\\n\\n    /// @notice Commits the deposit balance up to the allowed daily limit in batches of 32 ETH.\\n    /// @notice Committed funds are funds waiting to be deposited but that cannot be used to fund the redeem manager anymore\\n    /// @notice This two step process is required to prevent possible out of gas issues we would have from actually funding the validators at this point\\n    /// @param _period The period between current and last report\\n    function _commitBalanceToDeposit(uint256 _period) internal override {\\n        uint256 underlyingAssetBalance = _assetBalance();\\n        uint256 currentBalanceToDeposit = BalanceToDeposit.get();\\n        DailyCommittableLimits.DailyCommittableLimitsStruct memory dcl = DailyCommittableLimits.get();\\n\\n        // we compute the max daily committable amount by taking the asset balance without the balance to deposit into account\\n        // this value is the daily maximum amount we can commit for deposits\\n        // we take the maximum value between a net amount and an amount relative to the asset balance\\n        // this ensures that the amount we can commit is not too low in the beginning and that it is not too high when volumes grow\\n        // the relative amount is computed from the committed and activated funds (on the CL or committed to be on the CL soon) and not\\n        // the deposit balance\\n        // this value is computed by subtracting the current balance to deposit from the underlying asset balance\\n        uint256 currentMaxDailyCommittableAmount = LibUint256.max(\\n            dcl.minDailyNetCommittableAmount,\\n            (uint256(dcl.maxDailyRelativeCommittableAmount) * (underlyingAssetBalance - currentBalanceToDeposit))\\n                / LibBasisPoints.BASIS_POINTS_MAX\\n        );\\n        // we adapt the value for the reporting period by using the asset balance as upper bound\\n        uint256 currentMaxCommittableAmount =\\n            LibUint256.min((currentMaxDailyCommittableAmount * _period) / 1 days, currentBalanceToDeposit);\\n        // we only commit multiples of 32 ETH\\n        currentMaxCommittableAmount = (currentMaxCommittableAmount / DEPOSIT_SIZE) * DEPOSIT_SIZE;\\n\\n        if (currentMaxCommittableAmount > 0) {\\n            _setCommittedBalance(CommittedBalance.get() + currentMaxCommittableAmount);\\n            _setBalanceToDeposit(currentBalanceToDeposit - currentMaxCommittableAmount);\\n        }\\n    }\\n\\n    function version() external pure returns (string memory) {\\n        return \\\"1.2.0\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x4db084eaff90ba741b60385ea40ef04fd7ad1761dc3934a5f7ab821482863661\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/ConsensusLayerDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../interfaces/components/IConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"../interfaces/IDepositContract.sol\\\";\\n\\nimport \\\"../libraries/LibBytes.sol\\\";\\nimport \\\"../libraries/LibUint256.sol\\\";\\n\\nimport \\\"../state/river/DepositContractAddress.sol\\\";\\nimport \\\"../state/river/WithdrawalCredentials.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\nimport \\\"../state/river/BalanceToDeposit.sol\\\";\\nimport \\\"../state/river/CommittedBalance.sol\\\";\\nimport \\\"../state/river/KeeperAddress.sol\\\";\\n\\n/// @title Consensus Layer Deposit Manager (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This contract handles the interactions with the official deposit contract, funding all validators\\n/// @notice Whenever a deposit to the consensus layer is requested, this contract computed the amount of keys\\n/// @notice that could be deposited depending on the amount available in the contract. It then tries to retrieve\\n/// @notice validator keys by calling its internal virtual method _getNextValidators. This method should be\\n/// @notice overridden by the implementing contract to provide [0; _keyCount] keys when invoked.\\nabstract contract ConsensusLayerDepositManagerV1 is IConsensusLayerDepositManagerV1 {\\n    /// @notice Size of a BLS Public key in bytes\\n    uint256 public constant PUBLIC_KEY_LENGTH = 48;\\n    /// @notice Size of a BLS Signature in bytes\\n    uint256 public constant SIGNATURE_LENGTH = 96;\\n    /// @notice Size of a deposit in ETH\\n    uint256 public constant DEPOSIT_SIZE = 32 ether;\\n\\n    /// @notice Handler called to retrieve the internal River admin address\\n    /// @dev Must be Overridden\\n    function _getRiverAdmin() internal view virtual returns (address);\\n\\n    /// @notice Handler called to change the committed balance to deposit\\n    /// @param newCommittedBalance The new committed balance value\\n    function _setCommittedBalance(uint256 newCommittedBalance) internal virtual;\\n\\n    /// @notice Internal helper to retrieve validator keys ready to be funded\\n    /// @dev Must be overridden\\n    /// @param _keyCount The amount of keys (or less) to return.\\n    function _getNextValidators(uint256 _keyCount)\\n        internal\\n        virtual\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n\\n    /// @notice Initializer to set the deposit contract address and the withdrawal credentials to use\\n    /// @param _depositContractAddress The address of the deposit contract\\n    /// @param _withdrawalCredentials The withdrawal credentials to apply to all deposits\\n    function initConsensusLayerDepositManagerV1(address _depositContractAddress, bytes32 _withdrawalCredentials)\\n        internal\\n    {\\n        DepositContractAddress.set(_depositContractAddress);\\n        emit SetDepositContractAddress(_depositContractAddress);\\n\\n        WithdrawalCredentials.set(_withdrawalCredentials);\\n        emit SetWithdrawalCredentials(_withdrawalCredentials);\\n    }\\n\\n    function _setKeeper(address _keeper) internal {\\n        KeeperAddress.set(_keeper);\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function getCommittedBalance() external view returns (uint256) {\\n        return CommittedBalance.get();\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function getBalanceToDeposit() external view returns (uint256) {\\n        return BalanceToDeposit.get();\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function getWithdrawalCredentials() external view returns (bytes32) {\\n        return WithdrawalCredentials.get();\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function getDepositedValidatorCount() external view returns (uint256) {\\n        return DepositedValidatorCount.get();\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function getKeeper() external view returns (address) {\\n        return KeeperAddress.get();\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function depositToConsensusLayerWithDepositRoot(uint256 _maxCount, bytes32 _depositRoot) external {\\n        if (msg.sender != KeeperAddress.get()) {\\n            revert OnlyKeeper();\\n        }\\n\\n        if (IDepositContract(DepositContractAddress.get()).get_deposit_root() != _depositRoot) {\\n            revert InvalidDepositRoot();\\n        }\\n\\n        uint256 committedBalance = CommittedBalance.get();\\n        uint256 keyToDepositCount = LibUint256.min(committedBalance / DEPOSIT_SIZE, _maxCount);\\n\\n        if (keyToDepositCount == 0) {\\n            revert NotEnoughFunds();\\n        }\\n\\n        // it's up to the internal overriden _getNextValidators method to provide two array of the same\\n        // size for the publicKeys and the signatures\\n        (bytes[] memory publicKeys, bytes[] memory signatures) = _getNextValidators(keyToDepositCount);\\n\\n        uint256 receivedPublicKeyCount = publicKeys.length;\\n\\n        if (receivedPublicKeyCount == 0) {\\n            revert NoAvailableValidatorKeys();\\n        }\\n\\n        if (receivedPublicKeyCount > keyToDepositCount) {\\n            revert InvalidPublicKeyCount();\\n        }\\n\\n        bytes32 withdrawalCredentials = WithdrawalCredentials.get();\\n\\n        if (withdrawalCredentials == 0) {\\n            revert InvalidWithdrawalCredentials();\\n        }\\n\\n        for (uint256 idx = 0; idx < receivedPublicKeyCount;) {\\n            _depositValidator(publicKeys[idx], signatures[idx], withdrawalCredentials);\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        _setCommittedBalance(committedBalance - DEPOSIT_SIZE * receivedPublicKeyCount);\\n        uint256 currentDepositedValidatorCount = DepositedValidatorCount.get();\\n        DepositedValidatorCount.set(currentDepositedValidatorCount + receivedPublicKeyCount);\\n        emit SetDepositedValidatorCount(\\n            currentDepositedValidatorCount, currentDepositedValidatorCount + receivedPublicKeyCount\\n        );\\n    }\\n\\n    /// @notice Deposits 32 ETH to the official Deposit contract\\n    /// @param _publicKey The public key of the validator\\n    /// @param _signature The signature provided by the operator\\n    /// @param _withdrawalCredentials The withdrawal credentials provided by River\\n    function _depositValidator(bytes memory _publicKey, bytes memory _signature, bytes32 _withdrawalCredentials)\\n        internal\\n    {\\n        if (_publicKey.length != PUBLIC_KEY_LENGTH) {\\n            revert InconsistentPublicKeys();\\n        }\\n\\n        if (_signature.length != SIGNATURE_LENGTH) {\\n            revert InconsistentSignatures();\\n        }\\n        uint256 value = DEPOSIT_SIZE;\\n\\n        uint256 depositAmount = value / 1 gwei;\\n\\n        bytes32 pubkeyRoot = sha256(bytes.concat(_publicKey, bytes16(0)));\\n        bytes32 signatureRoot = sha256(\\n            bytes.concat(\\n                sha256(LibBytes.slice(_signature, 0, 64)),\\n                sha256(bytes.concat(LibBytes.slice(_signature, 64, SIGNATURE_LENGTH - 64), bytes32(0)))\\n            )\\n        );\\n\\n        bytes32 depositDataRoot = sha256(\\n            bytes.concat(\\n                sha256(bytes.concat(pubkeyRoot, _withdrawalCredentials)),\\n                sha256(bytes.concat(bytes32(LibUint256.toLittleEndian64(depositAmount)), signatureRoot))\\n            )\\n        );\\n\\n        uint256 targetBalance = address(this).balance - value;\\n\\n        IDepositContract(DepositContractAddress.get()).deposit{value: value}(\\n            _publicKey, abi.encodePacked(_withdrawalCredentials), _signature, depositDataRoot\\n        );\\n        if (address(this).balance != targetBalance) {\\n            revert ErrorOnDeposit();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1fd6411054307581b37355a71ef6fd540cb3c29c1914987a5bc12dc1fbcba93\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/OracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../interfaces/components/IOracleManager.1.sol\\\";\\nimport \\\"../interfaces/IRedeemManager.1.sol\\\";\\n\\nimport \\\"../libraries/LibUint256.sol\\\";\\n\\nimport \\\"../state/river/LastConsensusLayerReport.sol\\\";\\nimport \\\"../state/river/OracleAddress.sol\\\";\\nimport \\\"../state/river/CLValidatorTotalBalance.sol\\\";\\nimport \\\"../state/river/CLValidatorCount.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\nimport \\\"../state/river/LastOracleRoundId.sol\\\";\\n\\n/// @title Oracle Manager (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This contract handles the inputs provided by the oracle\\n/// @notice The Oracle contract is plugged to this contract and is in charge of pushing\\n/// @notice data whenever a new report has been deemed valid. The report consists in two\\n/// @notice values: the sum of all balances of all deposited validators and the count of\\n/// @notice validators that have been activated on the consensus layer.\\nabstract contract OracleManagerV1 is IOracleManagerV1 {\\n    uint256 internal constant ONE_YEAR = 365 days;\\n    /// @notice Size of a deposit in ETH\\n    uint256 public constant _DEPOSIT_SIZE = 32 ether;\\n\\n    /// @notice Handler called if the delta between the last and new validator balance sum is positive\\n    /// @dev Must be overridden\\n    /// @param _profits The positive increase in the validator balance sum (staking rewards)\\n    function _onEarnings(uint256 _profits) internal virtual;\\n\\n    /// @notice Handler called to pull the Execution layer fees from the recipient\\n    /// @dev Must be overridden\\n    /// @param _max The maximum amount to pull inside the system\\n    /// @return The amount pulled inside the system\\n    function _pullELFees(uint256 _max) internal virtual returns (uint256);\\n\\n    /// @notice Handler called to pull the coverage funds\\n    /// @dev Must be overridden\\n    /// @param _max The maximum amount to pull inside the system\\n    /// @return The amount pulled inside the system\\n    function _pullCoverageFunds(uint256 _max) internal virtual returns (uint256);\\n\\n    /// @notice Handler called to retrieve the system administrator address\\n    /// @dev Must be overridden\\n    /// @return The system administrator address\\n    function _getRiverAdmin() internal view virtual returns (address);\\n\\n    /// @notice Overridden handler called whenever the total balance of ETH is requested\\n    /// @return The current total asset balance managed by River\\n    function _assetBalance() internal view virtual returns (uint256);\\n\\n    /// @notice Pulls funds from the Withdraw contract, and adds funds to deposit and redeem balances\\n    /// @param _skimmedEthAmount The new amount of skimmed eth to pull\\n    /// @param _exitedEthAmount The new amount of exited eth to pull\\n    function _pullCLFunds(uint256 _skimmedEthAmount, uint256 _exitedEthAmount) internal virtual;\\n\\n    /// @notice Pulls funds from the redeem manager exceeding eth buffer\\n    /// @param _max The maximum amount to pull\\n    /// @return The amount pulled\\n    function _pullRedeemManagerExceedingEth(uint256 _max) internal virtual returns (uint256);\\n\\n    /// @notice Use the balance to redeem to report a withdrawal event on the redeem manager\\n    function _reportWithdrawToRedeemManager() internal virtual;\\n\\n    /// @notice Requests exits of validators after possibly rebalancing deposit and redeem balances\\n    /// @param _exitingBalance The currently exiting funds, soon to be received on the execution layer\\n    /// @param _depositToRedeemRebalancingAllowed True if rebalancing from deposit to redeem is allowed\\n    function _requestExitsBasedOnRedeemDemandAfterRebalancings(\\n        uint256 _exitingBalance,\\n        uint32[] memory _stoppedValidatorCounts,\\n        bool _depositToRedeemRebalancingAllowed,\\n        bool _slashingContainmentModeEnabled\\n    ) internal virtual;\\n\\n    /// @notice Skims the redeem balance and sends remaining funds to the deposit balance\\n    function _skimExcessBalanceToRedeem() internal virtual;\\n\\n    /// @notice Commits the deposit balance up to the allowed daily limit\\n    /// @param _period The period between current and last report\\n    function _commitBalanceToDeposit(uint256 _period) internal virtual;\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin_OMV1() {\\n        if (msg.sender != _getRiverAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Set the initial oracle address\\n    /// @param _oracle Address of the oracle\\n    function initOracleManagerV1(address _oracle) internal {\\n        OracleAddress.set(_oracle);\\n        emit SetOracle(_oracle);\\n    }\\n\\n    /// @notice Initializes version 1.1 of the oracle manager\\n    /// @param _epochsPerFrame The amounts of epochs in a frame\\n    /// @param _slotsPerEpoch The slots inside an epoch\\n    /// @param _secondsPerSlot The seconds inside a slot\\n    /// @param _genesisTime The genesis timestamp\\n    /// @param _epochsToAssumedFinality The number of epochs before an epoch is considered final on-chain\\n    /// @param _annualAprUpperBound The reporting upper bound\\n    /// @param _relativeLowerBound The reporting lower bound\\n    function initOracleManagerV1_1(\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime,\\n        uint64 _epochsToAssumedFinality,\\n        uint256 _annualAprUpperBound,\\n        uint256 _relativeLowerBound\\n    ) internal {\\n        CLSpec.set(\\n            CLSpec.CLSpecStruct({\\n                epochsPerFrame: _epochsPerFrame,\\n                slotsPerEpoch: _slotsPerEpoch,\\n                secondsPerSlot: _secondsPerSlot,\\n                genesisTime: _genesisTime,\\n                epochsToAssumedFinality: _epochsToAssumedFinality\\n            })\\n        );\\n        emit SetSpec(_epochsPerFrame, _slotsPerEpoch, _secondsPerSlot, _genesisTime, _epochsToAssumedFinality);\\n        ReportBounds.set(\\n            ReportBounds.ReportBoundsStruct({\\n                annualAprUpperBound: _annualAprUpperBound,\\n                relativeLowerBound: _relativeLowerBound\\n            })\\n        );\\n        emit SetBounds(_annualAprUpperBound, _relativeLowerBound);\\n\\n        IOracleManagerV1.StoredConsensusLayerReport memory storedReport;\\n        storedReport.epoch = uint256(LastOracleRoundId.get());\\n        storedReport.validatorsBalance = CLValidatorTotalBalance.get();\\n        storedReport.validatorsSkimmedBalance = 0;\\n        storedReport.validatorsExitedBalance = 0;\\n        storedReport.validatorsExitingBalance = 0;\\n        storedReport.validatorsCount = uint32(CLValidatorCount.get());\\n        storedReport.rebalanceDepositToRedeemMode = false;\\n        storedReport.slashingContainmentMode = false;\\n        LastConsensusLayerReport.set(storedReport);\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getOracle() external view returns (address) {\\n        return OracleAddress.get();\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getCLValidatorTotalBalance() external view returns (uint256) {\\n        return LastConsensusLayerReport.get().validatorsBalance;\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getCLValidatorCount() external view returns (uint256) {\\n        return LastConsensusLayerReport.get().validatorsCount;\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getExpectedEpochId() external view returns (uint256) {\\n        CLSpec.CLSpecStruct memory cls = CLSpec.get();\\n        uint256 currentEpoch = _currentEpoch(cls);\\n        return LibUint256.max(\\n            LastConsensusLayerReport.get().epoch + cls.epochsPerFrame,\\n            currentEpoch - (currentEpoch % cls.epochsPerFrame)\\n        );\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function isValidEpoch(uint256 _epoch) external view returns (bool) {\\n        return _isValidEpoch(CLSpec.get(), _epoch);\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getTime() external view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getLastCompletedEpochId() external view returns (uint256) {\\n        return LastConsensusLayerReport.get().epoch;\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getCurrentEpochId() external view returns (uint256) {\\n        return _currentEpoch(CLSpec.get());\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getCLSpec() external view returns (CLSpec.CLSpecStruct memory) {\\n        return CLSpec.get();\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getCurrentFrame() external view returns (uint256 _startEpochId, uint256 _startTime, uint256 _endTime) {\\n        CLSpec.CLSpecStruct memory cls = CLSpec.get();\\n        uint256 currentEpoch = _currentEpoch(cls);\\n        _startEpochId = currentEpoch - (currentEpoch % cls.epochsPerFrame);\\n        _startTime = _startEpochId * cls.slotsPerEpoch * cls.secondsPerSlot;\\n        _endTime = (_startEpochId + cls.epochsPerFrame) * cls.slotsPerEpoch * cls.secondsPerSlot - 1;\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getFrameFirstEpochId(uint256 _epochId) external view returns (uint256) {\\n        return _epochId - (_epochId % CLSpec.get().epochsPerFrame);\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getReportBounds() external view returns (ReportBounds.ReportBoundsStruct memory) {\\n        return ReportBounds.get();\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getLastConsensusLayerReport() external view returns (IOracleManagerV1.StoredConsensusLayerReport memory) {\\n        return LastConsensusLayerReport.get();\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function setOracle(address _oracleAddress) external onlyAdmin_OMV1 {\\n        OracleAddress.set(_oracleAddress);\\n        emit SetOracle(_oracleAddress);\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function setCLSpec(CLSpec.CLSpecStruct calldata _newValue) external onlyAdmin_OMV1 {\\n        CLSpec.set(_newValue);\\n        emit SetSpec(\\n            _newValue.epochsPerFrame,\\n            _newValue.slotsPerEpoch,\\n            _newValue.secondsPerSlot,\\n            _newValue.genesisTime,\\n            _newValue.epochsToAssumedFinality\\n        );\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function setReportBounds(ReportBounds.ReportBoundsStruct calldata _newValue) external onlyAdmin_OMV1 {\\n        ReportBounds.set(_newValue);\\n        emit SetBounds(_newValue.annualAprUpperBound, _newValue.relativeLowerBound);\\n    }\\n\\n    /// @notice Structure holding internal variables used during reporting\\n    struct ConsensusLayerDataReportingVariables {\\n        uint256 preReportUnderlyingBalance;\\n        uint256 postReportUnderlyingBalance;\\n        uint256 lastReportExitedBalance;\\n        uint256 lastReportSkimmedBalance;\\n        uint256 exitedAmountIncrease;\\n        uint256 skimmedAmountIncrease;\\n        uint256 timeElapsedSinceLastReport;\\n        uint256 availableAmountToUpperBound;\\n        uint256 redeemManagerDemand;\\n        ConsensusLayerDataReportingTrace trace;\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function setConsensusLayerData(IOracleManagerV1.ConsensusLayerReport calldata _report) external {\\n        // only the oracle is allowed to call this endpoint\\n        if (msg.sender != OracleAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n\\n        CLSpec.CLSpecStruct memory cls = CLSpec.get();\\n\\n        // we start by verifying that the reported epoch is valid based on the consensus layer spec\\n        if (!_isValidEpoch(cls, _report.epoch)) {\\n            revert InvalidEpoch(_report.epoch);\\n        }\\n\\n        ConsensusLayerDataReportingVariables memory vars;\\n\\n        {\\n            IOracleManagerV1.StoredConsensusLayerReport storage lastStoredReport = LastConsensusLayerReport.get();\\n\\n            vars.lastReportExitedBalance = lastStoredReport.validatorsExitedBalance;\\n\\n            // we ensure that the reported total exited balance is not decreasing\\n            if (_report.validatorsExitedBalance < vars.lastReportExitedBalance) {\\n                revert InvalidDecreasingValidatorsExitedBalance(\\n                    vars.lastReportExitedBalance, _report.validatorsExitedBalance\\n                );\\n            }\\n\\n            // we compute the exited amount increase by taking the delta between reports\\n            vars.exitedAmountIncrease = _report.validatorsExitedBalance - vars.lastReportExitedBalance;\\n\\n            vars.lastReportSkimmedBalance = lastStoredReport.validatorsSkimmedBalance;\\n\\n            // we ensure that the reported total skimmed balance is not decreasing\\n            if (_report.validatorsSkimmedBalance < vars.lastReportSkimmedBalance) {\\n                revert InvalidDecreasingValidatorsSkimmedBalance(\\n                    vars.lastReportSkimmedBalance, _report.validatorsSkimmedBalance\\n                );\\n            }\\n\\n            // we ensure that the reported validator count is not decreasing\\n            if (\\n                _report.validatorsCount > DepositedValidatorCount.get()\\n                    || _report.validatorsCount < lastStoredReport.validatorsCount\\n            ) {\\n                revert InvalidValidatorCountReport(\\n                    _report.validatorsCount, DepositedValidatorCount.get(), lastStoredReport.validatorsCount\\n                );\\n            }\\n\\n            // we compute the new skimmed amount by taking the delta between reports\\n            vars.skimmedAmountIncrease = _report.validatorsSkimmedBalance - vars.lastReportSkimmedBalance;\\n\\n            vars.timeElapsedSinceLastReport = _timeBetweenEpochs(cls, lastStoredReport.epoch, _report.epoch);\\n        }\\n\\n        // we retrieve the current total underlying balance before any reporting data is applied to the system\\n        vars.preReportUnderlyingBalance = _assetBalance();\\n\\n        // if we have new exited / skimmed eth available, we pull funds from the consensus layer recipient\\n        if (vars.exitedAmountIncrease + vars.skimmedAmountIncrease > 0) {\\n            // this method pulls and updates ethToDeposit / ethToRedeem accordingly\\n            _pullCLFunds(vars.skimmedAmountIncrease, vars.exitedAmountIncrease);\\n        }\\n\\n        {\\n            // we update the system parameters, this will have an impact on how the total underlying balance is computed\\n            IOracleManagerV1.StoredConsensusLayerReport memory storedReport;\\n\\n            storedReport.epoch = _report.epoch;\\n            storedReport.validatorsBalance = _report.validatorsBalance;\\n            storedReport.validatorsSkimmedBalance = _report.validatorsSkimmedBalance;\\n            storedReport.validatorsExitedBalance = _report.validatorsExitedBalance;\\n            storedReport.validatorsExitingBalance = _report.validatorsExitingBalance;\\n            storedReport.validatorsCount = _report.validatorsCount;\\n            storedReport.rebalanceDepositToRedeemMode = _report.rebalanceDepositToRedeemMode;\\n            storedReport.slashingContainmentMode = _report.slashingContainmentMode;\\n            LastConsensusLayerReport.set(storedReport);\\n        }\\n\\n        ReportBounds.ReportBoundsStruct memory rb = ReportBounds.get();\\n\\n        // we compute the maximum allowed increase in balance based on the pre report value\\n        uint256 maxIncrease = _maxIncrease(rb, vars.preReportUnderlyingBalance, vars.timeElapsedSinceLastReport);\\n\\n        // we retrieve the new total underlying balance after system parameters are changed\\n        vars.postReportUnderlyingBalance = _assetBalance();\\n\\n        // we can now compute the earned rewards from the consensus layer balances\\n        // in order to properly account for the balance increase, we compare the sums of current balances, skimmed balance and exited balances\\n        // we also synthetically increase the current balance by 32 eth per new activated validator, this way we have no discrepency due\\n        // to currently activating funds that were not yet accounted in the consensus layer balances\\n        if (vars.postReportUnderlyingBalance >= vars.preReportUnderlyingBalance) {\\n            // if this happens, we revert and the reporting process is cancelled\\n            if (vars.postReportUnderlyingBalance > vars.preReportUnderlyingBalance + maxIncrease) {\\n                revert TotalValidatorBalanceIncreaseOutOfBound(\\n                    vars.preReportUnderlyingBalance,\\n                    vars.postReportUnderlyingBalance,\\n                    vars.timeElapsedSinceLastReport,\\n                    rb.annualAprUpperBound\\n                );\\n            }\\n\\n            // we update the rewards based on the balance delta\\n            vars.trace.rewards = vars.postReportUnderlyingBalance - vars.preReportUnderlyingBalance;\\n\\n            // we update the available amount to upper bound (the amount of eth we can still pull and stay below the upper reporting bound)\\n            vars.availableAmountToUpperBound = maxIncrease - vars.trace.rewards;\\n        } else {\\n            // otherwise if the balance has decreased, we verify that we are not exceeding the lower reporting bound\\n\\n            // we compute the maximum allowed decrease in balance\\n            uint256 maxDecrease = _maxDecrease(rb, vars.preReportUnderlyingBalance);\\n\\n            // we verify that the bound is not crossed\\n            if (\\n                vars.postReportUnderlyingBalance\\n                    < vars.preReportUnderlyingBalance - LibUint256.min(maxDecrease, vars.preReportUnderlyingBalance)\\n            ) {\\n                revert TotalValidatorBalanceDecreaseOutOfBound(\\n                    vars.preReportUnderlyingBalance,\\n                    vars.postReportUnderlyingBalance,\\n                    vars.timeElapsedSinceLastReport,\\n                    rb.relativeLowerBound\\n                );\\n            }\\n\\n            // we update the available amount to upper bound to be equal to the maximum allowed increase plus the negative delta due to the loss\\n            vars.availableAmountToUpperBound =\\n                maxIncrease + (vars.preReportUnderlyingBalance - vars.postReportUnderlyingBalance);\\n        }\\n\\n        // if we have available amount to upper bound after the reporting values are applied\\n        if (vars.availableAmountToUpperBound > 0) {\\n            // we pull the funds from the execution layer fee recipient\\n            vars.trace.pulledELFees = _pullELFees(vars.availableAmountToUpperBound);\\n            // we update the rewards\\n            vars.trace.rewards += vars.trace.pulledELFees;\\n            // we update the available amount accordingly\\n            vars.availableAmountToUpperBound -= vars.trace.pulledELFees;\\n        }\\n\\n        // if we have available amount to upper bound after the execution layer fees are pulled\\n        if (vars.availableAmountToUpperBound > 0) {\\n            // we pull the funds from the exceeding eth buffer of the redeem manager\\n            vars.trace.pulledRedeemManagerExceedingEthBuffer =\\n                _pullRedeemManagerExceedingEth(vars.availableAmountToUpperBound);\\n            // we update the available amount accordingly\\n            vars.availableAmountToUpperBound -= vars.trace.pulledRedeemManagerExceedingEthBuffer;\\n        }\\n\\n        // if we have available amount to upper bound after pulling the exceeding eth buffer, we attempt to pull coverage funds\\n        if (vars.availableAmountToUpperBound > 0) {\\n            // we pull the funds from the coverage recipient\\n            vars.trace.pulledCoverageFunds = _pullCoverageFunds(vars.availableAmountToUpperBound);\\n            // we do not update the rewards as coverage is not considered rewards\\n            // we do not update the available amount as there are no more pulling actions to perform afterwards\\n        }\\n\\n        // if our rewards are not null, we dispatch the fee to the collector\\n        if (vars.trace.rewards > 0) {\\n            _onEarnings(vars.trace.rewards);\\n        }\\n\\n        _requestExitsBasedOnRedeemDemandAfterRebalancings(\\n            _report.validatorsExitingBalance,\\n            _report.stoppedValidatorCountPerOperator,\\n            _report.rebalanceDepositToRedeemMode,\\n            _report.slashingContainmentMode\\n        );\\n\\n        // we use the updated balanceToRedeem value to report a withdraw event on the redeem manager\\n        _reportWithdrawToRedeemManager();\\n\\n        // if funds are left in the balance to redeem, we move them to the deposit balance\\n        _skimExcessBalanceToRedeem();\\n\\n        // we update the committable amount based on daily maximum allowed\\n        _commitBalanceToDeposit(vars.timeElapsedSinceLastReport);\\n\\n        // we emit a summary event with all the reporting details\\n        emit ProcessedConsensusLayerReport(_report, vars.trace);\\n    }\\n\\n    /// @notice Retrieve the current epoch based on the current timestamp\\n    /// @param _cls The consensus layer spec struct\\n    /// @return The current epoch\\n    function _currentEpoch(CLSpec.CLSpecStruct memory _cls) internal view returns (uint256) {\\n        return ((block.timestamp - _cls.genesisTime) / _cls.secondsPerSlot) / _cls.slotsPerEpoch;\\n    }\\n\\n    /// @notice Verifies if the given epoch is valid\\n    /// @param _cls The consensus layer spec struct\\n    /// @param _epoch The epoch to verify\\n    /// @return True if valid\\n    function _isValidEpoch(CLSpec.CLSpecStruct memory _cls, uint256 _epoch) internal view returns (bool) {\\n        return (\\n            _currentEpoch(_cls) >= _epoch + _cls.epochsToAssumedFinality\\n                && _epoch > LastConsensusLayerReport.get().epoch && _epoch % _cls.epochsPerFrame == 0\\n        );\\n    }\\n\\n    /// @notice Retrieves the maximum increase in balance based on current total underlying supply and period since last report\\n    /// @param _rb The report bounds struct\\n    /// @param _prevTotalEth The total underlying supply during reporting\\n    /// @param _timeElapsed The time since last report\\n    /// @return The maximum allowed increase in balance\\n    function _maxIncrease(ReportBounds.ReportBoundsStruct memory _rb, uint256 _prevTotalEth, uint256 _timeElapsed)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_prevTotalEth * _rb.annualAprUpperBound * _timeElapsed) / (LibBasisPoints.BASIS_POINTS_MAX * ONE_YEAR);\\n    }\\n\\n    /// @notice Retrieves the maximum decrease in balance based on current total underlying supply\\n    /// @param _rb The report bounds struct\\n    /// @param _prevTotalEth The total underlying supply during reporting\\n    /// @return The maximum allowed decrease in balance\\n    function _maxDecrease(ReportBounds.ReportBoundsStruct memory _rb, uint256 _prevTotalEth)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_prevTotalEth * _rb.relativeLowerBound) / LibBasisPoints.BASIS_POINTS_MAX;\\n    }\\n\\n    /// @notice Retrieve the number of seconds between two epochs\\n    /// @param _cls The consensus layer spec struct\\n    /// @param _epochPast The starting epoch\\n    /// @param _epochNow The current epoch\\n    /// @return The number of seconds between the two epochs\\n    function _timeBetweenEpochs(CLSpec.CLSpecStruct memory _cls, uint256 _epochPast, uint256 _epochNow)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_epochNow - _epochPast) * (_cls.secondsPerSlot * _cls.slotsPerEpoch);\\n    }\\n}\\n\",\"keccak256\":\"0xc2c504e03b1546899dd84a2f65373230faa6d8ca08dc4b8cc919d3ca34660f1d\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/SharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../interfaces/components/ISharesManager.1.sol\\\";\\n\\nimport \\\"../libraries/LibSanitize.sol\\\";\\n\\nimport \\\"../state/river/Shares.sol\\\";\\nimport \\\"../state/river/SharesPerOwner.sol\\\";\\nimport \\\"../state/shared/ApprovalsPerOwner.sol\\\";\\n\\n/// @title Shares Manager (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This contract handles the shares of the depositor and the ERC20 interface\\nabstract contract SharesManagerV1 is ISharesManagerV1 {\\n    /// @notice Internal hook triggered on the external transfer call\\n    /// @dev Must be overridden\\n    /// @param _from Address of the sender\\n    /// @param _to Address of the recipient\\n    function _onTransfer(address _from, address _to) internal view virtual;\\n\\n    /// @notice Internal method to override to provide the total underlying asset balance\\n    /// @dev Must be overridden\\n    /// @return The total asset balance of the system\\n    function _assetBalance() internal view virtual returns (uint256);\\n\\n    /// @notice Modifier used to ensure that the transfer is allowed by using the internal hook to perform internal checks\\n    /// @param _from Address of the sender\\n    /// @param _to Address of the recipient\\n    modifier transferAllowed(address _from, address _to) {\\n        _onTransfer(_from, _to);\\n        _;\\n    }\\n\\n    /// @notice Modifier used to ensure the amount transferred is not 0\\n    /// @param _value Amount to check\\n    modifier isNotZero(uint256 _value) {\\n        if (_value == 0) {\\n            revert NullTransfer();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier used to ensure that the sender has enough funds for the transfer\\n    /// @param _owner Address of the sender\\n    /// @param _value Value that is required to be sent\\n    modifier hasFunds(address _owner, uint256 _value) {\\n        if (_balanceOf(_owner) < _value) {\\n            revert BalanceTooLow();\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function name() external pure returns (string memory) {\\n        return \\\"Liquid Staked ETH\\\";\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function symbol() external pure returns (string memory) {\\n        return \\\"LsETH\\\";\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function totalUnderlyingSupply() external view returns (uint256) {\\n        return _assetBalance();\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function balanceOf(address _owner) external view returns (uint256) {\\n        return _balanceOf(_owner);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function balanceOfUnderlying(address _owner) public view returns (uint256) {\\n        return _balanceFromShares(SharesPerOwner.get(_owner));\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function underlyingBalanceFromShares(uint256 _shares) external view returns (uint256) {\\n        return _balanceFromShares(_shares);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function sharesFromUnderlyingBalance(uint256 _underlyingAssetAmount) external view returns (uint256) {\\n        return _sharesFromBalance(_underlyingAssetAmount);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function allowance(address _owner, address _spender) external view returns (uint256) {\\n        return ApprovalsPerOwner.get(_owner, _spender);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function transfer(address _to, uint256 _value)\\n        external\\n        transferAllowed(msg.sender, _to)\\n        isNotZero(_value)\\n        hasFunds(msg.sender, _value)\\n        returns (bool)\\n    {\\n        if (_to == address(0)) {\\n            revert UnauthorizedTransfer(msg.sender, address(0));\\n        }\\n        return _transfer(msg.sender, _to, _value);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        external\\n        transferAllowed(_from, _to)\\n        isNotZero(_value)\\n        hasFunds(_from, _value)\\n        returns (bool)\\n    {\\n        if (_to == address(0)) {\\n            revert UnauthorizedTransfer(_from, address(0));\\n        }\\n        _spendAllowance(_from, _value);\\n        return _transfer(_from, _to, _value);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function approve(address _spender, uint256 _value) external returns (bool) {\\n        _approve(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool) {\\n        _approve(msg.sender, _spender, ApprovalsPerOwner.get(msg.sender, _spender) + _additionalValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool) {\\n        _approve(msg.sender, _spender, ApprovalsPerOwner.get(msg.sender, _spender) - _subtractableValue);\\n        return true;\\n    }\\n\\n    /// @notice Internal utility to spend the allowance of an account from the message sender\\n    /// @param _from Address owning the allowance\\n    /// @param _value Amount of allowance in shares to spend\\n    function _spendAllowance(address _from, uint256 _value) internal {\\n        uint256 currentAllowance = ApprovalsPerOwner.get(_from, msg.sender);\\n        if (currentAllowance < _value) {\\n            revert AllowanceTooLow(_from, msg.sender, currentAllowance, _value);\\n        }\\n        if (currentAllowance != type(uint256).max) {\\n            unchecked {\\n                _approve(_from, msg.sender, currentAllowance - _value);\\n            }\\n        }\\n    }\\n\\n    /// @notice Internal utility to change the allowance of an owner to a spender\\n    /// @param _owner The owner of the shares\\n    /// @param _spender The allowed spender of the shares\\n    /// @param _value The new allowance value\\n    function _approve(address _owner, address _spender, uint256 _value) internal {\\n        LibSanitize._notZeroAddress(_owner);\\n        LibSanitize._notZeroAddress(_spender);\\n        ApprovalsPerOwner.set(_owner, _spender, _value);\\n        emit Approval(_owner, _spender, _value);\\n    }\\n\\n    /// @notice Internal utility to retrieve the total supply of tokens\\n    /// @return The total supply\\n    function _totalSupply() internal view returns (uint256) {\\n        return Shares.get();\\n    }\\n\\n    /// @notice Internal utility to perform an unchecked transfer\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\\n        SharesPerOwner.set(_from, SharesPerOwner.get(_from) - _value);\\n        SharesPerOwner.set(_to, SharesPerOwner.get(_to) + _value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /// @notice Internal utility to retrieve the underlying asset balance for the given shares\\n    /// @param _shares Amount of shares to convert\\n    /// @return The balance from the given shares\\n    function _balanceFromShares(uint256 _shares) internal view returns (uint256) {\\n        uint256 _totalSharesValue = Shares.get();\\n\\n        if (_totalSharesValue == 0) {\\n            return 0;\\n        }\\n\\n        return ((_shares * _assetBalance())) / _totalSharesValue;\\n    }\\n\\n    /// @notice Internal utility to retrieve the shares count for a given underlying asset amount\\n    /// @param _balance Amount of underlying asset balance to convert\\n    /// @return The shares from the given balance\\n    function _sharesFromBalance(uint256 _balance) internal view returns (uint256) {\\n        uint256 _totalUnderlyingSupply = _assetBalance();\\n\\n        if (_totalUnderlyingSupply == 0) {\\n            return 0;\\n        }\\n\\n        return (_balance * Shares.get()) / _totalUnderlyingSupply;\\n    }\\n\\n    /// @notice Internal utility to mint shares for the specified user\\n    /// @dev This method assumes that funds received are now part of the _assetBalance()\\n    /// @param _owner Account that should receive the new shares\\n    /// @param _underlyingAssetValue Value of underlying asset received, to convert into shares\\n    /// @return sharesToMint The amnount of minted shares\\n    function _mintShares(address _owner, uint256 _underlyingAssetValue) internal returns (uint256 sharesToMint) {\\n        uint256 oldTotalAssetBalance = _assetBalance() - _underlyingAssetValue;\\n        uint256 tSupply = _totalSupply();\\n\\n        if (oldTotalAssetBalance == 0 || tSupply == 0) {\\n            sharesToMint = _underlyingAssetValue;\\n            _mintRawShares(_owner, _underlyingAssetValue);\\n        } else {\\n            sharesToMint = (_underlyingAssetValue * tSupply) / oldTotalAssetBalance;\\n            _mintRawShares(_owner, sharesToMint);\\n        }\\n    }\\n\\n    /// @notice Internal utility to retrieve the amount of shares per owner\\n    /// @param _owner Account to be checked\\n    /// @return The balance of the account in shares\\n    function _balanceOf(address _owner) internal view returns (uint256) {\\n        return SharesPerOwner.get(_owner);\\n    }\\n\\n    /// @notice Internal utility to mint shares without any conversion, and emits a mint Transfer event\\n    /// @param _owner Account that should receive the new shares\\n    /// @param _value Amount of shares to mint\\n    function _mintRawShares(address _owner, uint256 _value) internal {\\n        _setTotalSupply(Shares.get() + _value);\\n        SharesPerOwner.set(_owner, SharesPerOwner.get(_owner) + _value);\\n        emit Transfer(address(0), _owner, _value);\\n    }\\n\\n    /// @notice Internal utility to burn shares without any conversion, and emits a burn Transfer event\\n    /// @param _owner Account that should burn its shares\\n    /// @param _value Amount of shares to burn\\n    function _burnRawShares(address _owner, uint256 _value) internal {\\n        _setTotalSupply(Shares.get() - _value);\\n        SharesPerOwner.set(_owner, SharesPerOwner.get(_owner) - _value);\\n        emit Transfer(_owner, address(0), _value);\\n    }\\n\\n    /// @notice Internal utility to set the total supply and emit an event\\n    /// @param newTotalSupply The new total supply value\\n    function _setTotalSupply(uint256 newTotalSupply) internal {\\n        Shares.set(newTotalSupply);\\n        emit SetTotalSupply(newTotalSupply);\\n    }\\n}\\n\",\"keccak256\":\"0x30618726ce8fe880c66e1787df53b82ef8e770649e3e94c42b9c30398145f894\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/UserDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../interfaces/components/IUserDepositManager.1.sol\\\";\\n\\nimport \\\"../libraries/LibSanitize.sol\\\";\\n\\nimport \\\"../state/river/BalanceToDeposit.sol\\\";\\n\\n/// @title User Deposit Manager (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This contract handles the inbound transfers cases or the explicit submissions\\nabstract contract UserDepositManagerV1 is IUserDepositManagerV1 {\\n    /// @notice Handler called whenever a user has sent funds to the contract\\n    /// @dev Must be overridden\\n    /// @param _depositor Address that made the deposit\\n    /// @param _recipient Address that receives the minted shares\\n    /// @param _amount Amount deposited\\n    function _onDeposit(address _depositor, address _recipient, uint256 _amount) internal virtual;\\n    function _setBalanceToDeposit(uint256 newBalanceToDeposit) internal virtual;\\n\\n    /// @inheritdoc IUserDepositManagerV1\\n    function deposit() external payable {\\n        _deposit(msg.sender);\\n    }\\n\\n    /// @inheritdoc IUserDepositManagerV1\\n    function depositAndTransfer(address _recipient) external payable {\\n        LibSanitize._notZeroAddress(_recipient);\\n        _deposit(_recipient);\\n    }\\n\\n    /// @inheritdoc IUserDepositManagerV1\\n    receive() external payable {\\n        _deposit(msg.sender);\\n    }\\n\\n    /// @inheritdoc IUserDepositManagerV1\\n    fallback() external payable {\\n        revert LibErrors.InvalidCall();\\n    }\\n\\n    /// @notice Internal utility calling the deposit handler and emitting the deposit details\\n    /// @param _recipient The account receiving the minted shares\\n    function _deposit(address _recipient) internal {\\n        if (msg.value == 0) {\\n            revert EmptyDeposit();\\n        }\\n\\n        _setBalanceToDeposit(BalanceToDeposit.get() + msg.value);\\n\\n        _onDeposit(msg.sender, _recipient, msg.value);\\n\\n        emit UserDeposit(msg.sender, _recipient, msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x86a7c134ede7b7410eaed87140d6178c3be90d8f03f24187a91fe9e49e3ad331\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Administrable Interface\\n/// @author Alluvial Finance Inc.\\n/// @notice This interface exposes methods to handle the ownership of the contracts\\ninterface IAdministrable {\\n    /// @notice The pending admin address changed\\n    /// @param pendingAdmin New pending admin address\\n    event SetPendingAdmin(address indexed pendingAdmin);\\n\\n    /// @notice The admin address changed\\n    /// @param admin New admin address\\n    event SetAdmin(address indexed admin);\\n\\n    /// @notice Retrieves the current admin address\\n    /// @return The admin address\\n    function getAdmin() external view returns (address);\\n\\n    /// @notice Retrieve the current pending admin address\\n    /// @return The pending admin address\\n    function getPendingAdmin() external view returns (address);\\n\\n    /// @notice Proposes a new address as admin\\n    /// @dev This security prevents setting an invalid address as an admin. The pending\\n    /// @dev admin has to claim its ownership of the contract, and prove that the new\\n    /// @dev address is able to perform regular transactions.\\n    /// @param _newAdmin New admin address\\n    function proposeAdmin(address _newAdmin) external;\\n\\n    /// @notice Accept the transfer of ownership\\n    /// @dev Only callable by the pending admin. Resets the pending admin if succesful.\\n    function acceptAdmin() external;\\n}\\n\",\"keccak256\":\"0xa125890056d930c3f1bfe09ea58b81fa01a1d1526092d0bcce9d38cd35aeec58\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAllowlist.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Allowlist Interface (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This interface exposes methods to handle the list of allowed recipients.\\ninterface IAllowlistV1 {\\n    /// @notice The permissions of several accounts have changed\\n    /// @param accounts List of accounts\\n    /// @param permissions New permissions for each account at the same index\\n    event SetAllowlistPermissions(address[] accounts, uint256[] permissions);\\n\\n    /// @notice The stored allower address has been changed\\n    /// @param allower The new allower address\\n    event SetAllower(address indexed allower);\\n\\n    /// @notice The stored denier address has been changed\\n    /// @param denier The new denier address\\n    event SetDenier(address indexed denier);\\n\\n    /// @notice The provided accounts list is empty\\n    error InvalidCount();\\n\\n    /// @notice The account is denied access\\n    /// @param _account The denied account\\n    error Denied(address _account);\\n\\n    /// @notice The provided accounts and permissions list have different lengths\\n    error MismatchedArrayLengths();\\n\\n    /// @notice Allower can't set deny permission\\n    error AttemptToSetDenyPermission();\\n\\n    /// @notice Allower can't remove deny permission\\n    error AttemptToRemoveDenyPermission();\\n\\n    /// @notice Initializes the allowlist\\n    /// @param _admin Address of the Allowlist administrator\\n    /// @param _allower Address of the allower\\n    function initAllowlistV1(address _admin, address _allower) external;\\n\\n    /// @notice Initializes the allowlist denier\\n    /// @param _denier Address of the denier\\n    function initAllowlistV1_1(address _denier) external;\\n\\n    /// @notice Retrieves the allower address\\n    /// @return The address of the allower\\n    function getAllower() external view returns (address);\\n\\n    /// @notice Retrieves the denier address\\n    /// @return The address of the denier\\n    function getDenier() external view returns (address);\\n\\n    /// @notice This method returns true if the user has the expected permission and\\n    ///         is not in the deny list\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    /// @return True if mask is respected and user is allowed\\n    function isAllowed(address _account, uint256 _mask) external view returns (bool);\\n\\n    /// @notice This method returns true if the user is in the deny list\\n    /// @param _account Recipient to verify\\n    /// @return True if user is denied access\\n    function isDenied(address _account) external view returns (bool);\\n\\n    /// @notice This method returns true if the user has the expected permission\\n    ///         ignoring any deny list membership\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    /// @return True if mask is respected\\n    function hasPermission(address _account, uint256 _mask) external view returns (bool);\\n\\n    /// @notice This method retrieves the raw permission value\\n    /// @param _account Recipient to verify\\n    /// @return The raw permissions value of the account\\n    function getPermissions(address _account) external view returns (uint256);\\n\\n    /// @notice This method should be used as a modifier and is expected to revert\\n    ///         if the user hasn't got the required permission or if the user is\\n    ///         in the deny list.\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    function onlyAllowed(address _account, uint256 _mask) external view;\\n\\n    /// @notice Changes the allower address\\n    /// @param _newAllowerAddress New address allowed to edit the allowlist\\n    function setAllower(address _newAllowerAddress) external;\\n\\n    /// @notice Changes the denier address\\n    /// @param _newDenierAddress New address allowed to edit the allowlist\\n    function setDenier(address _newDenierAddress) external;\\n\\n    /// @notice Sets the allow permissions for one or more accounts\\n    /// @dev This function is for allocating or removing deposit, redeem or donate permissions.\\n    ///      This function could be used to give any permissions that we come up with in the future.\\n    ///      An address which was denied has to be undenied first before they could be given any permission(s).\\n    /// @param _accounts Accounts to update\\n    /// @param _permissions New permission values\\n    function setAllowPermissions(address[] calldata _accounts, uint256[] calldata _permissions) external;\\n\\n    /// @notice Sets the deny permissions for one or more accounts\\n    /// @dev This function is for allocating or removing deny permissions.\\n    ///      An address which is undenied has to be given permissions again for them to be able to deposit, donate or redeem.\\n    /// @param _accounts Accounts to update\\n    /// @param _permissions New permission values\\n    function setDenyPermissions(address[] calldata _accounts, uint256[] calldata _permissions) external;\\n}\\n\",\"keccak256\":\"0xa091d5674c42bcfc05e5e35206dfd1235325a630aae6aeae60ff5df8864deab9\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/ICoverageFund.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Coverage Fund Interface (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This interface exposes methods to receive donations for the slashing coverage fund and pull the funds into river\\ninterface ICoverageFundV1 {\\n    /// @notice The storage river address has changed\\n    /// @param river The new river address\\n    event SetRiver(address indexed river);\\n\\n    /// @notice A donation has been made to the coverage fund\\n    /// @param donator Address that performed the donation\\n    /// @param amount The amount donated\\n    event Donate(address indexed donator, uint256 amount);\\n\\n    /// @notice The fallback or receive callback has been triggered\\n    error InvalidCall();\\n\\n    /// @notice A donation with 0 ETH has been performed\\n    error EmptyDonation();\\n\\n    /// @notice Initialize the coverage fund with the required arguments\\n    /// @param _riverAddress Address of River\\n    function initCoverageFundV1(address _riverAddress) external;\\n\\n    /// @notice Pulls ETH into the River contract\\n    /// @dev Only callable by the River contract\\n    /// @param _maxAmount The maximum amount to pull into the system\\n    function pullCoverageFunds(uint256 _maxAmount) external;\\n\\n    /// @notice Donates ETH to the coverage fund contract\\n    function donate() external payable;\\n\\n    /// @notice Ether receiver\\n    receive() external payable;\\n\\n    /// @notice Invalid fallback detector\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x5ec3a216e7691dd40fc67a9e8f652eb20db1f1e2392f09a9af4dabddfa8d3ddf\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IDepositContract.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Deposit Contract Interface\\n/// @notice This interface exposes methods to perform validator deposits\\ninterface IDepositContract {\\n    /// @notice Official deposit method to activate a validator on the consensus layer\\n    /// @param pubkey The 48 bytes long BLS Public key representing the validator\\n    /// @param withdrawalCredentials The 32 bytes long withdrawal credentials, configures the withdrawal recipient\\n    /// @param signature The 96 bytes long BLS Signature performed by the pubkey's private key\\n    /// @param depositDataRoot The root hash of the whole deposit data structure\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawalCredentials,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable;\\n\\n    /// @notice Query the current deposit root hash.\\n    /// @return The deposit root hash.\\n    function get_deposit_root() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x23e94270499750d3523d32c10d59ce9e0efd8f05f2d2d74e2fb9fb0b743b80a0\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IELFeeRecipient.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Execution Layer Fee Recipient Interface (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This interface exposes methods to receive all the execution layer fees from the proposed blocks + bribes\\ninterface IELFeeRecipientV1 {\\n    /// @notice The storage river address has changed\\n    /// @param river The new river address\\n    event SetRiver(address indexed river);\\n\\n    /// @notice The fallback has been triggered\\n    error InvalidCall();\\n\\n    /// @notice Initialize the fee recipient with the required arguments\\n    /// @param _riverAddress Address of River\\n    function initELFeeRecipientV1(address _riverAddress) external;\\n\\n    /// @notice Pulls ETH to the River contract\\n    /// @dev Only callable by the River contract\\n    /// @param _maxAmount The maximum amount to pull into the system\\n    function pullELFees(uint256 _maxAmount) external;\\n\\n    /// @notice Ether receiver\\n    receive() external payable;\\n\\n    /// @notice Invalid fallback detector\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x239e8c0ad095f5a651ca464531dc2e7fc3d95dd2f257fefac7f4a4a92d46da50\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IOperatorRegistry.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../state/operatorsRegistry/Operators.2.sol\\\";\\n\\n/// @title Operators Registry Interface (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This interface exposes methods to handle the list of operators and their keys\\ninterface IOperatorsRegistryV1 {\\n    /// @notice A new operator has been added to the registry\\n    /// @param index The operator index\\n    /// @param name The operator display name\\n    /// @param operatorAddress The operator address\\n    event AddedOperator(uint256 indexed index, string name, address indexed operatorAddress);\\n\\n    /// @notice The operator status has been changed\\n    /// @param index The operator index\\n    /// @param active True if the operator is active\\n    event SetOperatorStatus(uint256 indexed index, bool active);\\n\\n    /// @notice The operator limit has been changed\\n    /// @param index The operator index\\n    /// @param newLimit The new operator staking limit\\n    event SetOperatorLimit(uint256 indexed index, uint256 newLimit);\\n\\n    /// @notice The operator stopped validator count has been changed\\n    /// @param index The operator index\\n    /// @param newStoppedValidatorCount The new stopped validator count\\n    event SetOperatorStoppedValidatorCount(uint256 indexed index, uint256 newStoppedValidatorCount);\\n\\n    /// @notice The operator address has been changed\\n    /// @param index The operator index\\n    /// @param newOperatorAddress The new operator address\\n    event SetOperatorAddress(uint256 indexed index, address indexed newOperatorAddress);\\n\\n    /// @notice The operator display name has been changed\\n    /// @param index The operator index\\n    /// @param newName The new display name\\n    event SetOperatorName(uint256 indexed index, string newName);\\n\\n    /// @notice The operator or the admin added new validator keys and signatures\\n    /// @dev The public keys and signatures are concatenated\\n    /// @dev A public key is 48 bytes long\\n    /// @dev A signature is 96 bytes long\\n    /// @dev [P1, S1, P2, S2, ..., PN, SN] where N is the bytes length divided by (96 + 48)\\n    /// @param index The operator index\\n    /// @param publicKeysAndSignatures The concatenated public keys and signatures\\n    event AddedValidatorKeys(uint256 indexed index, bytes publicKeysAndSignatures);\\n\\n    /// @notice The operator or the admin removed a public key and its signature from the registry\\n    /// @param index The operator index\\n    /// @param publicKey The BLS public key that has been removed\\n    event RemovedValidatorKey(uint256 indexed index, bytes publicKey);\\n\\n    /// @notice The stored river address has been changed\\n    /// @param river The new river address\\n    event SetRiver(address indexed river);\\n\\n    /// @notice The operator edited its keys after the snapshot block\\n    /// @dev This means that we cannot assume that its key set is checked by the snapshot\\n    /// @dev This happens only if the limit was meant to be increased\\n    /// @param index The operator index\\n    /// @param currentLimit The current operator limit\\n    /// @param newLimit The new operator limit that was attempted to be set\\n    /// @param latestKeysEditBlockNumber The last block number at which the operator changed its keys\\n    /// @param snapshotBlock The block number of the snapshot\\n    event OperatorEditsAfterSnapshot(\\n        uint256 indexed index,\\n        uint256 currentLimit,\\n        uint256 newLimit,\\n        uint256 indexed latestKeysEditBlockNumber,\\n        uint256 indexed snapshotBlock\\n    );\\n\\n    /// @notice The call didn't alter the limit of the operator\\n    /// @param index The operator index\\n    /// @param limit The limit of the operator\\n    event OperatorLimitUnchanged(uint256 indexed index, uint256 limit);\\n\\n    /// @notice The stopped validator array has been changed\\n    /// @notice A validator is considered stopped if exiting, exited or slashed\\n    /// @notice This event is emitted when the oracle reports new stopped validators counts\\n    /// @param stoppedValidatorCounts The new stopped validator counts\\n    event UpdatedStoppedValidators(uint32[] stoppedValidatorCounts);\\n\\n    /// @notice The requested exit count has been updated\\n    /// @param index The operator index\\n    /// @param count The count of requested exits\\n    event RequestedValidatorExits(uint256 indexed index, uint256 count);\\n\\n    /// @notice The exit request demand has been updated\\n    /// @param previousValidatorExitsDemand The previous exit request demand\\n    /// @param nextValidatorExitsDemand The new exit request demand\\n    event SetCurrentValidatorExitsDemand(uint256 previousValidatorExitsDemand, uint256 nextValidatorExitsDemand);\\n\\n    /// @notice The total requested exit has been updated\\n    /// @param previousTotalValidatorExitsRequested The previous total requested exit\\n    /// @param newTotalValidatorExitsRequested The new total requested exit\\n    event SetTotalValidatorExitsRequested(\\n        uint256 previousTotalValidatorExitsRequested, uint256 newTotalValidatorExitsRequested\\n    );\\n\\n    /// @notice A validator key got funded on the deposit contract\\n    /// @notice This event was introduced during a contract upgrade, in order to cover all possible public keys, this event\\n    /// @notice will be replayed for past funded keys in order to have a complete coverage of all the funded public keys.\\n    /// @notice In this particuliar scenario, the deferred value will be set to true, to indicate that we are not going to have\\n    /// @notice the expected additional events and side effects in the same transaction (deposit to official DepositContract etc ...) because\\n    /// @notice the event was synthetically crafted.\\n    /// @param index The operator index\\n    /// @param publicKeys BLS Public key that got funded\\n    /// @param deferred True if event has been replayed in the context of a migration\\n    event FundedValidatorKeys(uint256 indexed index, bytes[] publicKeys, bool deferred);\\n\\n    /// @notice The requested exit count has been update to fill the gap with the reported stopped count\\n    /// @param index The operator index\\n    /// @param oldRequestedExits The old requested exit count\\n    /// @param newRequestedExits The new requested exit count\\n    event UpdatedRequestedValidatorExitsUponStopped(\\n        uint256 indexed index, uint32 oldRequestedExits, uint32 newRequestedExits\\n    );\\n\\n    /// @notice The calling operator is inactive\\n    /// @param index The operator index\\n    error InactiveOperator(uint256 index);\\n\\n    /// @notice A funded key deletion has been attempted\\n    error InvalidFundedKeyDeletionAttempt();\\n\\n    /// @notice The index provided are not sorted properly (descending order)\\n    error InvalidUnsortedIndexes();\\n\\n    /// @notice The provided operator and limits array have different lengths\\n    error InvalidArrayLengths();\\n\\n    /// @notice The provided operator and limits array are empty\\n    error InvalidEmptyArray();\\n\\n    /// @notice The provided key count is 0\\n    error InvalidKeyCount();\\n\\n    /// @notice The provided concatenated keys do not have the expected length\\n    error InvalidKeysLength();\\n\\n    /// @notice The index that is removed is out of bounds\\n    error InvalidIndexOutOfBounds();\\n\\n    /// @notice The value for the operator limit is too high\\n    /// @param index The operator index\\n    /// @param limit The new limit provided\\n    /// @param keyCount The operator key count\\n    error OperatorLimitTooHigh(uint256 index, uint256 limit, uint256 keyCount);\\n\\n    /// @notice The value for the limit is too low\\n    /// @param index The operator index\\n    /// @param limit The new limit provided\\n    /// @param fundedKeyCount The operator funded key count\\n    error OperatorLimitTooLow(uint256 index, uint256 limit, uint256 fundedKeyCount);\\n\\n    /// @notice The provided list of operators is not in increasing order\\n    error UnorderedOperatorList();\\n\\n    /// @notice Thrown when an invalid empty stopped validator array is provided\\n    error InvalidEmptyStoppedValidatorCountsArray();\\n\\n    /// @notice Thrown when the sum of stopped validators is invalid\\n    error InvalidStoppedValidatorCountsSum();\\n\\n    /// @notice Throw when an element in the stopped validator array is decreasing\\n    error StoppedValidatorCountsDecreased();\\n\\n    /// @notice Thrown when the number of elements in the array is too high compared to operator count\\n    error StoppedValidatorCountsTooHigh();\\n\\n    /// @notice Thrown when no exit requests can be performed\\n    error NoExitRequestsToPerform();\\n\\n    /// @notice The provided stopped validator count array is shrinking\\n    error StoppedValidatorCountArrayShrinking();\\n\\n    /// @notice The provided stopped validator count of an operator is above its funded validator count\\n    error StoppedValidatorCountAboveFundedCount(uint256 operatorIndex, uint32 stoppedCount, uint32 fundedCount);\\n\\n    /// @notice Initializes the operators registry\\n    /// @param _admin Admin in charge of managing operators\\n    /// @param _river Address of River system\\n    function initOperatorsRegistryV1(address _admin, address _river) external;\\n\\n    /// @notice Initializes the operators registry for V1_1\\n    function initOperatorsRegistryV1_1() external;\\n\\n    /// @notice Retrieve the River address\\n    /// @return The address of River\\n    function getRiver() external view returns (address);\\n\\n    /// @notice Get operator details\\n    /// @param _index The index of the operator\\n    /// @return The details of the operator\\n    function getOperator(uint256 _index) external view returns (OperatorsV2.Operator memory);\\n\\n    /// @notice Get operator count\\n    /// @return The operator count\\n    function getOperatorCount() external view returns (uint256);\\n\\n    /// @notice Retrieve the stopped validator count for an operator index\\n    /// @param _idx The index of the operator\\n    /// @return The stopped validator count of the operator\\n    function getOperatorStoppedValidatorCount(uint256 _idx) external view returns (uint32);\\n\\n    /// @notice Retrieve the total stopped validator count\\n    /// @return The total stopped validator count\\n    function getTotalStoppedValidatorCount() external view returns (uint32);\\n\\n    /// @notice Retrieve the total requested exit count\\n    /// @notice This value is the amount of exit requests that have been performed, emitting an event for operators to catch\\n    /// @return The total requested exit count\\n    function getTotalValidatorExitsRequested() external view returns (uint256);\\n\\n    /// @notice Get the current exit request demand waiting to be triggered\\n    /// @notice This value is the amount of exit requests that are demanded and not yet performed by the contract\\n    /// @return The current exit request demand\\n    function getCurrentValidatorExitsDemand() external view returns (uint256);\\n\\n    /// @notice Retrieve the total stopped and requested exit count\\n    /// @return The total stopped count\\n    /// @return The total requested exit count\\n    function getStoppedAndRequestedExitCounts() external view returns (uint32, uint256);\\n\\n    /// @notice Retrieve the raw stopped validators array from storage\\n    /// @return The stopped validator array\\n    function getStoppedValidatorCountPerOperator() external view returns (uint32[] memory);\\n\\n    /// @notice Get the details of a validator\\n    /// @param _operatorIndex The index of the operator\\n    /// @param _validatorIndex The index of the validator\\n    /// @return publicKey The public key of the validator\\n    /// @return signature The signature used during deposit\\n    /// @return funded True if validator has been funded\\n    function getValidator(uint256 _operatorIndex, uint256 _validatorIndex)\\n        external\\n        view\\n        returns (bytes memory publicKey, bytes memory signature, bool funded);\\n\\n    /// @notice Get the next validators that would be funded\\n    /// @param _count Count of validators that would be funded next\\n    /// @return publicKeys An array of fundable public keys\\n    /// @return signatures An array of signatures linked to the public keys\\n    function getNextValidatorsToDepositFromActiveOperators(uint256 _count)\\n        external\\n        view\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n\\n    /// @notice Retrieve the active operator set\\n    /// @return The list of active operators and their details\\n    function listActiveOperators() external view returns (OperatorsV2.Operator[] memory);\\n\\n    /// @notice Allows river to override the stopped validators array\\n    /// @notice This actions happens during the Oracle report processing\\n    /// @param _stoppedValidatorCounts The new stopped validators array\\n    /// @param _depositedValidatorCount The total deposited validator count\\n    function reportStoppedValidatorCounts(uint32[] calldata _stoppedValidatorCounts, uint256 _depositedValidatorCount)\\n        external;\\n\\n    /// @notice Adds an operator to the registry\\n    /// @dev Only callable by the administrator\\n    /// @param _name The name identifying the operator\\n    /// @param _operator The address representing the operator, receiving the rewards\\n    /// @return The index of the new operator\\n    function addOperator(string calldata _name, address _operator) external returns (uint256);\\n\\n    /// @notice Changes the operator address of an operator\\n    /// @dev Only callable by the administrator or the previous operator address\\n    /// @param _index The operator index\\n    /// @param _newOperatorAddress The new address of the operator\\n    function setOperatorAddress(uint256 _index, address _newOperatorAddress) external;\\n\\n    /// @notice Changes the operator name\\n    /// @dev Only callable by the administrator or the operator\\n    /// @param _index The operator index\\n    /// @param _newName The new operator name\\n    function setOperatorName(uint256 _index, string calldata _newName) external;\\n\\n    /// @notice Changes the operator status\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStatus The new status of the operator\\n    function setOperatorStatus(uint256 _index, bool _newStatus) external;\\n\\n    /// @notice Changes the operator staking limit\\n    /// @dev Only callable by the administrator\\n    /// @dev The operator indexes must be in increasing order and contain no duplicate\\n    /// @dev The limit cannot exceed the total key count of the operator\\n    /// @dev The _indexes and _newLimits must have the same length.\\n    /// @dev Each limit value is applied to the operator index at the same index in the _indexes array.\\n    /// @param _operatorIndexes The operator indexes, in increasing order and duplicate free\\n    /// @param _newLimits The new staking limit of the operators\\n    /// @param _snapshotBlock The block number at which the snapshot was computed\\n    function setOperatorLimits(\\n        uint256[] calldata _operatorIndexes,\\n        uint32[] calldata _newLimits,\\n        uint256 _snapshotBlock\\n    ) external;\\n\\n    /// @notice Adds new keys for an operator\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @param _index The operator index\\n    /// @param _keyCount The amount of keys provided\\n    /// @param _publicKeysAndSignatures Public keys of the validator, concatenated\\n    function addValidators(uint256 _index, uint32 _keyCount, bytes calldata _publicKeysAndSignatures) external;\\n\\n    /// @notice Remove validator keys\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @dev The indexes must be provided sorted in decreasing order and duplicate-free, otherwise the method will revert\\n    /// @dev The operator limit will be set to the lowest deleted key index if the operator's limit wasn't equal to its total key count\\n    /// @dev The operator or the admin cannot remove funded keys\\n    /// @dev When removing validators, the indexes of specific unfunded keys can be changed in order to properly\\n    /// @dev remove the keys from the storage array. Beware of this specific behavior when chaining calls as the\\n    /// @dev targeted public key indexes can point to a different key after a first call was made and performed\\n    /// @dev some swaps\\n    /// @param _index The operator index\\n    /// @param _indexes The indexes of the keys to remove\\n    function removeValidators(uint256 _index, uint256[] calldata _indexes) external;\\n\\n    /// @notice Retrieve validator keys based on operator statuses\\n    /// @param _count Max amount of keys requested\\n    /// @return publicKeys An array of public keys\\n    /// @return signatures An array of signatures linked to the public keys\\n    function pickNextValidatorsToDeposit(uint256 _count)\\n        external\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n\\n    /// @notice Public endpoint to consume the exit request demand and perform the actual exit requests\\n    /// @notice The selection algorithm will pick validators based on their active validator counts\\n    /// @notice This value is computed by using the count of funded keys and taking into account the stopped validator counts and exit requests\\n    /// @param _count Max amount of exits to request\\n    function requestValidatorExits(uint256 _count) external;\\n\\n    /// @notice Increases the exit request demand\\n    /// @dev This method is only callable by the river contract, and to actually forward the information to the node operators via event emission, the unprotected requestValidatorExits method must be called\\n    /// @param _count The amount of exit requests to add to the demand\\n    /// @param _depositedValidatorCount The total deposited validator count\\n    function demandValidatorExits(uint256 _count, uint256 _depositedValidatorCount) external;\\n}\\n\",\"keccak256\":\"0x6b33da5c97f2a47a95752642475decf2cf411533d8c4236760e97fd6512f2126\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IProtocolVersion.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\ninterface IProtocolVersion {\\n    /// @notice Retrieves the version of the contract\\n    /// @return Version of the contract\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0x2fc810a5c001d641d4b19c28631dac46201e3780e91dfeb5dc836f92f1aee8b3\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRedeemManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../state/redeemManager/RedeemQueue.sol\\\";\\nimport \\\"../state/redeemManager/WithdrawalStack.sol\\\";\\n\\n/// @title Redeem Manager Interface (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This contract handles the redeem requests of all users\\ninterface IRedeemManagerV1 {\\n    /// @notice Emitted when a redeem request is created\\n    /// @param recipient The recipient of the redeem request\\n    /// @param height The height of the redeem request in LsETH\\n    /// @param amount The amount of the redeem request in LsETH\\n    /// @param maxRedeemableEth The maximum amount of eth that can be redeemed from this request\\n    /// @param id The id of the new redeem request\\n    event RequestedRedeem(\\n        address indexed recipient, uint256 height, uint256 amount, uint256 maxRedeemableEth, uint32 id\\n    );\\n\\n    /// @notice Emitted when a withdrawal event is created\\n    /// @param height The height of the withdrawal event in LsETH\\n    /// @param amount The amount of the withdrawal event in LsETH\\n    /// @param ethAmount The amount of eth to distrubute to claimers\\n    /// @param id The id of the withdrawal event\\n    event ReportedWithdrawal(uint256 height, uint256 amount, uint256 ethAmount, uint32 id);\\n\\n    /// @notice Emitted when a redeem request has been satisfied and filled (even partially) from a withdrawal event\\n    /// @param redeemRequestId The id of the redeem request\\n    /// @param withdrawalEventId The id of the withdrawal event used to fill the request\\n    /// @param lsEthAmountSatisfied The amount of LsETH filled\\n    /// @param ethAmountSatisfied The amount of ETH filled\\n    /// @param lsEthAmountRemaining The amount of LsETH remaining\\n    /// @param ethAmountExceeding The amount of eth added to the exceeding buffer\\n    event SatisfiedRedeemRequest(\\n        uint32 indexed redeemRequestId,\\n        uint32 indexed withdrawalEventId,\\n        uint256 lsEthAmountSatisfied,\\n        uint256 ethAmountSatisfied,\\n        uint256 lsEthAmountRemaining,\\n        uint256 ethAmountExceeding\\n    );\\n\\n    /// @notice Emitted when a redeem request claim has been processed and matched at least once and funds are sent to the recipient\\n    /// @param redeemRequestId The id of the redeem request\\n    /// @param recipient The address receiving the redeem request funds\\n    /// @param ethAmount The amount of eth retrieved\\n    /// @param lsEthAmount The total amount of LsETH used to redeem the eth\\n    /// @param remainingLsEthAmount The amount of LsETH remaining\\n    event ClaimedRedeemRequest(\\n        uint32 indexed redeemRequestId,\\n        address indexed recipient,\\n        uint256 ethAmount,\\n        uint256 lsEthAmount,\\n        uint256 remainingLsEthAmount\\n    );\\n\\n    /// @notice Emitted when the redeem demand is set\\n    /// @param oldRedeemDemand The old redeem demand\\n    /// @param newRedeemDemand The new redeem demand\\n    event SetRedeemDemand(uint256 oldRedeemDemand, uint256 newRedeemDemand);\\n\\n    /// @notice Emitted when the River address is set\\n    /// @param river The new river address\\n    event SetRiver(address river);\\n\\n    /// @notice Thrown When a zero value is provided\\n    error InvalidZeroAmount();\\n\\n    /// @notice Thrown when a transfer error occured with LsETH\\n    error TransferError();\\n\\n    /// @notice Thrown when the provided arrays don't have matching lengths\\n    error IncompatibleArrayLengths();\\n\\n    /// @notice Thrown when the provided redeem request id is out of bounds\\n    /// @param id The redeem request id\\n    error RedeemRequestOutOfBounds(uint256 id);\\n\\n    /// @notice Thrown when the withdrawal request id if out of bounds\\n    /// @param id The withdrawal event id\\n    error WithdrawalEventOutOfBounds(uint256 id);\\n\\n    /// @notice Thrown when\\tthe redeem request id is already claimed\\n    /// @param id The redeem request id\\n    error RedeemRequestAlreadyClaimed(uint256 id);\\n\\n    /// @notice Thrown when the redeem request and withdrawal event are not matching during claim\\n    /// @param redeemRequestId The provided redeem request id\\n    /// @param withdrawalEventId The provided associated withdrawal event id\\n    error DoesNotMatch(uint256 redeemRequestId, uint256 withdrawalEventId);\\n\\n    /// @notice Thrown when the provided withdrawal event exceeds the redeem demand\\n    /// @param withdrawalAmount The amount of the withdrawal event\\n    /// @param redeemDemand The current redeem demand\\n    error WithdrawalExceedsRedeemDemand(uint256 withdrawalAmount, uint256 redeemDemand);\\n\\n    /// @notice Thrown when the payment after a claim failed\\n    /// @param recipient The recipient of the payment\\n    /// @param rdata The revert data\\n    error ClaimRedeemFailed(address recipient, bytes rdata);\\n\\n    /// @notice Thrown when the claim recipient is denied\\n    error ClaimRecipientIsDenied();\\n\\n    /// @notice Thrown when the claim initiator is denied\\n    error ClaimInitiatorIsDenied();\\n\\n    /// @notice Thrown when the recipient of redeemRequest is denied\\n    error RecipientIsDenied();\\n\\n    /// @param _river The address of the River contract\\n    function initializeRedeemManagerV1(address _river) external;\\n\\n    /// @notice Retrieve River address\\n    /// @return The address of River\\n    function getRiver() external view returns (address);\\n\\n    /// @notice Retrieve the global count of redeem requests\\n    function getRedeemRequestCount() external view returns (uint256);\\n\\n    /// @notice Retrieve the details of a specific redeem request\\n    /// @param _redeemRequestId The id of the request\\n    /// @return The redeem request details\\n    function getRedeemRequestDetails(uint32 _redeemRequestId)\\n        external\\n        view\\n        returns (RedeemQueue.RedeemRequest memory);\\n\\n    /// @notice Retrieve the global count of withdrawal events\\n    function getWithdrawalEventCount() external view returns (uint256);\\n\\n    /// @notice Retrieve the details of a specific withdrawal event\\n    /// @param _withdrawalEventId The id of the withdrawal event\\n    /// @return The withdrawal event details\\n    function getWithdrawalEventDetails(uint32 _withdrawalEventId)\\n        external\\n        view\\n        returns (WithdrawalStack.WithdrawalEvent memory);\\n\\n    /// @notice Retrieve the amount of redeemed LsETH pending to be supplied with withdrawn ETH\\n    /// @return The amount of eth in the buffer\\n    function getBufferedExceedingEth() external view returns (uint256);\\n\\n    /// @notice Retrieve the amount of LsETH waiting to be exited\\n    /// @return The amount of LsETH waiting to be exited\\n    function getRedeemDemand() external view returns (uint256);\\n\\n    /// @notice Resolves the provided list of redeem request ids\\n    /// @dev The result is an array of equal length with ids or error code\\n    /// @dev -1 means that the request is not satisfied yet\\n    /// @dev -2 means that the request is out of bounds\\n    /// @dev -3 means that the request has already been claimed\\n    /// @dev This call was created to be called by an off-chain interface, the output could then be used to perform the claimRewards call in a regular transaction\\n    /// @param _redeemRequestIds The list of redeem requests to resolve\\n    /// @return withdrawalEventIds The list of withdrawal events matching every redeem request (or error codes)\\n    function resolveRedeemRequests(uint32[] calldata _redeemRequestIds)\\n        external\\n        view\\n        returns (int64[] memory withdrawalEventIds);\\n\\n    /// @notice Creates a redeem request\\n    /// @param _lsETHAmount The amount of LsETH to redeem\\n    /// @param _recipient The recipient owning the redeem request\\n    /// @return redeemRequestId The id of the redeem request\\n    function requestRedeem(uint256 _lsETHAmount, address _recipient) external returns (uint32 redeemRequestId);\\n\\n    /// @notice Creates a redeem request using msg.sender as recipient\\n    /// @param _lsETHAmount The amount of LsETH to redeem\\n    /// @return redeemRequestId The id of the redeem request\\n    function requestRedeem(uint256 _lsETHAmount) external returns (uint32 redeemRequestId);\\n\\n    /// @notice Claims the rewards of the provided redeem request ids\\n    /// @param _redeemRequestIds The list of redeem requests to claim\\n    /// @param _withdrawalEventIds The list of withdrawal events to use for every redeem request claim\\n    /// @param _skipAlreadyClaimed True if the call should not revert on claiming of already claimed requests\\n    /// @param _depth The maximum recursive depth for the resolution of the redeem requests\\n    /// @return claimStatuses The list of claim statuses. 0 for fully claimed, 1 for partially claimed, 2 for skipped\\n    function claimRedeemRequests(\\n        uint32[] calldata _redeemRequestIds,\\n        uint32[] calldata _withdrawalEventIds,\\n        bool _skipAlreadyClaimed,\\n        uint16 _depth\\n    ) external returns (uint8[] memory claimStatuses);\\n\\n    /// @notice Claims the rewards of the provided redeem request ids\\n    /// @param _redeemRequestIds The list of redeem requests to claim\\n    /// @param _withdrawalEventIds The list of withdrawal events to use for every redeem request claim\\n    /// @return claimStatuses The list of claim statuses. 0 for fully claimed, 1 for partially claimed, 2 for skipped\\n    function claimRedeemRequests(uint32[] calldata _redeemRequestIds, uint32[] calldata _withdrawalEventIds)\\n        external\\n        returns (uint8[] memory claimStatuses);\\n\\n    /// @notice Reports a withdraw event from River\\n    /// @param _lsETHWithdrawable The amount of LsETH that can be redeemed due to this new withdraw event\\n    function reportWithdraw(uint256 _lsETHWithdrawable) external payable;\\n\\n    /// @notice Pulls exceeding buffer eth\\n    /// @param _max The maximum amount that should be pulled\\n    function pullExceedingEth(uint256 _max) external;\\n}\\n\",\"keccak256\":\"0x886c427e857e3e366c8b6c5ceb4dbdb4b722f4a773575809e225ba4b47e9df9c\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRiver.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../state/river/DailyCommittableLimits.sol\\\";\\n\\nimport \\\"./components/IConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"./components/IOracleManager.1.sol\\\";\\nimport \\\"./components/ISharesManager.1.sol\\\";\\nimport \\\"./components/IUserDepositManager.1.sol\\\";\\n\\n/// @title River Interface (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice The main system interface\\ninterface IRiverV1 is IConsensusLayerDepositManagerV1, IUserDepositManagerV1, ISharesManagerV1, IOracleManagerV1 {\\n    /// @notice Funds have been pulled from the Execution Layer Fee Recipient\\n    /// @param amount The amount pulled\\n    event PulledELFees(uint256 amount);\\n\\n    /// @notice Funds have been pulled from the Coverage Fund\\n    /// @param amount The amount pulled\\n    event PulledCoverageFunds(uint256 amount);\\n\\n    /// @notice Emitted when funds are pulled from the redeem manager\\n    /// @param amount The amount pulled\\n    event PulledRedeemManagerExceedingEth(uint256 amount);\\n\\n    /// @notice Emitted when funds are pulled from the CL recipient\\n    /// @param pulledSkimmedEthAmount The amount of skimmed ETH pulled\\n    /// @param pullExitedEthAmount The amount of exited ETH pulled\\n    event PulledCLFunds(uint256 pulledSkimmedEthAmount, uint256 pullExitedEthAmount);\\n\\n    /// @notice The stored Execution Layer Fee Recipient has been changed\\n    /// @param elFeeRecipient The new Execution Layer Fee Recipient\\n    event SetELFeeRecipient(address indexed elFeeRecipient);\\n\\n    /// @notice The stored Coverage Fund has been changed\\n    /// @param coverageFund The new Coverage Fund\\n    event SetCoverageFund(address indexed coverageFund);\\n\\n    /// @notice The stored Collector has been changed\\n    /// @param collector The new Collector\\n    event SetCollector(address indexed collector);\\n\\n    /// @notice The stored Allowlist has been changed\\n    /// @param allowlist The new Allowlist\\n    event SetAllowlist(address indexed allowlist);\\n\\n    /// @notice The stored Global Fee has been changed\\n    /// @param fee The new Global Fee\\n    event SetGlobalFee(uint256 fee);\\n\\n    /// @notice The stored Operators Registry has been changed\\n    /// @param operatorRegistry The new Operators Registry\\n    event SetOperatorsRegistry(address indexed operatorRegistry);\\n\\n    /// @notice The stored Metadata URI string has been changed\\n    /// @param metadataURI The new Metadata URI string\\n    event SetMetadataURI(string metadataURI);\\n\\n    /// @notice The system underlying supply increased. This is a snapshot of the balances for accounting purposes\\n    /// @param _collector The address of the collector during this event\\n    /// @param _oldTotalUnderlyingBalance Old total ETH balance under management by River\\n    /// @param _oldTotalSupply Old total supply in shares\\n    /// @param _newTotalUnderlyingBalance New total ETH balance under management by River\\n    /// @param _newTotalSupply New total supply in shares\\n    event RewardsEarned(\\n        address indexed _collector,\\n        uint256 _oldTotalUnderlyingBalance,\\n        uint256 _oldTotalSupply,\\n        uint256 _newTotalUnderlyingBalance,\\n        uint256 _newTotalSupply\\n    );\\n\\n    /// @notice Emitted when the daily committable limits are changed\\n    /// @param minNetAmount The minimum amount that must be used as the daily committable amount\\n    /// @param maxRelativeAmount The maximum amount that can be used as the daily committable amount, relative to the total underlying supply\\n    event SetMaxDailyCommittableAmounts(uint256 minNetAmount, uint256 maxRelativeAmount);\\n\\n    /// @notice Emitted when the redeem manager address is changed\\n    /// @param redeemManager The address of the redeem manager\\n    event SetRedeemManager(address redeemManager);\\n\\n    /// @notice Emitted when the balance to deposit is updated\\n    /// @param oldAmount The old balance to deposit\\n    /// @param newAmount The new balance to deposit\\n    event SetBalanceToDeposit(uint256 oldAmount, uint256 newAmount);\\n\\n    /// @notice Emitted when the balance to redeem is updated\\n    /// @param oldAmount The old balance to redeem\\n    /// @param newAmount The new balance to redeem\\n    event SetBalanceToRedeem(uint256 oldAmount, uint256 newAmount);\\n\\n    /// @notice Emitted when the balance committed to deposit\\n    /// @param oldAmount The old balance committed to deposit\\n    /// @param newAmount The new balance committed to deposit\\n    event SetBalanceCommittedToDeposit(uint256 oldAmount, uint256 newAmount);\\n\\n    /// @notice Emitted when the redeem manager received a withdraw event report\\n    /// @param redeemManagerDemand The total demand in LsETH of the redeem manager\\n    /// @param suppliedRedeemManagerDemand The amount of LsETH demand actually supplied\\n    /// @param suppliedRedeemManagerDemandInEth The amount in ETH of the supplied demand\\n    event ReportedRedeemManager(\\n        uint256 redeemManagerDemand, uint256 suppliedRedeemManagerDemand, uint256 suppliedRedeemManagerDemandInEth\\n    );\\n\\n    /// @notice Thrown when the amount received from the Withdraw contract doe not match the requested amount\\n    /// @param requested The amount that was requested\\n    /// @param received The amount that was received\\n    error InvalidPulledClFundsAmount(uint256 requested, uint256 received);\\n\\n    /// @notice The computed amount of shares to mint is 0\\n    error ZeroMintedShares();\\n\\n    /// @notice The access was denied\\n    /// @param account The account that was denied\\n    error Denied(address account);\\n\\n    /// @notice Initializes the River system\\n    /// @param _depositContractAddress Address to make Consensus Layer deposits\\n    /// @param _elFeeRecipientAddress Address that receives the execution layer fees\\n    /// @param _withdrawalCredentials Credentials to use for every validator deposit\\n    /// @param _oracleAddress The address of the Oracle contract\\n    /// @param _systemAdministratorAddress Administrator address\\n    /// @param _allowlistAddress Address of the allowlist contract\\n    /// @param _operatorRegistryAddress Address of the operator registry\\n    /// @param _collectorAddress Address receiving the the global fee on revenue\\n    /// @param _globalFee Amount retained when the ETH balance increases and sent to the collector\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _operatorRegistryAddress,\\n        address _collectorAddress,\\n        uint256 _globalFee\\n    ) external;\\n\\n    /// @notice Initialized version 1.1 of the River System\\n    /// @param _redeemManager The redeem manager address\\n    /// @param _epochsPerFrame The amounts of epochs in a frame\\n    /// @param _slotsPerEpoch The slots inside an epoch\\n    /// @param _secondsPerSlot The seconds inside a slot\\n    /// @param _genesisTime The genesis timestamp\\n    /// @param _epochsToAssumedFinality The number of epochs before an epoch is considered final on-chain\\n    /// @param _annualAprUpperBound The reporting upper bound\\n    /// @param _relativeLowerBound The reporting lower bound\\n    /// @param _maxDailyNetCommittableAmount_ The net daily committable limit\\n    /// @param _maxDailyRelativeCommittableAmount_ The relative daily committable limit\\n    function initRiverV1_1(\\n        address _redeemManager,\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime,\\n        uint64 _epochsToAssumedFinality,\\n        uint256 _annualAprUpperBound,\\n        uint256 _relativeLowerBound,\\n        uint128 _maxDailyNetCommittableAmount_,\\n        uint128 _maxDailyRelativeCommittableAmount_\\n    ) external;\\n\\n    /// @notice Initializes version 1.2 of the River System\\n    function initRiverV1_2() external;\\n\\n    /// @notice Get the current global fee\\n    /// @return The global fee\\n    function getGlobalFee() external view returns (uint256);\\n\\n    /// @notice Retrieve the allowlist address\\n    /// @return The allowlist address\\n    function getAllowlist() external view returns (address);\\n\\n    /// @notice Retrieve the collector address\\n    /// @return The collector address\\n    function getCollector() external view returns (address);\\n\\n    /// @notice Retrieve the execution layer fee recipient\\n    /// @return The execution layer fee recipient address\\n    function getELFeeRecipient() external view returns (address);\\n\\n    /// @notice Retrieve the coverage fund\\n    /// @return The coverage fund address\\n    function getCoverageFund() external view returns (address);\\n\\n    /// @notice Retrieve the redeem manager\\n    /// @return The redeem manager address\\n    function getRedeemManager() external view returns (address);\\n\\n    /// @notice Retrieve the operators registry\\n    /// @return The operators registry address\\n    function getOperatorsRegistry() external view returns (address);\\n\\n    /// @notice Retrieve the metadata uri string value\\n    /// @return The metadata uri string value\\n    function getMetadataURI() external view returns (string memory);\\n\\n    /// @notice Retrieve the configured daily committable limits\\n    /// @return The daily committable limits structure\\n    function getDailyCommittableLimits()\\n        external\\n        view\\n        returns (DailyCommittableLimits.DailyCommittableLimitsStruct memory);\\n\\n    /// @notice Resolves the provided redeem requests by calling the redeem manager\\n    /// @param _redeemRequestIds The list of redeem requests to resolve\\n    /// @return withdrawalEventIds The list of matching withdrawal events, or error codes\\n    function resolveRedeemRequests(uint32[] calldata _redeemRequestIds)\\n        external\\n        view\\n        returns (int64[] memory withdrawalEventIds);\\n\\n    /// @notice Set the daily committable limits\\n    /// @param _dcl The Daily Committable Limits structure\\n    function setDailyCommittableLimits(DailyCommittableLimits.DailyCommittableLimitsStruct memory _dcl) external;\\n\\n    /// @notice Retrieve the current balance to redeem\\n    /// @return The current balance to redeem\\n    function getBalanceToRedeem() external view returns (uint256);\\n\\n    /// @notice Performs a redeem request on the redeem manager\\n    /// @param _lsETHAmount The amount of LsETH to redeem\\n    /// @param _recipient The address that will own the redeem request\\n    /// @return redeemRequestId The ID of the newly created redeem request\\n    function requestRedeem(uint256 _lsETHAmount, address _recipient) external returns (uint32 redeemRequestId);\\n\\n    /// @notice Claims several redeem requests\\n    /// @param _redeemRequestIds The list of redeem requests to claim\\n    /// @param _withdrawalEventIds The list of resolved withdrawal event ids\\n    /// @return claimStatuses The operation status results\\n    function claimRedeemRequests(uint32[] calldata _redeemRequestIds, uint32[] calldata _withdrawalEventIds)\\n        external\\n        returns (uint8[] memory claimStatuses);\\n\\n    /// @notice Changes the global fee parameter\\n    /// @param _newFee New fee value\\n    function setGlobalFee(uint256 _newFee) external;\\n\\n    /// @notice Changes the allowlist address\\n    /// @param _newAllowlist New address for the allowlist\\n    function setAllowlist(address _newAllowlist) external;\\n\\n    /// @notice Changes the collector address\\n    /// @param _newCollector New address for the collector\\n    function setCollector(address _newCollector) external;\\n\\n    /// @notice Changes the execution layer fee recipient\\n    /// @param _newELFeeRecipient New address for the recipient\\n    function setELFeeRecipient(address _newELFeeRecipient) external;\\n\\n    /// @notice Changes the coverage fund\\n    /// @param _newCoverageFund New address for the fund\\n    function setCoverageFund(address _newCoverageFund) external;\\n\\n    /// @notice Sets the metadata uri string value\\n    /// @param _metadataURI The new metadata uri string value\\n    function setMetadataURI(string memory _metadataURI) external;\\n\\n    /// @notice Input for execution layer fee earnings\\n    function sendELFees() external payable;\\n\\n    /// @notice Input for consensus layer funds, containing both exit and skimming\\n    function sendCLFunds() external payable;\\n\\n    /// @notice Input for coverage funds\\n    function sendCoverageFunds() external payable;\\n\\n    /// @notice Input for the redeem manager funds\\n    function sendRedeemManagerExceedingFunds() external payable;\\n}\\n\",\"keccak256\":\"0xcb57b5480b1849e52fe74552c5aac448fe3c2232a6c72b7d56b34fa9bc878ea1\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IWithdraw.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Withdraw Interface (V1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This contract is in charge of holding the exit and skimming funds and allow river to pull these funds\\ninterface IWithdrawV1 {\\n    /// @notice Emitted when the linked River address is changed\\n    /// @param river The new River address\\n    event SetRiver(address river);\\n\\n    /// @param _river The address of the River contract\\n    function initializeWithdrawV1(address _river) external;\\n\\n    /// @notice Retrieve the withdrawal credentials to use\\n    /// @return The withdrawal credentials\\n    function getCredentials() external view returns (bytes32);\\n\\n    /// @notice Retrieve the linked River address\\n    /// @return The River address\\n    function getRiver() external view returns (address);\\n\\n    /// @notice Callable by River, sends the specified amount of ETH to River\\n    /// @param _amount The amount to pull\\n    function pullEth(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x5de9b6a44aaa1ef04daad3c15fe8452b0072a4b8be070e2bbe4ce4db8797fa46\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IConsensusLayerDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Consensys Layer Deposit Manager Interface (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This interface exposes methods to handle the interactions with the official deposit contract\\ninterface IConsensusLayerDepositManagerV1 {\\n    /// @notice The stored deposit contract address changed\\n    /// @param depositContract Address of the deposit contract\\n    event SetDepositContractAddress(address indexed depositContract);\\n\\n    /// @notice The stored withdrawal credentials changed\\n    /// @param withdrawalCredentials The withdrawal credentials to use for deposits\\n    event SetWithdrawalCredentials(bytes32 withdrawalCredentials);\\n\\n    /// @notice Emitted when the deposited validator count is updated\\n    /// @param oldDepositedValidatorCount The old deposited validator count value\\n    /// @param newDepositedValidatorCount The new deposited validator count value\\n    event SetDepositedValidatorCount(uint256 oldDepositedValidatorCount, uint256 newDepositedValidatorCount);\\n\\n    /// @notice Not enough funds to deposit one validator\\n    error NotEnoughFunds();\\n\\n    /// @notice The length of the BLS Public key is invalid during deposit\\n    error InconsistentPublicKeys();\\n\\n    /// @notice The length of the BLS Signature is invalid during deposit\\n    error InconsistentSignatures();\\n\\n    /// @notice The internal key retrieval returned no keys\\n    error NoAvailableValidatorKeys();\\n\\n    /// @notice The received count of public keys to deposit is invalid\\n    error InvalidPublicKeyCount();\\n\\n    /// @notice The received count of signatures to deposit is invalid\\n    error InvalidSignatureCount();\\n\\n    /// @notice The withdrawal credentials value is null\\n    error InvalidWithdrawalCredentials();\\n\\n    /// @notice An error occured during the deposit\\n    error ErrorOnDeposit();\\n\\n    /// @notice Invalid deposit root\\n    error InvalidDepositRoot();\\n\\n    // @notice Not keeper\\n    error OnlyKeeper();\\n\\n    /// @notice Returns the amount of ETH not yet committed for deposit\\n    /// @return The amount of ETH not yet committed for deposit\\n    function getBalanceToDeposit() external view returns (uint256);\\n\\n    /// @notice Returns the amount of ETH committed for deposit\\n    /// @return The amount of ETH committed for deposit\\n    function getCommittedBalance() external view returns (uint256);\\n\\n    /// @notice Retrieve the withdrawal credentials\\n    /// @return The withdrawal credentials\\n    function getWithdrawalCredentials() external view returns (bytes32);\\n\\n    /// @notice Get the deposited validator count (the count of deposits made by the contract)\\n    /// @return The deposited validator count\\n    function getDepositedValidatorCount() external view returns (uint256);\\n\\n    /// @notice Get the keeper address\\n    /// @return The keeper address\\n    function getKeeper() external view returns (address);\\n\\n    /// @notice Deposits current balance to the Consensus Layer by batches of 32 ETH\\n    /// @param _maxCount The maximum amount of validator keys to fund\\n    /// @param _depositRoot The root of the deposit tree\\n    function depositToConsensusLayerWithDepositRoot(uint256 _maxCount, bytes32 _depositRoot) external;\\n}\\n\",\"keccak256\":\"0xd7e41b30bdc6108f85633988ac53e9196285cee3d28c978054deb76b2268915d\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IOracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../state/river/CLSpec.sol\\\";\\nimport \\\"../../state/river/ReportBounds.sol\\\";\\n\\n/// @title Oracle Manager (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This interface exposes methods to handle the inputs provided by the oracle\\ninterface IOracleManagerV1 {\\n    /// @notice The stored oracle address changed\\n    /// @param oracleAddress The new oracle address\\n    event SetOracle(address indexed oracleAddress);\\n\\n    /// @notice The consensus layer data provided by the oracle has been updated\\n    /// @param validatorCount The new count of validators running on the consensus layer\\n    /// @param validatorTotalBalance The new total balance sum of all validators\\n    /// @param roundId Round identifier\\n    event ConsensusLayerDataUpdate(uint256 validatorCount, uint256 validatorTotalBalance, bytes32 roundId);\\n\\n    /// @notice The Consensus Layer Spec is changed\\n    /// @param epochsPerFrame The number of epochs inside a frame\\n    /// @param slotsPerEpoch The number of slots inside an epoch\\n    /// @param secondsPerSlot The number of seconds inside a slot\\n    /// @param genesisTime The genesis timestamp\\n    /// @param epochsToAssumedFinality The number of epochs before an epoch is considered final\\n    event SetSpec(\\n        uint64 epochsPerFrame,\\n        uint64 slotsPerEpoch,\\n        uint64 secondsPerSlot,\\n        uint64 genesisTime,\\n        uint64 epochsToAssumedFinality\\n    );\\n\\n    /// @notice The Report Bounds are changed\\n    /// @param annualAprUpperBound The reporting upper bound\\n    /// @param relativeLowerBound The reporting lower bound\\n    event SetBounds(uint256 annualAprUpperBound, uint256 relativeLowerBound);\\n\\n    /// @notice The provided report has beend processed\\n    /// @param report The report that was provided\\n    /// @param trace The trace structure providing more insights on internals\\n    event ProcessedConsensusLayerReport(\\n        IOracleManagerV1.ConsensusLayerReport report, ConsensusLayerDataReportingTrace trace\\n    );\\n\\n    /// @notice The reported validator count is invalid\\n    /// @param providedValidatorCount The received validator count value\\n    /// @param depositedValidatorCount The number of deposits performed by the system\\n    /// @param lastReportedValidatorCount The last reported validator count\\n    error InvalidValidatorCountReport(\\n        uint256 providedValidatorCount, uint256 depositedValidatorCount, uint256 lastReportedValidatorCount\\n    );\\n\\n    /// @notice Thrown when an invalid epoch was reported\\n    /// @param epoch Invalid epoch\\n    error InvalidEpoch(uint256 epoch);\\n\\n    /// @notice The balance increase is higher than the maximum allowed by the upper bound\\n    /// @param prevTotalEthIncludingExited The previous total balance, including all exited balance\\n    /// @param postTotalEthIncludingExited The post-report total balance, including all exited balance\\n    /// @param timeElapsed The time in seconds since last report\\n    /// @param annualAprUpperBound The upper bound value that was used\\n    error TotalValidatorBalanceIncreaseOutOfBound(\\n        uint256 prevTotalEthIncludingExited,\\n        uint256 postTotalEthIncludingExited,\\n        uint256 timeElapsed,\\n        uint256 annualAprUpperBound\\n    );\\n\\n    /// @notice The balance decrease is higher than the maximum allowed by the lower bound\\n    /// @param prevTotalEthIncludingExited The previous total balance, including all exited balance\\n    /// @param postTotalEthIncludingExited The post-report total balance, including all exited balance\\n    /// @param timeElapsed The time in seconds since last report\\n    /// @param relativeLowerBound The lower bound value that was used\\n    error TotalValidatorBalanceDecreaseOutOfBound(\\n        uint256 prevTotalEthIncludingExited,\\n        uint256 postTotalEthIncludingExited,\\n        uint256 timeElapsed,\\n        uint256 relativeLowerBound\\n    );\\n\\n    /// @notice The total exited balance decreased\\n    /// @param currentValidatorsExitedBalance The current exited balance\\n    /// @param newValidatorsExitedBalance The new exited balance\\n    error InvalidDecreasingValidatorsExitedBalance(\\n        uint256 currentValidatorsExitedBalance, uint256 newValidatorsExitedBalance\\n    );\\n\\n    /// @notice The total skimmed balance decreased\\n    /// @param currentValidatorsSkimmedBalance The current exited balance\\n    /// @param newValidatorsSkimmedBalance The new exited balance\\n    error InvalidDecreasingValidatorsSkimmedBalance(\\n        uint256 currentValidatorsSkimmedBalance, uint256 newValidatorsSkimmedBalance\\n    );\\n\\n    /// @notice Trace structure emitted via logs during reporting\\n    struct ConsensusLayerDataReportingTrace {\\n        uint256 rewards;\\n        uint256 pulledELFees;\\n        uint256 pulledRedeemManagerExceedingEthBuffer;\\n        uint256 pulledCoverageFunds;\\n    }\\n\\n    /// @notice The format of the oracle report\\n    struct ConsensusLayerReport {\\n        // this is the epoch at which the report was performed\\n        // data should be fetched up to the state of this epoch by the oracles\\n        uint256 epoch;\\n        // the sum of all the validator balances on the consensus layer\\n        // when a validator enters the exit queue, the validator is considered stopped, its balance is accounted in both validatorsExitingBalance and validatorsBalance\\n        // when a validator leaves the exit queue and the funds are sweeped onto the execution layer, the balance is only accounted in validatorsExitedBalance and not in validatorsBalance\\n        // this value can decrease between reports\\n        uint256 validatorsBalance;\\n        // the sum of all the skimmings performed on the validators\\n        // these values can be found in the execution layer block bodies under the withdrawals field\\n        // a withdrawal is considered skimming if\\n        // - the epoch at which it happened is < validator.withdrawableEpoch\\n        // - the epoch at which it happened is >= validator.withdrawableEpoch and in that case we only account for what would be above 32 eth as skimming\\n        // this value cannot decrease over reports\\n        uint256 validatorsSkimmedBalance;\\n        // the sum of all the exits performed on the validators\\n        // these values can be found in the execution layer block bodies under the withdrawals field\\n        // a withdrawal is considered exit if\\n        // - the epoch at which it happened is >= validator.withdrawableEpoch and in that case we only account for what would be <= 32 eth as exit\\n        // this value cannot decrease over reports\\n        uint256 validatorsExitedBalance;\\n        // the sum of all the exiting balance, which is all the validators on their way to get sweeped and exited\\n        // this includes voluntary exits and slashings\\n        // this value can decrease between reports\\n        uint256 validatorsExitingBalance;\\n        // the count of activated validators\\n        // even validators that are exited are still accounted\\n        // this value cannot decrease over reports\\n        uint32 validatorsCount;\\n        // an array containing the count of stopped validators per operator\\n        // the first element of the array is the sum of all stopped validators\\n        // then index 1 would be operator 0\\n        // these values cannot decrease over reports\\n        uint32[] stoppedValidatorCountPerOperator;\\n        // flag enabled by the oracles when the buffer rebalancing is activated\\n        // the activation logic is written in the oracle specification and all oracle members must agree on the activation\\n        // when active, the eth in the deposit buffer can be used to pay for exits in the redeem manager\\n        bool rebalanceDepositToRedeemMode;\\n        // flag enabled by the oracles when the slashing containment is activated\\n        // the activation logic is written in the oracle specification and all oracle members must agree on the activation\\n        // This flag is activated when a pre-defined threshold of slashed validators in our set of validators is reached\\n        // This flag is deactivated when a bottom threshold is met, this means that when we reach the upper threshold and activate the flag, we will deactivate it when we reach the bottom threshold and not before\\n        // when active, no more validator exits can be requested by the protocol\\n        bool slashingContainmentMode;\\n    }\\n\\n    /// @notice The format of the oracle report in storage\\n    /// @notice These fields have the exact same function as the ones in ConsensusLayerReport, but this struct is optimized for storage\\n    struct StoredConsensusLayerReport {\\n        uint256 epoch;\\n        uint256 validatorsBalance;\\n        uint256 validatorsSkimmedBalance;\\n        uint256 validatorsExitedBalance;\\n        uint256 validatorsExitingBalance;\\n        uint32 validatorsCount;\\n        bool rebalanceDepositToRedeemMode;\\n        bool slashingContainmentMode;\\n    }\\n\\n    /// @notice Get oracle address\\n    /// @return The oracle address\\n    function getOracle() external view returns (address);\\n\\n    /// @notice Get CL validator total balance\\n    /// @return The CL Validator total balance\\n    function getCLValidatorTotalBalance() external view returns (uint256);\\n\\n    /// @notice Get CL validator count (the amount of validator reported by the oracles)\\n    /// @return The CL validator count\\n    function getCLValidatorCount() external view returns (uint256);\\n\\n    /// @notice Verifies if the provided epoch is valid\\n    /// @param epoch The epoch to lookup\\n    /// @return True if valid\\n    function isValidEpoch(uint256 epoch) external view returns (bool);\\n\\n    /// @notice Retrieve the block timestamp\\n    /// @return The current timestamp from the EVM context\\n    function getTime() external view returns (uint256);\\n\\n    /// @notice Retrieve expected epoch id\\n    /// @return The current expected epoch id\\n    function getExpectedEpochId() external view returns (uint256);\\n\\n    /// @notice Retrieve the last completed epoch id\\n    /// @return The last completed epoch id\\n    function getLastCompletedEpochId() external view returns (uint256);\\n\\n    /// @notice Retrieve the current epoch id based on block timestamp\\n    /// @return The current epoch id\\n    function getCurrentEpochId() external view returns (uint256);\\n\\n    /// @notice Retrieve the current cl spec\\n    /// @return The Consensus Layer Specification\\n    function getCLSpec() external view returns (CLSpec.CLSpecStruct memory);\\n\\n    /// @notice Retrieve the current frame details\\n    /// @return _startEpochId The epoch at the beginning of the frame\\n    /// @return _startTime The timestamp of the beginning of the frame in seconds\\n    /// @return _endTime The timestamp of the end of the frame in seconds\\n    function getCurrentFrame() external view returns (uint256 _startEpochId, uint256 _startTime, uint256 _endTime);\\n\\n    /// @notice Retrieve the first epoch id of the frame of the provided epoch id\\n    /// @param _epochId Epoch id used to get the frame\\n    /// @return The first epoch id of the frame containing the given epoch id\\n    function getFrameFirstEpochId(uint256 _epochId) external view returns (uint256);\\n\\n    /// @notice Retrieve the report bounds\\n    /// @return The report bounds\\n    function getReportBounds() external view returns (ReportBounds.ReportBoundsStruct memory);\\n\\n    /// @notice Retrieve the last consensus layer report\\n    /// @return The stored consensus layer report\\n    function getLastConsensusLayerReport() external view returns (IOracleManagerV1.StoredConsensusLayerReport memory);\\n\\n    /// @notice Set the oracle address\\n    /// @param _oracleAddress Address of the oracle\\n    function setOracle(address _oracleAddress) external;\\n\\n    /// @notice Set the consensus layer spec\\n    /// @param _newValue The new consensus layer spec value\\n    function setCLSpec(CLSpec.CLSpecStruct calldata _newValue) external;\\n\\n    /// @notice Set the report bounds\\n    /// @param _newValue The new report bounds value\\n    function setReportBounds(ReportBounds.ReportBoundsStruct calldata _newValue) external;\\n\\n    /// @notice Performs all the reporting logics\\n    /// @param _report The consensus layer report structure\\n    function setConsensusLayerData(ConsensusLayerReport calldata _report) external;\\n}\\n\",\"keccak256\":\"0x9109a0a200d62513d217b41d4904d7bbd2a87ec7d3f5a5e683e13ba76c8bcd2e\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/ISharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Shares Manager Interface (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This interface exposes methods to handle the shares of the depositor and the ERC20 interface\\ninterface ISharesManagerV1 is IERC20 {\\n    /// @notice Emitted when the total supply is changed\\n    event SetTotalSupply(uint256 totalSupply);\\n\\n    /// @notice Balance too low to perform operation\\n    error BalanceTooLow();\\n\\n    /// @notice Allowance too low to perform operation\\n    /// @param _from Account where funds are sent from\\n    /// @param _operator Account attempting the transfer\\n    /// @param _allowance Current allowance\\n    /// @param _value Requested transfer value in shares\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n\\n    /// @notice Invalid empty transfer\\n    error NullTransfer();\\n\\n    /// @notice Invalid transfer recipients\\n    /// @param _from Account sending the funds in the invalid transfer\\n    /// @param _to Account receiving the funds in the invalid transfer\\n    error UnauthorizedTransfer(address _from, address _to);\\n\\n    /// @notice Retrieve the token name\\n    /// @return The token name\\n    function name() external pure returns (string memory);\\n\\n    /// @notice Retrieve the token symbol\\n    /// @return The token symbol\\n    function symbol() external pure returns (string memory);\\n\\n    /// @notice Retrieve the decimal count\\n    /// @return The decimal count\\n    function decimals() external pure returns (uint8);\\n\\n    /// @notice Retrieve the total token supply\\n    /// @return The total supply in shares\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the total underlying asset supply\\n    /// @return The total underlying asset supply\\n    function totalUnderlyingSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The balance of the account in shares\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The underlying balance of the account\\n    function balanceOfUnderlying(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance from an amount of shares\\n    /// @param _shares Amount of shares to convert\\n    /// @return The underlying asset balance represented by the shares\\n    function underlyingBalanceFromShares(uint256 _shares) external view returns (uint256);\\n\\n    /// @notice Retrieve the shares count from an underlying asset amount\\n    /// @param _underlyingAssetAmount Amount of underlying asset to convert\\n    /// @return The amount of shares worth the underlying asset amopunt\\n    function sharesFromUnderlyingBalance(uint256 _underlyingAssetAmount) external view returns (uint256);\\n\\n    /// @notice Retrieve the allowance value for a spender\\n    /// @param _owner Address that issued the allowance\\n    /// @param _spender Address that received the allowance\\n    /// @return The allowance in shares for a given spender\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    /// @notice Performs a transfer from the message sender to the provided account\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Performs a transfer between two recipients\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Approves an account for future spendings\\n    /// @dev An approved account can use transferFrom to transfer funds on behalf of the token owner\\n    /// @param _spender Address that is allowed to spend the tokens\\n    /// @param _value The allowed amount in shares, will override previous value\\n    /// @return True if success\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    /// @notice Increase allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _additionalValue Amount of shares to add\\n    /// @return True if success\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool);\\n\\n    /// @notice Decrease allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _subtractableValue Amount of shares to subtract\\n    /// @return True if success\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool);\\n}\\n\",\"keccak256\":\"0xbbbc45cddcad60c43e2f78a0a075f3f171f9606a9142d692138f09093ef3f451\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IUserDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title User Deposit Manager (v1)\\n/// @author Alluvial Finance Inc.\\n/// @notice This interface exposes methods to handle the inbound transfers cases or the explicit submissions\\ninterface IUserDepositManagerV1 {\\n    /// @notice User deposited ETH in the system\\n    /// @param depositor Address performing the deposit\\n    /// @param recipient Address receiving the minted shares\\n    /// @param amount Amount in ETH deposited\\n    event UserDeposit(address indexed depositor, address indexed recipient, uint256 amount);\\n\\n    /// @notice And empty deposit attempt was made\\n    error EmptyDeposit();\\n\\n    /// @notice Explicit deposit method to mint on msg.sender\\n    function deposit() external payable;\\n\\n    /// @notice Explicit deposit method to mint on msg.sender and transfer to _recipient\\n    /// @param _recipient Address receiving the minted LsETH\\n    function depositAndTransfer(address _recipient) external payable;\\n\\n    /// @notice Implicit deposit method, when the user performs a regular transfer to the contract\\n    receive() external payable;\\n\\n    /// @notice Invalid call, when the user sends a transaction with a data payload but no method matched\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x883f8d2b25d540915ac4cfededee1c4ee3f4ca90e3fe71748fd0e4b46d752c6a\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\nimport \\\"../state/shared/PendingAdministratorAddress.sol\\\";\\n\\n/// @title Lib Administrable\\n/// @author Alluvial Finance Inc.\\n/// @notice This library handles the admin and pending admin storage vars\\nlibrary LibAdministrable {\\n    /// @notice Retrieve the system admin\\n    /// @return The address of the system admin\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n\\n    /// @notice Retrieve the pending system admin\\n    /// @return The adress of the pending system admin\\n    function _getPendingAdmin() internal view returns (address) {\\n        return PendingAdministratorAddress.get();\\n    }\\n\\n    /// @notice Sets the system admin\\n    /// @param _admin New system admin\\n    function _setAdmin(address _admin) internal {\\n        AdministratorAddress.set(_admin);\\n    }\\n\\n    /// @notice Sets the pending system admin\\n    /// @param _pendingAdmin New pending system admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        PendingAdministratorAddress.set(_pendingAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0x09f683441ee60515cb51439c3e98d94e0ee356381e82ce6b12ee7d4ab41f7448\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibAllowlistMasks.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Lib Allowlist Masks\\n/// @notice Holds all the mask values\\nlibrary LibAllowlistMasks {\\n    /// @notice Mask used for denied accounts\\n    uint256 internal constant DENY_MASK = 0x1 << 255;\\n    /// @notice The mask for the deposit right\\n    uint256 internal constant DEPOSIT_MASK = 0x1;\\n    /// @notice The mask for the donation right\\n    uint256 internal constant DONATE_MASK = 0x1 << 1;\\n    /// @notice The mask for the redeem right\\n    uint256 internal constant REDEEM_MASK = 0x1 << 2;\\n}\\n\",\"keccak256\":\"0xa72bc9ec8a96a0eb01f207da9ac1c384415d43490cf2f53b89a190713ff8c359\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibBasisPoints.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Lib Basis Points\\n/// @notice Holds the basis points max value\\nlibrary LibBasisPoints {\\n    /// @notice The max value for basis points (represents 100%)\\n    uint256 internal constant BASIS_POINTS_MAX = 10_000;\\n}\\n\",\"keccak256\":\"0x87e0393c2317b33ae449221747b42f7237362adf9b7a0902433d57574473303a\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibBytes.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Lib Bytes\\n/// @notice This library helps manipulating bytes\\nlibrary LibBytes {\\n    /// @notice The length overflows an uint\\n    error SliceOverflow();\\n\\n    /// @notice The slice is outside of the initial bytes bounds\\n    error SliceOutOfBounds();\\n\\n    /// @notice Slices the provided bytes\\n    /// @param _bytes Bytes to slice\\n    /// @param _start The starting index of the slice\\n    /// @param _length The length of the slice\\n    /// @return The slice of _bytes starting at _start of length _length\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\n        unchecked {\\n            if (_length + 31 < _length) {\\n                revert SliceOverflow();\\n            }\\n        }\\n        if (_bytes.length < _start + _length) {\\n            revert SliceOutOfBounds();\\n        }\\n\\n        bytes memory tempBytes;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } { mstore(mc, mload(cc)) }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0x395f4eb419d1499a9e9f7f9924e07563744827320d0edabdc9caeae0635585f2\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibErrors.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Lib Errors\\n/// @notice Library of common errors\\nlibrary LibErrors {\\n    /// @notice The operator is unauthorized for the caller\\n    /// @param caller Address performing the call\\n    error Unauthorized(address caller);\\n\\n    /// @notice The call was invalid\\n    error InvalidCall();\\n\\n    /// @notice The argument was invalid\\n    error InvalidArgument();\\n\\n    /// @notice The address is zero\\n    error InvalidZeroAddress();\\n\\n    /// @notice The string is empty\\n    error InvalidEmptyString();\\n\\n    /// @notice The fee is invalid\\n    error InvalidFee();\\n}\\n\",\"keccak256\":\"0xc6f936719c01ce7ee4ba9ef66e8af75ca8a09b216efd38c0d66d87d08b05bc95\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibSanitize.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"./LibErrors.sol\\\";\\nimport \\\"./LibBasisPoints.sol\\\";\\n\\n/// @title Lib Sanitize\\n/// @notice Utilities to sanitize input values\\nlibrary LibSanitize {\\n    /// @notice Reverts if address is 0\\n    /// @param _address Address to check\\n    function _notZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert LibErrors.InvalidZeroAddress();\\n        }\\n    }\\n\\n    /// @notice Reverts if string is empty\\n    /// @param _string String to check\\n    function _notEmptyString(string memory _string) internal pure {\\n        if (bytes(_string).length == 0) {\\n            revert LibErrors.InvalidEmptyString();\\n        }\\n    }\\n\\n    /// @notice Reverts if fee is invalid\\n    /// @param _fee Fee to check\\n    function _validFee(uint256 _fee) internal pure {\\n        if (_fee > LibBasisPoints.BASIS_POINTS_MAX) {\\n            revert LibErrors.InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce078083ab565058f68cd7be35ffeb0d88ab990a769c905094520a46edbccfee\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibUint256.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Lib Uint256\\n/// @notice Utilities to perform uint operations\\nlibrary LibUint256 {\\n    /// @notice Converts a value to little endian (64 bits)\\n    /// @param _value The value to convert\\n    /// @return result The converted value\\n    function toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n        uint256 tempValue = _value;\\n        result = tempValue & 0xFF;\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        assert(0 == tempValue); // fully converted\\n        result <<= (24 * 8);\\n    }\\n\\n    /// @notice Returns the minimum value\\n    /// @param _a First value\\n    /// @param _b Second value\\n    /// @return Smallest value between _a and _b\\n    function min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a > _b ? _b : _a);\\n    }\\n\\n    /// @notice Returns the max value\\n    /// @param _a First value\\n    /// @param _b Second value\\n    /// @return Highest value between _a and _b\\n    function max(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a < _b ? _b : _a);\\n    }\\n\\n    /// @notice Performs a ceiled division\\n    /// @param _a Numerator\\n    /// @param _b Denominator\\n    /// @return ceil(_a / _b)\\n    function ceil(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a / _b) + (_a % _b > 0 ? 1 : 0);\\n    }\\n}\\n\",\"keccak256\":\"0x18d3a772fd7ee36faa69bd6d97f0d3eeae39b90ff42c1f66352650f09a940e17\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibUnstructuredStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.20;\\n\\n/// @title Lib Unstructured Storage\\n/// @notice Utilities to work with unstructured storage\\nlibrary LibUnstructuredStorage {\\n    /// @notice Retrieve a bool value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bool value\\n    function getStorageBool(bytes32 _position) internal view returns (bool data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an address value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The address value\\n    function getStorageAddress(bytes32 _position) internal view returns (address data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve a bytes32 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bytes32 value\\n    function getStorageBytes32(bytes32 _position) internal view returns (bytes32 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an uint256 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The uint256 value\\n    function getStorageUint256(bytes32 _position) internal view returns (uint256 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Sets a bool value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bool value to set\\n    function setStorageBool(bytes32 _position, bool _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an address value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The address value to set\\n    function setStorageAddress(bytes32 _position, address _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets a bytes32 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bytes32 value to set\\n    function setStorageBytes32(bytes32 _position, bytes32 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an uint256 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The uint256 value to set\\n    function setStorageUint256(bytes32 _position, uint256 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe48b249b789acdd6f9e1b80f6b1dc3fc69d5593c8b836fad803b7d9fd10dd841\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/operatorsRegistry/Operators.2.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Operators Storage\\n/// @notice Utility to manage the Operators in storage\\nlibrary OperatorsV2 {\\n    /// @notice Storage slot of the Operators\\n    bytes32 internal constant OPERATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.v2.operators\\\")) - 1);\\n\\n    /// @notice The Operator structure in storage\\n    struct Operator {\\n        /// @dev The following values respect this invariant:\\n        /// @dev     keys >= limit >= funded >= RequestedExits\\n\\n        /// @custom:attribute Staking limit of the operator\\n        uint32 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint32 funded;\\n        /// @custom:attribute The count of exit requests made to this operator\\n        uint32 requestedExits;\\n        /// @custom:attribute The total count of keys of the operator\\n        uint32 keys;\\n        /// @custom attribute The block at which the last edit happened in the operator details\\n        uint64 latestKeysEditBlockNumber;\\n        /// @custom:attribute True if the operator is active and allowed to operate on River\\n        bool active;\\n        /// @custom:attribute Display name of the operator\\n        string name;\\n        /// @custom:attribute Address of the operator\\n        address operator;\\n    }\\n\\n    /// @notice The Operator structure when loaded in memory\\n    struct CachedOperator {\\n        /// @custom:attribute Staking limit of the operator\\n        uint32 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint32 funded;\\n        /// @custom:attribute The count of exit requests made to this operator\\n        uint32 requestedExits;\\n        /// @custom:attribute The original index of the operator\\n        uint32 index;\\n        /// @custom:attribute The amount of picked keys, buffer used before changing funded in storage\\n        uint32 picked;\\n    }\\n\\n    /// @notice The Operator structure when loaded in memory for the exit selection\\n    struct CachedExitableOperator {\\n        /// @custom:attribute The count of funded validators\\n        uint32 funded;\\n        /// @custom:attribute The count of exit requests made to this operator\\n        uint32 requestedExits;\\n        /// @custom:attribute The original index of the operator\\n        uint32 index;\\n        /// @custom:attribute The amount of picked keys, buffer used before changing funded in storage\\n        uint32 picked;\\n    }\\n\\n    /// @notice The structure at the storage slot\\n    struct SlotOperator {\\n        /// @custom:attribute Array containing all the operators\\n        Operator[] value;\\n    }\\n\\n    /// @notice The operator was not found\\n    /// @param index The provided index\\n    error OperatorNotFound(uint256 index);\\n\\n    /// @notice Retrieve the operator in storage\\n    /// @param _index The index of the operator\\n    /// @return The Operator structure\\n    function get(uint256 _index) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (r.value.length <= _index) {\\n            revert OperatorNotFound(_index);\\n        }\\n\\n        return r.value[_index];\\n    }\\n\\n    /// @notice Retrieve the operators in storage\\n    /// @return The Operator structure array\\n    function getAll() internal view returns (Operator[] storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Retrieve the operator count in storage\\n    /// @return The count of operators in storage\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Retrieve all the active operators\\n    /// @return The list of active operator structures\\n    function getAllActive() internal view returns (Operator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n        uint256 operatorCount = r.value.length;\\n        Operator[] memory activeOperators = new Operator[](operatorCount);\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                activeOperators[activeCount] = r.value[idx];\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(activeOperators, activeCount)\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    /// @notice Retrieve the stopped validator count for an operator by its index\\n    /// @param stoppedValidatorCounts The storage pointer to the raw array containing the stopped validator counts\\n    /// @param index The index of the operator to lookup\\n    /// @return The amount of stopped validators for the given operator index\\n    function _getStoppedValidatorCountAtIndex(uint32[] storage stoppedValidatorCounts, uint256 index)\\n        internal\\n        view\\n        returns (uint32)\\n    {\\n        if (index + 1 >= stoppedValidatorCounts.length) {\\n            return 0;\\n        }\\n        return stoppedValidatorCounts[index + 1];\\n    }\\n\\n    /// @notice Retrieve all the active and fundable operators\\n    /// @dev This method will return a memory array of length equal to the number of operator, but only\\n    /// @dev populated up to the fundable operator count, also returned by the method\\n    /// @return The list of active and fundable operators\\n    /// @return The count of active and fundable operators\\n    function getAllFundable() internal view returns (CachedOperator[] memory, uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 fundableCount = 0;\\n        uint256 operatorCount = r.value.length;\\n        CachedOperator[] memory fundableOperators = new CachedOperator[](operatorCount);\\n\\n        uint32[] storage stoppedValidatorCounts = getStoppedValidators();\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (\\n                _hasFundableKeys(r.value[idx])\\n                    && _getStoppedValidatorCountAtIndex(stoppedValidatorCounts, idx) >= r.value[idx].requestedExits\\n            ) {\\n                Operator storage op = r.value[idx];\\n                fundableOperators[fundableCount] = CachedOperator({\\n                    limit: op.limit,\\n                    funded: op.funded,\\n                    requestedExits: op.requestedExits,\\n                    index: uint32(idx),\\n                    picked: 0\\n                });\\n                unchecked {\\n                    ++fundableCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(fundableOperators, fundableCount)\\n        }\\n\\n        return (fundableOperators, fundableCount);\\n    }\\n\\n    /// @notice Retrieve all the active and exitable operators\\n    /// @dev This method will return a memory array of length equal to the number of operator, but only\\n    /// @dev populated up to the exitable operator count, also returned by the method\\n    /// @return The list of active and exitable operators\\n    /// @return The count of active and exitable operators\\n    function getAllExitable() internal view returns (CachedExitableOperator[] memory, uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 exitableCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        CachedExitableOperator[] memory exitableOperators = new CachedExitableOperator[](operatorCount);\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (_hasExitableKeys(r.value[idx])) {\\n                Operator storage op = r.value[idx];\\n                exitableOperators[exitableCount] = CachedExitableOperator({\\n                    funded: op.funded,\\n                    requestedExits: op.requestedExits,\\n                    index: uint32(idx),\\n                    picked: 0\\n                });\\n                unchecked {\\n                    ++exitableCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(exitableOperators, exitableCount)\\n        }\\n\\n        return (exitableOperators, exitableCount);\\n    }\\n\\n    /// @notice Add a new operator in storage\\n    /// @param _newOperator Value of the new operator\\n    /// @return The size of the operator array after the operation\\n    function push(Operator memory _newOperator) internal returns (uint256) {\\n        LibSanitize._notZeroAddress(_newOperator.operator);\\n        LibSanitize._notEmptyString(_newOperator.name);\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_newOperator);\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Atomic operation to set the key count and update the latestKeysEditBlockNumber field at the same time\\n    /// @param _index The operator index\\n    /// @param _newKeys The new value for the key count\\n    function setKeys(uint256 _index, uint32 _newKeys) internal {\\n        Operator storage op = get(_index);\\n\\n        op.keys = _newKeys;\\n        op.latestKeysEditBlockNumber = uint64(block.number);\\n    }\\n\\n    /// @notice Checks if an operator is active and has fundable keys\\n    /// @param _operator The operator details\\n    /// @return True if active and fundable\\n    function _hasFundableKeys(OperatorsV2.Operator memory _operator) internal pure returns (bool) {\\n        return (_operator.active && _operator.limit > _operator.funded);\\n    }\\n\\n    /// @notice Checks if an operator is active and has exitable keys\\n    /// @param _operator The operator details\\n    /// @return True if active and exitable\\n    function _hasExitableKeys(OperatorsV2.Operator memory _operator) internal pure returns (bool) {\\n        return (_operator.active && _operator.funded > _operator.requestedExits);\\n    }\\n\\n    /// @notice Storage slot of the Stopped Validators\\n    bytes32 internal constant STOPPED_VALIDATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.stoppedValidators\\\")) - 1);\\n\\n    struct SlotStoppedValidators {\\n        uint32[] value;\\n    }\\n\\n    /// @notice Retrieve the storage pointer of the Stopped Validators array\\n    /// @return The Stopped Validators storage pointer\\n    function getStoppedValidators() internal view returns (uint32[] storage) {\\n        bytes32 slot = STOPPED_VALIDATORS_SLOT;\\n\\n        SlotStoppedValidators storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Sets the entire stopped validators array\\n    /// @param value The new stopped validators array\\n    function setRawStoppedValidators(uint32[] memory value) internal {\\n        bytes32 slot = STOPPED_VALIDATORS_SLOT;\\n\\n        SlotStoppedValidators storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = value;\\n    }\\n}\\n\",\"keccak256\":\"0x553d70a60cb7201d2b82bd0911435637b4055f07039975d1c6a4b26a15c5f1b7\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/redeemManager/RedeemQueue.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Redeem Manager Redeem Queue storage\\n/// @notice Utility to manage the Redeem Queue in the Redeem Manager\\nlibrary RedeemQueue {\\n    /// @notice Storage slot of the Redeem Queue\\n    bytes32 internal constant REDEEM_QUEUE_ID_SLOT = bytes32(uint256(keccak256(\\\"river.state.redeemQueue\\\")) - 1);\\n\\n    /// @notice The Redeemer structure represents the redeem request made by a user\\n    struct RedeemRequest {\\n        /// @custom:attribute The amount of the redeem request in LsETH\\n        uint256 amount;\\n        /// @custom:attribute The maximum amount of ETH redeemable by this request\\n        uint256 maxRedeemableEth;\\n        /// @custom:attribute The recipient of the redeem request\\n        address recipient;\\n        /// @custom:attribute The initiator of the redeem request\\n        address initiator;\\n        /// @custom:attribute The height is the cumulative sum of all the sizes of preceding redeem requests\\n        uint256 height;\\n    }\\n\\n    /// @notice Retrieve the Redeem Queue array storage pointer\\n    /// @return data The Redeem Queue array storage pointer\\n    function get() internal pure returns (RedeemRequest[] storage data) {\\n        bytes32 position = REDEEM_QUEUE_ID_SLOT;\\n        assembly {\\n            data.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb02d466ec8ddf9ce08c8d640c9c0154881daba26abdf8450fe9d5425fa7ae266\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/redeemManager/WithdrawalStack.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Redeem Manager Withdrawal Stack storage\\n/// @notice Utility to manage the Withdrawal Stack in the Redeem Manager\\nlibrary WithdrawalStack {\\n    /// @notice Storage slot of the Withdrawal Stack\\n    bytes32 internal constant WITHDRAWAL_STACK_ID_SLOT = bytes32(uint256(keccak256(\\\"river.state.withdrawalStack\\\")) - 1);\\n\\n    /// @notice The Redeemer structure represents the withdrawal events made by River\\n    struct WithdrawalEvent {\\n        /// @custom:attribute The amount of the withdrawal event in LsETH\\n        uint256 amount;\\n        /// @custom:attribute The amount of the withdrawal event in ETH\\n        uint256 withdrawnEth;\\n        /// @custom:attribute The height is the cumulative sum of all the sizes of preceding withdrawal events\\n        uint256 height;\\n    }\\n\\n    /// @notice Retrieve the Withdrawal Stack array storage pointer\\n    /// @return data The Withdrawal Stack array storage pointer\\n    function get() internal pure returns (WithdrawalEvent[] storage data) {\\n        bytes32 position = WITHDRAWAL_STACK_ID_SLOT;\\n        assembly {\\n            data.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x42624c8f9744dc2b6ba3a34117d8007438e5c62f84bb685911450a94597d748f\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/AllowlistAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Allowlist Address Storage\\n/// @notice Utility to manage the Allowlist Address in storage\\nlibrary AllowlistAddress {\\n    /// @notice Storage slot of the Allowlist Address\\n    bytes32 internal constant ALLOWLIST_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowlistAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Allowlist Address\\n    /// @return The Allowlist Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ALLOWLIST_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Allowlist Address\\n    /// @param _newValue New Allowlist Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ALLOWLIST_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x521f1280210b4df1433882edd38772b257a748c90696db84704fec67029abf54\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/BalanceToDeposit.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\nlibrary BalanceToDeposit {\\n    bytes32 internal constant BALANCE_TO_DEPOSIT_SLOT = bytes32(uint256(keccak256(\\\"river.state.balanceToDeposit\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(BALANCE_TO_DEPOSIT_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(BALANCE_TO_DEPOSIT_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x3db9c6ef8b8705ae885787915736ec045bb45fb8e2e591a8f5b9bbd543e6806b\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/BalanceToRedeem.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\nlibrary BalanceToRedeem {\\n    bytes32 internal constant BALANCE_TO_REDEEM_SLOT = bytes32(uint256(keccak256(\\\"river.state.balanceToRedeem\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(BALANCE_TO_REDEEM_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(BALANCE_TO_REDEEM_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x3816bc6fe79ca82534782359c84d75284410856dc0ae71129efd21e8ae5f650e\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/CLSpec.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Consensus Layer Spec Storage\\n/// @notice Utility to manage the Consensus Layer Spec in storage\\nlibrary CLSpec {\\n    /// @notice Storage slot of the Consensus Layer Spec\\n    bytes32 internal constant CL_SPEC_SLOT = bytes32(uint256(keccak256(\\\"river.state.clSpec\\\")) - 1);\\n\\n    /// @notice The Consensus Layer Spec structure\\n    struct CLSpecStruct {\\n        /// @custom:attribute The count of epochs per frame, 225 means 24h\\n        uint64 epochsPerFrame;\\n        /// @custom:attribute The count of slots in an epoch (32 on mainnet)\\n        uint64 slotsPerEpoch;\\n        /// @custom:attribute The seconds in a slot (12 on mainnet)\\n        uint64 secondsPerSlot;\\n        /// @custom:attribute The block timestamp of the first consensus layer block\\n        uint64 genesisTime;\\n        /// @custom:attribute The count of epochs before considering an epoch final on-chain\\n        uint64 epochsToAssumedFinality;\\n    }\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        CLSpecStruct value;\\n    }\\n\\n    /// @notice Retrieve the Consensus Layer Spec from storage\\n    /// @return The Consensus Layer Spec\\n    function get() internal view returns (CLSpecStruct memory) {\\n        bytes32 slot = CL_SPEC_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Consensus Layer Spec value in storage\\n    /// @param _newCLSpec The new value to set in storage\\n    function set(CLSpecStruct memory _newCLSpec) internal {\\n        bytes32 slot = CL_SPEC_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newCLSpec;\\n    }\\n}\\n\",\"keccak256\":\"0x111bed0ac40bd03195b1091cb1d01b325af7390d5ec5297955cc5567f70fd2cc\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/CLValidatorCount.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Consensus Layer Validator Count Storage\\n/// @notice Utility to manage the Consensus Layer Validator Count in storage\\n/// @notice This state variable is deprecated and was kept due to migration logic needs\\nlibrary CLValidatorCount {\\n    /// @notice Storage slot of the Consensus Layer Validator Count\\n    bytes32 internal constant CL_VALIDATOR_COUNT_SLOT = bytes32(uint256(keccak256(\\\"river.state.clValidatorCount\\\")) - 1);\\n\\n    /// @notice Retrieve the Consensus Layer Validator Count\\n    /// @return The Consensus Layer Validator Count\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(CL_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    /// @notice Sets the Consensus Layer Validator Count\\n    /// @param _newValue New Consensus Layer Validator Count\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(CL_VALIDATOR_COUNT_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xcf705076aafba9ab1f30ee8e96c11229bda257769d4fe682b4d981c22ed023e2\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/CLValidatorTotalBalance.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Consensus Layer Validator Total Balance Storage\\n/// @notice Utility to manage the Consensus Layer Validator Total Balance in storage\\n/// @notice This state variable is deprecated and was kept due to migration logic needs\\nlibrary CLValidatorTotalBalance {\\n    /// @notice Storage slot of the Consensus Layer Validator Total Balance\\n    bytes32 internal constant CL_VALIDATOR_TOTAL_BALANCE_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.clValidatorTotalBalance\\\")) - 1);\\n\\n    /// @notice Retrieve the Consensus Layer Validator Total Balance\\n    /// @return The Consensus Layer Validator Total Balance\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(CL_VALIDATOR_TOTAL_BALANCE_SLOT);\\n    }\\n\\n    /// @notice Sets the Consensus Layer Validator Total Balance\\n    /// @param _newValue New Consensus Layer Validator Total Balance\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(CL_VALIDATOR_TOTAL_BALANCE_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf34fa80b9d1600f28be1d8c25d1f360965a77e695986e89d978a767a951108aa\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/CollectorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Collector Address Storage\\n/// @notice Utility to manage the Collector Address in storage\\nlibrary CollectorAddress {\\n    /// @notice Storage slot of the Collector Address\\n    bytes32 internal constant COLLECTOR_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.collectorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Collector Address\\n    /// @return The Collector Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(COLLECTOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Collector Address\\n    /// @param _newValue New Collector Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(COLLECTOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x77a8d23e758f6a55d375abfb6a6047450c479275f2d0501c86019372fc2b39be\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/CommittedBalance.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\nlibrary CommittedBalance {\\n    bytes32 internal constant COMMITTED_BALANCE_SLOT = bytes32(uint256(keccak256(\\\"river.state.committedBalance\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(COMMITTED_BALANCE_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(COMMITTED_BALANCE_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x56ab454a9a78cfbcd3b6c458ce5c674e20076df6568a4cbc707ca6d784b33637\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/CoverageFundAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Coverage Fund Address Storage\\n/// @notice Utility to manage the Coverage Fund Address in storage\\nlibrary CoverageFundAddress {\\n    /// @notice Storage slot of the Coverage Fund Address\\n    bytes32 internal constant COVERAGE_FUND_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.coverageFundAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Coverage Fund Address\\n    /// @return The Coverage Fund Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(COVERAGE_FUND_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Coverage Fund Address\\n    /// @param _newValue New Coverage Fund Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(COVERAGE_FUND_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x94d5bc05ec64604f24e1e930c5e41fce307cc142723f020a0df1a62ff064b8bb\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DailyCommittableLimits.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Daily Committable Limits storage\\n/// @notice Utility to manage the Daily Committable Limits in storage\\nlibrary DailyCommittableLimits {\\n    /// @notice Storage slot of the Daily Committable Limits storage\\n    bytes32 internal constant DAILY_COMMITTABLE_LIMITS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.dailyCommittableLimits\\\")) - 1);\\n\\n    /// @notice The daily committable limits structure\\n    struct DailyCommittableLimitsStruct {\\n        uint128 minDailyNetCommittableAmount;\\n        uint128 maxDailyRelativeCommittableAmount;\\n    }\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        DailyCommittableLimitsStruct value;\\n    }\\n\\n    /// @notice Retrieve the Daily Committable Limits from storage\\n    /// @return The Daily Committable Limits\\n    function get() internal view returns (DailyCommittableLimitsStruct memory) {\\n        bytes32 slot = DAILY_COMMITTABLE_LIMITS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Daily Committable Limits value in storage\\n    /// @param _newValue The new value to set in storage\\n    function set(DailyCommittableLimitsStruct memory _newValue) internal {\\n        bytes32 slot = DAILY_COMMITTABLE_LIMITS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0x5299d5f41a6f24b09b81a1a00da6db15fbe2aa16718bc435ecb60016897f1f90\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DepositContractAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Deposit Contract Address Storage\\n/// @notice Utility to manage the Deposit Contract Address in storage\\nlibrary DepositContractAddress {\\n    /// @notice Storage slot of the Deposit Contract Address\\n    bytes32 internal constant DEPOSIT_CONTRACT_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositContractAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Deposit Contract Address\\n    /// @return The Deposit Contract Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Deposit Contract Address\\n    /// @param _newValue New Deposit Contract Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf9939d05d65eface7b001a0ee25a33e2c014a0aa2f53ef53ae9dee32fb55c42f\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DepositedValidatorCount.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Deposited Validator Count Storage\\n/// @notice Utility to manage the Deposited Validator Count in storage\\nlibrary DepositedValidatorCount {\\n    /// @notice Storage slot of the Deposited Validator Count\\n    bytes32 internal constant DEPOSITED_VALIDATOR_COUNT_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositedValidatorCount\\\")) - 1);\\n\\n    /// @notice Retrieve the Deposited Validator Count\\n    /// @return The Deposited Validator Count\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    /// @notice Sets the Deposited Validator Count\\n    /// @param _newValue New Deposited Validator Count\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x86b9c93007a05a6bad521558527a66366f7f5ec588a0db86e8d15657eeaabe7e\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/ELFeeRecipientAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Execution Layer Fee Recipient Address Storage\\n/// @notice Utility to manage the Execution Layer Fee Recipient Address in storage\\nlibrary ELFeeRecipientAddress {\\n    /// @notice Storage slot of the Execution Layer Fee Recipient Address\\n    bytes32 internal constant EL_FEE_RECIPIENT_ADDRESS =\\n        bytes32(uint256(keccak256(\\\"river.state.elFeeRecipientAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Execution Layer Fee Recipient Address\\n    /// @return The Execution Layer Fee Recipient Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(EL_FEE_RECIPIENT_ADDRESS);\\n    }\\n\\n    /// @notice Sets the Execution Layer Fee Recipient Address\\n    /// @param _newValue New Execution Layer Fee Recipient Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(EL_FEE_RECIPIENT_ADDRESS, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x5f5a480bdd790869a4f3b4f6b784e2e6a9402180180a9c51b4d1ccfb9bcee164\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/GlobalFee.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Global Fee Storage\\n/// @notice Utility to manage the Global Fee in storage\\nlibrary GlobalFee {\\n    /// @notice Storage slot of the Global Fee\\n    bytes32 internal constant GLOBAL_FEE_SLOT = bytes32(uint256(keccak256(\\\"river.state.globalFee\\\")) - 1);\\n\\n    /// @notice Retrieve the Global Fee\\n    /// @return The Global Fee\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(GLOBAL_FEE_SLOT);\\n    }\\n\\n    /// @notice Sets the Global Fee\\n    /// @param _newValue New Global Fee\\n    function set(uint256 _newValue) internal {\\n        LibSanitize._validFee(_newValue);\\n        LibUnstructuredStorage.setStorageUint256(GLOBAL_FEE_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x52635a1ad3d6ee31e03b5a8e780798c0405b84ba0e7a8dd6013f9f805910dbcb\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/KeeperAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Keeper Address Storage\\n/// @notice Utility to manage the Keeper Address in storage\\nlibrary KeeperAddress {\\n    /// @notice Storage slot of the Keeper Address\\n    bytes32 internal constant KEEPER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.KeeperAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Keeper Address\\n    /// @return The Keeper Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(KEEPER_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Keeper Address\\n    /// @param _newValue New Keeper Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(KEEPER_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf5de3f98362d56bd5451edd177fc31d12c65947e5f81dbe171f1ea0125aafbc2\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/LastConsensusLayerReport.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../interfaces/components/IOracleManager.1.sol\\\";\\n\\n/// @title Last Consensus Layer Report Storage\\n/// @notice Utility to manage the Last Consensus Layer Report in storage\\nlibrary LastConsensusLayerReport {\\n    /// @notice Storage slot of the Last Consensus Layer Report\\n    bytes32 internal constant LAST_CONSENSUS_LAYER_REPORT_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.lastConsensusLayerReport\\\")) - 1);\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        IOracleManagerV1.StoredConsensusLayerReport value;\\n    }\\n\\n    /// @notice Retrieve the Last Consensus Layer Report from storage\\n    /// @return The Last Consensus Layer Report\\n    function get() internal view returns (IOracleManagerV1.StoredConsensusLayerReport storage) {\\n        bytes32 slot = LAST_CONSENSUS_LAYER_REPORT_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Last Consensus Layer Report value in storage\\n    /// @param _newValue The new value to set in storage\\n    function set(IOracleManagerV1.StoredConsensusLayerReport memory _newValue) internal {\\n        bytes32 slot = LAST_CONSENSUS_LAYER_REPORT_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0xb16622290baa521062b6b5551bc36c8cd1e10402ef8ae92414c5cf9b2138137f\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/LastOracleRoundId.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Last Oracle Round Id Storage\\n/// @notice Utility to manage the Last Oracle Round Id in storage\\n/// @notice This state variable is deprecated and was kept due to migration logic needs\\nlibrary LastOracleRoundId {\\n    /// @notice Storage slot of the Last Oracle Round Id\\n    bytes32 internal constant LAST_ORACLE_ROUND_ID_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.lastOracleRoundId\\\")) - 1);\\n\\n    /// @notice Retrieve the Last Oracle Round Id\\n    /// @return The Last Oracle Round Id\\n    function get() internal view returns (bytes32) {\\n        return LibUnstructuredStorage.getStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT);\\n    }\\n\\n    /// @notice Sets the Last Oracle Round Id\\n    /// @param _newValue New Last Oracle Round Id\\n    function set(bytes32 _newValue) internal {\\n        LibUnstructuredStorage.setStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xc46560ec7006823d9a86e10cae22ae720b89cbfde630bc6e85d5e6cb893a2275\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/MetadataURI.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Metadata URI Storage\\n/// @notice Utility to manage the Metadata in storage\\nlibrary MetadataURI {\\n    /// @notice Storage slot of the Metadata URI\\n    bytes32 internal constant METADATA_URI_SLOT = bytes32(uint256(keccak256(\\\"river.state.metadataUri\\\")) - 1);\\n\\n    /// @notice Structure in storage\\n    struct Slot {\\n        /// @custom:attribute The metadata value\\n        string value;\\n    }\\n\\n    /// @notice Retrieve the metadata URI\\n    /// @return The metadata URI string\\n    function get() internal view returns (string memory) {\\n        bytes32 slot = METADATA_URI_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the metadata URI value\\n    /// @param _newValue The new metadata URI value\\n    function set(string memory _newValue) internal {\\n        bytes32 slot = METADATA_URI_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0xeb2775f9b9a31c54ce2e696f0d6a557617f3dfab2ca4e056ca270df9e0bc4e72\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/OperatorsRegistryAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Operators Registry Address Storage\\n/// @notice Utility to manage the Operators Registry Address in storage\\nlibrary OperatorsRegistryAddress {\\n    /// @notice Storage slot of the Operators Registry Address\\n    bytes32 internal constant OPERATORS_REGISTRY_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.operatorsRegistryAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Operators Registry Address\\n    /// @return The Operators Registry Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(OPERATORS_REGISTRY_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Operators Registry Address\\n    /// @param _newValue New Operators Registry Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(OPERATORS_REGISTRY_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x67ecec89b526d86cc1db2feb5cbfbf523a5b3c6bd2aaa5425e95838ac2ee1e2d\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/OracleAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Oracle Address Storage\\n/// @notice Utility to manage the Oracle Address in storage\\nlibrary OracleAddress {\\n    /// @notice Storage slot of the Oracle Address\\n    bytes32 internal constant ORACLE_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.oracleAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Oracle Address\\n    /// @return The Oracle Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ORACLE_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Oracle Address\\n    /// @param _newValue New Oracle Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ORACLE_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf3de7d2c8746c652fb99118b1c7230f48cf4a6762cf04d12db3709431476a285\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/RedeemManagerAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Redeem Manager Address Storage\\n/// @notice Utility to manage the Redeem Manager Address in storage\\nlibrary RedeemManagerAddress {\\n    /// @notice Storage slot of the Redeem Manager Address\\n    bytes32 internal constant REDEEM_MANAGER_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.redeemManagerAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Redeem Manager Address\\n    /// @return The Redeem Manager Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(REDEEM_MANAGER_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Redeem Manager Address\\n    /// @param _newValue New Redeem Manager Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(REDEEM_MANAGER_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x85a32c744bfcfacfd6b56d47206e1cb978b928bf1432604f4d48a89752081f89\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/ReportBounds.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Report Bounds Storage\\n/// @notice Utility to manage the Report Bounds in storage\\nlibrary ReportBounds {\\n    /// @notice Storage slot of the Report Bounds\\n    bytes32 internal constant REPORT_BOUNDS_SLOT = bytes32(uint256(keccak256(\\\"river.state.reportBounds\\\")) - 1);\\n\\n    /// @notice The Report Bounds structure\\n    struct ReportBoundsStruct {\\n        /// @custom:attribute The maximum allowed annual apr, checked before submitting a report to River\\n        uint256 annualAprUpperBound;\\n        /// @custom:attribute The maximum allowed balance decrease, also checked before submitting a report to River\\n        uint256 relativeLowerBound;\\n    }\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        ReportBoundsStruct value;\\n    }\\n\\n    /// @notice Retrieve the Report Bounds from storage\\n    /// @return The Report Bounds\\n    function get() internal view returns (ReportBoundsStruct memory) {\\n        bytes32 slot = REPORT_BOUNDS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Report Bounds in storage\\n    /// @param _newReportBounds The new Report Bounds value\\n    function set(ReportBoundsStruct memory _newReportBounds) internal {\\n        bytes32 slot = REPORT_BOUNDS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newReportBounds;\\n    }\\n}\\n\",\"keccak256\":\"0x032757c478e9132a66b7da31e2eb5f85f8f818503b51b3783c088d3625b3403a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/Shares.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Shares Count Storage\\n/// @notice Utility to manage the Shares Count in storage\\nlibrary Shares {\\n    /// @notice Storage slot of the Shares Count\\n    bytes32 internal constant SHARES_SLOT = bytes32(uint256(keccak256(\\\"river.state.shares\\\")) - 1);\\n\\n    /// @notice Retrieve the Shares Count\\n    /// @return The Shares Count\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(SHARES_SLOT);\\n    }\\n\\n    /// @notice Sets the Shares Count\\n    /// @param _newValue New Shares Count\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(SHARES_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xacb9e6249fc4fa7e2f2edd9616873653f7b57fd53d39751151f8a976da6af81d\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/SharesPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Shares Per Owner Storage\\n/// @notice Utility to manage the Shares Per Owner in storage\\nlibrary SharesPerOwner {\\n    /// @notice Storage slot of the Shares Per Owner\\n    bytes32 internal constant SHARES_PER_OWNER_SLOT = bytes32(uint256(keccak256(\\\"river.state.sharesPerOwner\\\")) - 1);\\n\\n    /// @notice Structure in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from an owner to its share count\\n        mapping(address => uint256) value;\\n    }\\n\\n    /// @notice Retrieve the share count for given owner\\n    /// @param _owner The address to get the balance of\\n    /// @return The amount of shares\\n    function get(address _owner) internal view returns (uint256) {\\n        bytes32 slot = SHARES_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_owner];\\n    }\\n\\n    /// @notice Set the amount of shares for an owner\\n    /// @param _owner The owner of the shares to edit\\n    /// @param _newValue The new shares value for the owner\\n    function set(address _owner, uint256 _newValue) internal {\\n        bytes32 slot = SHARES_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_owner] = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0x8262d28a6d7d6720a0d5371ad31748fedd0e614a2db9a361957e14b75c63399f\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/WithdrawalCredentials.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibErrors.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Withdrawal Credentials Storage\\n/// @notice Utility to manage the Withdrawal Credentials in storage\\nlibrary WithdrawalCredentials {\\n    /// @notice Storage slot of the Withdrawal Credentials\\n    bytes32 internal constant WITHDRAWAL_CREDENTIALS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.withdrawalCredentials\\\")) - 1);\\n\\n    /// @notice Retrieve the Withdrawal Credentials\\n    /// @return The Withdrawal Credentials\\n    function get() internal view returns (bytes32) {\\n        return LibUnstructuredStorage.getStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT);\\n    }\\n\\n    /// @notice Retrieve the Withdrawal Credential under its address format\\n    /// @return The Withdrawal Credentials in its address format\\n    function getAddress() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(WITHDRAWAL_CREDENTIALS_SLOT);\\n    }\\n\\n    /// @notice Sets the Withdrawal Credentials\\n    /// @param _newValue New Withdrawal Credentials\\n    function set(bytes32 _newValue) internal {\\n        if (_newValue == bytes32(0)) {\\n            revert LibErrors.InvalidArgument();\\n        }\\n        LibUnstructuredStorage.setStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xb402a9696efa4022d08d5c2d5d58ef1d3af11321141bcaf505f356e3e5b08460\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrator Address Storage\\n/// @notice Utility to manage the Administrator Address in storage\\nlibrary AdministratorAddress {\\n    /// @notice Storage slot of the Administrator Address\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Administrator Address\\n    /// @return The Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Administrator Address\\n    /// @param _newValue New Administrator Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x9a8ea493ee319ecf7bb3955c0fcb7108c89193084b642f441f2858316d2dc7ae\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/ApprovalsPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Approvals Per Owner Storage\\n/// @notice Utility to manage the Approvals Per Owner in storage\\nlibrary ApprovalsPerOwner {\\n    /// @notice Storage slot of the Approvals Per Owner\\n    bytes32 internal constant APPROVALS_PER_OWNER_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.approvalsPerOwner\\\")) - 1);\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from an owner to an operator to the approval amount\\n        mapping(address => mapping(address => uint256)) value;\\n    }\\n\\n    /// @notice Retrieve the approval for an owner to an operator\\n    /// @param _owner The account that gave the approval\\n    /// @param _operator The account receiving the approval\\n    /// @return The value of the approval\\n    function get(address _owner, address _operator) internal view returns (uint256) {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_owner][_operator];\\n    }\\n\\n    /// @notice Set the approval value for an owner to an operator\\n    /// @param _owner The account that gives the approval\\n    /// @param _operator The account receiving the approval\\n    /// @param _newValue The value of the approval\\n    function set(address _owner, address _operator, uint256 _newValue) internal {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_owner][_operator] = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0x5d8c8ea71783a3b49d1b57e5d0e84f2cc8c3e994167ffc450e540a31e54b9d38\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/PendingAdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Pending Administrator Address Storage\\n/// @notice Utility to manage the Pending Administrator Address in storage\\nlibrary PendingAdministratorAddress {\\n    /// @notice Storage slot of the Pending Administrator Address\\n    bytes32 public constant PENDING_ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.pendingAdministratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Pending Administrator Address\\n    /// @return The Pending Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Pending Administrator Address\\n    /// @param _newValue New Pending Administrator Address\\n    function set(address _newValue) internal {\\n        LibUnstructuredStorage.setStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xeb7b867d4df38b08393f42a7fd5d93dbb1ade1f9d30d47551f63ffc77816685b\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Version Storage\\n/// @notice Utility to manage the Version in storage\\nlibrary Version {\\n    /// @notice Storage slot of the Version\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    /// @notice Retrieve the Version\\n    /// @return The Version\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    /// @notice Sets the Version\\n    /// @param _newValue New Version\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(VERSION_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x011c09f065ea555f6fbaa99710c1388bcb047afef30ab6558ca1ee81980ebf01\",\"license\":\"BUSL-1.1\"},\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234610093577f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7190600019807f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfc558152604060208201523660408201523660006060830137600060603683010152606081601f19601f3601168101030190a16040516158e09081620000998239f35b600080fdfe6080604052600436101561001d575b36614dd05761001b614dc7565b005b60003560e01c8063020f086e146104e85780630407de47146104e357806304843a17146104de578063056850c6146104d957806306fdde03146104d4578063095ea7b3146104cf5780630e18b681146104ca578063107703ab146104c5578063107d7fa0146104c05780631311cf8d146104bb578063143a08d4146104b6578063147bf6c4146104b15780631546962b146104ac57806315ca4cee146104a757806317e64858146104a257806318160ddd1461049d5780631bcbfaba1461049857806323b872dd14610493578063281a31221461048e578063291206f6146104895780632cb562e1146104845780632d6b59bf1461047f5780632dc5c97c1461047a578063313ce5671461047557806336bf33251461039e578063391b6f4e14610470578063395093511461046b5780633af9e6691461046657806346425ef0146104615780634b47b74f1461045c5780635022820114610457578063540bc5ea1461045257806354a29cdc1461044d57806354fd4d5014610448578063557ed1ba14610443578063563967151461043e57806357fa85471461043957806358bf3c7f146104345780635d95e8011461042f5780635f2e5f071461042a57806363f62aaf146104255780636e9960c31461042057806370a082311461041b57806372f79b1314610416578063748747e614610411578063750521f51461040c57806378a010e814610407578063799a1954146104025780637adbf973146103fd578063833b1fce146103f857806386a92af7146103f357806387f2adfb146103ee57806389896aef146103e95780639332525d146103e457806395d89b41146103df5780639b498e26146103da5780639d49cca1146103d5578063a29a839f146103d0578063a457c2d7146103cb578063a9059cbb146103c6578063ac232bde146103c1578063bb6583ec146103bc578063bf15af56146103b7578063c5eff3d0146103b2578063d0468156146103ad578063d0e30db0146103a8578063d4970524146103a3578063d7f8f4741461039e578063d96f186d14610399578063dd62ed3e14610394578063e3a88e611461038f578063efd603471461038a578063efd6684614610385578063f79c3f0214610380578063f9f95a901461037b578063fb5b82d0146103765763fe7c12ae0361000e57612bca565b612b4d565b612b1d565b612aff565b61251b565b6124ee565b6124ad565b612448565b612218565b611220565b6121eb565b6121d6565b6121a0565b61216a565b61214e565b6120e7565b6120c2565b612049565b611fe9565b611fc6565b611f90565b611f5a565b611f14565b611e19565b611db0565b611d85565b611cb9565b611c83565b611c42565b611c24565b611b34565b611ac2565b61197c565b61188d565b611846565b611810565b6117da565b6116a1565b611606565b611589565b611547565b61151c565b611501565b6114bb565b611411565b6113f5565b6113bf565b611351565b611326565b6112df565b61127a565b611244565b611204565b61119d565b611172565b61113c565b6110d2565b610ee2565b610d97565b610d6c565b610d41565b610bfe565b610b6f565b610b39565b610ac5565b610aa2565b610a25565b6109f4565b610887565b61081d565b6107ec565b610796565b61070d565b6106e2565b610648565b61058c565b600435906001600160a01b038216820361050357565b600080fd5b602435906001600160a01b038216820361050357565b606435906001600160a01b038216820361050357565b608435906001600160a01b038216820361050357565b60a435906001600160a01b038216820361050357565b60c435906001600160a01b038216820361050357565b60e435906001600160a01b038216820361050357565b34610503576020366003190112610503576105a56104ed565b6000805160206157ab833981519152546001600160a01b03919082163303610609576105d08161504f565b8060008051602061584b83398151915255167f67b26a33f305cc027b2d45b2f6f418793afcd3e22f7376afa7be068ce18604e8600080a2005b60405163472511eb60e11b8152336004820152602490fd5b6001600160401b0381160361050357565b602435906001600160801b038216820361050357565b3461050357610140366003190112610503576106626104ed565b60243561066e81610621565b6044359161067b83610621565b6064359161068883610621565b6084359161069583610621565b60a4356106a181610621565b6001600160801b03946101043594908686168603610503576101243596871687036105035761001b9760e4359560c43595612cf0565b600091031261050357565b346105035760003660031901126105035760206000805160206157eb83398151915254604051908152f35b6000366003190112610503576000805160206155ab833981519152546001600160a01b0316330361060957005b60005b83811061074d5750506000910152565b818101518382015260200161073d565b906020916107768151809281855285808601910161073a565b601f01601f1916010190565b90602061079392818152019061075d565b90565b34610503576000366003190112610503576107e86040516107b6816119fd565b6011815270098d2e2ead2c840a6e8c2d6cac8408aa89607b1b602082015260405191829160208352602083019061075d565b0390f35b34610503576040366003190112610503576108126108086104ed565b6024359033614b55565b602060405160018152f35b34610503576000806003193601126108845760008051602061556b8339815191528054906001600160a01b03821633036106095761085b8392612bf5565b55807f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f48180a280f35b80fd5b34610503576040366003190112610503576004356108a3610508565b60008051602061582b833981519152549091906108d0906001600160a01b03165b6001600160a01b031690565b91823b1561050357604051632d20488160e11b815233600480830191909152602482015292600090849060449082905afa9182156109d65761097a936020936109db575b50610920813033614bc5565b506000805160206155ab83398151915254610943906001600160a01b03166108c4565b60405163107703ab60e01b815260048101929092526001600160a01b03909216602482015292839190829060009082906044820190565b03925af180156109d6576107e8916000916109a8575b5060405163ffffffff90911681529081906020820190565b6109c9915060203d81116109cf575b6109c18183611a6a565b81019061300e565b38610990565b503d6109b7565b613002565b806109e86109ee926119e5565b806106d7565b38610914565b3461050357600036600319011261050357602063ffffffff6000805160206157cb8339815191525416604051908152f35b3461050357602036600319011261050357610a3e6104ed565b6000805160206157ab833981519152546001600160a01b0391908216330361060957610a698161504f565b8060008051602061564b83398151915255167f1da4c245099590dc40be61880c9b97792f3694d970acc1e67ac0e6cc90f3780d600080a2005b34610503576000366003190112610503576020610abd613f5a565b604051908152f35b3461050357602036600319011261050357610ade6104ed565b6000805160206157ab833981519152546001600160a01b03919082163303610609578060008051602061556b83398151915255167f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f4600080a2005b346105035760003660031901126105035760008051602061584b833981519152546040516001600160a01b039091168152602090f35b34610503576040366003190112610503576000805160206157ab833981519152546001600160a01b03163303610609577f5ab79ffcd89b6380c7fbdd89d02cfe3d9c53c99a85e150c2319075018d1aac5c604051610bcc816119fd565b600435808252610be460243592836020820152615497565b60408051918252602082019290925290819081015b0390a1005b3461050357600036600319011261050357610c176139b4565b506107e8604051610c2781611a18565b60008051602061562b83398151915254815260008051602061550b8339815191525460208201526000805160206155eb83398151915254604082015260008051602061568b8339815191525460608201527fdbc0527c99b54cd325d6ce9eaae3a8413cd447b5205f37385f0ebc6551033c705460808201526000805160206157cb8339815191525463ffffffff811660a0830152610cdd9060ff90602081901c8216151560c085015260281c16151560e0830152565b6040519182918291909160e080610100830194805184526020810151602085015260408101516040850152606081015160608501526080810151608085015263ffffffff60a08201511660a085015260c0810151151560c085015201511515910152565b3461050357600036600319011261050357602060008051602061558b83398151915254604051908152f35b3461050357600036600319011261050357602060008051602061578b83398151915254604051908152f35b3461050357606036600319011261050357610db06104ed565b610db8610508565b60443591610dc682826149d0565b8215610ed05782610dd6826154e3565b5410610ebe576001600160a01b0382811615610e92576001600160a01b038216600090815260008051602061572b8339815191526020908152604080832033845290915290205490848210610e65576107e8610e40868686868360018201610e52575b5050614bc5565b60405190151581529081906020820190565b610e5e91033383614b55565b8583610e39565b604051637b936de360e01b8152921660048301523360248301526044820152606481019290925250608490fd5b604051637617407560e11b81526001600160a01b038316600482015260006024820152604490fd5b0390fd5b6040516351940b3960e11b8152600490fd5b6040516336b216db60e21b8152600490fd5b346105035761012036600319011261050357610efc6104ed565b610f04610508565b90610f0d61051e565b90610f16610534565b92610f1f61054a565b93610f28610560565b90610f31610576565b95610104359160008051602061552b8339815191528054806110b3575060019055610f5b90612bf5565b610f648761504f565b6000805160206156eb8339815191528790556000966001600160a01b03948593849283167f0cc5437d7c9c1d9eab549acbb533eea3e9868e9443dd75309ed5820b33a3774e8b80a2610fb581615262565b60405190815260207fbd533e726baaf59b36f3914d950053f7e78f527057c97cd3f0043257fc0fc88491a1610fe98161504f565b8060008051602061564b83398151915255167f1da4c245099590dc40be61880c9b97792f3694d970acc1e67ac0e6cc90f3780d8880a2611028816150c1565b167f30f015a5d3c72c0a9414538199baa022323a483fa9e4ba2cd581596cf8ca04248680a261105681615419565b167fffc0721ef0563a1b0a51a0dc92113025f33ca434ada9ee3eebff2f385d2a8f9a8480a260443561108791613347565b61109090613936565b6040518061109e3682612c63565b0360008051602061554b83398151915291a180f35b60449060405190631cfd276760e31b8252600060048301526024820152fd5b34610503576020366003190112610503576000805160206157ab83398151915254600435906001600160a01b03163303610609576020816111337fbd533e726baaf59b36f3914d950053f7e78f527057c97cd3f0043257fc0fc88493615262565b604051908152a1005b346105035760003660031901126105035760008051602061564b833981519152546040516001600160a01b039091168152602090f35b346105035760003660031901126105035760206000805160206156ab83398151915254604051908152f35b34610503576000366003190112610503576111b66139f2565b5060a06111c16150dc565b6040519060806001600160401b03918281511684528260208201511660208501528260408201511660408501528260608201511660608501520151166080820152f35b3461050357600036600319011261050357602060405160128152f35b346105035760003660031901126105035760206040516801bc16d674ec8000008152f35b346105035760003660031901126105035760008051602061576b833981519152546040516001600160a01b039091168152602090f35b34610503576040366003190112610503576112936104ed565b33600090815260008051602061572b833981519152602090815260408083206001600160a01b038516845290915290205460243581018091116112da576108129133614b55565b612c40565b34610503576020366003190112610503576001600160a01b036113006104ed565b1660005260008051602061588b8339815191526020526020610abd604060002054614c42565b3461050357600036600319011261050357602060008051602061550b83398151915254604051908152f35b346105035760003660031901126105035761136a6150dc565b611373816148cd565b9060008051602061562b83398151915254906001600160401b03908181511683018093116112da57511680156113ba57820682039182116112da57602091610abd91615082565b612f5e565b34610503576000366003190112610503576000805160206156eb833981519152546040516001600160a01b039091168152602090f35b3461050357600036600319011261050357602060405160608152f35b346105035760003660031901126105035760008051602061552b83398151915280548060020361149c576003825561147f60008051602061580b833981519152546114696801bc16d674ec80000082068092036132fc565b6000805160206157eb83398151915254016132af565b60008051602061554b83398151915260405180610bf93682612c92565b60449060405190631cfd276760e31b8252600260048301526024820152fd5b34610503576000366003190112610503576107e86040516114db816119fd565b60058152640312e322e360dc1b602082015260405191829160208352602083019061075d565b34610503576000366003190112610503576020604051428152f35b3461050357600036600319011261050357602060008051602061560b83398151915254604051908152f35b34610503576020366003190112610503576004356001600160401b0361156b6150dc565b511680156113ba57810681039081116112da57602090604051908152f35b34610503576020366003190112610503576115a26104ed565b6000805160206157ab833981519152546001600160a01b03919082163303610609576115cd8161504f565b8060008051602061582b83398151915255167f30f015a5d3c72c0a9414538199baa022323a483fa9e4ba2cd581596cf8ca0424600080a2005b60003660031901126105035760008051602061560b833981519152546001600160a01b0316330361060957005b9181601f84011215610503578235916001600160401b038311610503576020808501948460051b01011161050357565b6020908160408183019282815285518094520193019160005b82811061168a575050505090565b835160070b8552938101939281019260010161167c565b3461050357602080600319360112610503576001600160401b03600435818111610503576116d3903690600401611633565b60018060a01b036000805160206155ab8339815191525416906040518092635f2e5f0760e01b8252866004830152818061171560009788966024840191612fbd565b03915afa9283156109d6578293611735575b604051806107e88682611663565b909192503d8084843e6117488184611a6a565b82019184818403126117d65780519182116117d657019181601f840112156108845782519061177682612f8d565b936117846040519586611a6a565b828552858086019360051b8201019384116117d2578501915b8383106117b557505050506107e89150388080611727565b82518060070b81036117ce57815291850191850161179d565b8280fd5b5080fd5b8380fd5b34610503576000366003190112610503576000805160206155ab833981519152546040516001600160a01b039091168152602090f35b34610503576000366003190112610503576000805160206157ab833981519152546040516001600160a01b039091168152602090f35b34610503576020366003190112610503576001600160a01b036118676104ed565b1660005260008051602061588b8339815191526020526020604060002054604051908152f35b34610503576000366003190112610503576118a66150dc565b6118af816148cd565b6001600160401b0382511680156113ba57810681039081116112da576107e861195f61195a8461191b61190f61194c8761191b61190f61194c61194661190f611938604061192160208d019861191b61190f8b516001600160401b031690565b6001600160401b031690565b90613461565b9b019a61191b61190f8d516001600160401b031690565b9e516001600160401b031690565b8c612c56565b92516001600160401b031690565b613474565b604051938493846040919493926060820195825260208201520152565b34610503576020366003190112610503576119956104ed565b6000805160206157ab833981519152546001600160a01b03163303610609576119bd8161504f565b60008051602061576b83398151915255005b634e487b7160e01b600052604160045260246000fd5b6001600160401b0381116119f857604052565b6119cf565b604081019081106001600160401b038211176119f857604052565b61010081019081106001600160401b038211176119f857604052565b60a081019081106001600160401b038211176119f857604052565b608081019081106001600160401b038211176119f857604052565b90601f801991011681019081106001600160401b038211176119f857604052565b60405190611a9882611a34565b565b60405190611a98826119fd565b6001600160401b0381116119f857601f01601f191660200190565b34610503576020366003190112610503576004356001600160401b0381116105035736602382011215610503578060040135611afd81611aa7565b90611b0b6040519283611a6a565b808252366024828501011161050357602081600092602461001b960183860137830101526130a6565b346105035760a0366003190112610503576000805160206157ab833981519152546001600160a01b0316330361060957611bca604051611b7381611a34565b600435611b7f81610621565b8152602435611b8d81610621565b6020820152604435611b9e81610621565b6040820152606435611baf81610621565b6060820152608435611bc081610621565b608082015261516a565b7f25777eb44be046f64180acf8275f0ac2ec51e63a65a5f8a0f2f6d86ba25b74cf611bf3613a1d565b611bfb613a29565b90610bf9611c07613a35565b611c0f613a41565b611c17613a4d565b9160405195869586613981565b34610503576020366003190112610503576020610abd600435614c65565b3461050357602036600319011261050357611c5b6104ed565b6000805160206157ab833981519152546001600160a01b031633036106095761001b90613936565b34610503576000366003190112610503576000805160206155cb833981519152546040516001600160a01b039091168152602090f35b3461050357600080600319360112610884576040518160008051602061570b8339815191528054611ce98161537e565b80855291600191808316908115611d5a5750600114611d1f575b6107e885611d1381890382611a6a565b60405191829182610782565b835260208084209095505b828410611d4757505050816107e893611d13928201019338611d03565b8054858501870152928501928101611d2a565b90506107e89650611d139450602092508593915060ff191682840152151560051b8201019338611d03565b346105035760003660031901126105035760206000805160206156cb83398151915254604051908152f35b3461050357600036600319011261050357602060008051602061562b83398151915254604051908152f35b6020908160408183019282815285518094520193019160005b828110611e02575050505090565b835160ff1685529381019392810192600101611df4565b3461050357600319604036820112610503576001600160401b0360043581811161050357611e4b903690600401611633565b6024929192359182116105035760009283611ec192611e71611eb2953690600401611633565b94909760018060a01b036000805160206155ab833981519152541695604051998a9889978896637c044e5560e01b8852608060048901526084880191612fbd565b92858403016024860152612fbd565b6001604483015261ffff606483015203925af180156109d6576107e891600091611ef3575b5060405191829182611ddb565b611f0e913d8091833e611f068183611a6a565b810190613023565b38611ee6565b34610503576000366003190112610503576107e8604051611f34816119fd565b6005815264098e68aa8960db1b602082015260405191829160208352602083019061075d565b346105035760003660031901126105035760008051602061586b833981519152546040516001600160a01b039091168152602090f35b3461050357600036600319011261050357611fa9612f74565b506040611fb4615434565b60208251918051835201516020820152f35b34610503576000366003190112610503576020610abd611fe46150dc565b6148cd565b34610503576040366003190112610503576120026104ed565b33600090815260008051602061572b833981519152602090815260408083206001600160a01b038516845290915290205460243581039081116112da576108129133614b55565b34610503576040366003190112610503576120626104ed565b6024359061207081336149d0565b8115610ed05781612080336154e3565b5410610ebe576001600160a01b038116156120a3576107e891610e409133614bc5565b604051637617407560e11b815233600482015260006024820152604490fd5b60203660031901126105035761001b6120d96104ed565b6120e28161504f565b614de2565b3461050357604036600319011261050357604051612104816119fd565b6004356001600160801b0381168103610503578152612121610632565b60208201526000805160206157ab833981519152546001600160a01b031633036106095761001b9061323d565b3461050357600036600319011261050357602060405160308152f35b346105035760003660031901126105035760008051602061582b833981519152546040516001600160a01b039091168152602090f35b346105035760003660031901126105035760008051602061556b833981519152546040516001600160a01b039091168152602090f35b60003660031901126105035761001b33614de2565b60003660031901126105035760008051602061584b833981519152546001600160a01b0316330361060957005b34610503576040806003193601126105035760008051602061576b833981519152546001600160a01b031633036124385760008051602061566b833981519152546020919061226f906001600160a01b03166108c4565b81519283809263c5f2892f60e01b825260049586915afa9081156109d65760009161240a575b50602435036123fd5760008051602061580b83398151915254916122c581356801bc16d674ec8000008504615071565b9081156123ef576122d582613562565b819291519384156123df5784116123d05760008051602061560b833981519152549182156123c2575060005b848110612399577f220ab8fd274cf58c09b0825ccf00e74ba4ce4117fd47285adc2183a635838f1b86866123466123418b61233b8461342a565b9061349a565b6132fc565b610bf96123826000805160206156cb833981519152549261237c61236a8286612c56565b6000805160206156cb83398151915255565b83612c56565b925191825260208201929092529081906040820190565b806123bc846123aa60019488613400565b516123b58487613400565b5190613740565b01612301565b8551639be7315960e01b8152fd5b508351635993bd5760e01b8152fd5b855163200149ad60e21b81528390fd5b8251631036b5ad60e31b8152fd5b51632b3b4dab60e21b8152fd5b61242b915060203d8111612431575b6124238183611a6a565b8101906133e7565b38612295565b503d612419565b5163c60eb33560e01b8152600490fd5b346105035760403660031901126105035760206124a46124666104ed565b61246e610508565b6001600160a01b03918216600090815260008051602061572b833981519152855260408082209290931681526020919091522090565b54604051908152f35b34610503576000366003190112610503576124c6612f74565b5060406124d1615214565b815190602060018060801b03918281511684520151166020820152f35b60003660031901126105035760008051602061564b833981519152546001600160a01b0316330361060957005b346105035760206003198181360112610503576004906001600160401b038235116105035761012090823536030112610503576000805160206155cb833981519152546001600160a01b03163303612ae1576125756150dc565b81358201359061258c6125888383614906565b1590565b612ac457612598613a59565b9060008051602061568b833981519152546040830181815260648635013591808310612aa257506125ca90518261349a565b91608084019283526000805160206155eb8339815191525490606085019382855260448835013592808410612a7f575060a48835019461260986613ad7565b6000805160206156cb83398151915254908163ffffffff80921611908115612a42575b506129e45750916126c995939161266a8961264c6126bc9896518661349a565b9360a08b0194855260008051602061562b8339815191525490614986565b60c0890152612677613f5a565b88526126868151835190612c56565b6129d0575b50506126956139b4565b96875260248835013589880152604087015260608601526084863501356080860152613ad7565b63ffffffff1660a0840152565b6126e26126d960e4853501613aeb565b151560c0840152565b612706610104843501926127016126f885613aeb565b151560e0830152565b61528f565b61270e615434565b93612720825160c0840151908761496c565b612728613f5a565b83830181815284519097918490821161291c575050865161274a838651612c56565b106128de57509160c09161279a61282f946127897f49ac0d2bb2a688ca460f7993eb93eccd3b9c9188da6b0727e9a409cf8b105875995185519061349a565b61012085019081515251519061349a565b60e08301525b60e0820151908161289c575b505060e08101518061286b575b5060e081015180612852575b5061281861280d61012083019586515180612843575b506127ed60c489350189358a01613af5565b92906128056127ff60e48c3501613aeb565b93613aeb565b933691613b2a565b6084893501356144b2565b6128206142a7565b6128286147a0565b0151614814565b5190610bf960405192828493350183613bc1565b61284c90613e37565b386127db565b61285b90613d62565b60606101208301510152386127c5565b6040612879612891926141e1565b610120840190828251015251015160e083015161349a565b60e0820152386127b9565b6128a86128d292613c95565b610120840190828251015280516128c3838201518251612c56565b905251015160e083015161349a565b60e082015238806127ac565b8351965160c09094015190516040805163eb7a968960e01b815297880198895260208901959095529387015250506060840152509081900360800190fd5b61292f9061271092930192835190613461565b0461294288519161233b87518092615071565b1161299257509160c09161298861282f946129827f49ac0d2bb2a688ca460f7993eb93eccd3b9c9188da6b0727e9a409cf8b10587599855190519061349a565b90612c56565b60e08301526127a0565b8351965160c09094015190516040805163063bb83f60e11b815297880198895260208901959095529387015250506060840152509081900360800190fd5b6129dd9151905190614057565b388061268b565b89610eba6129f189613ad7565b92612a0e6000805160206157cb8339815191525463ffffffff1690565b90604051948594632f776b1760e01b8652850191939290604091606084019563ffffffff8093168552602085015216910152565b9050612a4d88613ad7565b90612a76612a6d6000805160206157cb8339815191525463ffffffff1690565b63ffffffff1690565b9116103861262c565b60408051636f24834360e01b8152808b0192835260208301869052918291010390fd5b60408051621ee1cf60e11b815280890192835260208301859052918291010390fd5b5060405163a225656d60e01b815291820190815281906020010390fd5b60405163472511eb60e11b8152339181019182529081906020010390fd5b34610503576020366003190112610503576020610abd600435614c42565b34610503576020366003190112610503576020612b43600435612b3e6150dc565b614906565b6040519015158152f35b3461050357602036600319011261050357612b666104ed565b6000805160206157ab833981519152546001600160a01b0391908216330361060957612b918161504f565b806000805160206156eb83398151915255167f0cc5437d7c9c1d9eab549acbb533eea3e9868e9443dd75309ed5820b33a3774e600080a2005b3461050357600036600319011261050357602060008051602061580b83398151915254604051908152f35b612bfe8161504f565b6000805160206157ab8339815191528190556001600160a01b03167f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a1600080a2565b634e487b7160e01b600052601160045260246000fd5b919082018092116112da57565b6060916000825260406020830152806040830152806000848401376000828201840152601f01601f1916010190565b6060916002825260406020830152806040830152806000848401376000828201840152601f01601f1916010190565b6060916001825260406020830152806040830152806000848401376000828201840152601f01601f1916010190565b979896959694919390929460008051602061552b833981519152805480600103612f3f575060029055612d228961504f565b6000805160206155ab833981519152899055604080516001600160a01b038b168152909a907faf890c07e266df31e0725841eb0e85596a0caa1b17bbae5c0b206fdcc92d7ce190602090a18a5191612d79836119fd565b6001600160801b039182168352166020820152612d959061323d565b612d9d611a8b565b6001600160401b03841681526001600160401b03851660208201526001600160401b038616818b01526001600160401b03821660608201526001600160401b0383166080820152612ded9061516a565b8851948594612dfc9486613981565b037f25777eb44be046f64180acf8275f0ac2ec51e63a65a5f8a0f2f6d86ba25b74cf91a1612e28611a9a565b828152816020820152612e3a90615497565b835191825260208201527f5ab79ffcd89b6380c7fbdd89d02cfe3d9c53c99a85e150c2319075018d1aac5c90604090a1612e726139b4565b7fd7f2d45e512a86049f7a113657b39731b6b558609584243063a52cd31a8eb5285481527ffedfd2c285a57fb23bf45a3fe9ac02d36a76ebb72801b1c8aaf553d74e9d4652546020820152600083820181905260608201819052608082018190527f0f1e7733641e4d843128fea0d2ec90d3d06a40b0fe244ff603d8c1aa200dc0f85463ffffffff1660a083015260c0820181905260e0820152612f159061528f565b612f1f9030614ad7565b5180612f2b3682612cc1565b0360008051602061554b83398151915291a1565b60449060405190631cfd276760e31b8252600160048301526024820152fd5b634e487b7160e01b600052601260045260246000fd5b60405190612f81826119fd565b60006020838281520152565b6001600160401b0381116119f85760051b60200190565b63ffffffff81160361050357565b3590611a9882612fa4565b91908082526020809201929160005b828110612fda575050505090565b90919293828060019263ffffffff8835612ff381612fa4565b16815201950193929101612fcc565b6040513d6000823e3d90fd5b90816020910312610503575161079381612fa4565b6020908181840312610503578051906001600160401b03821161050357019180601f8401121561050357825161305881612f8d565b936130666040519586611a6a565b818552838086019260051b820101928311610503578301905b82821061308d575050505090565b815160ff8116810361050357815290830190830161307f565b6000805160206157ab833981519152549091906001600160a01b031633036106095781511561322b578151916001600160401b0383116119f85760008051602061570b83398151915292613103816130fe865461537e565b6153b8565b602080601f83116001146131735750938161316393927f8d2df192dd17edf92a7964b78aa322f3d717b2ab9de00651bee32bbc4c5da63a9596600091613168575b508160011b916000199060031b1c191617905560405191829182610782565b0390a1565b905083015138613144565b60008051602061570b83398151915260005290601f1983167f992d979edf4f3c53d0b672011f4c4543809e6b0ed7af1d628abb72f3026d823f926000905b828210613213575050927f8d2df192dd17edf92a7964b78aa322f3d717b2ab9de00651bee32bbc4c5da63a959692600192826131639796106131fa575b5050811b019055611d13565b85015160001960f88460031b161c1916905538806131ee565b80600185968294968a015181550195019301906131b1565b604051638d46fe0560e01b8152600490fd5b60407e4180017d3dd609da6980999655a6bd2591e313d31d6230b1889c369a9713a09160018060801b0360208183511692015160018060801b03198160801b1683177fc305db9f63aeed94a45229ff5ab4174e72b223a38ab4c5e8f518ee4f437918d0558351928352166020820152a1565b6000805160206157eb833981519152805460408051918252602082018490527f48f67c1dada0cab2163f6282292ad97ea97376cfed46bb3851654aaa630db7279190819081015b0390a155565b60008051602061580b833981519152805460408051918252602082018490527f86fd21e9b5bd76b20471c7f93a82aa4e25c37d48b179bda0a4d1a45e22a842f49190819081016132f6565b6133508161504f565b60008051602061566b833981519152819055604051906001600160a01b03167e043cf7635f276413ae358250286a479a631abd9d74d57d4aa0bb87ebc7d117600080a281156133d857506020817f4c86ba184ea1a1558f84835ca34f6d67e222e8ee5cc4f324b8861dda4cf1740c9260008051602061560b83398151915255604051908152a1565b63a9cb9e0d60e01b8152600490fd5b90816020910312610503575190565b81156113ba570490565b80518210156134145760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b906801bc16d674ec80000091808302928304036112da57565b906801bc16d674ec800000918281029281840414901517156112da57565b818102929181159184041417156112da57565b6000198101919082116112da57565b6801bc16d674ec7fffff198101919082116112da57565b919082039182116112da57565b9080601f83011215610503578151916134bf83612f8d565b926040906134cf82519586611a6a565b808552602093848087019260051b8501019381851161050357858101925b8584106134fe575050505050505090565b83516001600160401b0381116105035782019083603f8301121561050357878201519061352a82611aa7565b61353688519182611a6a565b82815285888486010111610503576135578a949385948a868501910161073a565b8152019301926134ed565b60008051602061586b8339815191525460405163277c9d4560e01b81526004810192909252600092919083908290602490829084906001600160a01b03165af19283156109d657809181946135b8575b50509190565b92915092503d8084843e6135cc8184611a6a565b82016040838203126117d65782516001600160401b039081811161361857826135f69186016134a7565b9360208101519182116136185761361093949550016134a7565b9138806135b2565b8580fd5b9061362f6020928281519485920161073a565b0190565b90611a9860306040518461365182965180926020808601910161073a565b810160006020820152036010810185520183611a6a565b90611a98604080518461368582965180926020808601910161073a565b810160006020820152036020810185520183611a6a565b9060405191634059730760d81b6020840152604083015260408252606082018281106001600160401b038211176119f857604052565b9190604051926020840152604083015260408252606082018281106001600160401b038211176119f857604052565b94939261372d60609361371f61373b9460808a5260808a019061075d565b9088820360208a015261075d565b90868203604088015261075d565b930152565b909160308251036139245760608351036139125761375d82613633565b604093845191826020809282613776600097889361361c565b03600293845afa156109d6578351828561379d61379287614fb0565b8b519182809261361c565b0390855afa156109d657845183866137ca6137bf6137ba89615009565b613668565b8c519182809261361c565b0390865afa156109d657856137e561379286938351906136d2565b0390855afa156109d6578285613800613792898351956136d2565b0390855afa156109d657828561381a61379282519461369c565b0390855afa156109d657829161384161383687938451906136d2565b8a519182809261361c565b03915afa156109d65782519361385647613483565b60008051602061566b833981519152549096906138a19061387f906001600160a01b03166108c4565b936138938a51948592830160209181520190565b03601f198101845283611a6a565b823b1561390e576801bc16d674ec800000906138d28951978896879586946304512a2360e31b865260048601613701565b03925af180156109d6576138fb575b5047036138eb5750565b51638051a6bb60e01b8152600490fd5b806109e8613908926119e5565b386138e1565b8480fd5b60405163408ebd3960e01b8152600490fd5b60405163050cb55360e41b8152600490fd5b61393f8161504f565b6000805160206155cb8339815191528190556001600160a01b03167fd3b5d1e0ffaeff528910f3663f0adace7694ab8241d58e17a91351ced2e08031600080a2565b6001600160401b039182168152918116602083015291821660408201529181166060830152909116608082015260a00190565b604051906139c182611a18565b8160e06000918281528260208201528260408201528260608201528260808201528260a08201528260c08201520152565b604051906139ff82611a34565b60006080838281528260208201528260408201528260608201520152565b60043561079381610621565b60243561079381610621565b60443561079381610621565b60643561079381610621565b60843561079381610621565b6040519061014082018281106001600160401b038211176119f857604052816101206000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201528261010082015260405192613abf84611a4f565b80845280602085015280604085015260608401520152565b3561079381612fa4565b8015150361050357565b3561079381613ae1565b903590601e198136030182121561050357018035906001600160401b03821161050357602001918160051b3603831361050357565b9291613b3582612f8d565b91613b436040519384611a6a565b829481845260208094019160051b810192831161050357905b828210613b695750505050565b8380918335613b7781612fa4565b815201910190613b5c565b9035601e19823603018112156105035701602081359101916001600160401b038211610503578160051b3603831361050357565b3590611a9882613ae1565b92916020611a989260a08652803560a08701528181013560c0870152604081013560e0870152613c6f613c656101006060840135818a0152613c456101206080860135818c0152613c25613c1760a08801612fb2565b63ffffffff166101408d0152565b613c3260c0870187613b82565b90916101608d01526101c08c0191612fbd565b93613c5f613c5560e08301613bb6565b15156101808c0152565b01613bb6565b15156101a0880152565b940190606080918051845260208101516020850152604081015160408501520151910152565b60008051602061564b8339815191525447916001600160a01b0390911690813b156105035760009160248392604051948593849263c8a6dfd360e01b845260048401525af180156109d657613d53575b504790808203918083116112da5703613d2d575b6040518181527fda841d3042d792e2509a333b9dcbd4b3dd9b9047d382011f8788fab90ca7e3c79080602081015b0390a190565b613d4e613d49826000805160206157eb83398151915254612c56565b6132af565b613cf9565b613d5c906119e5565b38613ce5565b60008051602061584b833981519152546001600160a01b03168015613e30574790803b1561050357604051638ede6b6b60e01b815260048101939093526000908390602490829084905af19182156109d657613dc492613e1d575b504761349a565b80613dfc575b6040518181527fd500b67e5bd8019c0af744cadeec120d1b5e3d3a3a011f18cf182aa4c97947b6908060208101613d27565b613e18613d49826000805160206157eb83398151915254612c56565b613dca565b806109e8613e2a926119e5565b38613dbd565b5050600090565b60008051602061558b8339815191529081548015613f4857613e57613f5a565b9260008051602061578b83398151915254613e7b81613e768587613461565b613461565b906127108087029087820414871517156112da5761233b613e9c9287613461565b80613f395750506000905b81613eb4575b5050505050565b7f3d1669e813a9845c288f0e1f642a4343a451103b87886d12de37e63b39bbd94293613eff613f2c92613ef76000805160206156eb833981519152549586614c8d565b54918761349a565b9560405194859460018060a01b031697859094939260609260808301968352602083015260408201520152565b0390a23880808080613ead565b613f42916133f6565b90613ea7565b604051630d35acd760e21b8152600490fd5b63ffffffff6000805160206157cb83398151915254166000805160206156cb83398151915254808210600014613ffa57612982613ff561079393613fef613fd9613fc360008051602061550b833981519152546000805160206157eb8339815191525490612c56565b60008051602061580b8339815191525490612c56565b6000805160206156ab8339815191525490612c56565b9361349a565b613443565b505060008051602061550b833981519152546000805160206157eb8339815191525481018091116112da5760008051602061580b8339815191525481018091116112da576000805160206156ab8339815191525461079391612c56565b9190476140648285612c56565b60008051602061560b83398151915254909190614089906001600160a01b03166108c4565b803b156105035760405163ea74f47960e01b815260048101939093526000908390602490829084905af19182156109d6576140c992613e1d57504761349a565b926140d48282612c56565b840361416a577fcb5410dc8f29b2f498e023c3f9237dbd600255a717edf94a6072bcd03b0c773c92935080614149575b81614123575b6040805191825260208201929092529081908101613163565b61414461413f836000805160206156ab83398151915254612c56565b614196565b61410a565b614165613d49826000805160206157eb83398151915254612c56565b614104565b6141749250612c56565b6040516349a1938b60e01b815260048101919091526024810191909152604490fd5b6000805160206156ab833981519152805460408051918252602082018490527f215c2b83e8c232e42091088056ab75d2ff643855c32997024f786cddb22d22909190819081016132f6565b6000805160206155ab8339815191525447916001600160a01b0390911690813b1561050357600091602483926040519485938492630c77940160e01b845260048401525af180156109d657614298575b504790808203918083116112da5703614277575b6040518181527f4e484734eb4d444bfa106f917d05d9ceb8ce18bf516c85d7aeb9b322925339f9908060208101613d27565b614293613d49826000805160206157eb83398151915254612c56565b614245565b6142a1906119e5565b38614231565b6000805160206155ab833981519152546001600160a01b03166142c8613f5a565b60008051602061558b833981519152549015159081614440575b506142ea5750565b6040516303634a9560e21b8152906001600160a01b0316602082600481845afa9182156109d657600092614420575b508161432483614c42565b926000805160206156ab83398151915254908185116143e8575b604080519182526020820184905281018590527f709263092d8d9fef472d907900405b5edae3d76f8ff4354858025b18424d710190606090a183614383575b50505050565b8361438e9103614196565b6143988183614d0a565b813b156105035760405163b30d8bb760e01b815260048101919091529160009183916024918391905af180156109d6576143d5575b80808061437d565b806109e86143e2926119e5565b386143cd565b9150809350927f709263092d8d9fef472d907900405b5edae3d76f8ff4354858025b18424d710161441882614c65565b92905061433e565b61443991925060203d8111612431576124238183611a6a565b9038614319565b90501515386142e2565b92919060408401604085528151809152606085019060208093019060005b848282106144795750505050930152565b835163ffffffff1685529384019390920191600101614468565b919082604091031261050357602082516144ac81612fa4565b92015190565b60008051602061586b8339815191528054929594909390926144dc906001600160a01b03166108c4565b936000805160206156cb83398151915293845495803b156105035761451f966040998a5192838092632d01785d60e21b82528160009c8d9687936004840161444a565b03925af180156109d65761478d575b506145485760008051602061558b83398151915254614551575b50505050509050565b6000805160206156ab83398151915254906000805160206157eb83398151915254600460206145976108c46000805160206155ab8339815191525460018060a01b031690565b8b516303634a9560e21b815292839182905afa80156109d6576145c191899161476f575b50614c42565b93846145cd8786612c56565b106145db575b505050614548565b80614766575b614715575b50546145fa906001600160a01b03166108c4565b928751634a3c63bb60e01b81528881600481885afa9081156109d657879088926146e1575b5063ffffffff1690818111156146d65761463c91613ff59161349a565b91836146518461464c8585612c56565b612c56565b1061465d575b806145d3565b6146729261464c614677959361233b93612c56565b61508e565b915491813b156117d6579451632d1fc39d60e01b8152600481019590955260248501919091529192918290604490829084905af180156109d6576146c3575b8080808080808796614657565b806109e86146d0926119e5565b386146b6565b505061463c86613443565b63ffffffff925061470891508a3d8c1161470e575b6147008183611a6a565b810190614493565b9161461f565b503d6146f6565b61473161472b84614726888861349a565b61349a565b82615071565b8061473d575b506145e6565b91614760613d49846147566145fa966108c49698612c56565b9661472688614196565b91614737565b508015156145e1565b614787915060203d8111612431576124238183611a6a565b386145bb565b806109e861479a926119e5565b3861452e565b6000805160206156ab833981519152805490816147bb575050565b6000805160206157eb833981519152549182018092116112da576147e06000926132af565b7f215c2b83e8c232e42091088056ab75d2ff643855c32997024f786cddb22d2290604082548151908152846020820152a155565b61481c613f5a565b906000805160206157eb8339815191525491614836615214565b9160018060801b03602081855116940151168483039283116112da576201518061488361488993613e7661488f9761271061487c6801bc16d674ec800000998c98613461565b0490615082565b04615071565b04613443565b80614898575050565b60008051602061580b833981519152548181018091116112da576148bb906132fc565b81039081116112da57611a98906132af565b6001600160401b0390816060820151164203914283116112da57806040830151169182156113ba5760200151169182156113ba57040490565b90614910826148cd565b6001600160401b0390816080850151168301908184116112da5710159283614953575b8361493f575b50505090565b5116915081156113ba570615388080614939565b60008051602061562b8339815191525483119350614933565b91613e766149829264496cebb800945190613461565b0490565b9082039182116112da576001600160401b03908160208160408401511692015116029081169081036112da5761079391613461565b90816020910312610503575161079381613ae1565b60008051602061582b833981519152546149f2906001600160a01b03166108c4565b60405163e838dfbb60e01b8082526001600160a01b038416600483015260209390918481602481875afa9081156109d657600091614aba575b50614a6a57506040519081526001600160a01b0384166004820152908290829060249082905afa9182156109d657600092614a8d575b5050614a6a5750565b60405163e7d05e2760e01b81526001600160a01b03919091166004820152602490fd5b614aac9250803d10614ab3575b614aa48183611a6a565b8101906149bb565b3880614a61565b503d614a9a565b614ad19150853d8711614ab357614aa48183611a6a565b38614a2b565b614ae08161504f565b614ae98261504f565b6001600160a01b03908116600081815260008051602061572b83398151915260209081526040808320868616845282529091206000199492937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92593909186905b556040519586521693a3565b60207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591614b828161504f565b614b8b8461504f565b6001600160a01b03908116600081815260008051602061572b83398151915284526040808220878516835260205290209094908690614b49565b9160018060a01b038093169160009383855260008051602061588b833981519152908160205260408620548481039081116112da57604092868852602052828720558216948581522054918083018093116112da5760008051602061574b83398151915292614c356020936154e3565b55604051908152a3600190565b60008051602061558b83398151915254908115613e30576149829061191b613f5a565b614c6d613f5a565b908115613e305760008051602061558b8339815191525461498291613461565b60008051602061558b833981519152548281018091116112da57614cb090614d89565b60018060a01b0316908160005260008051602061588b83398151915280602052604060002054908282018092116112da5760009260008051602061574b8339815191529260209286865283526040852055604051908152a3565b60008051602061558b833981519152548281039081116112da57614d2d90614d89565b6001600160a01b0316600081815260008051602061588b8339815191526020819052604090912054838103919082116112da5760009360008051602061574b8339815191529260209285875283526040862055604051908152a3565b60207fc80ea35a3f9016535e5b7c87746740c5045afe42188d02c5786eb97495c2f429918060008051602061558b83398151915255604051908152a1565b611a9833614de2565b60405163574b16a760e11b8152600490fd5b3415614f37576000805160206157eb833981519152543481018091116112da57614e0b906132af565b614e153433614f49565b60008051602061582b83398151915254614e37906001600160a01b03166108c4565b91823b1561050357604051632d20488160e11b815233600482015260016024820152600081604481875afa80156109d657614f24575b506001600160a01b0381169233849003614eb5575b50506040513481523391507f3bc57f469ad6d10d7723ea226cd22bd2b9e527def2b529f6ab44645a1668958290602090a3565b60405163e838dfbb60e01b81526001600160a01b038316600482015290602090829060249082905afa9081156109d657600091614f06575b50614a6a5790614efd9133614bc5565b50388080614e82565b614f1e915060203d8111614ab357614aa48183611a6a565b38614eed565b806109e8614f31926119e5565b38614e6d565b6040516395b66fe960e01b8152600490fd5b9190614f53613f5a565b908082038281116112da578160008051602061558b83398151915254931492838015614fa8575b15614f8d575050611a9891508093614c8d565b614f979192613461565b916113ba57611a9891048093614c8d565b508015614f7a565b6040815110614ff75760405190602080830191810190606084015b808410614fe65750505060408252601f801991011660405290565b825184529281019291810191614fcb565b604051633b99b53d60e01b8152600490fd5b6060815110614ff757604051906020808301916060604085019101905b80841061503e5750508252601f01601f191660405290565b815184529282019290820190615026565b6001600160a01b03161561505f57565b60405163f6b2911f60e01b8152600490fd5b8181111561507d575090565b905090565b8181101561507d575090565b6801bc16d674ec800000808204916000919006156150b9575060ff60015b1681018091116112da5790565b60ff906150ac565b6150ca8161504f565b60008051602061582b83398151915255565b6150e46139f2565b506040516150f181611a34565b7fd84ee2c84c954c65bef1459fe03b761a42f49234527e3cd8fd9dce87cb83742a546001600160401b03908181168352818160401c166020840152818160801c16604084015260c01c60608301527fd84ee2c84c954c65bef1459fe03b761a42f49234527e3cd8fd9dce87cb83742b5416608082015290565b60806001600160401b0391828151166020820151906040830151906001600160401b0360c01b606085015160c01b16926001600160401b0360401b9060401b1617906001600160401b03851b90851b1617177fd84ee2c84c954c65bef1459fe03b761a42f49234527e3cd8fd9dce87cb83742a550151167fd84ee2c84c954c65bef1459fe03b761a42f49234527e3cd8fd9dce87cb83742b906001600160401b0319825416179055565b61521c612f74565b50604051615229816119fd565b7fc305db9f63aeed94a45229ff5ab4174e72b223a38ab4c5e8f518ee4f437918d0546001600160801b038116825260801c602082015290565b612710811161527d5760008051602061578b83398151915255565b6040516358d620b360e01b8152600490fd5b61535360e0611a9892805160008051602061562b83398151915255602081015160008051602061550b8339815191525560408101516000805160206155eb83398151915255606081015160008051602061568b8339815191525560808101517fdbc0527c99b54cd325d6ce9eaae3a8413cd447b5205f37385f0ebc6551033c705563ffffffff60a0820151166000805160206157cb8339815191529081549064ff0000000060c0850151151560201b169164ffffffffff1916171790550151151590565b6000805160206157cb8339815191529060ff60281b825491151560281b169060ff60281b1916179055565b90600182811c921680156153ae575b602083101461539857565b634e487b7160e01b600052602260045260246000fd5b91607f169161538d565b601f81116153c4575050565b60009060008051602061570b833981519152825260208220906020601f850160051c8301941061540f575b601f0160051c01915b82811061540457505050565b8181556001016153f8565b90925082906153ef565b6154228161504f565b60008051602061586b83398151915255565b61543c612f74565b50604051615449816119fd565b7ff81b149de6749a3f46464b2cce61e24462f67599ea4a5ce028aaf4ab1521f96d5481527ff81b149de6749a3f46464b2cce61e24462f67599ea4a5ce028aaf4ab1521f96e54602082015290565b80517ff81b149de6749a3f46464b2cce61e24462f67599ea4a5ce028aaf4ab1521f96d55602001517ff81b149de6749a3f46464b2cce61e24462f67599ea4a5ce028aaf4ab1521f96e55565b6001600160a01b0316600090815260008051602061588b833981519152602052604090209056fedbc0527c99b54cd325d6ce9eaae3a8413cd447b5205f37385f0ebc6551033c6d82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfc1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a716e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a98472806b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70ae458cbedf69109e7d57b7f8c96816615aac0017187d87abab9001d22db32bae3c8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecadbc0527c99b54cd325d6ce9eaae3a8413cd447b5205f37385f0ebc6551033c6eb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c41dbc0527c99b54cd325d6ce9eaae3a8413cd447b5205f37385f0ebc6551033c6c8e9e2a1d30fed357d8a000c1131fc77ed65d2052918caf1ccc6eb1e7af3d13b535efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf9125fdbc0527c99b54cd325d6ce9eaae3a8413cd447b5205f37385f0ebc6551033c6f850308dd4e453a2a1bc3efb444560401d95c1a8bdea5b35c5c79531cd2241f1cc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a7082b6d18de7b10e438e6b1002141db737519cb4ceed679bc815e3aac00cd2226b63f3482ec84cb93d74a71645ad2e9e896fa02723e42170b4aad20a4bed6cdd5c852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407846ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef196d9102c3340d5a65e2b9be034bbfee2b1e2fa95880c2e72d47ee926be36321094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a36b5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb112dbc0527c99b54cd325d6ce9eaae3a8413cd447b5205f37385f0ebc6551033c712b6136e423ab70d76431e2a635e877e16ea2dd9a895e054ad7f35f89d6c7b710bcfa5a69252c74010ad3e9ab18cfbdc116fcf85f084db1a8dc577a339fbee58a867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a77ff4271262f3552a4108cde54dc75061de8de495709221d793b126e448522d6a7f3f075dea7ef99b1e5db245018e5e4ed8d2a0d93953f5932b2176bef59bd690600fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8837a2646970667358221220e30fde7487c9c730c1b11c9c570c9c3576f7bfa3ca7aff679a01898435d4555a64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Alluvial Finance Inc.",
    "errors": {
      "AllowanceTooLow(address,address,uint256,uint256)": [
        {
          "params": {
            "_allowance": "Current allowance",
            "_from": "Account where funds are sent from",
            "_operator": "Account attempting the transfer",
            "_value": "Requested transfer value in shares"
          }
        }
      ],
      "Denied(address)": [
        {
          "params": {
            "account": "The account that was denied"
          }
        }
      ],
      "InvalidDecreasingValidatorsExitedBalance(uint256,uint256)": [
        {
          "params": {
            "currentValidatorsExitedBalance": "The current exited balance",
            "newValidatorsExitedBalance": "The new exited balance"
          }
        }
      ],
      "InvalidDecreasingValidatorsSkimmedBalance(uint256,uint256)": [
        {
          "params": {
            "currentValidatorsSkimmedBalance": "The current exited balance",
            "newValidatorsSkimmedBalance": "The new exited balance"
          }
        }
      ],
      "InvalidEpoch(uint256)": [
        {
          "params": {
            "epoch": "Invalid epoch"
          }
        }
      ],
      "InvalidInitialization(uint256,uint256)": [
        {
          "params": {
            "expectedVersion": "The version that was expected",
            "version": "The version that was attempting to be initialized"
          }
        }
      ],
      "InvalidPulledClFundsAmount(uint256,uint256)": [
        {
          "params": {
            "received": "The amount that was received",
            "requested": "The amount that was requested"
          }
        }
      ],
      "InvalidValidatorCountReport(uint256,uint256,uint256)": [
        {
          "params": {
            "depositedValidatorCount": "The number of deposits performed by the system",
            "lastReportedValidatorCount": "The last reported validator count",
            "providedValidatorCount": "The received validator count value"
          }
        }
      ],
      "TotalValidatorBalanceDecreaseOutOfBound(uint256,uint256,uint256,uint256)": [
        {
          "params": {
            "postTotalEthIncludingExited": "The post-report total balance, including all exited balance",
            "prevTotalEthIncludingExited": "The previous total balance, including all exited balance",
            "relativeLowerBound": "The lower bound value that was used",
            "timeElapsed": "The time in seconds since last report"
          }
        }
      ],
      "TotalValidatorBalanceIncreaseOutOfBound(uint256,uint256,uint256,uint256)": [
        {
          "params": {
            "annualAprUpperBound": "The upper bound value that was used",
            "postTotalEthIncludingExited": "The post-report total balance, including all exited balance",
            "prevTotalEthIncludingExited": "The previous total balance, including all exited balance",
            "timeElapsed": "The time in seconds since last report"
          }
        }
      ],
      "Unauthorized(address)": [
        {
          "params": {
            "caller": "Address performing the call"
          }
        }
      ],
      "UnauthorizedTransfer(address,address)": [
        {
          "params": {
            "_from": "Account sending the funds in the invalid transfer",
            "_to": "Account receiving the funds in the invalid transfer"
          }
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "ConsensusLayerDataUpdate(uint256,uint256,bytes32)": {
        "params": {
          "roundId": "Round identifier",
          "validatorCount": "The new count of validators running on the consensus layer",
          "validatorTotalBalance": "The new total balance sum of all validators"
        }
      },
      "Initialize(uint256,bytes)": {
        "params": {
          "cdata": "Complete calldata that was used during the initialization",
          "version": "New version of the contracts"
        }
      },
      "ProcessedConsensusLayerReport((uint256,uint256,uint256,uint256,uint256,uint32,uint32[],bool,bool),(uint256,uint256,uint256,uint256))": {
        "params": {
          "report": "The report that was provided",
          "trace": "The trace structure providing more insights on internals"
        }
      },
      "PulledCLFunds(uint256,uint256)": {
        "params": {
          "pullExitedEthAmount": "The amount of exited ETH pulled",
          "pulledSkimmedEthAmount": "The amount of skimmed ETH pulled"
        }
      },
      "PulledCoverageFunds(uint256)": {
        "params": {
          "amount": "The amount pulled"
        }
      },
      "PulledELFees(uint256)": {
        "params": {
          "amount": "The amount pulled"
        }
      },
      "PulledRedeemManagerExceedingEth(uint256)": {
        "params": {
          "amount": "The amount pulled"
        }
      },
      "ReportedRedeemManager(uint256,uint256,uint256)": {
        "params": {
          "redeemManagerDemand": "The total demand in LsETH of the redeem manager",
          "suppliedRedeemManagerDemand": "The amount of LsETH demand actually supplied",
          "suppliedRedeemManagerDemandInEth": "The amount in ETH of the supplied demand"
        }
      },
      "RewardsEarned(address,uint256,uint256,uint256,uint256)": {
        "params": {
          "_collector": "The address of the collector during this event",
          "_newTotalSupply": "New total supply in shares",
          "_newTotalUnderlyingBalance": "New total ETH balance under management by River",
          "_oldTotalSupply": "Old total supply in shares",
          "_oldTotalUnderlyingBalance": "Old total ETH balance under management by River"
        }
      },
      "SetAdmin(address)": {
        "params": {
          "admin": "New admin address"
        }
      },
      "SetAllowlist(address)": {
        "params": {
          "allowlist": "The new Allowlist"
        }
      },
      "SetBalanceCommittedToDeposit(uint256,uint256)": {
        "params": {
          "newAmount": "The new balance committed to deposit",
          "oldAmount": "The old balance committed to deposit"
        }
      },
      "SetBalanceToDeposit(uint256,uint256)": {
        "params": {
          "newAmount": "The new balance to deposit",
          "oldAmount": "The old balance to deposit"
        }
      },
      "SetBalanceToRedeem(uint256,uint256)": {
        "params": {
          "newAmount": "The new balance to redeem",
          "oldAmount": "The old balance to redeem"
        }
      },
      "SetBounds(uint256,uint256)": {
        "params": {
          "annualAprUpperBound": "The reporting upper bound",
          "relativeLowerBound": "The reporting lower bound"
        }
      },
      "SetCollector(address)": {
        "params": {
          "collector": "The new Collector"
        }
      },
      "SetCoverageFund(address)": {
        "params": {
          "coverageFund": "The new Coverage Fund"
        }
      },
      "SetDepositContractAddress(address)": {
        "params": {
          "depositContract": "Address of the deposit contract"
        }
      },
      "SetDepositedValidatorCount(uint256,uint256)": {
        "params": {
          "newDepositedValidatorCount": "The new deposited validator count value",
          "oldDepositedValidatorCount": "The old deposited validator count value"
        }
      },
      "SetELFeeRecipient(address)": {
        "params": {
          "elFeeRecipient": "The new Execution Layer Fee Recipient"
        }
      },
      "SetGlobalFee(uint256)": {
        "params": {
          "fee": "The new Global Fee"
        }
      },
      "SetMaxDailyCommittableAmounts(uint256,uint256)": {
        "params": {
          "maxRelativeAmount": "The maximum amount that can be used as the daily committable amount, relative to the total underlying supply",
          "minNetAmount": "The minimum amount that must be used as the daily committable amount"
        }
      },
      "SetMetadataURI(string)": {
        "params": {
          "metadataURI": "The new Metadata URI string"
        }
      },
      "SetOperatorsRegistry(address)": {
        "params": {
          "operatorRegistry": "The new Operators Registry"
        }
      },
      "SetOracle(address)": {
        "params": {
          "oracleAddress": "The new oracle address"
        }
      },
      "SetPendingAdmin(address)": {
        "params": {
          "pendingAdmin": "New pending admin address"
        }
      },
      "SetRedeemManager(address)": {
        "params": {
          "redeemManager": "The address of the redeem manager"
        }
      },
      "SetSpec(uint64,uint64,uint64,uint64,uint64)": {
        "params": {
          "epochsPerFrame": "The number of epochs inside a frame",
          "epochsToAssumedFinality": "The number of epochs before an epoch is considered final",
          "genesisTime": "The genesis timestamp",
          "secondsPerSlot": "The number of seconds inside a slot",
          "slotsPerEpoch": "The number of slots inside an epoch"
        }
      },
      "SetWithdrawalCredentials(bytes32)": {
        "params": {
          "withdrawalCredentials": "The withdrawal credentials to use for deposits"
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      },
      "UserDeposit(address,address,uint256)": {
        "params": {
          "amount": "Amount in ETH deposited",
          "depositor": "Address performing the deposit",
          "recipient": "Address receiving the minted shares"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "acceptAdmin()": {
        "details": "Only callable by the pending admin. Resets the pending admin if succesful."
      },
      "allowance(address,address)": {
        "params": {
          "_owner": "Address that issued the allowance",
          "_spender": "Address that received the allowance"
        },
        "returns": {
          "_0": "The allowance in shares for a given spender"
        }
      },
      "approve(address,uint256)": {
        "details": "An approved account can use transferFrom to transfer funds on behalf of the token owner",
        "params": {
          "_spender": "Address that is allowed to spend the tokens",
          "_value": "The allowed amount in shares, will override previous value"
        },
        "returns": {
          "_0": "True if success"
        }
      },
      "balanceOf(address)": {
        "params": {
          "_owner": "Address to be checked"
        },
        "returns": {
          "_0": "The balance of the account in shares"
        }
      },
      "balanceOfUnderlying(address)": {
        "params": {
          "_owner": "Address to be checked"
        },
        "returns": {
          "_0": "The underlying balance of the account"
        }
      },
      "claimRedeemRequests(uint32[],uint32[])": {
        "params": {
          "_redeemRequestIds": "The list of redeem requests to claim",
          "_withdrawalEventIds": "The list of resolved withdrawal event ids"
        },
        "returns": {
          "claimStatuses": "The operation status results"
        }
      },
      "decimals()": {
        "returns": {
          "_0": "The decimal count"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "params": {
          "_spender": "Spender that receives the allowance",
          "_subtractableValue": "Amount of shares to subtract"
        },
        "returns": {
          "_0": "True if success"
        }
      },
      "depositAndTransfer(address)": {
        "params": {
          "_recipient": "Address receiving the minted LsETH"
        }
      },
      "depositToConsensusLayerWithDepositRoot(uint256,bytes32)": {
        "params": {
          "_depositRoot": "The root of the deposit tree",
          "_maxCount": "The maximum amount of validator keys to fund"
        }
      },
      "getAdmin()": {
        "returns": {
          "_0": "The admin address"
        }
      },
      "getAllowlist()": {
        "returns": {
          "_0": "The allowlist address"
        }
      },
      "getBalanceToDeposit()": {
        "returns": {
          "_0": "The amount of ETH not yet committed for deposit"
        }
      },
      "getBalanceToRedeem()": {
        "returns": {
          "_0": "The current balance to redeem"
        }
      },
      "getCLSpec()": {
        "returns": {
          "_0": "The Consensus Layer Specification"
        }
      },
      "getCLValidatorCount()": {
        "returns": {
          "_0": "The CL validator count"
        }
      },
      "getCLValidatorTotalBalance()": {
        "returns": {
          "_0": "The CL Validator total balance"
        }
      },
      "getCollector()": {
        "returns": {
          "_0": "The collector address"
        }
      },
      "getCommittedBalance()": {
        "returns": {
          "_0": "The amount of ETH committed for deposit"
        }
      },
      "getCoverageFund()": {
        "returns": {
          "_0": "The coverage fund address"
        }
      },
      "getCurrentEpochId()": {
        "returns": {
          "_0": "The current epoch id"
        }
      },
      "getCurrentFrame()": {
        "returns": {
          "_endTime": "The timestamp of the end of the frame in seconds",
          "_startEpochId": "The epoch at the beginning of the frame",
          "_startTime": "The timestamp of the beginning of the frame in seconds"
        }
      },
      "getDailyCommittableLimits()": {
        "returns": {
          "_0": "The daily committable limits structure"
        }
      },
      "getDepositedValidatorCount()": {
        "returns": {
          "_0": "The deposited validator count"
        }
      },
      "getELFeeRecipient()": {
        "returns": {
          "_0": "The execution layer fee recipient address"
        }
      },
      "getExpectedEpochId()": {
        "returns": {
          "_0": "The current expected epoch id"
        }
      },
      "getFrameFirstEpochId(uint256)": {
        "params": {
          "_epochId": "Epoch id used to get the frame"
        },
        "returns": {
          "_0": "The first epoch id of the frame containing the given epoch id"
        }
      },
      "getGlobalFee()": {
        "returns": {
          "_0": "The global fee"
        }
      },
      "getKeeper()": {
        "returns": {
          "_0": "The keeper address"
        }
      },
      "getLastCompletedEpochId()": {
        "returns": {
          "_0": "The last completed epoch id"
        }
      },
      "getLastConsensusLayerReport()": {
        "returns": {
          "_0": "The stored consensus layer report"
        }
      },
      "getMetadataURI()": {
        "returns": {
          "_0": "The metadata uri string value"
        }
      },
      "getOperatorsRegistry()": {
        "returns": {
          "_0": "The operators registry address"
        }
      },
      "getOracle()": {
        "returns": {
          "_0": "The oracle address"
        }
      },
      "getPendingAdmin()": {
        "returns": {
          "_0": "The pending admin address"
        }
      },
      "getRedeemManager()": {
        "returns": {
          "_0": "The redeem manager address"
        }
      },
      "getReportBounds()": {
        "returns": {
          "_0": "The report bounds"
        }
      },
      "getTime()": {
        "returns": {
          "_0": "The current timestamp from the EVM context"
        }
      },
      "getWithdrawalCredentials()": {
        "returns": {
          "_0": "The withdrawal credentials"
        }
      },
      "increaseAllowance(address,uint256)": {
        "params": {
          "_additionalValue": "Amount of shares to add",
          "_spender": "Spender that receives the allowance"
        },
        "returns": {
          "_0": "True if success"
        }
      },
      "initRiverV1(address,address,bytes32,address,address,address,address,address,uint256)": {
        "params": {
          "_allowlistAddress": "Address of the allowlist contract",
          "_collectorAddress": "Address receiving the the global fee on revenue",
          "_depositContractAddress": "Address to make Consensus Layer deposits",
          "_elFeeRecipientAddress": "Address that receives the execution layer fees",
          "_globalFee": "Amount retained when the ETH balance increases and sent to the collector",
          "_operatorRegistryAddress": "Address of the operator registry",
          "_oracleAddress": "The address of the Oracle contract",
          "_systemAdministratorAddress": "Administrator address",
          "_withdrawalCredentials": "Credentials to use for every validator deposit"
        }
      },
      "initRiverV1_1(address,uint64,uint64,uint64,uint64,uint64,uint256,uint256,uint128,uint128)": {
        "params": {
          "_annualAprUpperBound": "The reporting upper bound",
          "_epochsPerFrame": "The amounts of epochs in a frame",
          "_epochsToAssumedFinality": "The number of epochs before an epoch is considered final on-chain",
          "_genesisTime": "The genesis timestamp",
          "_maxDailyNetCommittableAmount_": "The net daily committable limit",
          "_maxDailyRelativeCommittableAmount_": "The relative daily committable limit",
          "_redeemManager": "The redeem manager address",
          "_relativeLowerBound": "The reporting lower bound",
          "_secondsPerSlot": "The seconds inside a slot",
          "_slotsPerEpoch": "The slots inside an epoch"
        }
      },
      "isValidEpoch(uint256)": {
        "params": {
          "epoch": "The epoch to lookup"
        },
        "returns": {
          "_0": "True if valid"
        }
      },
      "name()": {
        "returns": {
          "_0": "The token name"
        }
      },
      "proposeAdmin(address)": {
        "details": "This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.",
        "params": {
          "_newAdmin": "New admin address"
        }
      },
      "requestRedeem(uint256,address)": {
        "params": {
          "_lsETHAmount": "The amount of LsETH to redeem",
          "_recipient": "The address that will own the redeem request"
        },
        "returns": {
          "_redeemRequestId": "The ID of the newly created redeem request"
        }
      },
      "resolveRedeemRequests(uint32[])": {
        "params": {
          "_redeemRequestIds": "The list of redeem requests to resolve"
        },
        "returns": {
          "withdrawalEventIds": "The list of matching withdrawal events, or error codes"
        }
      },
      "setAllowlist(address)": {
        "params": {
          "_newAllowlist": "New address for the allowlist"
        }
      },
      "setCLSpec((uint64,uint64,uint64,uint64,uint64))": {
        "params": {
          "_newValue": "The new consensus layer spec value"
        }
      },
      "setCollector(address)": {
        "params": {
          "_newCollector": "New address for the collector"
        }
      },
      "setConsensusLayerData((uint256,uint256,uint256,uint256,uint256,uint32,uint32[],bool,bool))": {
        "params": {
          "_report": "The consensus layer report structure"
        }
      },
      "setCoverageFund(address)": {
        "params": {
          "_newCoverageFund": "New address for the fund"
        }
      },
      "setDailyCommittableLimits((uint128,uint128))": {
        "params": {
          "_dcl": "The Daily Committable Limits structure"
        }
      },
      "setELFeeRecipient(address)": {
        "params": {
          "_newELFeeRecipient": "New address for the recipient"
        }
      },
      "setGlobalFee(uint256)": {
        "params": {
          "_newFee": "New fee value"
        }
      },
      "setMetadataURI(string)": {
        "params": {
          "_metadataURI": "The new metadata uri string value"
        }
      },
      "setOracle(address)": {
        "params": {
          "_oracleAddress": "Address of the oracle"
        }
      },
      "setReportBounds((uint256,uint256))": {
        "params": {
          "_newValue": "The new report bounds value"
        }
      },
      "sharesFromUnderlyingBalance(uint256)": {
        "params": {
          "_underlyingAssetAmount": "Amount of underlying asset to convert"
        },
        "returns": {
          "_0": "The amount of shares worth the underlying asset amopunt"
        }
      },
      "symbol()": {
        "returns": {
          "_0": "The token symbol"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "The total supply in shares"
        }
      },
      "totalUnderlyingSupply()": {
        "returns": {
          "_0": "The total underlying asset supply"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "_to": "Address receiving the tokens",
          "_value": "Amount of shares to be sent"
        },
        "returns": {
          "_0": "True if success"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "_from": "Address sending the tokens",
          "_to": "Address receiving the tokens",
          "_value": "Amount of shares to be sent"
        },
        "returns": {
          "_0": "True if success"
        }
      },
      "underlyingBalanceFromShares(uint256)": {
        "params": {
          "_shares": "Amount of shares to convert"
        },
        "returns": {
          "_0": "The underlying asset balance represented by the shares"
        }
      },
      "version()": {
        "returns": {
          "_0": "Version of the contract"
        }
      }
    },
    "title": "River (v1)",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AllowanceTooLow(address,address,uint256,uint256)": [
        {
          "notice": "Allowance too low to perform operation"
        }
      ],
      "BalanceTooLow()": [
        {
          "notice": "Balance too low to perform operation"
        }
      ],
      "Denied(address)": [
        {
          "notice": "The access was denied"
        }
      ],
      "EmptyDeposit()": [
        {
          "notice": "And empty deposit attempt was made"
        }
      ],
      "ErrorOnDeposit()": [
        {
          "notice": "An error occured during the deposit"
        }
      ],
      "InconsistentPublicKeys()": [
        {
          "notice": "The length of the BLS Public key is invalid during deposit"
        }
      ],
      "InconsistentSignatures()": [
        {
          "notice": "The length of the BLS Signature is invalid during deposit"
        }
      ],
      "InvalidArgument()": [
        {
          "notice": "The argument was invalid"
        }
      ],
      "InvalidCall()": [
        {
          "notice": "The call was invalid"
        }
      ],
      "InvalidDecreasingValidatorsExitedBalance(uint256,uint256)": [
        {
          "notice": "The total exited balance decreased"
        }
      ],
      "InvalidDecreasingValidatorsSkimmedBalance(uint256,uint256)": [
        {
          "notice": "The total skimmed balance decreased"
        }
      ],
      "InvalidDepositRoot()": [
        {
          "notice": "Invalid deposit root"
        }
      ],
      "InvalidEmptyString()": [
        {
          "notice": "The string is empty"
        }
      ],
      "InvalidEpoch(uint256)": [
        {
          "notice": "Thrown when an invalid epoch was reported"
        }
      ],
      "InvalidFee()": [
        {
          "notice": "The fee is invalid"
        }
      ],
      "InvalidInitialization(uint256,uint256)": [
        {
          "notice": "An error occured during the initialization"
        }
      ],
      "InvalidPublicKeyCount()": [
        {
          "notice": "The received count of public keys to deposit is invalid"
        }
      ],
      "InvalidPulledClFundsAmount(uint256,uint256)": [
        {
          "notice": "Thrown when the amount received from the Withdraw contract doe not match the requested amount"
        }
      ],
      "InvalidSignatureCount()": [
        {
          "notice": "The received count of signatures to deposit is invalid"
        }
      ],
      "InvalidValidatorCountReport(uint256,uint256,uint256)": [
        {
          "notice": "The reported validator count is invalid"
        }
      ],
      "InvalidWithdrawalCredentials()": [
        {
          "notice": "The withdrawal credentials value is null"
        }
      ],
      "InvalidZeroAddress()": [
        {
          "notice": "The address is zero"
        }
      ],
      "NoAvailableValidatorKeys()": [
        {
          "notice": "The internal key retrieval returned no keys"
        }
      ],
      "NotEnoughFunds()": [
        {
          "notice": "Not enough funds to deposit one validator"
        }
      ],
      "NullTransfer()": [
        {
          "notice": "Invalid empty transfer"
        }
      ],
      "SliceOutOfBounds()": [
        {
          "notice": "The slice is outside of the initial bytes bounds"
        }
      ],
      "SliceOverflow()": [
        {
          "notice": "The length overflows an uint"
        }
      ],
      "TotalValidatorBalanceDecreaseOutOfBound(uint256,uint256,uint256,uint256)": [
        {
          "notice": "The balance decrease is higher than the maximum allowed by the lower bound"
        }
      ],
      "TotalValidatorBalanceIncreaseOutOfBound(uint256,uint256,uint256,uint256)": [
        {
          "notice": "The balance increase is higher than the maximum allowed by the upper bound"
        }
      ],
      "Unauthorized(address)": [
        {
          "notice": "The operator is unauthorized for the caller"
        }
      ],
      "UnauthorizedTransfer(address,address)": [
        {
          "notice": "Invalid transfer recipients"
        }
      ],
      "ZeroMintedShares()": [
        {
          "notice": "The computed amount of shares to mint is 0"
        }
      ]
    },
    "events": {
      "ConsensusLayerDataUpdate(uint256,uint256,bytes32)": {
        "notice": "The consensus layer data provided by the oracle has been updated"
      },
      "Initialize(uint256,bytes)": {
        "notice": "Emitted when the contract is properly initialized"
      },
      "ProcessedConsensusLayerReport((uint256,uint256,uint256,uint256,uint256,uint32,uint32[],bool,bool),(uint256,uint256,uint256,uint256))": {
        "notice": "The provided report has beend processed"
      },
      "PulledCLFunds(uint256,uint256)": {
        "notice": "Emitted when funds are pulled from the CL recipient"
      },
      "PulledCoverageFunds(uint256)": {
        "notice": "Funds have been pulled from the Coverage Fund"
      },
      "PulledELFees(uint256)": {
        "notice": "Funds have been pulled from the Execution Layer Fee Recipient"
      },
      "PulledRedeemManagerExceedingEth(uint256)": {
        "notice": "Emitted when funds are pulled from the redeem manager"
      },
      "ReportedRedeemManager(uint256,uint256,uint256)": {
        "notice": "Emitted when the redeem manager received a withdraw event report"
      },
      "RewardsEarned(address,uint256,uint256,uint256,uint256)": {
        "notice": "The system underlying supply increased. This is a snapshot of the balances for accounting purposes"
      },
      "SetAdmin(address)": {
        "notice": "The admin address changed"
      },
      "SetAllowlist(address)": {
        "notice": "The stored Allowlist has been changed"
      },
      "SetBalanceCommittedToDeposit(uint256,uint256)": {
        "notice": "Emitted when the balance committed to deposit"
      },
      "SetBalanceToDeposit(uint256,uint256)": {
        "notice": "Emitted when the balance to deposit is updated"
      },
      "SetBalanceToRedeem(uint256,uint256)": {
        "notice": "Emitted when the balance to redeem is updated"
      },
      "SetBounds(uint256,uint256)": {
        "notice": "The Report Bounds are changed"
      },
      "SetCollector(address)": {
        "notice": "The stored Collector has been changed"
      },
      "SetCoverageFund(address)": {
        "notice": "The stored Coverage Fund has been changed"
      },
      "SetDepositContractAddress(address)": {
        "notice": "The stored deposit contract address changed"
      },
      "SetDepositedValidatorCount(uint256,uint256)": {
        "notice": "Emitted when the deposited validator count is updated"
      },
      "SetELFeeRecipient(address)": {
        "notice": "The stored Execution Layer Fee Recipient has been changed"
      },
      "SetGlobalFee(uint256)": {
        "notice": "The stored Global Fee has been changed"
      },
      "SetMaxDailyCommittableAmounts(uint256,uint256)": {
        "notice": "Emitted when the daily committable limits are changed"
      },
      "SetMetadataURI(string)": {
        "notice": "The stored Metadata URI string has been changed"
      },
      "SetOperatorsRegistry(address)": {
        "notice": "The stored Operators Registry has been changed"
      },
      "SetOracle(address)": {
        "notice": "The stored oracle address changed"
      },
      "SetPendingAdmin(address)": {
        "notice": "The pending admin address changed"
      },
      "SetRedeemManager(address)": {
        "notice": "Emitted when the redeem manager address is changed"
      },
      "SetSpec(uint64,uint64,uint64,uint64,uint64)": {
        "notice": "The Consensus Layer Spec is changed"
      },
      "SetTotalSupply(uint256)": {
        "notice": "Emitted when the total supply is changed"
      },
      "SetWithdrawalCredentials(bytes32)": {
        "notice": "The stored withdrawal credentials changed"
      },
      "UserDeposit(address,address,uint256)": {
        "notice": "User deposited ETH in the system"
      }
    },
    "kind": "user",
    "methods": {
      "DEPOSIT_SIZE()": {
        "notice": "Size of a deposit in ETH"
      },
      "PUBLIC_KEY_LENGTH()": {
        "notice": "Size of a BLS Public key in bytes"
      },
      "SIGNATURE_LENGTH()": {
        "notice": "Size of a BLS Signature in bytes"
      },
      "_DEPOSIT_SIZE()": {
        "notice": "Size of a deposit in ETH"
      },
      "acceptAdmin()": {
        "notice": "Accept the transfer of ownership"
      },
      "allowance(address,address)": {
        "notice": "Retrieve the allowance value for a spender"
      },
      "approve(address,uint256)": {
        "notice": "Approves an account for future spendings"
      },
      "balanceOf(address)": {
        "notice": "Retrieve the balance of an account"
      },
      "balanceOfUnderlying(address)": {
        "notice": "Retrieve the underlying asset balance of an account"
      },
      "claimRedeemRequests(uint32[],uint32[])": {
        "notice": "Claims several redeem requests"
      },
      "decimals()": {
        "notice": "Retrieve the decimal count"
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "Decrease allowance to another account"
      },
      "deposit()": {
        "notice": "Explicit deposit method to mint on msg.sender"
      },
      "depositAndTransfer(address)": {
        "notice": "Explicit deposit method to mint on msg.sender and transfer to _recipient"
      },
      "depositToConsensusLayerWithDepositRoot(uint256,bytes32)": {
        "notice": "Deposits current balance to the Consensus Layer by batches of 32 ETH"
      },
      "getAdmin()": {
        "notice": "Retrieves the current admin address"
      },
      "getAllowlist()": {
        "notice": "Retrieve the allowlist address"
      },
      "getBalanceToDeposit()": {
        "notice": "Returns the amount of ETH not yet committed for deposit"
      },
      "getBalanceToRedeem()": {
        "notice": "Retrieve the current balance to redeem"
      },
      "getCLSpec()": {
        "notice": "Retrieve the current cl spec"
      },
      "getCLValidatorCount()": {
        "notice": "Get CL validator count (the amount of validator reported by the oracles)"
      },
      "getCLValidatorTotalBalance()": {
        "notice": "Get CL validator total balance"
      },
      "getCollector()": {
        "notice": "Retrieve the collector address"
      },
      "getCommittedBalance()": {
        "notice": "Returns the amount of ETH committed for deposit"
      },
      "getCoverageFund()": {
        "notice": "Retrieve the coverage fund"
      },
      "getCurrentEpochId()": {
        "notice": "Retrieve the current epoch id based on block timestamp"
      },
      "getCurrentFrame()": {
        "notice": "Retrieve the current frame details"
      },
      "getDailyCommittableLimits()": {
        "notice": "Retrieve the configured daily committable limits"
      },
      "getDepositedValidatorCount()": {
        "notice": "Get the deposited validator count (the count of deposits made by the contract)"
      },
      "getELFeeRecipient()": {
        "notice": "Retrieve the execution layer fee recipient"
      },
      "getExpectedEpochId()": {
        "notice": "Retrieve expected epoch id"
      },
      "getFrameFirstEpochId(uint256)": {
        "notice": "Retrieve the first epoch id of the frame of the provided epoch id"
      },
      "getGlobalFee()": {
        "notice": "Get the current global fee"
      },
      "getKeeper()": {
        "notice": "Get the keeper address"
      },
      "getLastCompletedEpochId()": {
        "notice": "Retrieve the last completed epoch id"
      },
      "getLastConsensusLayerReport()": {
        "notice": "Retrieve the last consensus layer report"
      },
      "getMetadataURI()": {
        "notice": "Retrieve the metadata uri string value"
      },
      "getOperatorsRegistry()": {
        "notice": "Retrieve the operators registry"
      },
      "getOracle()": {
        "notice": "Get oracle address"
      },
      "getPendingAdmin()": {
        "notice": "Retrieve the current pending admin address"
      },
      "getRedeemManager()": {
        "notice": "Retrieve the redeem manager"
      },
      "getReportBounds()": {
        "notice": "Retrieve the report bounds"
      },
      "getTime()": {
        "notice": "Retrieve the block timestamp"
      },
      "getWithdrawalCredentials()": {
        "notice": "Retrieve the withdrawal credentials"
      },
      "increaseAllowance(address,uint256)": {
        "notice": "Increase allowance to another account"
      },
      "initRiverV1(address,address,bytes32,address,address,address,address,address,uint256)": {
        "notice": "Initializes the River system"
      },
      "initRiverV1_1(address,uint64,uint64,uint64,uint64,uint64,uint256,uint256,uint128,uint128)": {
        "notice": "Initialized version 1.1 of the River System"
      },
      "initRiverV1_2()": {
        "notice": "Initializes version 1.2 of the River System"
      },
      "isValidEpoch(uint256)": {
        "notice": "Verifies if the provided epoch is valid"
      },
      "name()": {
        "notice": "Retrieve the token name"
      },
      "proposeAdmin(address)": {
        "notice": "Proposes a new address as admin"
      },
      "requestRedeem(uint256,address)": {
        "notice": "Performs a redeem request on the redeem manager"
      },
      "resolveRedeemRequests(uint32[])": {
        "notice": "Resolves the provided redeem requests by calling the redeem manager"
      },
      "sendCLFunds()": {
        "notice": "Input for consensus layer funds, containing both exit and skimming"
      },
      "sendCoverageFunds()": {
        "notice": "Input for coverage funds"
      },
      "sendELFees()": {
        "notice": "Input for execution layer fee earnings"
      },
      "sendRedeemManagerExceedingFunds()": {
        "notice": "Input for the redeem manager funds"
      },
      "setAllowlist(address)": {
        "notice": "Changes the allowlist address"
      },
      "setCLSpec((uint64,uint64,uint64,uint64,uint64))": {
        "notice": "Set the consensus layer spec"
      },
      "setCollector(address)": {
        "notice": "Changes the collector address"
      },
      "setConsensusLayerData((uint256,uint256,uint256,uint256,uint256,uint32,uint32[],bool,bool))": {
        "notice": "Performs all the reporting logics"
      },
      "setCoverageFund(address)": {
        "notice": "Changes the coverage fund"
      },
      "setDailyCommittableLimits((uint128,uint128))": {
        "notice": "Set the daily committable limits"
      },
      "setELFeeRecipient(address)": {
        "notice": "Changes the execution layer fee recipient"
      },
      "setGlobalFee(uint256)": {
        "notice": "Changes the global fee parameter"
      },
      "setMetadataURI(string)": {
        "notice": "Sets the metadata uri string value"
      },
      "setOracle(address)": {
        "notice": "Set the oracle address"
      },
      "setReportBounds((uint256,uint256))": {
        "notice": "Set the report bounds"
      },
      "sharesFromUnderlyingBalance(uint256)": {
        "notice": "Retrieve the shares count from an underlying asset amount"
      },
      "symbol()": {
        "notice": "Retrieve the token symbol"
      },
      "totalSupply()": {
        "notice": "Retrieve the total token supply"
      },
      "totalUnderlyingSupply()": {
        "notice": "Retrieve the total underlying asset supply"
      },
      "transfer(address,uint256)": {
        "notice": "Performs a transfer from the message sender to the provided account"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Performs a transfer between two recipients"
      },
      "underlyingBalanceFromShares(uint256)": {
        "notice": "Retrieve the underlying asset balance from an amount of shares"
      },
      "version()": {
        "notice": "Retrieves the version of the contract"
      }
    },
    "notice": "This contract merges all the manager contracts and implements all the virtual methods stitching all components together",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}