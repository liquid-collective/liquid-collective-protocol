{
  "address": "0x1B375a15D0b5fbB215bD2678C362350AA0f40142",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "AllowanceTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceTooLow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedVersion",
          "type": "uint256"
        }
      ],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullTransfer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenTransferError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "UnauthorizedTransfer",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "cdata",
          "type": "bytes"
        }
      ],
      "name": "Initialize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "river",
          "type": "address"
        }
      ],
      "name": "SetRiver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_subtractableValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_additionalValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_river",
          "type": "address"
        }
      ],
      "name": "initWLSETHV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "sharesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbfe524642c472ce53247e28cd09f2bced8d44bec79416423611bbd0c933ce1f4",
  "receipt": {
    "to": null,
    "from": "0x341C40B94bF2afBFa42573cB78f16Ee15a056238",
    "contractAddress": "0x1B375a15D0b5fbB215bD2678C362350AA0f40142",
    "transactionIndex": 1,
    "gasUsed": "975771",
    "logsBloom": "0x
    "blockHash": "0x5516138056a651d1310fd78093c27dcb4d4aef95ce6df430d6e715c99a260f2e",
    "transactionHash": "0xbfe524642c472ce53247e28cd09f2bced8d44bec79416423611bbd0c933ce1f4",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 529327,
        "transactionHash": "0xbfe524642c472ce53247e28cd09f2bced8d44bec79416423611bbd0c933ce1f4",
        "address": "0x1B375a15D0b5fbB215bD2678C362350AA0f40142",
        "topics": [
          "0x1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a71"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0x5516138056a651d1310fd78093c27dcb4d4aef95ce6df430d6e715c99a260f2e"
      }
    ],
    "blockNumber": 529327,
    "cumulativeGasUsed": "996771",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "326843f44b9486998dc19acaea9f584b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"AllowanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTransferError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"UnauthorizedTransfer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"cdata\",\"type\":\"bytes\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"river\",\"type\":\"address\"}],\"name\":\"SetRiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractableValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_additionalValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_river\",\"type\":\"address\"}],\"name\":\"initWLSETHV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kiln\",\"errors\":{\"AllowanceTooLow(address,address,uint256,uint256)\":[{\"params\":{\"_allowance\":\"Current allowance\",\"_from\":\"Account where funds are sent from\",\"_operator\":\"Account attempting the transfer\",\"_value\":\"Requested transfer value\"}}],\"InvalidInitialization(uint256,uint256)\":[{\"params\":{\"expectedVersion\":\"The version that was expected\",\"version\":\"The version that was attempting to be initialized\"}}],\"UnauthorizedTransfer(address,address)\":[{\"params\":{\"_from\":\"Account sending the funds in the invalid transfer\",\"_to\":\"Account receiving the funds in the invalid transfer\"}}]},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"_owner\":\"Owner that gave the allowance\",\"_spender\":\"Spender that received the allowance\"},\"returns\":{\"_0\":\"The allowance of the owner to the spender\"}},\"approve(address,uint256)\":{\"params\":{\"_spender\":\"Spender that receives the allowance\",\"_value\":\"Amount to allow\"},\"returns\":{\"_0\":\"True if success\"}},\"balanceOf(address)\":{\"params\":{\"_owner\":\"Owner to check the balance\"},\"returns\":{\"_0\":\"The balance of the owner\"}},\"burn(address,uint256)\":{\"details\":\"The message sender burns shares from its balance for the LsETH equivalent valueThe message sender doesn't need to approve the contract to burn the sharesThe freed LsETH is sent to the specified recipient\",\"params\":{\"_recipient\":\"The account receiving the underlying LsETH tokens after shares are burned\",\"_shares\":\"Amount of LsETH to free by burning wrapped LsETH\"}},\"decimals()\":{\"returns\":{\"_0\":\"The decimal count\"}},\"decreaseAllowance(address,uint256)\":{\"params\":{\"_spender\":\"Spender that receives the allowance\",\"_subtractableValue\":\"Amount to subtract\"},\"returns\":{\"_0\":\"True if success\"}},\"increaseAllowance(address,uint256)\":{\"params\":{\"_additionalValue\":\"Amount to add\",\"_spender\":\"Spender that receives the allowance\"},\"returns\":{\"_0\":\"True if success\"}},\"initWLSETHV1(address)\":{\"params\":{\"_river\":\"Address of the River contract\"}},\"mint(address,uint256)\":{\"details\":\"The message sender locks LsETH tokens and received wrapped LsETH tokens in exchangeThe message sender needs to approve the contract to mint the wrapped tokensThe minted wrapped LsETH is sent to the specified recipient\",\"params\":{\"_recipient\":\"The account receiving the new minted wrapped LsETH\",\"_shares\":\"The amount of LsETH to wrap\"}},\"name()\":{\"returns\":{\"_0\":\"The name of the token\"}},\"sharesOf(address)\":{\"params\":{\"_owner\":\"Owner to check the shares balance\"},\"returns\":{\"_0\":\"The shares of the owner\"}},\"symbol()\":{\"returns\":{\"_0\":\"The symbol of the token\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"The total supply\"}},\"transfer(address,uint256)\":{\"params\":{\"_to\":\"Recipient of the transfer\",\"_value\":\"Amount to transfer\"},\"returns\":{\"_0\":\"True if success\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"It is expected that _from has given at least _value allowance to msg.sender\",\"params\":{\"_from\":\"Sender account\",\"_to\":\"Recipient of the transfer\",\"_value\":\"Amount to transfer\"},\"returns\":{\"_0\":\"True if success\"}}},\"title\":\"Wrapped LsETH (v1)\",\"version\":1},\"userdoc\":{\"errors\":{\"AllowanceTooLow(address,address,uint256,uint256)\":[{\"notice\":\"Allowance too low to perform operation\"}],\"BalanceTooLow()\":[{\"notice\":\"Balance too low to perform operation\"}],\"InvalidInitialization(uint256,uint256)\":[{\"notice\":\"An error occured during the initialization\"}],\"InvalidZeroAddress()\":[{\"notice\":\"The address is zero\"}],\"NullTransfer()\":[{\"notice\":\"Invalid empty transfer\"}],\"TokenTransferError()\":[{\"notice\":\"The token transfer failed during the minting or burning process\"}],\"UnauthorizedTransfer(address,address)\":[{\"notice\":\"Invalid transfer recipients\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"An approval has been made\"},\"Burn(address,uint256)\":{\"notice\":\"Tokens have been burned\"},\"Initialize(uint256,bytes)\":{\"notice\":\"Emitted when the contract is properly initialized\"},\"Mint(address,uint256)\":{\"notice\":\"Tokens have been minted\"},\"SetRiver(address)\":{\"notice\":\"The stored value of river has been changed\"},\"Transfer(address,address,uint256)\":{\"notice\":\"A transfer has been made\"}},\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Retrieves the token allowance given from one address to another\"},\"approve(address,uint256)\":{\"notice\":\"Approves another account to transfer tokens\"},\"balanceOf(address)\":{\"notice\":\"Retrieves the token balance of the specified user\"},\"burn(address,uint256)\":{\"notice\":\"Burn tokens and retrieve underlying LsETH tokens\"},\"decimals()\":{\"notice\":\"Retrieves the token decimal count\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Decrease allowance to another account\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Increase allowance to another account\"},\"initWLSETHV1(address)\":{\"notice\":\"Initializes the wrapped token contract\"},\"mint(address,uint256)\":{\"notice\":\"Mint tokens by providing LsETH tokens\"},\"name()\":{\"notice\":\"Retrieves the token full name\"},\"sharesOf(address)\":{\"notice\":\"Retrieves the raw shares count of the user\"},\"symbol()\":{\"notice\":\"Retrieves the token symbol\"},\"totalSupply()\":{\"notice\":\"Retrieves the token total supply\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers tokens between the message sender and a recipient\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers tokens between two accounts\"}},\"notice\":\"This contract wraps the LsETH token into a rebase token, more suitable for some DeFi use-cases         like stable swaps.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/WLSETH.1.sol\":\"WLSETHV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\n/// @title Initializable\\n/// @author Kiln\\n/// @notice This contract ensures that initializers are called only once per version\\ncontract Initializable {\\n    /// @notice Disable initialization on implementations\\n    constructor() {\\n        Version.set(type(uint256).max);\\n        emit Initialize(type(uint256).max, msg.data);\\n    }\\n\\n    /// @notice An error occured during the initialization\\n    /// @param version The version that was attempting to be initialized\\n    /// @param expectedVersion The version that was expected\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    /// @notice Emitted when the contract is properly initialized\\n    /// @param version New version of the contracts\\n    /// @param cdata Complete calldata that was used during the initialization\\n    event Initialize(uint256 version, bytes cdata);\\n\\n    /// @notice Use this modifier on initializers along with a hard-coded version number\\n    /// @param _version Version to initialize\\n    modifier init(uint256 _version) {\\n        if (_version != Version.get()) {\\n            revert InvalidInitialization(_version, Version.get());\\n        }\\n        Version.set(_version + 1); // prevents reentrency on the called method\\n        _;\\n        emit Initialize(_version, msg.data);\\n    }\\n}\\n\",\"keccak256\":\"0x2d85476c54b86308bc9687a7d072fddd2506f84f72a6892f7e0187214094ef79\",\"license\":\"BUSL-1.1\"},\"contracts/src/WLSETH.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\nimport \\\"./interfaces/IWLSETH.1.sol\\\";\\n\\nimport \\\"./Initializable.sol\\\";\\n\\nimport \\\"./state/shared/RiverAddress.sol\\\";\\nimport \\\"./state/shared/ApprovalsPerOwner.sol\\\";\\nimport \\\"./state/wlseth/BalanceOf.sol\\\";\\n\\n/// @title Wrapped LsETH (v1)\\n/// @author Kiln\\n/// @notice This contract wraps the LsETH token into a rebase token, more suitable for some DeFi use-cases\\n///         like stable swaps.\\ncontract WLSETHV1 is IWLSETHV1, Initializable, ReentrancyGuard {\\n    /// @notice Ensures that the value is not 0\\n    /// @param _value Value that must be > 0\\n    modifier isNotNull(uint256 _value) {\\n        if (_value == 0) {\\n            revert NullTransfer();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Ensures that the owner has enough funds\\n    /// @param _owner Owner of the balance to verify\\n    /// @param _value Minimum required value\\n    modifier hasFunds(address _owner, uint256 _value) {\\n        if (_balanceOf(_owner) < _value) {\\n            revert BalanceTooLow();\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function initWLSETHV1(address _river) external init(0) {\\n        RiverAddress.set(_river);\\n        emit SetRiver(_river);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function name() external pure returns (string memory) {\\n        return \\\"Wrapped Liquid Staked ETH\\\";\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function symbol() external pure returns (string memory) {\\n        return \\\"wLsETH\\\";\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function totalSupply() external view returns (uint256) {\\n        return IRiverV1(payable(RiverAddress.get())).balanceOfUnderlying(address(this));\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function balanceOf(address _owner) external view returns (uint256) {\\n        return _balanceOf(_owner);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function sharesOf(address _owner) external view returns (uint256) {\\n        return BalanceOf.get(_owner);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function allowance(address _owner, address _spender) external view returns (uint256) {\\n        return ApprovalsPerOwner.get(_owner, _spender);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function transfer(address _to, uint256 _value)\\n        external\\n        isNotNull(_value)\\n        hasFunds(msg.sender, _value)\\n        returns (bool)\\n    {\\n        if (_to == address(0)) {\\n            revert UnauthorizedTransfer(msg.sender, address(0));\\n        }\\n        return _transfer(msg.sender, _to, _value);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        external\\n        isNotNull(_value)\\n        hasFunds(_from, _value)\\n        returns (bool)\\n    {\\n        if (_to == address(0)) {\\n            revert UnauthorizedTransfer(_from, address(0));\\n        }\\n        _spendAllowance(_from, _value);\\n        return _transfer(_from, _to, _value);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function approve(address _spender, uint256 _value) external returns (bool) {\\n        _approve(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool) {\\n        _approve(msg.sender, _spender, ApprovalsPerOwner.get(msg.sender, _spender) + _additionalValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool) {\\n        _approve(msg.sender, _spender, ApprovalsPerOwner.get(msg.sender, _spender) - _subtractableValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function mint(address _recipient, uint256 _shares) external nonReentrant {\\n        BalanceOf.set(_recipient, BalanceOf.get(_recipient) + _shares);\\n        IRiverV1 river = IRiverV1(payable(RiverAddress.get()));\\n        if (!river.transferFrom(msg.sender, address(this), _shares)) {\\n            revert TokenTransferError();\\n        }\\n        emit Mint(_recipient, _shares);\\n        emit Transfer(address(0), _recipient, river.underlyingBalanceFromShares(_shares));\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function burn(address _recipient, uint256 _shares) external nonReentrant {\\n        uint256 shares = BalanceOf.get(msg.sender);\\n        if (_shares > shares) {\\n            revert BalanceTooLow();\\n        }\\n        BalanceOf.set(msg.sender, shares - _shares);\\n        IRiverV1 river = IRiverV1(payable(RiverAddress.get()));\\n        if (!river.transfer(_recipient, _shares)) {\\n            revert TokenTransferError();\\n        }\\n        emit Transfer(msg.sender, address(0), river.underlyingBalanceFromShares(_shares));\\n        emit Burn(_recipient, _shares);\\n    }\\n\\n    /// @notice Internal utility to spend the allowance of an account from the message sender\\n    /// @param _from Address owning the allowance\\n    /// @param _value Amount of allowance to spend\\n    function _spendAllowance(address _from, uint256 _value) internal {\\n        uint256 currentAllowance = ApprovalsPerOwner.get(_from, msg.sender);\\n        if (currentAllowance < _value) {\\n            revert AllowanceTooLow(_from, msg.sender, currentAllowance, _value);\\n        }\\n        if (currentAllowance != type(uint256).max) {\\n            _approve(_from, msg.sender, currentAllowance - _value);\\n        }\\n    }\\n\\n    /// @notice Internal utility to change the allowance of an owner to a spender\\n    /// @param _owner The owner of the wrapped tokens\\n    /// @param _spender The allowed spender of the wrapped tokens\\n    /// @param _value The new allowance value\\n    function _approve(address _owner, address _spender, uint256 _value) internal {\\n        LibSanitize._notZeroAddress(_owner);\\n        LibSanitize._notZeroAddress(_spender);\\n        ApprovalsPerOwner.set(_owner, _spender, _value);\\n        emit Approval(_owner, _spender, _value);\\n    }\\n\\n    /// @notice Internal utility to retrieve the amount of token per owner\\n    /// @param _owner Account to be checked\\n    /// @return The balance of the account\\n    function _balanceOf(address _owner) internal view returns (uint256) {\\n        return IRiverV1(payable(RiverAddress.get())).underlyingBalanceFromShares(BalanceOf.get(_owner));\\n    }\\n\\n    /// @notice Internal utility to perform an unchecked transfer\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount to be sent\\n    /// @return True if success\\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\\n        uint256 valueToShares = IRiverV1(payable(RiverAddress.get())).sharesFromUnderlyingBalance(_value);\\n        BalanceOf.set(_from, BalanceOf.get(_from) - valueToShares);\\n        BalanceOf.set(_to, BalanceOf.get(_to) + valueToShares);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xfb197c902e5f0382e35cb635593bcefcaed2a40ffcb24972cdc39d0c7eef1317\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRiver.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/river/DailyCommittableLimits.sol\\\";\\n\\nimport \\\"./components/IConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"./components/IOracleManager.1.sol\\\";\\nimport \\\"./components/ISharesManager.1.sol\\\";\\nimport \\\"./components/IUserDepositManager.1.sol\\\";\\n\\n/// @title River Interface (v1)\\n/// @author Kiln\\n/// @notice The main system interface\\ninterface IRiverV1 is IConsensusLayerDepositManagerV1, IUserDepositManagerV1, ISharesManagerV1, IOracleManagerV1 {\\n    /// @notice Funds have been pulled from the Execution Layer Fee Recipient\\n    /// @param amount The amount pulled\\n    event PulledELFees(uint256 amount);\\n\\n    /// @notice Funds have been pulled from the Coverage Fund\\n    /// @param amount The amount pulled\\n    event PulledCoverageFunds(uint256 amount);\\n\\n    /// @notice Emitted when funds are pulled from the redeem manager\\n    /// @param amount The amount pulled\\n    event PulledRedeemManagerExceedingEth(uint256 amount);\\n\\n    /// @notice Emitted when funds are pulled from the CL recipient\\n    /// @param pulledSkimmedEthAmount The amount of skimmed ETH pulled\\n    /// @param pullExitedEthAmount The amount of exited ETH pulled\\n    event PulledCLFunds(uint256 pulledSkimmedEthAmount, uint256 pullExitedEthAmount);\\n\\n    /// @notice The stored Execution Layer Fee Recipient has been changed\\n    /// @param elFeeRecipient The new Execution Layer Fee Recipient\\n    event SetELFeeRecipient(address indexed elFeeRecipient);\\n\\n    /// @notice The stored Coverage Fund has been changed\\n    /// @param coverageFund The new Coverage Fund\\n    event SetCoverageFund(address indexed coverageFund);\\n\\n    /// @notice The stored Collector has been changed\\n    /// @param collector The new Collector\\n    event SetCollector(address indexed collector);\\n\\n    /// @notice The stored Allowlist has been changed\\n    /// @param allowlist The new Allowlist\\n    event SetAllowlist(address indexed allowlist);\\n\\n    /// @notice The stored Global Fee has been changed\\n    /// @param fee The new Global Fee\\n    event SetGlobalFee(uint256 fee);\\n\\n    /// @notice The stored Operators Registry has been changed\\n    /// @param operatorRegistry The new Operators Registry\\n    event SetOperatorsRegistry(address indexed operatorRegistry);\\n\\n    /// @notice The stored Metadata URI string has been changed\\n    /// @param metadataURI The new Metadata URI string\\n    event SetMetadataURI(string metadataURI);\\n\\n    /// @notice The system underlying supply increased. This is a snapshot of the balances for accounting purposes\\n    /// @param _collector The address of the collector during this event\\n    /// @param _oldTotalUnderlyingBalance Old total ETH balance under management by River\\n    /// @param _oldTotalSupply Old total supply in shares\\n    /// @param _newTotalUnderlyingBalance New total ETH balance under management by River\\n    /// @param _newTotalSupply New total supply in shares\\n    event RewardsEarned(\\n        address indexed _collector,\\n        uint256 _oldTotalUnderlyingBalance,\\n        uint256 _oldTotalSupply,\\n        uint256 _newTotalUnderlyingBalance,\\n        uint256 _newTotalSupply\\n    );\\n\\n    /// @notice Emitted when the daily committable limits are changed\\n    /// @param minNetAmount The minimum amount that must be used as the daily committable amount\\n    /// @param maxRelativeAmount The maximum amount that can be used as the daily committable amount, relative to the total underlying supply\\n    event SetMaxDailyCommittableAmounts(uint256 minNetAmount, uint256 maxRelativeAmount);\\n\\n    /// @notice Emitted when the redeem manager address is changed\\n    /// @param redeemManager The address of the redeem manager\\n    event SetRedeemManager(address redeemManager);\\n\\n    /// @notice Emitted when the balance to deposit is updated\\n    /// @param oldAmount The old balance to deposit\\n    /// @param newAmount The new balance to deposit\\n    event SetBalanceToDeposit(uint256 oldAmount, uint256 newAmount);\\n\\n    /// @notice Emitted when the balance to redeem is updated\\n    /// @param oldAmount The old balance to redeem\\n    /// @param newAmount The new balance to redeem\\n    event SetBalanceToRedeem(uint256 oldAmount, uint256 newAmount);\\n\\n    /// @notice Emitted when the balance committed to deposit\\n    /// @param oldAmount The old balance committed to deposit\\n    /// @param newAmount The new balance committed to deposit\\n    event SetBalanceCommittedToDeposit(uint256 oldAmount, uint256 newAmount);\\n\\n    /// @notice Emitted when the redeem manager received a withdraw event report\\n    /// @param redeemManagerDemand The total demand in LsETH of the redeem manager\\n    /// @param suppliedRedeemManagerDemand The amount of LsETH demand actually supplied\\n    /// @param suppliedRedeemManagerDemandInEth The amount in ETH of the supplied demand\\n    event ReportedRedeemManager(\\n        uint256 redeemManagerDemand, uint256 suppliedRedeemManagerDemand, uint256 suppliedRedeemManagerDemandInEth\\n    );\\n\\n    /// @notice Thrown when the amount received from the Withdraw contract doe not match the requested amount\\n    /// @param requested The amount that was requested\\n    /// @param received The amount that was received\\n    error InvalidPulledClFundsAmount(uint256 requested, uint256 received);\\n\\n    /// @notice The computed amount of shares to mint is 0\\n    error ZeroMintedShares();\\n\\n    /// @notice The access was denied\\n    /// @param account The account that was denied\\n    error Denied(address account);\\n\\n    /// @notice Initializes the River system\\n    /// @param _depositContractAddress Address to make Consensus Layer deposits\\n    /// @param _elFeeRecipientAddress Address that receives the execution layer fees\\n    /// @param _withdrawalCredentials Credentials to use for every validator deposit\\n    /// @param _oracleAddress The address of the Oracle contract\\n    /// @param _systemAdministratorAddress Administrator address\\n    /// @param _allowlistAddress Address of the allowlist contract\\n    /// @param _operatorRegistryAddress Address of the operator registry\\n    /// @param _collectorAddress Address receiving the the global fee on revenue\\n    /// @param _globalFee Amount retained when the ETH balance increases and sent to the collector\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _operatorRegistryAddress,\\n        address _collectorAddress,\\n        uint256 _globalFee\\n    ) external;\\n\\n    /// @notice Initialized version 1.1 of the River System\\n    /// @param _redeemManager The redeem manager address\\n    /// @param _epochsPerFrame The amounts of epochs in a frame\\n    /// @param _slotsPerEpoch The slots inside an epoch\\n    /// @param _secondsPerSlot The seconds inside a slot\\n    /// @param _genesisTime The genesis timestamp\\n    /// @param _epochsToAssumedFinality The number of epochs before an epoch is considered final on-chain\\n    /// @param _annualAprUpperBound The reporting upper bound\\n    /// @param _relativeLowerBound The reporting lower bound\\n    /// @param _maxDailyNetCommittableAmount_ The net daily committable limit\\n    /// @param _maxDailyRelativeCommittableAmount_ The relative daily committable limit\\n    function initRiverV1_1(\\n        address _redeemManager,\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime,\\n        uint64 _epochsToAssumedFinality,\\n        uint256 _annualAprUpperBound,\\n        uint256 _relativeLowerBound,\\n        uint128 _maxDailyNetCommittableAmount_,\\n        uint128 _maxDailyRelativeCommittableAmount_\\n    ) external;\\n\\n    /// @notice Initializes version 1.2 of the River System\\n    function initRiverV1_2() external;\\n\\n    /// @notice Get the current global fee\\n    /// @return The global fee\\n    function getGlobalFee() external view returns (uint256);\\n\\n    /// @notice Retrieve the allowlist address\\n    /// @return The allowlist address\\n    function getAllowlist() external view returns (address);\\n\\n    /// @notice Retrieve the collector address\\n    /// @return The collector address\\n    function getCollector() external view returns (address);\\n\\n    /// @notice Retrieve the execution layer fee recipient\\n    /// @return The execution layer fee recipient address\\n    function getELFeeRecipient() external view returns (address);\\n\\n    /// @notice Retrieve the coverage fund\\n    /// @return The coverage fund address\\n    function getCoverageFund() external view returns (address);\\n\\n    /// @notice Retrieve the redeem manager\\n    /// @return The redeem manager address\\n    function getRedeemManager() external view returns (address);\\n\\n    /// @notice Retrieve the operators registry\\n    /// @return The operators registry address\\n    function getOperatorsRegistry() external view returns (address);\\n\\n    /// @notice Retrieve the metadata uri string value\\n    /// @return The metadata uri string value\\n    function getMetadataURI() external view returns (string memory);\\n\\n    /// @notice Retrieve the configured daily committable limits\\n    /// @return The daily committable limits structure\\n    function getDailyCommittableLimits()\\n        external\\n        view\\n        returns (DailyCommittableLimits.DailyCommittableLimitsStruct memory);\\n\\n    /// @notice Resolves the provided redeem requests by calling the redeem manager\\n    /// @param _redeemRequestIds The list of redeem requests to resolve\\n    /// @return withdrawalEventIds The list of matching withdrawal events, or error codes\\n    function resolveRedeemRequests(uint32[] calldata _redeemRequestIds)\\n        external\\n        view\\n        returns (int64[] memory withdrawalEventIds);\\n\\n    /// @notice Set the daily committable limits\\n    /// @param _dcl The Daily Committable Limits structure\\n    function setDailyCommittableLimits(DailyCommittableLimits.DailyCommittableLimitsStruct memory _dcl) external;\\n\\n    /// @notice Retrieve the current balance to redeem\\n    /// @return The current balance to redeem\\n    function getBalanceToRedeem() external view returns (uint256);\\n\\n    /// @notice Performs a redeem request on the redeem manager\\n    /// @param _lsETHAmount The amount of LsETH to redeem\\n    /// @param _recipient The address that will own the redeem request\\n    /// @return redeemRequestId The ID of the newly created redeem request\\n    function requestRedeem(uint256 _lsETHAmount, address _recipient) external returns (uint32 redeemRequestId);\\n\\n    /// @notice Claims several redeem requests\\n    /// @param _redeemRequestIds The list of redeem requests to claim\\n    /// @param _withdrawalEventIds The list of resolved withdrawal event ids\\n    /// @return claimStatuses The operation status results\\n    function claimRedeemRequests(uint32[] calldata _redeemRequestIds, uint32[] calldata _withdrawalEventIds)\\n        external\\n        returns (uint8[] memory claimStatuses);\\n\\n    /// @notice Changes the global fee parameter\\n    /// @param _newFee New fee value\\n    function setGlobalFee(uint256 _newFee) external;\\n\\n    /// @notice Changes the allowlist address\\n    /// @param _newAllowlist New address for the allowlist\\n    function setAllowlist(address _newAllowlist) external;\\n\\n    /// @notice Changes the collector address\\n    /// @param _newCollector New address for the collector\\n    function setCollector(address _newCollector) external;\\n\\n    /// @notice Changes the execution layer fee recipient\\n    /// @param _newELFeeRecipient New address for the recipient\\n    function setELFeeRecipient(address _newELFeeRecipient) external;\\n\\n    /// @notice Changes the coverage fund\\n    /// @param _newCoverageFund New address for the fund\\n    function setCoverageFund(address _newCoverageFund) external;\\n\\n    /// @notice Sets the metadata uri string value\\n    /// @param _metadataURI The new metadata uri string value\\n    function setMetadataURI(string memory _metadataURI) external;\\n\\n    /// @notice Input for execution layer fee earnings\\n    function sendELFees() external payable;\\n\\n    /// @notice Input for consensus layer funds, containing both exit and skimming\\n    function sendCLFunds() external payable;\\n\\n    /// @notice Input for coverage funds\\n    function sendCoverageFunds() external payable;\\n\\n    /// @notice Input for the redeem manager funds\\n    function sendRedeemManagerExceedingFunds() external payable;\\n}\\n\",\"keccak256\":\"0xafbb868e8fce1ecf6dbed963ba5042080b4a2913d8ee05dcf6e39ae4e34fdce0\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IWLSETH.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Wrapped LsETH Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to wrap the LsETH token into a rebase token.\\ninterface IWLSETHV1 {\\n    /// @notice A transfer has been made\\n    /// @param from The transfer sender\\n    /// @param to The transfer recipient\\n    /// @param value The amount transfered\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice An approval has been made\\n    /// @param owner The token owner\\n    /// @param spender The account allowed by the owner\\n    /// @param value The amount allowed\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Tokens have been minted\\n    /// @param recipient The account receiving the new tokens\\n    /// @param shares The amount of LsETH provided\\n    event Mint(address indexed recipient, uint256 shares);\\n\\n    /// @notice Tokens have been burned\\n    /// @param recipient The account that receive the underlying LsETH\\n    /// @param shares The amount of LsETH that got sent back\\n    event Burn(address indexed recipient, uint256 shares);\\n\\n    /// @notice The stored value of river has been changed\\n    /// @param river The new address of river\\n    event SetRiver(address indexed river);\\n\\n    /// @notice The token transfer failed during the minting or burning process\\n    error TokenTransferError();\\n\\n    /// @notice Balance too low to perform operation\\n    error BalanceTooLow();\\n\\n    /// @notice Allowance too low to perform operation\\n    /// @param _from Account where funds are sent from\\n    /// @param _operator Account attempting the transfer\\n    /// @param _allowance Current allowance\\n    /// @param _value Requested transfer value\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n\\n    /// @notice Invalid empty transfer\\n    error NullTransfer();\\n\\n    /// @notice Invalid transfer recipients\\n    /// @param _from Account sending the funds in the invalid transfer\\n    /// @param _to Account receiving the funds in the invalid transfer\\n    error UnauthorizedTransfer(address _from, address _to);\\n\\n    /// @notice Initializes the wrapped token contract\\n    /// @param _river Address of the River contract\\n    function initWLSETHV1(address _river) external;\\n\\n    /// @notice Retrieves the token full name\\n    /// @return The name of the token\\n    function name() external pure returns (string memory);\\n\\n    /// @notice Retrieves the token symbol\\n    /// @return The symbol of the token\\n    function symbol() external pure returns (string memory);\\n\\n    /// @notice Retrieves the token decimal count\\n    /// @return The decimal count\\n    function decimals() external pure returns (uint8);\\n\\n    /// @notice Retrieves the token total supply\\n    /// @return The total supply\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Retrieves the token balance of the specified user\\n    /// @param _owner Owner to check the balance\\n    /// @return The balance of the owner\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieves the raw shares count of the user\\n    /// @param _owner Owner to check the shares balance\\n    /// @return The shares of the owner\\n    function sharesOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieves the token allowance given from one address to another\\n    /// @param _owner Owner that gave the allowance\\n    /// @param _spender Spender that received the allowance\\n    /// @return The allowance of the owner to the spender\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    /// @notice Transfers tokens between the message sender and a recipient\\n    /// @param _to Recipient of the transfer\\n    /// @param _value Amount to transfer\\n    /// @return True if success\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Transfers tokens between two accounts\\n    /// @dev It is expected that _from has given at least _value allowance to msg.sender\\n    /// @param _from Sender account\\n    /// @param _to Recipient of the transfer\\n    /// @param _value Amount to transfer\\n    /// @return True if success\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Approves another account to transfer tokens\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _value Amount to allow\\n    /// @return True if success\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    /// @notice Increase allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _additionalValue Amount to add\\n    /// @return True if success\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool);\\n\\n    /// @notice Decrease allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _subtractableValue Amount to subtract\\n    /// @return True if success\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool);\\n\\n    /// @notice Mint tokens by providing LsETH tokens\\n    /// @dev The message sender locks LsETH tokens and received wrapped LsETH tokens in exchange\\n    /// @dev The message sender needs to approve the contract to mint the wrapped tokens\\n    /// @dev The minted wrapped LsETH is sent to the specified recipient\\n    /// @param _recipient The account receiving the new minted wrapped LsETH\\n    /// @param _shares The amount of LsETH to wrap\\n    function mint(address _recipient, uint256 _shares) external;\\n\\n    /// @notice Burn tokens and retrieve underlying LsETH tokens\\n    /// @dev The message sender burns shares from its balance for the LsETH equivalent value\\n    /// @dev The message sender doesn't need to approve the contract to burn the shares\\n    /// @dev The freed LsETH is sent to the specified recipient\\n    /// @param _recipient The account receiving the underlying LsETH tokens after shares are burned\\n    /// @param _shares Amount of LsETH to free by burning wrapped LsETH\\n    function burn(address _recipient, uint256 _shares) external;\\n}\\n\",\"keccak256\":\"0xba6c6746790cbdcecb28fdaebd51477f88564a9d8e05a456ec87ac6974700ee5\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IConsensusLayerDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Consensys Layer Deposit Manager Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the interactions with the official deposit contract\\ninterface IConsensusLayerDepositManagerV1 {\\n    /// @notice The stored deposit contract address changed\\n    /// @param depositContract Address of the deposit contract\\n    event SetDepositContractAddress(address indexed depositContract);\\n\\n    /// @notice The stored withdrawal credentials changed\\n    /// @param withdrawalCredentials The withdrawal credentials to use for deposits\\n    event SetWithdrawalCredentials(bytes32 withdrawalCredentials);\\n\\n    /// @notice Emitted when the deposited validator count is updated\\n    /// @param oldDepositedValidatorCount The old deposited validator count value\\n    /// @param newDepositedValidatorCount The new deposited validator count value\\n    event SetDepositedValidatorCount(uint256 oldDepositedValidatorCount, uint256 newDepositedValidatorCount);\\n\\n    /// @notice Not enough funds to deposit one validator\\n    error NotEnoughFunds();\\n\\n    /// @notice The length of the BLS Public key is invalid during deposit\\n    error InconsistentPublicKeys();\\n\\n    /// @notice The length of the BLS Signature is invalid during deposit\\n    error InconsistentSignatures();\\n\\n    /// @notice The internal key retrieval returned no keys\\n    error NoAvailableValidatorKeys();\\n\\n    /// @notice The received count of public keys to deposit is invalid\\n    error InvalidPublicKeyCount();\\n\\n    /// @notice The received count of signatures to deposit is invalid\\n    error InvalidSignatureCount();\\n\\n    /// @notice The withdrawal credentials value is null\\n    error InvalidWithdrawalCredentials();\\n\\n    /// @notice An error occured during the deposit\\n    error ErrorOnDeposit();\\n\\n    /// @notice Returns the amount of ETH not yet committed for deposit\\n    /// @return The amount of ETH not yet committed for deposit\\n    function getBalanceToDeposit() external view returns (uint256);\\n\\n    /// @notice Returns the amount of ETH committed for deposit\\n    /// @return The amount of ETH committed for deposit\\n    function getCommittedBalance() external view returns (uint256);\\n\\n    /// @notice Retrieve the withdrawal credentials\\n    /// @return The withdrawal credentials\\n    function getWithdrawalCredentials() external view returns (bytes32);\\n\\n    /// @notice Get the deposited validator count (the count of deposits made by the contract)\\n    /// @return The deposited validator count\\n    function getDepositedValidatorCount() external view returns (uint256);\\n\\n    /// @notice Deposits current balance to the Consensus Layer by batches of 32 ETH\\n    /// @param _maxCount The maximum amount of validator keys to fund\\n    function depositToConsensusLayer(uint256 _maxCount) external;\\n}\\n\",\"keccak256\":\"0x8e55597dba3a8c15b097a9e66bb5b833020bcb67ea833acb1d6e1f4b1a0457c0\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IOracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../state/river/CLSpec.sol\\\";\\nimport \\\"../../state/river/ReportBounds.sol\\\";\\n\\n/// @title Oracle Manager (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the inputs provided by the oracle\\ninterface IOracleManagerV1 {\\n    /// @notice The stored oracle address changed\\n    /// @param oracleAddress The new oracle address\\n    event SetOracle(address indexed oracleAddress);\\n\\n    /// @notice The consensus layer data provided by the oracle has been updated\\n    /// @param validatorCount The new count of validators running on the consensus layer\\n    /// @param validatorTotalBalance The new total balance sum of all validators\\n    /// @param roundId Round identifier\\n    event ConsensusLayerDataUpdate(uint256 validatorCount, uint256 validatorTotalBalance, bytes32 roundId);\\n\\n    /// @notice The Consensus Layer Spec is changed\\n    /// @param epochsPerFrame The number of epochs inside a frame\\n    /// @param slotsPerEpoch The number of slots inside an epoch\\n    /// @param secondsPerSlot The number of seconds inside a slot\\n    /// @param genesisTime The genesis timestamp\\n    /// @param epochsToAssumedFinality The number of epochs before an epoch is considered final\\n    event SetSpec(\\n        uint64 epochsPerFrame,\\n        uint64 slotsPerEpoch,\\n        uint64 secondsPerSlot,\\n        uint64 genesisTime,\\n        uint64 epochsToAssumedFinality\\n    );\\n\\n    /// @notice The Report Bounds are changed\\n    /// @param annualAprUpperBound The reporting upper bound\\n    /// @param relativeLowerBound The reporting lower bound\\n    event SetBounds(uint256 annualAprUpperBound, uint256 relativeLowerBound);\\n\\n    /// @notice The provided report has beend processed\\n    /// @param report The report that was provided\\n    /// @param trace The trace structure providing more insights on internals\\n    event ProcessedConsensusLayerReport(\\n        IOracleManagerV1.ConsensusLayerReport report, ConsensusLayerDataReportingTrace trace\\n    );\\n\\n    /// @notice The reported validator count is invalid\\n    /// @param providedValidatorCount The received validator count value\\n    /// @param depositedValidatorCount The number of deposits performed by the system\\n    /// @param lastReportedValidatorCount The last reported validator count\\n    error InvalidValidatorCountReport(\\n        uint256 providedValidatorCount, uint256 depositedValidatorCount, uint256 lastReportedValidatorCount\\n    );\\n\\n    /// @notice Thrown when an invalid epoch was reported\\n    /// @param epoch Invalid epoch\\n    error InvalidEpoch(uint256 epoch);\\n\\n    /// @notice The balance increase is higher than the maximum allowed by the upper bound\\n    /// @param prevTotalEthIncludingExited The previous total balance, including all exited balance\\n    /// @param postTotalEthIncludingExited The post-report total balance, including all exited balance\\n    /// @param timeElapsed The time in seconds since last report\\n    /// @param annualAprUpperBound The upper bound value that was used\\n    error TotalValidatorBalanceIncreaseOutOfBound(\\n        uint256 prevTotalEthIncludingExited,\\n        uint256 postTotalEthIncludingExited,\\n        uint256 timeElapsed,\\n        uint256 annualAprUpperBound\\n    );\\n\\n    /// @notice The balance decrease is higher than the maximum allowed by the lower bound\\n    /// @param prevTotalEthIncludingExited The previous total balance, including all exited balance\\n    /// @param postTotalEthIncludingExited The post-report total balance, including all exited balance\\n    /// @param timeElapsed The time in seconds since last report\\n    /// @param relativeLowerBound The lower bound value that was used\\n    error TotalValidatorBalanceDecreaseOutOfBound(\\n        uint256 prevTotalEthIncludingExited,\\n        uint256 postTotalEthIncludingExited,\\n        uint256 timeElapsed,\\n        uint256 relativeLowerBound\\n    );\\n\\n    /// @notice The total exited balance decreased\\n    /// @param currentValidatorsExitedBalance The current exited balance\\n    /// @param newValidatorsExitedBalance The new exited balance\\n    error InvalidDecreasingValidatorsExitedBalance(\\n        uint256 currentValidatorsExitedBalance, uint256 newValidatorsExitedBalance\\n    );\\n\\n    /// @notice The total skimmed balance decreased\\n    /// @param currentValidatorsSkimmedBalance The current exited balance\\n    /// @param newValidatorsSkimmedBalance The new exited balance\\n    error InvalidDecreasingValidatorsSkimmedBalance(\\n        uint256 currentValidatorsSkimmedBalance, uint256 newValidatorsSkimmedBalance\\n    );\\n\\n    /// @notice Trace structure emitted via logs during reporting\\n    struct ConsensusLayerDataReportingTrace {\\n        uint256 rewards;\\n        uint256 pulledELFees;\\n        uint256 pulledRedeemManagerExceedingEthBuffer;\\n        uint256 pulledCoverageFunds;\\n    }\\n\\n    /// @notice The format of the oracle report\\n    struct ConsensusLayerReport {\\n        // this is the epoch at which the report was performed\\n        // data should be fetched up to the state of this epoch by the oracles\\n        uint256 epoch;\\n        // the sum of all the validator balances on the consensus layer\\n        // when a validator enters the exit queue, the validator is considered stopped, its balance is accounted in both validatorsExitingBalance and validatorsBalance\\n        // when a validator leaves the exit queue and the funds are sweeped onto the execution layer, the balance is only accounted in validatorsExitedBalance and not in validatorsBalance\\n        // this value can decrease between reports\\n        uint256 validatorsBalance;\\n        // the sum of all the skimmings performed on the validators\\n        // these values can be found in the execution layer block bodies under the withdrawals field\\n        // a withdrawal is considered skimming if\\n        // - the epoch at which it happened is < validator.withdrawableEpoch\\n        // - the epoch at which it happened is >= validator.withdrawableEpoch and in that case we only account for what would be above 32 eth as skimming\\n        // this value cannot decrease over reports\\n        uint256 validatorsSkimmedBalance;\\n        // the sum of all the exits performed on the validators\\n        // these values can be found in the execution layer block bodies under the withdrawals field\\n        // a withdrawal is considered exit if\\n        // - the epoch at which it happened is >= validator.withdrawableEpoch and in that case we only account for what would be <= 32 eth as exit\\n        // this value cannot decrease over reports\\n        uint256 validatorsExitedBalance;\\n        // the sum of all the exiting balance, which is all the validators on their way to get sweeped and exited\\n        // this includes voluntary exits and slashings\\n        // this value can decrease between reports\\n        uint256 validatorsExitingBalance;\\n        // the count of activated validators\\n        // even validators that are exited are still accounted\\n        // this value cannot decrease over reports\\n        uint32 validatorsCount;\\n        // an array containing the count of stopped validators per operator\\n        // the first element of the array is the sum of all stopped validators\\n        // then index 1 would be operator 0\\n        // these values cannot decrease over reports\\n        uint32[] stoppedValidatorCountPerOperator;\\n        // flag enabled by the oracles when the buffer rebalancing is activated\\n        // the activation logic is written in the oracle specification and all oracle members must agree on the activation\\n        // when active, the eth in the deposit buffer can be used to pay for exits in the redeem manager\\n        bool rebalanceDepositToRedeemMode;\\n        // flag enabled by the oracles when the slashing containment is activated\\n        // the activation logic is written in the oracle specification and all oracle members must agree on the activation\\n        // This flag is activated when a pre-defined threshold of slashed validators in our set of validators is reached\\n        // This flag is deactivated when a bottom threshold is met, this means that when we reach the upper threshold and activate the flag, we will deactivate it when we reach the bottom threshold and not before\\n        // when active, no more validator exits can be requested by the protocol\\n        bool slashingContainmentMode;\\n    }\\n\\n    /// @notice The format of the oracle report in storage\\n    /// @notice These fields have the exact same function as the ones in ConsensusLayerReport, but this struct is optimized for storage\\n    struct StoredConsensusLayerReport {\\n        uint256 epoch;\\n        uint256 validatorsBalance;\\n        uint256 validatorsSkimmedBalance;\\n        uint256 validatorsExitedBalance;\\n        uint256 validatorsExitingBalance;\\n        uint32 validatorsCount;\\n        bool rebalanceDepositToRedeemMode;\\n        bool slashingContainmentMode;\\n    }\\n\\n    /// @notice Get oracle address\\n    /// @return The oracle address\\n    function getOracle() external view returns (address);\\n\\n    /// @notice Get CL validator total balance\\n    /// @return The CL Validator total balance\\n    function getCLValidatorTotalBalance() external view returns (uint256);\\n\\n    /// @notice Get CL validator count (the amount of validator reported by the oracles)\\n    /// @return The CL validator count\\n    function getCLValidatorCount() external view returns (uint256);\\n\\n    /// @notice Verifies if the provided epoch is valid\\n    /// @param epoch The epoch to lookup\\n    /// @return True if valid\\n    function isValidEpoch(uint256 epoch) external view returns (bool);\\n\\n    /// @notice Retrieve the block timestamp\\n    /// @return The current timestamp from the EVM context\\n    function getTime() external view returns (uint256);\\n\\n    /// @notice Retrieve expected epoch id\\n    /// @return The current expected epoch id\\n    function getExpectedEpochId() external view returns (uint256);\\n\\n    /// @notice Retrieve the last completed epoch id\\n    /// @return The last completed epoch id\\n    function getLastCompletedEpochId() external view returns (uint256);\\n\\n    /// @notice Retrieve the current epoch id based on block timestamp\\n    /// @return The current epoch id\\n    function getCurrentEpochId() external view returns (uint256);\\n\\n    /// @notice Retrieve the current cl spec\\n    /// @return The Consensus Layer Specification\\n    function getCLSpec() external view returns (CLSpec.CLSpecStruct memory);\\n\\n    /// @notice Retrieve the current frame details\\n    /// @return _startEpochId The epoch at the beginning of the frame\\n    /// @return _startTime The timestamp of the beginning of the frame in seconds\\n    /// @return _endTime The timestamp of the end of the frame in seconds\\n    function getCurrentFrame() external view returns (uint256 _startEpochId, uint256 _startTime, uint256 _endTime);\\n\\n    /// @notice Retrieve the first epoch id of the frame of the provided epoch id\\n    /// @param _epochId Epoch id used to get the frame\\n    /// @return The first epoch id of the frame containing the given epoch id\\n    function getFrameFirstEpochId(uint256 _epochId) external view returns (uint256);\\n\\n    /// @notice Retrieve the report bounds\\n    /// @return The report bounds\\n    function getReportBounds() external view returns (ReportBounds.ReportBoundsStruct memory);\\n\\n    /// @notice Retrieve the last consensus layer report\\n    /// @return The stored consensus layer report\\n    function getLastConsensusLayerReport() external view returns (IOracleManagerV1.StoredConsensusLayerReport memory);\\n\\n    /// @notice Set the oracle address\\n    /// @param _oracleAddress Address of the oracle\\n    function setOracle(address _oracleAddress) external;\\n\\n    /// @notice Set the consensus layer spec\\n    /// @param _newValue The new consensus layer spec value\\n    function setCLSpec(CLSpec.CLSpecStruct calldata _newValue) external;\\n\\n    /// @notice Set the report bounds\\n    /// @param _newValue The new report bounds value\\n    function setReportBounds(ReportBounds.ReportBoundsStruct calldata _newValue) external;\\n\\n    /// @notice Performs all the reporting logics\\n    /// @param _report The consensus layer report structure\\n    function setConsensusLayerData(ConsensusLayerReport calldata _report) external;\\n}\\n\",\"keccak256\":\"0x3c4400c0157355e2f123604ac5949e868644d34f7f122ef47ab311e68eefe54d\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/ISharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Shares Manager Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the shares of the depositor and the ERC20 interface\\ninterface ISharesManagerV1 is IERC20 {\\n    /// @notice Emitted when the total supply is changed\\n    event SetTotalSupply(uint256 totalSupply);\\n\\n    /// @notice Balance too low to perform operation\\n    error BalanceTooLow();\\n\\n    /// @notice Allowance too low to perform operation\\n    /// @param _from Account where funds are sent from\\n    /// @param _operator Account attempting the transfer\\n    /// @param _allowance Current allowance\\n    /// @param _value Requested transfer value in shares\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n\\n    /// @notice Invalid empty transfer\\n    error NullTransfer();\\n\\n    /// @notice Invalid transfer recipients\\n    /// @param _from Account sending the funds in the invalid transfer\\n    /// @param _to Account receiving the funds in the invalid transfer\\n    error UnauthorizedTransfer(address _from, address _to);\\n\\n    /// @notice Retrieve the token name\\n    /// @return The token name\\n    function name() external pure returns (string memory);\\n\\n    /// @notice Retrieve the token symbol\\n    /// @return The token symbol\\n    function symbol() external pure returns (string memory);\\n\\n    /// @notice Retrieve the decimal count\\n    /// @return The decimal count\\n    function decimals() external pure returns (uint8);\\n\\n    /// @notice Retrieve the total token supply\\n    /// @return The total supply in shares\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the total underlying asset supply\\n    /// @return The total underlying asset supply\\n    function totalUnderlyingSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The balance of the account in shares\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The underlying balance of the account\\n    function balanceOfUnderlying(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance from an amount of shares\\n    /// @param _shares Amount of shares to convert\\n    /// @return The underlying asset balance represented by the shares\\n    function underlyingBalanceFromShares(uint256 _shares) external view returns (uint256);\\n\\n    /// @notice Retrieve the shares count from an underlying asset amount\\n    /// @param _underlyingAssetAmount Amount of underlying asset to convert\\n    /// @return The amount of shares worth the underlying asset amopunt\\n    function sharesFromUnderlyingBalance(uint256 _underlyingAssetAmount) external view returns (uint256);\\n\\n    /// @notice Retrieve the allowance value for a spender\\n    /// @param _owner Address that issued the allowance\\n    /// @param _spender Address that received the allowance\\n    /// @return The allowance in shares for a given spender\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    /// @notice Performs a transfer from the message sender to the provided account\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Performs a transfer between two recipients\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Approves an account for future spendings\\n    /// @dev An approved account can use transferFrom to transfer funds on behalf of the token owner\\n    /// @param _spender Address that is allowed to spend the tokens\\n    /// @param _value The allowed amount in shares, will override previous value\\n    /// @return True if success\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    /// @notice Increase allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _additionalValue Amount of shares to add\\n    /// @return True if success\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool);\\n\\n    /// @notice Decrease allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _subtractableValue Amount of shares to subtract\\n    /// @return True if success\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool);\\n}\\n\",\"keccak256\":\"0x48205c5d24d9946b62185f16c7d43e071e96b0d4b8a25ce6948fd4450f868444\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IUserDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title User Deposit Manager (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the inbound transfers cases or the explicit submissions\\ninterface IUserDepositManagerV1 {\\n    /// @notice User deposited ETH in the system\\n    /// @param depositor Address performing the deposit\\n    /// @param recipient Address receiving the minted shares\\n    /// @param amount Amount in ETH deposited\\n    event UserDeposit(address indexed depositor, address indexed recipient, uint256 amount);\\n\\n    /// @notice And empty deposit attempt was made\\n    error EmptyDeposit();\\n\\n    /// @notice Explicit deposit method to mint on msg.sender\\n    function deposit() external payable;\\n\\n    /// @notice Explicit deposit method to mint on msg.sender and transfer to _recipient\\n    /// @param _recipient Address receiving the minted LsETH\\n    function depositAndTransfer(address _recipient) external payable;\\n\\n    /// @notice Implicit deposit method, when the user performs a regular transfer to the contract\\n    receive() external payable;\\n\\n    /// @notice Invalid call, when the user sends a transaction with a data payload but no method matched\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x1abcda34431bfbb82b6ede5c852f4ece6544cca24616f58cb44ed340df0ef06b\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibBasisPoints.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Lib Basis Points\\n/// @notice Holds the basis points max value\\nlibrary LibBasisPoints {\\n    /// @notice The max value for basis points (represents 100%)\\n    uint256 internal constant BASIS_POINTS_MAX = 10_000;\\n}\\n\",\"keccak256\":\"0x97228a01dcd48f033555e3a44f9be37fb474a1b027f703f28097d539808f1c6c\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibErrors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Errors\\n/// @notice Library of common errors\\nlibrary LibErrors {\\n    /// @notice The operator is unauthorized for the caller\\n    /// @param caller Address performing the call\\n    error Unauthorized(address caller);\\n\\n    /// @notice The call was invalid\\n    error InvalidCall();\\n\\n    /// @notice The argument was invalid\\n    error InvalidArgument();\\n\\n    /// @notice The address is zero\\n    error InvalidZeroAddress();\\n\\n    /// @notice The string is empty\\n    error InvalidEmptyString();\\n\\n    /// @notice The fee is invalid\\n    error InvalidFee();\\n}\\n\",\"keccak256\":\"0x7bdbd4ada124723fa08e2088405ba0bf4453beb23d84f4af09e894e06e751f33\",\"license\":\"MIT\"},\"contracts/src/libraries/LibSanitize.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./LibErrors.sol\\\";\\nimport \\\"./LibBasisPoints.sol\\\";\\n\\n/// @title Lib Sanitize\\n/// @notice Utilities to sanitize input values\\nlibrary LibSanitize {\\n    /// @notice Reverts if address is 0\\n    /// @param _address Address to check\\n    function _notZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert LibErrors.InvalidZeroAddress();\\n        }\\n    }\\n\\n    /// @notice Reverts if string is empty\\n    /// @param _string String to check\\n    function _notEmptyString(string memory _string) internal pure {\\n        if (bytes(_string).length == 0) {\\n            revert LibErrors.InvalidEmptyString();\\n        }\\n    }\\n\\n    /// @notice Reverts if fee is invalid\\n    /// @param _fee Fee to check\\n    function _validFee(uint256 _fee) internal pure {\\n        if (_fee > LibBasisPoints.BASIS_POINTS_MAX) {\\n            revert LibErrors.InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8aeeb866c4657a96c8b4c006340c7996d15a6f0044b730c276bc3ba8d5bcd48\",\"license\":\"MIT\"},\"contracts/src/libraries/LibUnstructuredStorage.sol\":{\"content\":\"// SPDX-License-Identifier:    MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @title Lib Unstructured Storage\\n/// @notice Utilities to work with unstructured storage\\nlibrary LibUnstructuredStorage {\\n    /// @notice Retrieve a bool value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bool value\\n    function getStorageBool(bytes32 _position) internal view returns (bool data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an address value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The address value\\n    function getStorageAddress(bytes32 _position) internal view returns (address data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve a bytes32 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bytes32 value\\n    function getStorageBytes32(bytes32 _position) internal view returns (bytes32 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an uint256 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The uint256 value\\n    function getStorageUint256(bytes32 _position) internal view returns (uint256 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Sets a bool value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bool value to set\\n    function setStorageBool(bytes32 _position, bool _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an address value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The address value to set\\n    function setStorageAddress(bytes32 _position, address _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets a bytes32 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bytes32 value to set\\n    function setStorageBytes32(bytes32 _position, bytes32 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an uint256 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The uint256 value to set\\n    function setStorageUint256(bytes32 _position, uint256 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8e1a2f0dc18e023e12747355b3c95258d4de698f2bb6196222a1dc92940caa3\",\"license\":\"MIT\"},\"contracts/src/state/river/CLSpec.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Consensus Layer Spec Storage\\n/// @notice Utility to manage the Consensus Layer Spec in storage\\nlibrary CLSpec {\\n    /// @notice Storage slot of the Consensus Layer Spec\\n    bytes32 internal constant CL_SPEC_SLOT = bytes32(uint256(keccak256(\\\"river.state.clSpec\\\")) - 1);\\n\\n    /// @notice The Consensus Layer Spec structure\\n    struct CLSpecStruct {\\n        /// @custom:attribute The count of epochs per frame, 225 means 24h\\n        uint64 epochsPerFrame;\\n        /// @custom:attribute The count of slots in an epoch (32 on mainnet)\\n        uint64 slotsPerEpoch;\\n        /// @custom:attribute The seconds in a slot (12 on mainnet)\\n        uint64 secondsPerSlot;\\n        /// @custom:attribute The block timestamp of the first consensus layer block\\n        uint64 genesisTime;\\n        /// @custom:attribute The count of epochs before considering an epoch final on-chain\\n        uint64 epochsToAssumedFinality;\\n    }\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        CLSpecStruct value;\\n    }\\n\\n    /// @notice Retrieve the Consensus Layer Spec from storage\\n    /// @return The Consensus Layer Spec\\n    function get() internal view returns (CLSpecStruct memory) {\\n        bytes32 slot = CL_SPEC_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Consensus Layer Spec value in storage\\n    /// @param _newCLSpec The new value to set in storage\\n    function set(CLSpecStruct memory _newCLSpec) internal {\\n        bytes32 slot = CL_SPEC_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newCLSpec;\\n    }\\n}\\n\",\"keccak256\":\"0x308ade79e8c4249aa28e30b86518c9e02b223dca76e01b5036de63d2c7176635\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DailyCommittableLimits.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Daily Committable Limits storage\\n/// @notice Utility to manage the Daily Committable Limits in storage\\nlibrary DailyCommittableLimits {\\n    /// @notice Storage slot of the Daily Committable Limits storage\\n    bytes32 internal constant DAILY_COMMITTABLE_LIMITS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.dailyCommittableLimits\\\")) - 1);\\n\\n    /// @notice The daily committable limits structure\\n    struct DailyCommittableLimitsStruct {\\n        uint128 minDailyNetCommittableAmount;\\n        uint128 maxDailyRelativeCommittableAmount;\\n    }\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        DailyCommittableLimitsStruct value;\\n    }\\n\\n    /// @notice Retrieve the Daily Committable Limits from storage\\n    /// @return The Daily Committable Limits\\n    function get() internal view returns (DailyCommittableLimitsStruct memory) {\\n        bytes32 slot = DAILY_COMMITTABLE_LIMITS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Daily Committable Limits value in storage\\n    /// @param _newValue The new value to set in storage\\n    function set(DailyCommittableLimitsStruct memory _newValue) internal {\\n        bytes32 slot = DAILY_COMMITTABLE_LIMITS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0x884cfb145667d95b1bbae229e3d32d17fc935d5587cb2d318f9506b15df0457c\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/ReportBounds.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Report Bounds Storage\\n/// @notice Utility to manage the Report Bounds in storage\\nlibrary ReportBounds {\\n    /// @notice Storage slot of the Report Bounds\\n    bytes32 internal constant REPORT_BOUNDS_SLOT = bytes32(uint256(keccak256(\\\"river.state.reportBounds\\\")) - 1);\\n\\n    /// @notice The Report Bounds structure\\n    struct ReportBoundsStruct {\\n        /// @custom:attribute The maximum allowed annual apr, checked before submitting a report to River\\n        uint256 annualAprUpperBound;\\n        /// @custom:attribute The maximum allowed balance decrease, also checked before submitting a report to River\\n        uint256 relativeLowerBound;\\n    }\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        ReportBoundsStruct value;\\n    }\\n\\n    /// @notice Retrieve the Report Bounds from storage\\n    /// @return The Report Bounds\\n    function get() internal view returns (ReportBoundsStruct memory) {\\n        bytes32 slot = REPORT_BOUNDS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Report Bounds in storage\\n    /// @param _newReportBounds The new Report Bounds value\\n    function set(ReportBoundsStruct memory _newReportBounds) internal {\\n        bytes32 slot = REPORT_BOUNDS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newReportBounds;\\n    }\\n}\\n\",\"keccak256\":\"0xbae9eb981ca4714656f2cee8137329d94196fca58d0c18a097da583662023ca9\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/ApprovalsPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Approvals Per Owner Storage\\n/// @notice Utility to manage the Approvals Per Owner in storage\\nlibrary ApprovalsPerOwner {\\n    /// @notice Storage slot of the Approvals Per Owner\\n    bytes32 internal constant APPROVALS_PER_OWNER_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.approvalsPerOwner\\\")) - 1);\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from an owner to an operator to the approval amount\\n        mapping(address => mapping(address => uint256)) value;\\n    }\\n\\n    /// @notice Retrieve the approval for an owner to an operator\\n    /// @param _owner The account that gave the approval\\n    /// @param _operator The account receiving the approval\\n    /// @return The value of the approval\\n    function get(address _owner, address _operator) internal view returns (uint256) {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_owner][_operator];\\n    }\\n\\n    /// @notice Set the approval value for an owner to an operator\\n    /// @param _owner The account that gives the approval\\n    /// @param _operator The account receiving the approval\\n    /// @param _newValue The value of the approval\\n    function set(address _owner, address _operator, uint256 _newValue) internal {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_owner][_operator] = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0xc8ec39447b09747e3cfff1c456743b4f52fafbd994122ebf8285035fc497c95c\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/RiverAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title River Address Storage\\n/// @notice Utility to manage the River Address in storage\\nlibrary RiverAddress {\\n    /// @notice Storage slot of the River Address\\n    bytes32 internal constant RIVER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.riverAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the River Address\\n    /// @return The River Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(RIVER_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the River Address\\n    /// @param _newValue New River Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(RIVER_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xffc846d2e04891e3b0625a9e710fa2a18b4e1af43609f0d76d6c3b7bf5c51384\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Version Storage\\n/// @notice Utility to manage the Version in storage\\nlibrary Version {\\n    /// @notice Storage slot of the Version\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    /// @notice Retrieve the Version\\n    /// @return The Version\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    /// @notice Sets the Version\\n    /// @param _newValue New Version\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(VERSION_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x82f1cc4bbb1f16c1cdbac93596334805eb1a2e0e40ccbd0ab0f78e22d3f83864\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/wlseth/BalanceOf.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Balance Storage\\n/// @notice Utility to manage the Balance in storage\\nlibrary BalanceOf {\\n    /// @notice Storage slot of the Balance\\n    bytes32 internal constant BALANCE_OF_SLOT = bytes32(uint256(keccak256(\\\"river.state.balanceOf\\\")) - 1);\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from an owner to its balance\\n        mapping(address => uint256) value;\\n    }\\n\\n    /// @notice Retrieve balance of an owner\\n    /// @param _owner The owner of the balance\\n    /// @return The balance of the owner\\n    function get(address _owner) internal view returns (uint256) {\\n        bytes32 slot = BALANCE_OF_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_owner];\\n    }\\n\\n    /// @notice Set the balance of an owner\\n    /// @param _owner The owner to change the balance of\\n    /// @param _newValue New balance value for the owner\\n    function set(address _owner, uint256 _newValue) internal {\\n        bytes32 slot = BALANCE_OF_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_owner] = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0xf52be4ba5ff038027e2514501d3e67fa8a00e9001fa48ccba4013815fd17e341\",\"license\":\"BUSL-1.1\"},\"openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002660001961006e60201b6108cf1760201c565b7f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7160001960003660405161005c939291906100b6565b60405180910390a16001600055610111565b6100af61009c60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6100ec565b60001b826100b260201b6108f31760201c565b50565b9055565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b60008282101561010c57634e487b7160e01b600052601160045260246000fd5b500390565b610fc7806101206000396000f3fe608060405234801561001057600080fd5b50600436106100c55760003560e01c806306fdde03146100ca578063095ea7b3146101115780630fa74a101461013457806318160ddd1461014957806323b872dd1461015f578063313ce56714610172578063395093511461018157806340c10f191461019457806370a08231146101a757806395d89b41146101ba5780639dc29fac146101dc578063a457c2d7146101ef578063a9059cbb14610202578063dd62ed3e14610215578063f5eb42dc14610228575b600080fd5b6040805180820190915260198152780aee4c2e0e0cac84098d2e2ead2c840a6e8c2d6cac8408aa89603b1b60208201525b6040516101089190610cc5565b60405180910390f35b61012461011f366004610d36565b61023b565b6040519015158152602001610108565b610147610142366004610d60565b610251565b005b610151610321565b604051908152602001610108565b61012461016d366004610d7b565b61039a565b60405160128152602001610108565b61012461018f366004610d36565b610432565b6101476101a2366004610d36565b610453565b6101516101b5366004610d60565b610618565b6040805180820190915260068152650ee98e68aa8960d31b60208201526100fb565b6101476101ea366004610d36565b610629565b6101246101fd366004610d36565b610808565b610124610210366004610d36565b610824565b610151610223366004610db7565b6108b1565b610151610236366004610d60565b6108c4565b60006102483384846108f7565b50600192915050565b600061025b610966565b8114610291578061026a610966565b604051631cfd276760e31b8152600481019290925260248201526044015b60405180910390fd5b6102a461029f826001610e00565b6108cf565b6102ad82610988565b6040516001600160a01b038316907ffc0d749143b04e0d92a3b49edae84a45f6bc88b75e99d9118ec4d7e87fe626c590600090a27f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a718160003660405161031593929190610e18565b60405180910390a15050565b600061032b6109ad565b604051633af9e66960e01b81523060048201526001600160a01b039190911690633af9e66990602401602060405180830381865afa158015610371573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103959190610e4e565b905090565b600081806103bb576040516336b216db60e21b815260040160405180910390fd5b8483806103c7836109cb565b10156103e6576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b03861661041257866000604051637617407560e11b8152600401610288929190610e67565b61041c8786610a4b565b610427878787610ab6565b979650505050505050565b60006102483384846104443388610b9d565b61044e9190610e00565b6108f7565b600260005414156104765760405162461bcd60e51b815260040161028890610e81565b6002600055610498828261048982610be3565b6104939190610e00565b610c1f565b60006104a26109ad565b6040516323b872dd60e01b8152336004820152306024820152604481018490529091506001600160a01b038216906323b872dd906064016020604051808303816000875af11580156104f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051c9190610eb8565b61053957604051630c87abf760e21b815260040160405180910390fd5b826001600160a01b03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858360405161057491815260200190565b60405180910390a2604051637bce1f8160e11b8152600481018390526001600160a01b0380851691600091600080516020610f52833981519152919085169063f79c3f0290602401602060405180830381865afa1580156105d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fd9190610e4e565b60405190815260200160405180910390a35050600160005550565b6000610623826109cb565b92915050565b6002600054141561064c5760405162461bcd60e51b815260040161028890610e81565b6002600090815561065c33610be3565b90508082111561067f576040516351940b3960e11b815260040160405180910390fd5b61068d336104938484610eda565b60006106976109ad565b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529192509082169063a9059cbb906044016020604051808303816000875af11580156106ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070e9190610eb8565b61072b57604051630c87abf760e21b815260040160405180910390fd5b604051637bce1f8160e11b8152600481018490526000903390600080516020610f52833981519152906001600160a01b0385169063f79c3f0290602401602060405180830381865afa158015610785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a99190610e4e565b60405190815260200160405180910390a3836001600160a01b03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5846040516107f591815260200190565b60405180910390a2505060016000555050565b600061024833848461081a3388610b9d565b61044e9190610eda565b60008180610845576040516336b216db60e21b815260040160405180910390fd5b338380610851836109cb565b1015610870576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b03861661089c57336000604051637617407560e11b8152600401610288929190610e67565b6108a7338787610ab6565b9695505050505050565b60006108bd8383610b9d565b9392505050565b600061062382610be3565b6108f06108eb6001600080516020610f72833981519152610eda565b829055565b50565b9055565b61090083610c59565b61090982610c59565b610914838383610c80565b816001600160a01b0316836001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161095991815260200190565b60405180910390a3505050565b60006103956109846001600080516020610f72833981519152610eda565b5490565b61099181610c59565b6108f06108eb6001600080516020610ef2833981519152610eda565b60006103956109846001600080516020610ef2833981519152610eda565b60006109d56109ad565b6001600160a01b031663f79c3f026109ec84610be3565b6040518263ffffffff1660e01b8152600401610a0a91815260200190565b602060405180830381865afa158015610a27573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106239190610e4e565b6000610a578333610b9d565b905081811015610a9957604051637b936de360e01b81526001600160a01b03841660048201523360248201526044810182905260648101839052608401610288565b6000198114610ab157610ab1833361044e8585610eda565b505050565b600080610ac16109ad565b6001600160a01b031663799a1954846040518263ffffffff1660e01b8152600401610aee91815260200190565b602060405180830381865afa158015610b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2f9190610e4e565b9050610b498582610b3f88610be3565b6104939190610eda565b610b57848261048987610be3565b836001600160a01b0316856001600160a01b0316600080516020610f5283398151915285604051610b8a91815260200190565b60405180910390a3506001949350505050565b600080610bb96001600080516020610f32833981519152610eda565b6001600160a01b039485166000908152602091825260408082209590961681529390525050205490565b600080610bff6001600080516020610f12833981519152610eda565b6001600160a01b0390931660009081526020939093525050604090205490565b6000610c3a6001600080516020610f12833981519152610eda565b6001600160a01b03909316600090815260209390935250604090912055565b6001600160a01b0381166108f05760405163f6b2911f60e01b815260040160405180910390fd5b6000610c9b6001600080516020610f32833981519152610eda565b6001600160a01b039485166000908152602091825260408082209590961681529390525091902055565b600060208083528351808285015260005b81811015610cf257858101830151858201604001528201610cd6565b81811115610d04576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610d3157600080fd5b919050565b60008060408385031215610d4957600080fd5b610d5283610d1a565b946020939093013593505050565b600060208284031215610d7257600080fd5b6108bd82610d1a565b600080600060608486031215610d9057600080fd5b610d9984610d1a565b9250610da760208501610d1a565b9150604084013590509250925092565b60008060408385031215610dca57600080fd5b610dd383610d1a565b9150610de160208401610d1a565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610e1357610e13610dea565b500190565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b600060208284031215610e6057600080fd5b5051919050565b6001600160a01b0392831681529116602082015260400190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060208284031215610eca57600080fd5b815180151581146108bd57600080fd5b600082821015610eec57610eec610dea565b50039056fe1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973cce1633dc2255491f780d2d58eb35f53cb7635f8ce2320aa44b03b0e6ae6fdeadc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfda264697066735822122068d6c28c3f24557d7e3a66a87b098a4ff95d685b0dcc81ededbd9985f1ea77a064736f6c634300080a0033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Kiln",
    "errors": {
      "AllowanceTooLow(address,address,uint256,uint256)": [
        {
          "params": {
            "_allowance": "Current allowance",
            "_from": "Account where funds are sent from",
            "_operator": "Account attempting the transfer",
            "_value": "Requested transfer value"
          }
        }
      ],
      "InvalidInitialization(uint256,uint256)": [
        {
          "params": {
            "expectedVersion": "The version that was expected",
            "version": "The version that was attempting to be initialized"
          }
        }
      ],
      "UnauthorizedTransfer(address,address)": [
        {
          "params": {
            "_from": "Account sending the funds in the invalid transfer",
            "_to": "Account receiving the funds in the invalid transfer"
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "_owner": "Owner that gave the allowance",
          "_spender": "Spender that received the allowance"
        },
        "returns": {
          "_0": "The allowance of the owner to the spender"
        }
      },
      "approve(address,uint256)": {
        "params": {
          "_spender": "Spender that receives the allowance",
          "_value": "Amount to allow"
        },
        "returns": {
          "_0": "True if success"
        }
      },
      "balanceOf(address)": {
        "params": {
          "_owner": "Owner to check the balance"
        },
        "returns": {
          "_0": "The balance of the owner"
        }
      },
      "burn(address,uint256)": {
        "details": "The message sender burns shares from its balance for the LsETH equivalent valueThe message sender doesn't need to approve the contract to burn the sharesThe freed LsETH is sent to the specified recipient",
        "params": {
          "_recipient": "The account receiving the underlying LsETH tokens after shares are burned",
          "_shares": "Amount of LsETH to free by burning wrapped LsETH"
        }
      },
      "decimals()": {
        "returns": {
          "_0": "The decimal count"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "params": {
          "_spender": "Spender that receives the allowance",
          "_subtractableValue": "Amount to subtract"
        },
        "returns": {
          "_0": "True if success"
        }
      },
      "increaseAllowance(address,uint256)": {
        "params": {
          "_additionalValue": "Amount to add",
          "_spender": "Spender that receives the allowance"
        },
        "returns": {
          "_0": "True if success"
        }
      },
      "initWLSETHV1(address)": {
        "params": {
          "_river": "Address of the River contract"
        }
      },
      "mint(address,uint256)": {
        "details": "The message sender locks LsETH tokens and received wrapped LsETH tokens in exchangeThe message sender needs to approve the contract to mint the wrapped tokensThe minted wrapped LsETH is sent to the specified recipient",
        "params": {
          "_recipient": "The account receiving the new minted wrapped LsETH",
          "_shares": "The amount of LsETH to wrap"
        }
      },
      "name()": {
        "returns": {
          "_0": "The name of the token"
        }
      },
      "sharesOf(address)": {
        "params": {
          "_owner": "Owner to check the shares balance"
        },
        "returns": {
          "_0": "The shares of the owner"
        }
      },
      "symbol()": {
        "returns": {
          "_0": "The symbol of the token"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "The total supply"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "_to": "Recipient of the transfer",
          "_value": "Amount to transfer"
        },
        "returns": {
          "_0": "True if success"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "It is expected that _from has given at least _value allowance to msg.sender",
        "params": {
          "_from": "Sender account",
          "_to": "Recipient of the transfer",
          "_value": "Amount to transfer"
        },
        "returns": {
          "_0": "True if success"
        }
      }
    },
    "title": "Wrapped LsETH (v1)",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AllowanceTooLow(address,address,uint256,uint256)": [
        {
          "notice": "Allowance too low to perform operation"
        }
      ],
      "BalanceTooLow()": [
        {
          "notice": "Balance too low to perform operation"
        }
      ],
      "InvalidInitialization(uint256,uint256)": [
        {
          "notice": "An error occured during the initialization"
        }
      ],
      "InvalidZeroAddress()": [
        {
          "notice": "The address is zero"
        }
      ],
      "NullTransfer()": [
        {
          "notice": "Invalid empty transfer"
        }
      ],
      "TokenTransferError()": [
        {
          "notice": "The token transfer failed during the minting or burning process"
        }
      ],
      "UnauthorizedTransfer(address,address)": [
        {
          "notice": "Invalid transfer recipients"
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "An approval has been made"
      },
      "Burn(address,uint256)": {
        "notice": "Tokens have been burned"
      },
      "Initialize(uint256,bytes)": {
        "notice": "Emitted when the contract is properly initialized"
      },
      "Mint(address,uint256)": {
        "notice": "Tokens have been minted"
      },
      "SetRiver(address)": {
        "notice": "The stored value of river has been changed"
      },
      "Transfer(address,address,uint256)": {
        "notice": "A transfer has been made"
      }
    },
    "kind": "user",
    "methods": {
      "allowance(address,address)": {
        "notice": "Retrieves the token allowance given from one address to another"
      },
      "approve(address,uint256)": {
        "notice": "Approves another account to transfer tokens"
      },
      "balanceOf(address)": {
        "notice": "Retrieves the token balance of the specified user"
      },
      "burn(address,uint256)": {
        "notice": "Burn tokens and retrieve underlying LsETH tokens"
      },
      "decimals()": {
        "notice": "Retrieves the token decimal count"
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "Decrease allowance to another account"
      },
      "increaseAllowance(address,uint256)": {
        "notice": "Increase allowance to another account"
      },
      "initWLSETHV1(address)": {
        "notice": "Initializes the wrapped token contract"
      },
      "mint(address,uint256)": {
        "notice": "Mint tokens by providing LsETH tokens"
      },
      "name()": {
        "notice": "Retrieves the token full name"
      },
      "sharesOf(address)": {
        "notice": "Retrieves the raw shares count of the user"
      },
      "symbol()": {
        "notice": "Retrieves the token symbol"
      },
      "totalSupply()": {
        "notice": "Retrieves the token total supply"
      },
      "transfer(address,uint256)": {
        "notice": "Transfers tokens between the message sender and a recipient"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfers tokens between two accounts"
      }
    },
    "notice": "This contract wraps the LsETH token into a rebase token, more suitable for some DeFi use-cases         like stable swaps.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26417,
        "contract": "contracts/src/WLSETH.1.sol:WLSETHV1",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}