{
  "address": "0xd6d5CbBE9D03b44d01Df5cEF62BB985f576e4eB5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "AllowanceTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceTooLow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedVersion",
          "type": "uint256"
        }
      ],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullTransfer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenTransferError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_river",
          "type": "address"
        }
      ],
      "name": "initWLSETHV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9c8bcd28f401c315fcf95b698ff8c7a4b69e1037fb2f3ddd8e05186d2f66d8de",
  "receipt": {
    "to": null,
    "from": "0x92D7d6DADe15fcF369534cEb8CD1A27f97185ab3",
    "contractAddress": "0xd6d5CbBE9D03b44d01Df5cEF62BB985f576e4eB5",
    "transactionIndex": 19,
    "gasUsed": "800876",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd7150fde806b974126c2ce605935649c456c26a22c753902e3cdde95b8dbb14e",
    "transactionHash": "0x9c8bcd28f401c315fcf95b698ff8c7a4b69e1037fb2f3ddd8e05186d2f66d8de",
    "logs": [],
    "blockNumber": 7491659,
    "cumulativeGasUsed": "6082401",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e0747c9f458a392de0f02a251cd18ac6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"AllowanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTransferError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_river\",\"type\":\"address\"}],\"name\":\"initWLSETHV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kiln\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"_owner\":\"Owner that gave the allowance\",\"_spender\":\"Spender that received the allowance\"}},\"approve(address,uint256)\":{\"params\":{\"_spender\":\"Spender that receives the allowance\",\"_value\":\"Amount to allow\"}},\"balanceOf(address)\":{\"params\":{\"_owner\":\"Owner to check the balance\"}},\"burn(address,uint256)\":{\"details\":\"Burned tokens are sent to recipient but are minted from the message sender balanceNo approval required from the message sender\",\"params\":{\"_recipient\":\"Spender that receives the allowance\",\"_value\":\"Amount of wrapped token to give to the burn\"}},\"initWLSETHV1(address)\":{\"params\":{\"_river\":\"Address of the River contract\"}},\"mint(address,uint256)\":{\"details\":\"Minted tokens are sent to recipient but are minted from the message sender balanceIt is expected that the message sender approves _value amount of River token tothis contract before calling\",\"params\":{\"_recipient\":\"Spender that receives the allowance\",\"_value\":\"Amount of river token to give to the mint\"}},\"transfer(address,uint256)\":{\"params\":{\"_to\":\"Recipient of the transfer\",\"_value\":\"Amount to transfer\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"If _from is not the message sender, then it is expected that _from has given at leave _value allowance to msg.sender\",\"params\":{\"_from\":\"Sender account\",\"_to\":\"Recipient of the transfer\",\"_value\":\"Amount to transfer\"}}},\"title\":\"Wrapped lsETH v1\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Retrieves the token allowance given from one address to another\"},\"approve(address,uint256)\":{\"notice\":\"Approves another account to transfer tokens\"},\"balanceOf(address)\":{\"notice\":\"Retrieves the token balance of the specified user\"},\"burn(address,uint256)\":{\"notice\":\"Burn tokens and retrieve underlying River tokens\"},\"decimals()\":{\"notice\":\"Retrieves the token decimal count\"},\"initWLSETHV1(address)\":{\"notice\":\"Initializes the wrapped token contract\"},\"mint(address,uint256)\":{\"notice\":\"Mint tokens by providing River tokens\"},\"name()\":{\"notice\":\"Retrieves the token full name\"},\"symbol()\":{\"notice\":\"Retrieves the token ticker\"},\"totalSupply()\":{\"notice\":\"Retrieves the token total supply\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers tokens between the message sender and a recipient\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers tokens between two accounts\"}},\"notice\":\"This contract wraps the lsETH token into a rebase token, more suitable for some DeFi use-cases         like stable swaps.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/WLSETH.1.sol\":\"WLSETHV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\ncontract Initializable {\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    modifier init(uint256 version) {\\n        if (version != Version.get()) {\\n            revert InvalidInitialization(version, Version.get());\\n        }\\n        Version.set(version + 1); // prevents reentrency on the called method\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc93555f4bd660f91e565f20753e0d3a01e783e673bc0209d0d1e33c7b6941053\",\"license\":\"BUSL-1.1\"},\"contracts/src/WLSETH.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\n\\nimport \\\"./state/shared/RiverAddress.sol\\\";\\nimport \\\"./state/shared/ApprovalsPerOwner.sol\\\";\\nimport \\\"./state/wlseth/BalanceOf.sol\\\";\\n\\nimport \\\"openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// @title Wrapped lsETH v1\\n/// @author Kiln\\n/// @notice This contract wraps the lsETH token into a rebase token, more suitable for some DeFi use-cases\\n///         like stable swaps.\\ncontract WLSETHV1 is Initializable, ReentrancyGuard {\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    error BalanceTooLow();\\n    error UnauthorizedOperation();\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n    error NullTransfer();\\n    error TokenTransferError();\\n\\n    modifier isNotNull(uint256 _value) {\\n        if (_value == 0) {\\n            revert NullTransfer();\\n        }\\n        _;\\n    }\\n\\n    modifier hasFunds(address _owner, uint256 _value) {\\n        if (_balanceOf(_owner) < _value) {\\n            revert BalanceTooLow();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Initializes the wrapped token contract\\n    /// @param _river Address of the River contract\\n    function initWLSETHV1(address _river) external init(0) {\\n        RiverAddress.set(_river);\\n    }\\n\\n    /// @notice Retrieves the token full name\\n    function name() external pure returns (string memory) {\\n        return \\\"Wrapped Alluvial Ether\\\";\\n    }\\n\\n    /// @notice Retrieves the token ticker\\n    function symbol() external pure returns (string memory) {\\n        return \\\"wlsETH\\\";\\n    }\\n\\n    /// @notice Retrieves the token decimal count\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @notice Retrieves the token total supply\\n    function totalSupply() external view returns (uint256) {\\n        return IRiverV1(payable(RiverAddress.get())).balanceOfUnderlying(address(this));\\n    }\\n\\n    /// @notice Retrieves the token balance of the specified user\\n    /// @param _owner Owner to check the balance\\n    function balanceOf(address _owner) external view returns (uint256 balance) {\\n        return _balanceOf(_owner);\\n    }\\n\\n    /// @notice Retrieves the token allowance given from one address to another\\n    /// @param _owner Owner that gave the allowance\\n    /// @param _spender Spender that received the allowance\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining) {\\n        return ApprovalsPerOwner.get(_owner, _spender);\\n    }\\n\\n    /// @notice Transfers tokens between the message sender and a recipient\\n    /// @param _to Recipient of the transfer\\n    /// @param _value Amount to transfer\\n    function transfer(address _to, uint256 _value)\\n        external\\n        isNotNull(_value)\\n        hasFunds(msg.sender, _value)\\n        returns (bool)\\n    {\\n        return _transfer(msg.sender, _to, _value);\\n    }\\n\\n    /// @notice Transfers tokens between two accounts\\n    /// @dev If _from is not the message sender, then it is expected that _from has given at leave _value allowance to msg.sender\\n    /// @param _from Sender account\\n    /// @param _to Recipient of the transfer\\n    /// @param _value Amount to transfer\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        external\\n        isNotNull(_value)\\n        hasFunds(_from, _value)\\n        returns (bool)\\n    {\\n        if (_from != msg.sender) {\\n            uint256 currentAllowance = ApprovalsPerOwner.get(_from, msg.sender);\\n            if (currentAllowance < _value) {\\n                revert AllowanceTooLow(_from, msg.sender, currentAllowance, _value);\\n            }\\n            ApprovalsPerOwner.set(_from, msg.sender, currentAllowance - _value);\\n        }\\n        return _transfer(_from, _to, _value);\\n    }\\n\\n    /// @notice Approves another account to transfer tokens\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _value Amount to allow\\n    function approve(address _spender, uint256 _value) external returns (bool success) {\\n        ApprovalsPerOwner.set(msg.sender, _spender, _value);\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /// @notice Mint tokens by providing River tokens\\n    /// @dev Minted tokens are sent to recipient but are minted from the message sender balance\\n    /// @dev It is expected that the message sender approves _value amount of River token to\\n    /// @dev this contract before calling\\n    /// @param _recipient Spender that receives the allowance\\n    /// @param _value Amount of river token to give to the mint\\n    function mint(address _recipient, uint256 _value) external nonReentrant {\\n        BalanceOf.set(_recipient, BalanceOf.get(_recipient) + _value);\\n        if (!IRiverV1(payable(RiverAddress.get())).transferFrom(msg.sender, address(this), _value)) {\\n            revert TokenTransferError();\\n        }\\n    }\\n\\n    /// @notice Burn tokens and retrieve underlying River tokens\\n    /// @dev Burned tokens are sent to recipient but are minted from the message sender balance\\n    /// @dev No approval required from the message sender\\n    /// @param _recipient Spender that receives the allowance\\n    /// @param _value Amount of wrapped token to give to the burn\\n    function burn(address _recipient, uint256 _value) external nonReentrant {\\n        uint256 callerUnderlyingBalance =\\n            IRiverV1(payable(RiverAddress.get())).underlyingBalanceFromShares(BalanceOf.get(msg.sender));\\n        if (_value > callerUnderlyingBalance) {\\n            revert BalanceTooLow();\\n        }\\n        uint256 sharesAmount = IRiverV1(payable(RiverAddress.get())).sharesFromUnderlyingBalance(_value);\\n        BalanceOf.set(msg.sender, BalanceOf.get(msg.sender) - sharesAmount);\\n        if (!IRiverV1(payable(RiverAddress.get())).transfer(_recipient, sharesAmount)) {\\n            revert TokenTransferError();\\n        }\\n    }\\n\\n    function _balanceOf(address _owner) internal view returns (uint256 balance) {\\n        return IRiverV1(payable(RiverAddress.get())).underlyingBalanceFromShares(BalanceOf.get(_owner));\\n    }\\n\\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\\n        uint256 valueToShares = IRiverV1(payable(RiverAddress.get())).sharesFromUnderlyingBalance(_value);\\n        BalanceOf.set(_from, BalanceOf.get(_from) - valueToShares);\\n        BalanceOf.set(_to, BalanceOf.get(_to) + valueToShares);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xec40f52ed31f5a09f861329d5262d3fcff039e5c7d1e28dc9ebcd90469a57191\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRiver.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./components/IConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"./components/IOracleManager.1.sol\\\";\\nimport \\\"./components/ISharesManager.1.sol\\\";\\nimport \\\"./components/IUserDepositManager.1.sol\\\";\\n\\ninterface IRiverV1 is IConsensusLayerDepositManagerV1, IUserDepositManagerV1, ISharesManagerV1, IOracleManagerV1 {\\n    error ZeroMintedShares();\\n\\n    event PulledELFees(uint256 amount);\\n\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _operatorRegistryAddress,\\n        address _treasuryAddress,\\n        uint256 _globalFee,\\n        uint256 _operatorRewardsShare\\n    )\\n        external;\\n\\n    function setGlobalFee(uint256 newFee) external;\\n    function getGlobalFee() external view returns (uint256);\\n    function setOperatorRewardsShare(uint256 newOperatorRewardsShare) external;\\n    function getOperatorRewardsShare() external view returns (uint256);\\n    function setAllowlist(address _newAllowlist) external;\\n    function getAllowlist() external view returns (address);\\n    function setTreasury(address _newTreasury) external;\\n    function getTreasury() external view returns (address);\\n    function transferOwnership(address _newAdmin) external;\\n    function acceptOwnership() external;\\n    function getAdministrator() external view returns (address);\\n    function getPendingAdministrator() external view returns (address);\\n    function setELFeeRecipient(address _newELFeeRecipient) external;\\n    function getELFeeRecipient() external view returns (address);\\n    function sendELFees() external payable;\\n}\\n\",\"keccak256\":\"0xf2c1e3e2b8b2148adbd71f76336096a789f682504f77a4ae079de11f84360386\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IConsensusLayerDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IConsensusLayerDepositManagerV1 {\\n    event FundedValidatorKey(bytes publicKey);\\n\\n    error NotEnoughFunds();\\n    error InconsistentPublicKeys();\\n    error InconsistentSignatures();\\n    error NoAvailableValidatorKeys();\\n    error InvalidPublicKeyCount();\\n    error InvalidSignatureCount();\\n    error InvalidWithdrawalCredentials();\\n\\n    function getWithdrawalCredentials() external view returns (bytes32);\\n    function depositToConsensusLayer(uint256 _maxCount) external;\\n    function getDepositedValidatorCount() external view returns (uint256 depositedValidatorCount);\\n}\\n\",\"keccak256\":\"0xb6bc772223ac779517d63ca0923546c8ffb8559b0fd7839909297b67f95f0160\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IOracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IOracleManagerV1 {\\n    event BeaconDataUpdate(uint256 validatorCount, uint256 validatorBalanceSum, bytes32 roundId);\\n\\n    error InvalidValidatorCountReport(uint256 _providedValidatorCount, uint256 _depositedValidatorCount);\\n\\n    function setBeaconData(uint256 _validatorCount, uint256 _validatorBalanceSum, bytes32 _roundId) external;\\n    function getOracle() external view returns (address oracle);\\n    function setOracle(address _oracleAddress) external;\\n    function getBeaconValidatorBalanceSum() external view returns (uint256 beaconValidatorBalanceSum);\\n    function getBeaconValidatorCount() external view returns (uint256 beaconValidatorCount);\\n}\\n\",\"keccak256\":\"0x48302c21becf34c3eddb16f5782759427d683b92eb325b07d107dfcabfe04fa5\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/ISharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISharesManagerV1 is IERC20 {\\n    error BalanceTooLow();\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n    error NullTransfer();\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function totalUnderlyingSupply() external view returns (uint256);\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n    function balanceOfUnderlying(address _owner) external view returns (uint256 balance);\\n    function underlyingBalanceFromShares(uint256 shares) external view returns (uint256);\\n    function sharesFromUnderlyingBalance(uint256 underlyingBalance) external view returns (uint256);\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0x038d83b91a4d9ef2945720eec488d66a3f085b0d04e5cc7fd5d62ebcc52b6591\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IUserDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IUserDepositManagerV1 {\\n    event UserDeposit(address indexed depositor, address indexed recipient, uint256 amount);\\n\\n    error EmptyDeposit();\\n    error EmptyDonation();\\n\\n    function getPendingEth() external view returns (uint256);\\n    function deposit() external payable;\\n    function depositAndTransfer(address _recipient) external payable;\\n    receive() external payable;\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x693b99f64b5c183783aa8cebbe9df7f339ec4dc5cf74f86f27435d768387ce47\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    error Unauthorized(address caller);\\n    error InvalidCall();\\n    error InvalidArgument();\\n    error InvalidZeroAddress();\\n}\\n\",\"keccak256\":\"0xb212763b0c7e4f4addfb85d863c616469be04e2d43e2431e9ef6da5d47f07436\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x52ccf1daa33de9c72831e0d7458928c37ca7b5f8d8f732114095edeb81339920\",\"license\":\"MIT\"},\"contracts/src/state/shared/ApprovalsPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary ApprovalsPerOwner {\\n    bytes32 internal constant APPROVALS_PER_OWNER_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.approvalsPerOwner\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(address => mapping(address => uint256)) value;\\n    }\\n\\n    function get(address owner, address operator) internal view returns (uint256) {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[owner][operator];\\n    }\\n\\n    function set(address owner, address operator, uint256 newValue) internal {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[owner][operator] = newValue;\\n    }\\n}\\n\",\"keccak256\":\"0xf459ba95285310a18f896e1cdde64f781a8f1e82faf2ae9e5efa8e94a9141b83\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/RiverAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\n\\nlibrary RiverAddress {\\n    bytes32 internal constant RIVER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.riverAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(RIVER_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        if (newValue == address(0)) {\\n            revert Errors.InvalidZeroAddress();\\n        }\\n        UnstructuredStorage.setStorageAddress(RIVER_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xb272b15074b5e22cdb00283b4ede4f0466b6c836bb348cdbe0361a5fd41dbf9a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Version {\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(VERSION_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf90d1ecf583061aa70dc464ec1fde21da6e9309601bcbba38f47d26257a1c656\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/wlseth/BalanceOf.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary BalanceOf {\\n    bytes32 internal constant BALANCE_OF_SLOT = bytes32(uint256(keccak256(\\\"river.state.balanceOf\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(address => uint256) value;\\n    }\\n\\n    function get(address owner) internal view returns (uint256) {\\n        bytes32 slot = BALANCE_OF_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[owner];\\n    }\\n\\n    function set(address owner, uint256 newValue) internal {\\n        bytes32 slot = BALANCE_OF_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[owner] = newValue;\\n    }\\n}\\n\",\"keccak256\":\"0xbebead087877f34fffdb0fa5a634654b701d02d60b7c004f93fcab3601243c0e\",\"license\":\"BUSL-1.1\"},\"openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600055610d1f806100256000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806340c10f191161007157806340c10f191461016d57806370a082311461018057806395d89b41146101935780639dc29fac146101b5578063a9059cbb146101c8578063dd62ed3e146101db57600080fd5b806306fdde03146100b9578063095ea7b3146100fd5780630fa74a101461012057806318160ddd1461013557806323b872dd1461014b578063313ce5671461015e575b600080fd5b6040805180820190915260168152752bb930b83832b21020b6363abb34b0b61022ba3432b960511b60208201525b6040516100f49190610b0d565b60405180910390f35b61011061010b366004610b7e565b6101ee565b60405190151581526020016100f4565b61013361012e366004610ba8565b610244565b005b61013d6102a4565b6040519081526020016100f4565b610110610159366004610bc3565b61031d565b604051601281526020016100f4565b61013361017b366004610b7e565b6103f3565b61013d61018e366004610ba8565b6104df565b6040805180820190915260068152650eed8e68aa8960d31b60208201526100e7565b6101336101c3366004610b7e565b6104f0565b6101106101d6366004610b7e565b6106f2565b61013d6101e9366004610bff565b610753565b60006101fb338484610766565b6040518281526001600160a01b0384169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259060200160405180910390a350600192915050565b600061024e6107bd565b8114610284578061025d6107bd565b604051631cfd276760e31b8152600481019290925260248201526044015b60405180910390fd5b610297610292826001610c48565b6107f1565b6102a082610827565b5050565b60006102ae61087c565b604051633af9e66960e01b81523060048201526001600160a01b039190911690633af9e66990602401602060405180830381865afa1580156102f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103189190610c60565b905090565b6000818061033e576040516336b216db60e21b815260040160405180910390fd5b84838061034a836108ac565b1015610369576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b03871633146103dd576000610385883361092c565b9050858110156103c757604051637b936de360e01b81526001600160a01b0389166004820152336024820152604481018290526064810187905260840161027b565b6103db88336103d68985610c79565b610766565b505b6103e8878787610984565b979650505050505050565b600260005414156104165760405162461bcd60e51b815260040161027b90610c90565b6002600055610438828261042982610a73565b6104339190610c48565b610ac1565b61044061087c565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b0391909116906323b872dd906064016020604051808303816000875af1158015610495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b99190610cc7565b6104d657604051630c87abf760e21b815260040160405180910390fd5b50506001600055565b60006104ea826108ac565b92915050565b600260005414156105135760405162461bcd60e51b815260040161027b90610c90565b6002600090815561052261087c565b6001600160a01b031663f79c3f0261053933610a73565b6040518263ffffffff1660e01b815260040161055791815260200190565b602060405180830381865afa158015610574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105989190610c60565b9050808211156105bb576040516351940b3960e11b815260040160405180910390fd5b60006105c561087c565b6001600160a01b031663799a1954846040518263ffffffff1660e01b81526004016105f291815260200190565b602060405180830381865afa15801561060f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106339190610c60565b905061064d338261064333610a73565b6104339190610c79565b61065561087c565b60405163a9059cbb60e01b81526001600160a01b03868116600483015260248201849052919091169063a9059cbb906044016020604051808303816000875af11580156106a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ca9190610cc7565b6106e757604051630c87abf760e21b815260040160405180910390fd5b505060016000555050565b60008180610713576040516336b216db60e21b815260040160405180910390fd5b33838061071f836108ac565b101561073e576040516351940b3960e11b815260040160405180910390fd5b610749338787610984565b9695505050505050565b600061075f838361092c565b9392505050565b600061079360017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847610c79565b6001600160a01b039485166000908152602091825260408082209590961681529390525091902055565b60006103186107ed60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd610c79565b5490565b61082461081f60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd610c79565b829055565b50565b6001600160a01b03811661084e5760405163f6b2911f60e01b815260040160405180910390fd5b61082461081f60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c610c79565b60006103186107ed60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c610c79565b60006108b661087c565b6001600160a01b031663f79c3f026108cd84610a73565b6040518263ffffffff1660e01b81526004016108eb91815260200190565b602060405180830381865afa158015610908573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ea9190610c60565b60008061095a60017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847610c79565b6001600160a01b039485166000908152602091825260408082209590961681529390525050205490565b60008061098f61087c565b6001600160a01b031663799a1954846040518263ffffffff1660e01b81526004016109bc91815260200190565b602060405180830381865afa1580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd9190610c60565b9050610a0d858261064388610a73565b610a1b848261042987610a73565b836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85604051610a6091815260200190565b60405180910390a3506001949350505050565b600080610aa160017fce1633dc2255491f780d2d58eb35f53cb7635f8ce2320aa44b03b0e6ae6fdead610c79565b6001600160a01b0390931660009081526020939093525050604090205490565b6000610aee60017fce1633dc2255491f780d2d58eb35f53cb7635f8ce2320aa44b03b0e6ae6fdead610c79565b6001600160a01b03909316600090815260209390935250604090912055565b600060208083528351808285015260005b81811015610b3a57858101830151858201604001528201610b1e565b81811115610b4c576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610b7957600080fd5b919050565b60008060408385031215610b9157600080fd5b610b9a83610b62565b946020939093013593505050565b600060208284031215610bba57600080fd5b61075f82610b62565b600080600060608486031215610bd857600080fd5b610be184610b62565b9250610bef60208501610b62565b9150604084013590509250925092565b60008060408385031215610c1257600080fd5b610c1b83610b62565b9150610c2960208401610b62565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610c5b57610c5b610c32565b500190565b600060208284031215610c7257600080fd5b5051919050565b600082821015610c8b57610c8b610c32565b500390565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060208284031215610cd957600080fd5b8151801515811461075f57600080fdfea264697066735822122082fad586c34c9d6de2b00fd9e821da7dcef0630a85803fdc190ca7e10f3e7bab64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806340c10f191161007157806340c10f191461016d57806370a082311461018057806395d89b41146101935780639dc29fac146101b5578063a9059cbb146101c8578063dd62ed3e146101db57600080fd5b806306fdde03146100b9578063095ea7b3146100fd5780630fa74a101461012057806318160ddd1461013557806323b872dd1461014b578063313ce5671461015e575b600080fd5b6040805180820190915260168152752bb930b83832b21020b6363abb34b0b61022ba3432b960511b60208201525b6040516100f49190610b0d565b60405180910390f35b61011061010b366004610b7e565b6101ee565b60405190151581526020016100f4565b61013361012e366004610ba8565b610244565b005b61013d6102a4565b6040519081526020016100f4565b610110610159366004610bc3565b61031d565b604051601281526020016100f4565b61013361017b366004610b7e565b6103f3565b61013d61018e366004610ba8565b6104df565b6040805180820190915260068152650eed8e68aa8960d31b60208201526100e7565b6101336101c3366004610b7e565b6104f0565b6101106101d6366004610b7e565b6106f2565b61013d6101e9366004610bff565b610753565b60006101fb338484610766565b6040518281526001600160a01b0384169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259060200160405180910390a350600192915050565b600061024e6107bd565b8114610284578061025d6107bd565b604051631cfd276760e31b8152600481019290925260248201526044015b60405180910390fd5b610297610292826001610c48565b6107f1565b6102a082610827565b5050565b60006102ae61087c565b604051633af9e66960e01b81523060048201526001600160a01b039190911690633af9e66990602401602060405180830381865afa1580156102f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103189190610c60565b905090565b6000818061033e576040516336b216db60e21b815260040160405180910390fd5b84838061034a836108ac565b1015610369576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b03871633146103dd576000610385883361092c565b9050858110156103c757604051637b936de360e01b81526001600160a01b0389166004820152336024820152604481018290526064810187905260840161027b565b6103db88336103d68985610c79565b610766565b505b6103e8878787610984565b979650505050505050565b600260005414156104165760405162461bcd60e51b815260040161027b90610c90565b6002600055610438828261042982610a73565b6104339190610c48565b610ac1565b61044061087c565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b0391909116906323b872dd906064016020604051808303816000875af1158015610495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b99190610cc7565b6104d657604051630c87abf760e21b815260040160405180910390fd5b50506001600055565b60006104ea826108ac565b92915050565b600260005414156105135760405162461bcd60e51b815260040161027b90610c90565b6002600090815561052261087c565b6001600160a01b031663f79c3f0261053933610a73565b6040518263ffffffff1660e01b815260040161055791815260200190565b602060405180830381865afa158015610574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105989190610c60565b9050808211156105bb576040516351940b3960e11b815260040160405180910390fd5b60006105c561087c565b6001600160a01b031663799a1954846040518263ffffffff1660e01b81526004016105f291815260200190565b602060405180830381865afa15801561060f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106339190610c60565b905061064d338261064333610a73565b6104339190610c79565b61065561087c565b60405163a9059cbb60e01b81526001600160a01b03868116600483015260248201849052919091169063a9059cbb906044016020604051808303816000875af11580156106a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ca9190610cc7565b6106e757604051630c87abf760e21b815260040160405180910390fd5b505060016000555050565b60008180610713576040516336b216db60e21b815260040160405180910390fd5b33838061071f836108ac565b101561073e576040516351940b3960e11b815260040160405180910390fd5b610749338787610984565b9695505050505050565b600061075f838361092c565b9392505050565b600061079360017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847610c79565b6001600160a01b039485166000908152602091825260408082209590961681529390525091902055565b60006103186107ed60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd610c79565b5490565b61082461081f60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd610c79565b829055565b50565b6001600160a01b03811661084e5760405163f6b2911f60e01b815260040160405180910390fd5b61082461081f60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c610c79565b60006103186107ed60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c610c79565b60006108b661087c565b6001600160a01b031663f79c3f026108cd84610a73565b6040518263ffffffff1660e01b81526004016108eb91815260200190565b602060405180830381865afa158015610908573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ea9190610c60565b60008061095a60017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847610c79565b6001600160a01b039485166000908152602091825260408082209590961681529390525050205490565b60008061098f61087c565b6001600160a01b031663799a1954846040518263ffffffff1660e01b81526004016109bc91815260200190565b602060405180830381865afa1580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd9190610c60565b9050610a0d858261064388610a73565b610a1b848261042987610a73565b836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85604051610a6091815260200190565b60405180910390a3506001949350505050565b600080610aa160017fce1633dc2255491f780d2d58eb35f53cb7635f8ce2320aa44b03b0e6ae6fdead610c79565b6001600160a01b0390931660009081526020939093525050604090205490565b6000610aee60017fce1633dc2255491f780d2d58eb35f53cb7635f8ce2320aa44b03b0e6ae6fdead610c79565b6001600160a01b03909316600090815260209390935250604090912055565b600060208083528351808285015260005b81811015610b3a57858101830151858201604001528201610b1e565b81811115610b4c576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610b7957600080fd5b919050565b60008060408385031215610b9157600080fd5b610b9a83610b62565b946020939093013593505050565b600060208284031215610bba57600080fd5b61075f82610b62565b600080600060608486031215610bd857600080fd5b610be184610b62565b9250610bef60208501610b62565b9150604084013590509250925092565b60008060408385031215610c1257600080fd5b610c1b83610b62565b9150610c2960208401610b62565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610c5b57610c5b610c32565b500190565b600060208284031215610c7257600080fd5b5051919050565b600082821015610c8b57610c8b610c32565b500390565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060208284031215610cd957600080fd5b8151801515811461075f57600080fdfea264697066735822122082fad586c34c9d6de2b00fd9e821da7dcef0630a85803fdc190ca7e10f3e7bab64736f6c634300080a0033",
  "devdoc": {
    "author": "Kiln",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "_owner": "Owner that gave the allowance",
          "_spender": "Spender that received the allowance"
        }
      },
      "approve(address,uint256)": {
        "params": {
          "_spender": "Spender that receives the allowance",
          "_value": "Amount to allow"
        }
      },
      "balanceOf(address)": {
        "params": {
          "_owner": "Owner to check the balance"
        }
      },
      "burn(address,uint256)": {
        "details": "Burned tokens are sent to recipient but are minted from the message sender balanceNo approval required from the message sender",
        "params": {
          "_recipient": "Spender that receives the allowance",
          "_value": "Amount of wrapped token to give to the burn"
        }
      },
      "initWLSETHV1(address)": {
        "params": {
          "_river": "Address of the River contract"
        }
      },
      "mint(address,uint256)": {
        "details": "Minted tokens are sent to recipient but are minted from the message sender balanceIt is expected that the message sender approves _value amount of River token tothis contract before calling",
        "params": {
          "_recipient": "Spender that receives the allowance",
          "_value": "Amount of river token to give to the mint"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "_to": "Recipient of the transfer",
          "_value": "Amount to transfer"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "If _from is not the message sender, then it is expected that _from has given at leave _value allowance to msg.sender",
        "params": {
          "_from": "Sender account",
          "_to": "Recipient of the transfer",
          "_value": "Amount to transfer"
        }
      }
    },
    "title": "Wrapped lsETH v1",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowance(address,address)": {
        "notice": "Retrieves the token allowance given from one address to another"
      },
      "approve(address,uint256)": {
        "notice": "Approves another account to transfer tokens"
      },
      "balanceOf(address)": {
        "notice": "Retrieves the token balance of the specified user"
      },
      "burn(address,uint256)": {
        "notice": "Burn tokens and retrieve underlying River tokens"
      },
      "decimals()": {
        "notice": "Retrieves the token decimal count"
      },
      "initWLSETHV1(address)": {
        "notice": "Initializes the wrapped token contract"
      },
      "mint(address,uint256)": {
        "notice": "Mint tokens by providing River tokens"
      },
      "name()": {
        "notice": "Retrieves the token full name"
      },
      "symbol()": {
        "notice": "Retrieves the token ticker"
      },
      "totalSupply()": {
        "notice": "Retrieves the token total supply"
      },
      "transfer(address,uint256)": {
        "notice": "Transfers tokens between the message sender and a recipient"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfers tokens between two accounts"
      }
    },
    "notice": "This contract wraps the lsETH token into a rebase token, more suitable for some DeFi use-cases         like stable swaps.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9886,
        "contract": "contracts/src/WLSETH.1.sol:WLSETHV1",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}