{
  "address": "0x06Ddc348161c774ADF8073337c935F69C50871Ad",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "AddressAlreadyInUse",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "AlreadyReported",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "providedEpochId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minExpectedEpochId",
          "type": "uint256"
        }
      ],
      "name": "EpochTooOld",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedVersion",
          "type": "uint256"
        }
      ],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "providedEpochId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedFrameFirstEpochId",
          "type": "uint256"
        }
      ],
      "name": "NotFrameFirstEpochId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prevTotalEth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "postTotalEth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeElapsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "relativeLowerBound",
          "type": "uint256"
        }
      ],
      "name": "TotalValidatorBalanceDecreaseOutOfBound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prevTotalEth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "postTotalEth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeElapsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "annualAprUpperBound",
          "type": "uint256"
        }
      ],
      "name": "TotalValidatorBalanceIncreaseOutOfBound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "AddMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "newCLBalance",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newCLValidatorCount",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracleMember",
          "type": "address"
        }
      ],
      "name": "CLReported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "ExpectedEpochIdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "cdata",
          "type": "bytes"
        }
      ],
      "name": "Initialize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "postTotalEth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevTotalEth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeElapsed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "name": "PostTotalShares",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "RemoveMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "SetAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "annualAprUpperBound",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "relativeLowerBound",
          "type": "uint256"
        }
      ],
      "name": "SetBounds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "SetMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingAdmin",
          "type": "address"
        }
      ],
      "name": "SetPendingAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newQuorum",
          "type": "uint256"
        }
      ],
      "name": "SetQuorum",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_river",
          "type": "address"
        }
      ],
      "name": "SetRiver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "epochsPerFrame",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "slotsPerEpoch",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "secondsPerSlot",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "genesisTime",
          "type": "uint64"
        }
      ],
      "name": "SetSpec",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOracleMember",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newQuorum",
          "type": "uint256"
        }
      ],
      "name": "addMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCLSpec",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "epochsPerFrame",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "slotsPerEpoch",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "secondsPerSlot",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "genesisTime",
              "type": "uint64"
            }
          ],
          "internalType": "struct CLSpec.CLSpecStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentFrame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_startEpochId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExpectedEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epochId",
          "type": "uint256"
        }
      ],
      "name": "getFrameFirstEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGlobalReportStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastCompletedEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleMember",
          "type": "address"
        }
      ],
      "name": "getMemberReportStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracleMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getQuorum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReportBounds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "annualAprUpperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "relativeLowerBound",
              "type": "uint256"
            }
          ],
          "internalType": "struct ReportBounds.ReportBoundsStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "getReportVariant",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "_clBalance",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_clValidators",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_reportCount",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReportVariantsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_river",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_administratorAddress",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_epochsPerFrame",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_slotsPerEpoch",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_secondsPerSlot",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_genesisTime",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_annualAprUpperBound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_relativeLowerBound",
          "type": "uint256"
        }
      ],
      "name": "initOracleV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        }
      ],
      "name": "isMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "proposeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleMember",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newQuorum",
          "type": "uint256"
        }
      ],
      "name": "removeMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epochId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_clValidatorsBalance",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_clValidatorCount",
          "type": "uint32"
        }
      ],
      "name": "reportConsensusLayerData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_epochsPerFrame",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_slotsPerEpoch",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_secondsPerSlot",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_genesisTime",
          "type": "uint64"
        }
      ],
      "name": "setCLSpec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleMember",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "setMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newQuorum",
          "type": "uint256"
        }
      ],
      "name": "setQuorum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_annualAprUpperBound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_relativeLowerBound",
          "type": "uint256"
        }
      ],
      "name": "setReportBounds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3ddcdebd7f28db7ece2053546c6f3a6f45e226d915b81445e3e227dc2ceba97a",
  "receipt": {
    "to": null,
    "from": "0x341C40B94bF2afBFa42573cB78f16Ee15a056238",
    "contractAddress": "0x06Ddc348161c774ADF8073337c935F69C50871Ad",
    "transactionIndex": 19,
    "gasUsed": "2086106",
    "logsBloom": "0x
    "blockHash": "0xf8d9c8624647a751e0ced1bfb515d8e1fd81eca40b14f5f2b730d7bce78b4dd4",
    "transactionHash": "0x3ddcdebd7f28db7ece2053546c6f3a6f45e226d915b81445e3e227dc2ceba97a",
    "logs": [],
    "blockNumber": 7685726,
    "cumulativeGasUsed": "9013588",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "656663a520c7d1a8fa475138c7426bea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddressAlreadyInUse\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"AlreadyReported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"providedEpochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minExpectedEpochId\",\"type\":\"uint256\"}],\"name\":\"EpochTooOld\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"providedEpochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedFrameFirstEpochId\",\"type\":\"uint256\"}],\"name\":\"NotFrameFirstEpochId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prevTotalEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postTotalEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relativeLowerBound\",\"type\":\"uint256\"}],\"name\":\"TotalValidatorBalanceDecreaseOutOfBound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prevTotalEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postTotalEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"annualAprUpperBound\",\"type\":\"uint256\"}],\"name\":\"TotalValidatorBalanceIncreaseOutOfBound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"AddMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newCLBalance\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newCLValidatorCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleMember\",\"type\":\"address\"}],\"name\":\"CLReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"ExpectedEpochIdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"cdata\",\"type\":\"bytes\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"postTotalEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevTotalEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeElapsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"PostTotalShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"RemoveMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"annualAprUpperBound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"relativeLowerBound\",\"type\":\"uint256\"}],\"name\":\"SetBounds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"SetPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newQuorum\",\"type\":\"uint256\"}],\"name\":\"SetQuorum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_river\",\"type\":\"address\"}],\"name\":\"SetRiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"epochsPerFrame\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"slotsPerEpoch\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"secondsPerSlot\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"genesisTime\",\"type\":\"uint64\"}],\"name\":\"SetSpec\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOracleMember\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newQuorum\",\"type\":\"uint256\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCLSpec\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"epochsPerFrame\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"slotsPerEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondsPerSlot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"genesisTime\",\"type\":\"uint64\"}],\"internalType\":\"struct CLSpec.CLSpecStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentFrame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_startEpochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpectedEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"}],\"name\":\"getFrameFirstEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalReportStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastCompletedEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleMember\",\"type\":\"address\"}],\"name\":\"getMemberReportStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReportBounds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"annualAprUpperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relativeLowerBound\",\"type\":\"uint256\"}],\"internalType\":\"struct ReportBounds.ReportBoundsStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getReportVariant\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"_clBalance\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_clValidators\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_reportCount\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReportVariantsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_river\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_administratorAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_epochsPerFrame\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_slotsPerEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_secondsPerSlot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_genesisTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_annualAprUpperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_relativeLowerBound\",\"type\":\"uint256\"}],\"name\":\"initOracleV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"proposeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleMember\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newQuorum\",\"type\":\"uint256\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_clValidatorsBalance\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_clValidatorCount\",\"type\":\"uint32\"}],\"name\":\"reportConsensusLayerData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_epochsPerFrame\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_slotsPerEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_secondsPerSlot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_genesisTime\",\"type\":\"uint64\"}],\"name\":\"setCLSpec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleMember\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newQuorum\",\"type\":\"uint256\"}],\"name\":\"setQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_annualAprUpperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_relativeLowerBound\",\"type\":\"uint256\"}],\"name\":\"setReportBounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kiln\",\"errors\":{\"AddressAlreadyInUse(address)\":[{\"params\":{\"newAddress\":\"The address already in use\"}}],\"AlreadyReported(uint256,address)\":[{\"params\":{\"epochId\":\"The epoch id provided as input\",\"member\":\"The oracle member\"}}],\"EpochTooOld(uint256,uint256)\":[{\"params\":{\"minExpectedEpochId\":\"The minimum epoch id expected\",\"providedEpochId\":\"The epoch id provided as input\"}}],\"InvalidInitialization(uint256,uint256)\":[{\"params\":{\"expectedVersion\":\"The version that was expected\",\"version\":\"The version that was attempting to be initialized\"}}],\"NotFrameFirstEpochId(uint256,uint256)\":[{\"params\":{\"expectedFrameFirstEpochId\":\"The frame first epoch id that was expected\",\"providedEpochId\":\"The epoch id provided as input\"}}],\"TotalValidatorBalanceDecreaseOutOfBound(uint256,uint256,uint256,uint256)\":[{\"params\":{\"postTotalEth\":\"The new total balance\",\"prevTotalEth\":\"The previous total balance\",\"relativeLowerBound\":\"The maximum relative decrease allowed\",\"timeElapsed\":\"The time since last report\"}}],\"TotalValidatorBalanceIncreaseOutOfBound(uint256,uint256,uint256,uint256)\":[{\"params\":{\"annualAprUpperBound\":\"The maximum apr allowed\",\"postTotalEth\":\"The new total balance\",\"prevTotalEth\":\"The previous total balance\",\"timeElapsed\":\"The time since last report\"}}],\"Unauthorized(address)\":[{\"params\":{\"caller\":\"Addres performing the call\"}}]},\"kind\":\"dev\",\"methods\":{\"acceptAdmin()\":{\"details\":\"Only callable by the pending admin. Resets the pending admin if succesful.\"},\"addMember(address,uint256)\":{\"details\":\"Only callable by the adminstrator\",\"params\":{\"_newOracleMember\":\"Address of the new member\",\"_newQuorum\":\"New quorum value\"}},\"getAdmin()\":{\"returns\":{\"_0\":\"The admin address\"}},\"getCLSpec()\":{\"returns\":{\"_0\":\"The Consensus Layer Specification\"}},\"getCurrentEpochId()\":{\"returns\":{\"_0\":\"The current epoch id\"}},\"getCurrentFrame()\":{\"returns\":{\"_endTime\":\"The timestamp of the end of the frame in seconds\",\"_startEpochId\":\"The epoch at the beginning of the frame\",\"_startTime\":\"The timestamp of the beginning of the frame in seconds\"}},\"getExpectedEpochId()\":{\"returns\":{\"_0\":\"The current expected epoch id\"}},\"getFrameFirstEpochId(uint256)\":{\"params\":{\"_epochId\":\"Epoch id used to get the frame\"},\"returns\":{\"_0\":\"The first epoch id of the frame containing the given epoch id\"}},\"getGlobalReportStatus()\":{\"returns\":{\"_0\":\"The raw report status value\"}},\"getLastCompletedEpochId()\":{\"returns\":{\"_0\":\"The last completed epoch id\"}},\"getMemberReportStatus(address)\":{\"params\":{\"_oracleMember\":\"Address of member to check\"},\"returns\":{\"_0\":\"True if member has reported\"}},\"getOracleMembers()\":{\"returns\":{\"_0\":\"The oracle members\"}},\"getPendingAdmin()\":{\"returns\":{\"_0\":\"The pending admin address\"}},\"getQuorum()\":{\"returns\":{\"_0\":\"The current quorum\"}},\"getReportBounds()\":{\"returns\":{\"_0\":\"The report bounds\"}},\"getReportVariant(uint256)\":{\"params\":{\"_idx\":\"Index of report\"},\"returns\":{\"_clBalance\":\"The reported consensus layer balance sum of River's validators\",\"_clValidators\":\"The reported validator count\",\"_reportCount\":\"The number of similar reports\"}},\"getReportVariantsCount()\":{\"returns\":{\"_0\":\"The count of report variants\"}},\"getRiver()\":{\"returns\":{\"_0\":\"The address of River\"}},\"getTime()\":{\"returns\":{\"_0\":\"The current timestamp from the EVM context\"}},\"initOracleV1(address,address,uint64,uint64,uint64,uint64,uint256,uint256)\":{\"params\":{\"_administratorAddress\":\"Address able to call administrative methods\",\"_annualAprUpperBound\":\"CL bound parameter. Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.\",\"_epochsPerFrame\":\"CL spec parameter. Number of epochs in a frame.\",\"_genesisTime\":\"CL spec parameter. Timestamp of the genesis slot.\",\"_relativeLowerBound\":\"CL bound parameter. Maximum relative balance decrease.\",\"_river\":\"Address of the River contract, able to receive oracle input data after quorum is met\",\"_secondsPerSlot\":\"CL spec parameter. Number of seconds between slots.\",\"_slotsPerEpoch\":\"CL spec parameter. Number of slots in one epoch.\"}},\"isMember(address)\":{\"details\":\"Performs a naive search, do not call this on-chain, used as an off-chain helper\",\"params\":{\"_memberAddress\":\"Address of the member\"},\"returns\":{\"_0\":\"True if address is a member\"}},\"proposeAdmin(address)\":{\"details\":\"This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.\",\"params\":{\"_newAdmin\":\"New admin address\"}},\"removeMember(address,uint256)\":{\"details\":\"Only callable by the adminstrator\",\"params\":{\"_newQuorum\":\"New quorum value\",\"_oracleMember\":\"Address to remove\"}},\"reportConsensusLayerData(uint256,uint64,uint32)\":{\"details\":\"Only callable by an oracle memberThe epoch id is expected to be >= to the expected epoch id stored in the contractThe epoch id is expected to be the first epoch of its frameThe Consensus Layer Validator count is the amount of running validators managed by River.Until withdrawals are enabled, this count also takes into account any exited and slashed validatoras funds are still locked on the consensus layer.\",\"params\":{\"_clValidatorCount\":\"Total River validator count\",\"_clValidatorsBalance\":\"Total balance of River validators\",\"_epochId\":\"Epoch where the balance and validator count has been computed\"}},\"setCLSpec(uint64,uint64,uint64,uint64)\":{\"details\":\"Only callable by the adminstrator\",\"params\":{\"_epochsPerFrame\":\"Number of epochs in a frame.\",\"_genesisTime\":\"Timestamp of the genesis slot.\",\"_secondsPerSlot\":\"Number of seconds between slots.\",\"_slotsPerEpoch\":\"Number of slots in one epoch.\"}},\"setMember(address,address)\":{\"details\":\"Only callable by the adminitratorCannot use an address already in use\",\"params\":{\"_newAddress\":\"New address for the member\",\"_oracleMember\":\"Address to change\"}},\"setQuorum(uint256)\":{\"details\":\"Only callable by the adminstrator\",\"params\":{\"_newQuorum\":\"New quorum parameter\"}},\"setReportBounds(uint256,uint256)\":{\"details\":\"Only callable by the adminstrator\",\"params\":{\"_annualAprUpperBound\":\"Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.\",\"_relativeLowerBound\":\"Maximum relative balance decrease.\"}}},\"title\":\"Oracle (v1)\",\"version\":1},\"userdoc\":{\"errors\":{\"AddressAlreadyInUse(address)\":[{\"notice\":\"The address is already in use by an oracle member\"}],\"AlreadyReported(uint256,address)\":[{\"notice\":\"The member already reported on the given epoch id\"}],\"EpochTooOld(uint256,uint256)\":[{\"notice\":\"The provided epoch is too old compared to the expected epoch id\"}],\"InvalidArgument()\":[{\"notice\":\"The argument was invalid\"}],\"InvalidCall()\":[{\"notice\":\"The call was invalid\"}],\"InvalidInitialization(uint256,uint256)\":[{\"notice\":\"An error occured during the initialization\"}],\"InvalidZeroAddress()\":[{\"notice\":\"The address is zero\"}],\"NotFrameFirstEpochId(uint256,uint256)\":[{\"notice\":\"The provided epoch is not at the beginning of its frame\"}],\"TotalValidatorBalanceDecreaseOutOfBound(uint256,uint256,uint256,uint256)\":[{\"notice\":\"The negative delta in balance is above the allowed lower bound\"}],\"TotalValidatorBalanceIncreaseOutOfBound(uint256,uint256,uint256,uint256)\":[{\"notice\":\"The delta in balance is above the allowed upper bound\"}],\"Unauthorized(address)\":[{\"notice\":\"The operator is unauthorized for the caller\"}]},\"events\":{\"AddMember(address)\":{\"notice\":\"A member has been added to the oracle member list\"},\"CLReported(uint256,uint128,uint32,address)\":{\"notice\":\"Consensus Layer data has been reported by an oracle member\"},\"ExpectedEpochIdUpdated(uint256)\":{\"notice\":\"The expected epoch id has been changed\"},\"Initialize(uint256,bytes)\":{\"notice\":\"Emitted when the contract is properly initialized\"},\"PostTotalShares(uint256,uint256,uint256,uint256)\":{\"notice\":\"The report has been submitted to river\"},\"RemoveMember(address)\":{\"notice\":\"A member has been removed from the oracle member list\"},\"SetAdmin(address)\":{\"notice\":\"The admin address changed\"},\"SetBounds(uint256,uint256)\":{\"notice\":\"The report bounds have been changed\"},\"SetMember(address,address)\":{\"notice\":\"A member address has been edited\"},\"SetPendingAdmin(address)\":{\"notice\":\"The pending admin address changed\"},\"SetQuorum(uint256)\":{\"notice\":\"The storage quorum value has been changed\"},\"SetRiver(address)\":{\"notice\":\"The storage river address value has been changed\"},\"SetSpec(uint64,uint64,uint64,uint64)\":{\"notice\":\"The consensus layer spec has been changed\"}},\"kind\":\"user\",\"methods\":{\"acceptAdmin()\":{\"notice\":\"Accept the transfer of ownership\"},\"addMember(address,uint256)\":{\"notice\":\"Adds new address as oracle member, giving the ability to push cl reports.\"},\"getAdmin()\":{\"notice\":\"Retrieves the current admin address\"},\"getCLSpec()\":{\"notice\":\"Retrieve the current cl spec\"},\"getCurrentEpochId()\":{\"notice\":\"Retrieve the current epoch id based on block timestamp\"},\"getCurrentFrame()\":{\"notice\":\"Retrieve the current frame details\"},\"getExpectedEpochId()\":{\"notice\":\"Retrieve expected epoch id\"},\"getFrameFirstEpochId(uint256)\":{\"notice\":\"Retrieve the first epoch id of the frame of the provided epoch id\"},\"getGlobalReportStatus()\":{\"notice\":\"Retrieve member report status\"},\"getLastCompletedEpochId()\":{\"notice\":\"Retrieve the last completed epoch id\"},\"getMemberReportStatus(address)\":{\"notice\":\"Retrieve member report status\"},\"getOracleMembers()\":{\"notice\":\"Retrieve the list of oracle members\"},\"getPendingAdmin()\":{\"notice\":\"Retrieve the current pending admin address\"},\"getQuorum()\":{\"notice\":\"Retrieve the current quorum\"},\"getReportBounds()\":{\"notice\":\"Retrieve the report bounds\"},\"getReportVariant(uint256)\":{\"notice\":\"Retrieve decoded report at provided index\"},\"getReportVariantsCount()\":{\"notice\":\"Retrieve report variants count\"},\"getRiver()\":{\"notice\":\"Retrieve River address\"},\"getTime()\":{\"notice\":\"Retrieve the block timestamp\"},\"initOracleV1(address,address,uint64,uint64,uint64,uint64,uint256,uint256)\":{\"notice\":\"Initializes the oracle\"},\"isMember(address)\":{\"notice\":\"Returns true if address is member\"},\"proposeAdmin(address)\":{\"notice\":\"Proposes a new address as admin\"},\"removeMember(address,uint256)\":{\"notice\":\"Removes an address from the oracle members.\"},\"reportConsensusLayerData(uint256,uint64,uint32)\":{\"notice\":\"Report cl chain data\"},\"setCLSpec(uint64,uint64,uint64,uint64)\":{\"notice\":\"Edits the cl spec parameters\"},\"setMember(address,address)\":{\"notice\":\"Changes the address of an oracle member\"},\"setQuorum(uint256)\":{\"notice\":\"Edits the quorum required to forward cl data to River\"},\"setReportBounds(uint256,uint256)\":{\"notice\":\"Edits the cl bounds parameters\"}},\"notice\":\"This contract handles the input from the allowed oracle members. Highly inspired by Lido's implementation.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/Oracle.1.sol\":\"OracleV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/Administrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IAdministrable.sol\\\";\\n\\nimport \\\"./libraries/LibAdministrable.sol\\\";\\nimport \\\"./libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrable\\n/// @author Kiln\\n/// @notice This contract handles the administration of the contracts\\nabstract contract Administrable is IAdministrable {\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() {\\n        if (msg.sender != LibAdministrable._getAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyPendingAdmin() {\\n        if (msg.sender != LibAdministrable._getPendingAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getAdmin() external view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getPendingAdmin() external view returns (address) {\\n        return LibAdministrable._getPendingAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function proposeAdmin(address _newAdmin) external onlyAdmin {\\n        _setPendingAdmin(_newAdmin);\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function acceptAdmin() external onlyPendingAdmin {\\n        _setAdmin(LibAdministrable._getPendingAdmin());\\n        _setPendingAdmin(address(0));\\n    }\\n\\n    /// @notice Internal utility to set the admin address\\n    /// @param _admin Address to set as admin\\n    function _setAdmin(address _admin) internal {\\n        LibSanitize._notZeroAddress(_admin);\\n        LibAdministrable._setAdmin(_admin);\\n        emit SetAdmin(_admin);\\n    }\\n\\n    /// @notice Internal utility to set the pending admin address\\n    /// @param _pendingAdmin Address to set as pending admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        LibAdministrable._setPendingAdmin(_pendingAdmin);\\n        emit SetPendingAdmin(_pendingAdmin);\\n    }\\n\\n    /// @notice Internal utility to retrieve the address of the current admin\\n    /// @return The address of admin\\n    function _getAdmin() internal view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n}\\n\",\"keccak256\":\"0xc9ce727028bc42bf4ea4247dfde9b57a5c36e1820aba5219207aa95c4f035372\",\"license\":\"BUSL-1.1\"},\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\n/// @title Initializable\\n/// @author Kiln\\n/// @notice This contract ensures that initializers are called only once per version\\ncontract Initializable {\\n    /// @notice An error occured during the initialization\\n    /// @param version The version that was attempting to be initialized\\n    /// @param expectedVersion The version that was expected\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    /// @notice Emitted when the contract is properly initialized\\n    /// @param version New version of the contracts\\n    /// @param cdata Complete calldata that was used during the initialization\\n    event Initialize(uint256 version, bytes cdata);\\n\\n    /// @notice Use this modifier on initializers along with a hard-coded version number\\n    /// @param _version Version to initialize\\n    modifier init(uint256 _version) {\\n        if (_version != Version.get()) {\\n            revert InvalidInitialization(_version, Version.get());\\n        }\\n        Version.set(_version + 1); // prevents reentrency on the called method\\n        _;\\n        emit Initialize(_version, msg.data);\\n    }\\n}\\n\",\"keccak256\":\"0xc85d24988a02608db50067c5319e3b42eec8e45726045489bdb8ea1f33e1ce67\",\"license\":\"BUSL-1.1\"},\"contracts/src/Oracle.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\nimport \\\"./interfaces/IOracle.1.sol\\\";\\n\\nimport \\\"./Administrable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\nimport \\\"./state/shared/RiverAddress.sol\\\";\\nimport \\\"./state/oracle/OracleMembers.sol\\\";\\nimport \\\"./state/oracle/Quorum.sol\\\";\\nimport \\\"./state/oracle/ExpectedEpochId.sol\\\";\\nimport \\\"./state/oracle/LastEpochId.sol\\\";\\nimport \\\"./state/oracle/ReportsPositions.sol\\\";\\nimport \\\"./state/oracle/ReportsVariants.sol\\\";\\n\\n/// @title Oracle (v1)\\n/// @author Kiln\\n/// @notice This contract handles the input from the allowed oracle members. Highly inspired by Lido's implementation.\\ncontract OracleV1 is IOracleV1, Initializable, Administrable {\\n    /// @notice One Year value\\n    uint256 internal constant ONE_YEAR = 365 days;\\n\\n    /// @notice Received ETH input has only 9 decimals\\n    uint128 internal constant DENOMINATION_OFFSET = 1e9;\\n\\n    /// @inheritdoc IOracleV1\\n    function initOracleV1(\\n        address _river,\\n        address _administratorAddress,\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime,\\n        uint256 _annualAprUpperBound,\\n        uint256 _relativeLowerBound\\n    ) external init(0) {\\n        _setAdmin(_administratorAddress);\\n        RiverAddress.set(_river);\\n        emit SetRiver(_river);\\n        CLSpec.set(\\n            CLSpec.CLSpecStruct({\\n                epochsPerFrame: _epochsPerFrame,\\n                slotsPerEpoch: _slotsPerEpoch,\\n                secondsPerSlot: _secondsPerSlot,\\n                genesisTime: _genesisTime\\n            })\\n        );\\n        emit SetSpec(_epochsPerFrame, _slotsPerEpoch, _secondsPerSlot, _genesisTime);\\n        ReportBounds.set(\\n            ReportBounds.ReportBoundsStruct({\\n                annualAprUpperBound: _annualAprUpperBound,\\n                relativeLowerBound: _relativeLowerBound\\n            })\\n        );\\n        emit SetBounds(_annualAprUpperBound, _relativeLowerBound);\\n        Quorum.set(1);\\n        emit SetQuorum(1);\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getRiver() external view returns (address) {\\n        return RiverAddress.get();\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getTime() external view returns (uint256) {\\n        return _getTime();\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getExpectedEpochId() external view returns (uint256) {\\n        return ExpectedEpochId.get();\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getMemberReportStatus(address _oracleMember) external view returns (bool) {\\n        int256 memberIndex = OracleMembers.indexOf(_oracleMember);\\n        return memberIndex != -1 && ReportsPositions.get(uint256(memberIndex));\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getGlobalReportStatus() external view returns (uint256) {\\n        return ReportsPositions.getRaw();\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getReportVariantsCount() external view returns (uint256) {\\n        return ReportsVariants.get().length;\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getReportVariant(uint256 _idx)\\n        external\\n        view\\n        returns (uint64 _clBalance, uint32 _clValidators, uint16 _reportCount)\\n    {\\n        uint256 report = ReportsVariants.get()[_idx];\\n        (_clBalance, _clValidators) = _decodeReport(report);\\n        _reportCount = _getReportCount(report);\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getLastCompletedEpochId() external view returns (uint256) {\\n        return LastEpochId.get();\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getCurrentEpochId() external view returns (uint256) {\\n        CLSpec.CLSpecStruct memory clSpec = CLSpec.get();\\n        return _getCurrentEpochId(clSpec);\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getQuorum() external view returns (uint256) {\\n        return Quorum.get();\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getCLSpec() external view returns (CLSpec.CLSpecStruct memory) {\\n        return CLSpec.get();\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getCurrentFrame() external view returns (uint256 _startEpochId, uint256 _startTime, uint256 _endTime) {\\n        CLSpec.CLSpecStruct memory clSpec = CLSpec.get();\\n        _startEpochId = _getFrameFirstEpochId(_getCurrentEpochId(clSpec), clSpec);\\n        uint256 secondsPerEpoch = clSpec.secondsPerSlot * clSpec.slotsPerEpoch;\\n        _startTime = clSpec.genesisTime + _startEpochId * secondsPerEpoch;\\n        _endTime = _startTime + secondsPerEpoch * clSpec.epochsPerFrame - 1;\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getFrameFirstEpochId(uint256 _epochId) external view returns (uint256) {\\n        CLSpec.CLSpecStruct memory clSpec = CLSpec.get();\\n        return _getFrameFirstEpochId(_epochId, clSpec);\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getReportBounds() external view returns (ReportBounds.ReportBoundsStruct memory) {\\n        return ReportBounds.get();\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getOracleMembers() external view returns (address[] memory) {\\n        return OracleMembers.get();\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function isMember(address _memberAddress) external view returns (bool) {\\n        return OracleMembers.indexOf(_memberAddress) >= 0;\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function addMember(address _newOracleMember, uint256 _newQuorum) external onlyAdmin {\\n        int256 memberIdx = OracleMembers.indexOf(_newOracleMember);\\n        if (memberIdx >= 0) {\\n            revert AddressAlreadyInUse(_newOracleMember);\\n        }\\n        OracleMembers.push(_newOracleMember);\\n        uint256 previousQuorum = Quorum.get();\\n        _setQuorum(_newQuorum, previousQuorum);\\n        emit AddMember(_newOracleMember);\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function removeMember(address _oracleMember, uint256 _newQuorum) external onlyAdmin {\\n        int256 memberIdx = OracleMembers.indexOf(_oracleMember);\\n        if (memberIdx < 0) {\\n            revert LibErrors.InvalidCall();\\n        }\\n        OracleMembers.deleteItem(uint256(memberIdx));\\n        ReportsPositions.clear();\\n        ReportsVariants.clear();\\n        uint256 previousQuorum = Quorum.get();\\n        _setQuorum(_newQuorum, previousQuorum);\\n        emit RemoveMember(_oracleMember);\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function setMember(address _oracleMember, address _newAddress) external onlyAdmin {\\n        LibSanitize._notZeroAddress(_newAddress);\\n        if (OracleMembers.indexOf(_newAddress) >= 0) {\\n            revert AddressAlreadyInUse(_newAddress);\\n        }\\n        int256 memberIdx = OracleMembers.indexOf(_oracleMember);\\n        if (memberIdx < 0) {\\n            revert LibErrors.InvalidCall();\\n        }\\n        OracleMembers.set(uint256(memberIdx), _newAddress);\\n        emit SetMember(_oracleMember, _newAddress);\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function setCLSpec(uint64 _epochsPerFrame, uint64 _slotsPerEpoch, uint64 _secondsPerSlot, uint64 _genesisTime)\\n        external\\n        onlyAdmin\\n    {\\n        CLSpec.set(\\n            CLSpec.CLSpecStruct({\\n                epochsPerFrame: _epochsPerFrame,\\n                slotsPerEpoch: _slotsPerEpoch,\\n                secondsPerSlot: _secondsPerSlot,\\n                genesisTime: _genesisTime\\n            })\\n        );\\n        emit SetSpec(_epochsPerFrame, _slotsPerEpoch, _secondsPerSlot, _genesisTime);\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function setReportBounds(uint256 _annualAprUpperBound, uint256 _relativeLowerBound) external onlyAdmin {\\n        ReportBounds.set(\\n            ReportBounds.ReportBoundsStruct({\\n                annualAprUpperBound: _annualAprUpperBound,\\n                relativeLowerBound: _relativeLowerBound\\n            })\\n        );\\n        emit SetBounds(_annualAprUpperBound, _relativeLowerBound);\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function setQuorum(uint256 _newQuorum) external onlyAdmin {\\n        uint256 previousQuorum = Quorum.get();\\n        if (previousQuorum == _newQuorum) {\\n            revert LibErrors.InvalidArgument();\\n        }\\n        _setQuorum(_newQuorum, previousQuorum);\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function reportConsensusLayerData(uint256 _epochId, uint64 _clValidatorsBalance, uint32 _clValidatorCount)\\n        external\\n    {\\n        int256 memberIndex = OracleMembers.indexOf(msg.sender);\\n        if (memberIndex == -1) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n\\n        CLSpec.CLSpecStruct memory clSpec = CLSpec.get();\\n        uint256 expectedEpochId = ExpectedEpochId.get();\\n        if (_epochId < expectedEpochId) {\\n            revert EpochTooOld(_epochId, expectedEpochId);\\n        }\\n\\n        if (_epochId > expectedEpochId) {\\n            uint256 frameFirstEpochId = _getFrameFirstEpochId(_getCurrentEpochId(clSpec), clSpec);\\n            if (_epochId != frameFirstEpochId) {\\n                revert NotFrameFirstEpochId(_epochId, frameFirstEpochId);\\n            }\\n            _clearReporting(_epochId);\\n        }\\n\\n        if (ReportsPositions.get(uint256(memberIndex))) {\\n            revert AlreadyReported(_epochId, msg.sender);\\n        }\\n        ReportsPositions.register(uint256(memberIndex));\\n\\n        uint128 clBalanceEth1 = DENOMINATION_OFFSET * uint128(_clValidatorsBalance);\\n        emit CLReported(_epochId, clBalanceEth1, _clValidatorCount, msg.sender);\\n\\n        uint256 report = _encodeReport(_clValidatorsBalance, _clValidatorCount);\\n        int256 reportIndex = ReportsVariants.indexOfReport(report);\\n        uint256 quorum = Quorum.get();\\n\\n        if (reportIndex >= 0) {\\n            uint256 registeredReport = ReportsVariants.get()[uint256(reportIndex)];\\n            if (_getReportCount(registeredReport) + 1 >= quorum) {\\n                _pushToRiver(_epochId, clBalanceEth1, _clValidatorCount, clSpec);\\n            } else {\\n                ReportsVariants.set(uint256(reportIndex), registeredReport + 1);\\n            }\\n        } else {\\n            if (quorum == 1) {\\n                _pushToRiver(_epochId, clBalanceEth1, _clValidatorCount, clSpec);\\n            } else {\\n                ReportsVariants.push(report + 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Internal utility to change the quorum\\n    /// @dev Ensures that the quorum respects invariants\\n    function _setQuorum(uint256 _newQuorum, uint256 _previousQuorum) internal {\\n        uint256 memberCount = OracleMembers.get().length;\\n        if ((_newQuorum == 0 && memberCount > 0) || _newQuorum > memberCount) {\\n            revert LibErrors.InvalidArgument();\\n        }\\n        if (_previousQuorum > _newQuorum) {\\n            (bool isQuorum, uint256 report) = _getQuorumReport(_newQuorum);\\n            if (isQuorum) {\\n                (uint64 clBalance, uint32 clValidators) = _decodeReport(report);\\n                _pushToRiver(\\n                    ExpectedEpochId.get(), DENOMINATION_OFFSET * uint128(clBalance), clValidators, CLSpec.get()\\n                );\\n            }\\n        }\\n        Quorum.set(_newQuorum);\\n        emit SetQuorum(_newQuorum);\\n    }\\n\\n    /// @notice Retrieve the report that has the highest number of \\\"votes\\\"\\n    /// @param _quorum The quorum used for the query\\n    /// @return isQuorum True if quorum is met\\n    /// @return report The value of the report\\n    function _getQuorumReport(uint256 _quorum) internal view returns (bool isQuorum, uint256 report) {\\n        // check most frequent cases first: all reports are the same or no reports yet\\n        uint256[] memory variants = ReportsVariants.get();\\n        if (variants.length == 1) {\\n            return (_getReportCount(variants[0]) >= _quorum, variants[0]);\\n        } else if (variants.length == 0) {\\n            return (false, 0);\\n        }\\n\\n        // if more than 2 kind of reports exist, choose the most frequent\\n        uint256 maxind = 0;\\n        uint256 repeat = 0;\\n        uint16 maxval = 0;\\n        uint16 cur = 0;\\n        for (uint256 i = 0; i < variants.length;) {\\n            cur = _getReportCount(variants[i]);\\n            if (cur >= maxval) {\\n                if (cur == maxval) {\\n                    unchecked {\\n                        ++repeat;\\n                    }\\n                } else {\\n                    maxind = i;\\n                    maxval = cur;\\n                    repeat = 0;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return (maxval >= _quorum && repeat == 0, variants[maxind]);\\n    }\\n\\n    /// @notice Retrieve the block timestamp\\n    /// @return The block timestamp\\n    function _getTime() internal view returns (uint256) {\\n        return block.timestamp; // solhint-disable-line not-rely-on-time\\n    }\\n\\n    /// @notice Retrieve the current epoch id based on block timestamp\\n    /// @param _clSpec CL spec parameters\\n    /// @return The current epoch id\\n    function _getCurrentEpochId(CLSpec.CLSpecStruct memory _clSpec) internal view returns (uint256) {\\n        return (_getTime() - _clSpec.genesisTime) / (_clSpec.slotsPerEpoch * _clSpec.secondsPerSlot);\\n    }\\n\\n    /// @notice Retrieve the first epoch id of the frame of the provided epoch id\\n    /// @param _epochId Epoch id used to get the frame\\n    /// @param _clSpec CL spec parameters\\n    /// @return The epoch id at the beginning of the frame\\n    function _getFrameFirstEpochId(uint256 _epochId, CLSpec.CLSpecStruct memory _clSpec)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_epochId / _clSpec.epochsPerFrame) * _clSpec.epochsPerFrame;\\n    }\\n\\n    /// @notice Clear reporting data\\n    /// @param _epochId Next expected epoch id (first epoch of the next frame)\\n    function _clearReporting(uint256 _epochId) internal {\\n        ReportsPositions.clear();\\n        ReportsVariants.clear();\\n        ExpectedEpochId.set(_epochId);\\n        emit ExpectedEpochIdUpdated(_epochId);\\n    }\\n\\n    /// @notice Encode report into one slot. Last 16 bits are free to use for vote counting.\\n    /// @param _clBalance Total validator balance\\n    /// @param _clValidators Total validator count\\n    /// @return The encoded report value\\n    function _encodeReport(uint64 _clBalance, uint32 _clValidators) internal pure returns (uint256) {\\n        return (uint256(_clBalance) << 48) | (uint256(_clValidators) << 16);\\n    }\\n\\n    /// @notice Decode report from one slot to two variables, ignoring the last 16 bits\\n    /// @param _value Encoded report\\n    function _decodeReport(uint256 _value) internal pure returns (uint64 _clBalance, uint32 _clValidators) {\\n        _clBalance = uint64(_value >> 48);\\n        _clValidators = uint32(_value >> 16);\\n    }\\n\\n    /// @notice Retrieve the vote count from the encoded report (last 16 bits)\\n    /// @param _report Encoded report\\n    /// @return The report count\\n    function _getReportCount(uint256 _report) internal pure returns (uint16) {\\n        return uint16(_report);\\n    }\\n\\n    /// @notice Compute the max allowed increase based on the previous total balance and the time elapsed\\n    /// @param _prevTotalEth The previous total balance\\n    /// @param _timeElapsed The time since last report\\n    /// @return The maximum increase in balance allowed\\n    function _maxIncrease(uint256 _prevTotalEth, uint256 _timeElapsed) internal view returns (uint256) {\\n        uint256 annualAprUpperBound = ReportBounds.get().annualAprUpperBound;\\n        return (_prevTotalEth * annualAprUpperBound * _timeElapsed) / (LibBasisPoints.BASIS_POINTS_MAX * ONE_YEAR);\\n    }\\n\\n    /// @notice Performs sanity checks to prevent an erroneous update to the River system\\n    /// @param _postTotalEth Total validator balance after update\\n    /// @param _prevTotalEth Total validator balance before update\\n    /// @param _timeElapsed Time since last update\\n    function _sanityChecks(uint256 _postTotalEth, uint256 _prevTotalEth, uint256 _timeElapsed) internal view {\\n        if (_postTotalEth >= _prevTotalEth) {\\n            // increase                 = _postTotalPooledEther - _preTotalPooledEther,\\n            // relativeIncrease         = increase / _preTotalPooledEther,\\n            // annualRelativeIncrease   = relativeIncrease / (timeElapsed / 365 days),\\n            // annualRelativeIncreaseBp = annualRelativeIncrease * 10000, in basis points 0.01% (1e-4)\\n            uint256 annualAprUpperBound = ReportBounds.get().annualAprUpperBound;\\n            // check that annualRelativeIncreaseBp <= allowedAnnualRelativeIncreaseBp\\n            if (\\n                LibBasisPoints.BASIS_POINTS_MAX * ONE_YEAR * (_postTotalEth - _prevTotalEth)\\n                    > annualAprUpperBound * _prevTotalEth * _timeElapsed\\n            ) {\\n                revert TotalValidatorBalanceIncreaseOutOfBound(\\n                    _prevTotalEth, _postTotalEth, _timeElapsed, annualAprUpperBound\\n                );\\n            }\\n        } else {\\n            // decrease           = _preTotalPooledEther - _postTotalPooledEther\\n            // relativeDecrease   = decrease / _preTotalPooledEther\\n            // relativeDecreaseBp = relativeDecrease * 10000, in basis points 0.01% (1e-4)\\n            uint256 relativeLowerBound = ReportBounds.get().relativeLowerBound;\\n            // check that relativeDecreaseBp <= allowedRelativeDecreaseBp\\n            if (LibBasisPoints.BASIS_POINTS_MAX * (_prevTotalEth - _postTotalEth) > relativeLowerBound * _prevTotalEth)\\n            {\\n                revert TotalValidatorBalanceDecreaseOutOfBound(\\n                    _prevTotalEth, _postTotalEth, _timeElapsed, relativeLowerBound\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Push the new cl data to the river system and performs sanity checks\\n    /// @dev At this point, the maximum increase allowed to the previous total asset balance is computed and\\n    /// @dev provided to River. It's then up to River to manage how extra funds are injected in the system\\n    /// @dev and make sure the limit is not crossed. If the _totalBalance is already crossing this limit,\\n    /// @dev then there is nothing River can do to prevent it.\\n    /// @dev These extra funds are:\\n    /// @dev - the execution layer fees\\n    /// @param _epochId Id of the epoch\\n    /// @param _totalBalance Total validator balance\\n    /// @param _validatorCount Total validator count\\n    /// @param _clSpec CL spec parameters\\n    function _pushToRiver(\\n        uint256 _epochId,\\n        uint128 _totalBalance,\\n        uint32 _validatorCount,\\n        CLSpec.CLSpecStruct memory _clSpec\\n    ) internal {\\n        _clearReporting(_epochId + _clSpec.epochsPerFrame);\\n\\n        IRiverV1 river = IRiverV1(payable(RiverAddress.get()));\\n        uint256 prevTotalEth = river.totalUnderlyingSupply();\\n        uint256 timeElapsed = (_epochId - LastEpochId.get()) * _clSpec.slotsPerEpoch * _clSpec.secondsPerSlot;\\n        uint256 maxIncrease = _maxIncrease(prevTotalEth, timeElapsed);\\n        river.setConsensusLayerData(_validatorCount, _totalBalance, bytes32(_epochId), maxIncrease);\\n        uint256 postTotalEth = river.totalUnderlyingSupply();\\n\\n        _sanityChecks(postTotalEth, prevTotalEth, timeElapsed);\\n        LastEpochId.set(_epochId);\\n\\n        emit PostTotalShares(postTotalEth, prevTotalEth, timeElapsed, river.totalSupply());\\n    }\\n}\\n\",\"keccak256\":\"0x43dad1b667a293dc2dfa331653698ae81f581faf2098464c2262f3bd7c7b2629\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Administrable Interface\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the ownership of the contracts\\ninterface IAdministrable {\\n    /// @notice The pending admin address changed\\n    /// @param pendingAdmin New pending admin address\\n    event SetPendingAdmin(address indexed pendingAdmin);\\n\\n    /// @notice The admin address changed\\n    /// @param admin New admin address\\n    event SetAdmin(address indexed admin);\\n\\n    /// @notice Retrieves the current admin address\\n    /// @return The admin address\\n    function getAdmin() external view returns (address);\\n\\n    /// @notice Retrieve the current pending admin address\\n    /// @return The pending admin address\\n    function getPendingAdmin() external view returns (address);\\n\\n    /// @notice Proposes a new address as admin\\n    /// @dev This security prevents setting an invalid address as an admin. The pending\\n    /// @dev admin has to claim its ownership of the contract, and prove that the new\\n    /// @dev address is able to perform regular transactions.\\n    /// @param _newAdmin New admin address\\n    function proposeAdmin(address _newAdmin) external;\\n\\n    /// @notice Accept the transfer of ownership\\n    /// @dev Only callable by the pending admin. Resets the pending admin if succesful.\\n    function acceptAdmin() external;\\n}\\n\",\"keccak256\":\"0xe45ef81bf9326bac437dcf901eeb80628d5c87d51dcbcf3addb80e834ba7bfea\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IOracle.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/oracle/CLSpec.sol\\\";\\nimport \\\"../state/oracle/ReportBounds.sol\\\";\\n\\n/// @title Oracle Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the input from the allowed oracle members.\\n/// @notice Highly inspired by Lido's implementation.\\ninterface IOracleV1 {\\n    /// @notice Consensus Layer data has been reported by an oracle member\\n    /// @param epochId The epoch of the report\\n    /// @param newCLBalance The new consensus layer balance\\n    /// @param newCLValidatorCount The new consensus layer validator count\\n    /// @param oracleMember The oracle member that reported\\n    event CLReported(uint256 epochId, uint128 newCLBalance, uint32 newCLValidatorCount, address oracleMember);\\n\\n    /// @notice The storage quorum value has been changed\\n    /// @param newQuorum The new quorum value\\n    event SetQuorum(uint256 newQuorum);\\n\\n    /// @notice The expected epoch id has been changed\\n    /// @param epochId The new expected epoch id\\n    event ExpectedEpochIdUpdated(uint256 epochId);\\n\\n    /// @notice The report has been submitted to river\\n    /// @param postTotalEth The new total ETH balance\\n    /// @param prevTotalEth The previous total ETH balance\\n    /// @param timeElapsed Time since last report\\n    /// @param totalShares The new total amount of shares\\n    event PostTotalShares(uint256 postTotalEth, uint256 prevTotalEth, uint256 timeElapsed, uint256 totalShares);\\n\\n    /// @notice A member has been added to the oracle member list\\n    /// @param member The address of the member\\n    event AddMember(address indexed member);\\n\\n    /// @notice A member has been removed from the oracle member list\\n    /// @param member The address of the member\\n    event RemoveMember(address indexed member);\\n\\n    /// @notice A member address has been edited\\n    /// @param oldAddress The previous member address\\n    /// @param newAddress The new member address\\n    event SetMember(address indexed oldAddress, address indexed newAddress);\\n\\n    /// @notice The storage river address value has been changed\\n    /// @param _river The new river address\\n    event SetRiver(address _river);\\n\\n    /// @notice The consensus layer spec has been changed\\n    /// @param epochsPerFrame The number of epochs inside a frame (225 = 24 hours)\\n    /// @param slotsPerEpoch The number of slots inside an epoch (32 on ethereum mainnet)\\n    /// @param secondsPerSlot The time between two slots (12 seconds on ethereum mainnet)\\n    /// @param genesisTime The timestamp of block #0\\n    event SetSpec(uint64 epochsPerFrame, uint64 slotsPerEpoch, uint64 secondsPerSlot, uint64 genesisTime);\\n\\n    /// @notice The report bounds have been changed\\n    /// @param annualAprUpperBound The maximum allowed apr. 10% means increases in balance extrapolated to a year should not exceed 10%.\\n    /// @param relativeLowerBound The maximum allowed balance decrease as a relative % of the total balance\\n    event SetBounds(uint256 annualAprUpperBound, uint256 relativeLowerBound);\\n\\n    /// @notice The provided epoch is too old compared to the expected epoch id\\n    /// @param providedEpochId The epoch id provided as input\\n    /// @param minExpectedEpochId The minimum epoch id expected\\n    error EpochTooOld(uint256 providedEpochId, uint256 minExpectedEpochId);\\n\\n    /// @notice The provided epoch is not at the beginning of its frame\\n    /// @param providedEpochId The epoch id provided as input\\n    /// @param expectedFrameFirstEpochId The frame first epoch id that was expected\\n    error NotFrameFirstEpochId(uint256 providedEpochId, uint256 expectedFrameFirstEpochId);\\n\\n    /// @notice The member already reported on the given epoch id\\n    /// @param epochId The epoch id provided as input\\n    /// @param member The oracle member\\n    error AlreadyReported(uint256 epochId, address member);\\n\\n    /// @notice The delta in balance is above the allowed upper bound\\n    /// @param prevTotalEth The previous total balance\\n    /// @param postTotalEth The new total balance\\n    /// @param timeElapsed The time since last report\\n    /// @param annualAprUpperBound The maximum apr allowed\\n    error TotalValidatorBalanceIncreaseOutOfBound(\\n        uint256 prevTotalEth, uint256 postTotalEth, uint256 timeElapsed, uint256 annualAprUpperBound\\n    );\\n\\n    /// @notice The negative delta in balance is above the allowed lower bound\\n    /// @param prevTotalEth The previous total balance\\n    /// @param postTotalEth The new total balance\\n    /// @param timeElapsed The time since last report\\n    /// @param relativeLowerBound The maximum relative decrease allowed\\n    error TotalValidatorBalanceDecreaseOutOfBound(\\n        uint256 prevTotalEth, uint256 postTotalEth, uint256 timeElapsed, uint256 relativeLowerBound\\n    );\\n\\n    /// @notice The address is already in use by an oracle member\\n    /// @param newAddress The address already in use\\n    error AddressAlreadyInUse(address newAddress);\\n\\n    /// @notice Initializes the oracle\\n    /// @param _river Address of the River contract, able to receive oracle input data after quorum is met\\n    /// @param _administratorAddress Address able to call administrative methods\\n    /// @param _epochsPerFrame CL spec parameter. Number of epochs in a frame.\\n    /// @param _slotsPerEpoch CL spec parameter. Number of slots in one epoch.\\n    /// @param _secondsPerSlot CL spec parameter. Number of seconds between slots.\\n    /// @param _genesisTime CL spec parameter. Timestamp of the genesis slot.\\n    /// @param _annualAprUpperBound CL bound parameter. Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.\\n    /// @param _relativeLowerBound CL bound parameter. Maximum relative balance decrease.\\n    function initOracleV1(\\n        address _river,\\n        address _administratorAddress,\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime,\\n        uint256 _annualAprUpperBound,\\n        uint256 _relativeLowerBound\\n    ) external;\\n\\n    /// @notice Retrieve River address\\n    /// @return The address of River\\n    function getRiver() external view returns (address);\\n\\n    /// @notice Retrieve the block timestamp\\n    /// @return The current timestamp from the EVM context\\n    function getTime() external view returns (uint256);\\n\\n    /// @notice Retrieve expected epoch id\\n    /// @return The current expected epoch id\\n    function getExpectedEpochId() external view returns (uint256);\\n\\n    /// @notice Retrieve member report status\\n    /// @param _oracleMember Address of member to check\\n    /// @return True if member has reported\\n    function getMemberReportStatus(address _oracleMember) external view returns (bool);\\n\\n    /// @notice Retrieve member report status\\n    /// @return The raw report status value\\n    function getGlobalReportStatus() external view returns (uint256);\\n\\n    /// @notice Retrieve report variants count\\n    /// @return The count of report variants\\n    function getReportVariantsCount() external view returns (uint256);\\n\\n    /// @notice Retrieve decoded report at provided index\\n    /// @param _idx Index of report\\n    /// @return _clBalance The reported consensus layer balance sum of River's validators\\n    /// @return _clValidators The reported validator count\\n    /// @return _reportCount The number of similar reports\\n    function getReportVariant(uint256 _idx)\\n        external\\n        view\\n        returns (uint64 _clBalance, uint32 _clValidators, uint16 _reportCount);\\n\\n    /// @notice Retrieve the last completed epoch id\\n    /// @return The last completed epoch id\\n    function getLastCompletedEpochId() external view returns (uint256);\\n\\n    /// @notice Retrieve the current epoch id based on block timestamp\\n    /// @return The current epoch id\\n    function getCurrentEpochId() external view returns (uint256);\\n\\n    /// @notice Retrieve the current quorum\\n    /// @return The current quorum\\n    function getQuorum() external view returns (uint256);\\n\\n    /// @notice Retrieve the current cl spec\\n    /// @return The Consensus Layer Specification\\n    function getCLSpec() external view returns (CLSpec.CLSpecStruct memory);\\n\\n    /// @notice Retrieve the current frame details\\n    /// @return _startEpochId The epoch at the beginning of the frame\\n    /// @return _startTime The timestamp of the beginning of the frame in seconds\\n    /// @return _endTime The timestamp of the end of the frame in seconds\\n    function getCurrentFrame() external view returns (uint256 _startEpochId, uint256 _startTime, uint256 _endTime);\\n\\n    /// @notice Retrieve the first epoch id of the frame of the provided epoch id\\n    /// @param _epochId Epoch id used to get the frame\\n    /// @return The first epoch id of the frame containing the given epoch id\\n    function getFrameFirstEpochId(uint256 _epochId) external view returns (uint256);\\n\\n    /// @notice Retrieve the report bounds\\n    /// @return The report bounds\\n    function getReportBounds() external view returns (ReportBounds.ReportBoundsStruct memory);\\n\\n    /// @notice Retrieve the list of oracle members\\n    /// @return The oracle members\\n    function getOracleMembers() external view returns (address[] memory);\\n\\n    /// @notice Returns true if address is member\\n    /// @dev Performs a naive search, do not call this on-chain, used as an off-chain helper\\n    /// @param _memberAddress Address of the member\\n    /// @return True if address is a member\\n    function isMember(address _memberAddress) external view returns (bool);\\n\\n    /// @notice Adds new address as oracle member, giving the ability to push cl reports.\\n    /// @dev Only callable by the adminstrator\\n    /// @param _newOracleMember Address of the new member\\n    /// @param _newQuorum New quorum value\\n    function addMember(address _newOracleMember, uint256 _newQuorum) external;\\n\\n    /// @notice Removes an address from the oracle members.\\n    /// @dev Only callable by the adminstrator\\n    /// @param _oracleMember Address to remove\\n    /// @param _newQuorum New quorum value\\n    function removeMember(address _oracleMember, uint256 _newQuorum) external;\\n\\n    /// @notice Changes the address of an oracle member\\n    /// @dev Only callable by the adminitrator\\n    /// @dev Cannot use an address already in use\\n    /// @param _oracleMember Address to change\\n    /// @param _newAddress New address for the member\\n    function setMember(address _oracleMember, address _newAddress) external;\\n\\n    /// @notice Edits the cl spec parameters\\n    /// @dev Only callable by the adminstrator\\n    /// @param _epochsPerFrame Number of epochs in a frame.\\n    /// @param _slotsPerEpoch Number of slots in one epoch.\\n    /// @param _secondsPerSlot Number of seconds between slots.\\n    /// @param _genesisTime Timestamp of the genesis slot.\\n    function setCLSpec(uint64 _epochsPerFrame, uint64 _slotsPerEpoch, uint64 _secondsPerSlot, uint64 _genesisTime)\\n        external;\\n\\n    /// @notice Edits the cl bounds parameters\\n    /// @dev Only callable by the adminstrator\\n    /// @param _annualAprUpperBound Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.\\n    /// @param _relativeLowerBound Maximum relative balance decrease.\\n    function setReportBounds(uint256 _annualAprUpperBound, uint256 _relativeLowerBound) external;\\n\\n    /// @notice Edits the quorum required to forward cl data to River\\n    /// @dev Only callable by the adminstrator\\n    /// @param _newQuorum New quorum parameter\\n    function setQuorum(uint256 _newQuorum) external;\\n\\n    /// @notice Report cl chain data\\n    /// @dev Only callable by an oracle member\\n    /// @dev The epoch id is expected to be >= to the expected epoch id stored in the contract\\n    /// @dev The epoch id is expected to be the first epoch of its frame\\n    /// @dev The Consensus Layer Validator count is the amount of running validators managed by River.\\n    /// @dev Until withdrawals are enabled, this count also takes into account any exited and slashed validator\\n    /// @dev as funds are still locked on the consensus layer.\\n    /// @param _epochId Epoch where the balance and validator count has been computed\\n    /// @param _clValidatorsBalance Total balance of River validators\\n    /// @param _clValidatorCount Total River validator count\\n    function reportConsensusLayerData(uint256 _epochId, uint64 _clValidatorsBalance, uint32 _clValidatorCount)\\n        external;\\n}\\n\",\"keccak256\":\"0x9f15f8b7e5b0e1fe342efd9f049da174e144ad0ee8cc7363c49292ce571f83af\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRiver.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./components/IConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"./components/IOracleManager.1.sol\\\";\\nimport \\\"./components/ISharesManager.1.sol\\\";\\nimport \\\"./components/IUserDepositManager.1.sol\\\";\\n\\n/// @title River Interface (v1)\\n/// @author Kiln\\n/// @notice The main system interface\\ninterface IRiverV1 is IConsensusLayerDepositManagerV1, IUserDepositManagerV1, ISharesManagerV1, IOracleManagerV1 {\\n    /// @notice Funds have been pulled from the Execution Layer Fee Recipient\\n    /// @param amount The amount pulled\\n    event PulledELFees(uint256 amount);\\n\\n    /// @notice The stored Execution Layer Fee Recipient has been changed\\n    /// @param elFeeRecipient The new Execution Layer Fee Recipient\\n    event SetELFeeRecipient(address indexed elFeeRecipient);\\n\\n    /// @notice The stored Collector has been changed\\n    /// @param collector The new Collector\\n    event SetCollector(address indexed collector);\\n\\n    /// @notice The stored Allowlist has been changed\\n    /// @param allowlist The new Allowlist\\n    event SetAllowlist(address indexed allowlist);\\n\\n    /// @notice The stored Global Fee has been changed\\n    /// @param fee The new Global Fee\\n    event SetGlobalFee(uint256 fee);\\n\\n    /// @notice The stored Operators Registry has been changed\\n    /// @param operatorRegistry The new Operators Registry\\n    event SetOperatorsRegistry(address indexed operatorRegistry);\\n\\n    /// @notice The system underlying supply increased. This is a snapshot of the balances for accounting purposes\\n    /// @param _collector The address of the collector during this event\\n    /// @param _oldTotalUnderlyingBalance Old total ETH balance under management by River\\n    /// @param _oldTotalSupply Old total supply in shares\\n    /// @param _newTotalUnderlyingBalance New total ETH balance under management by River\\n    /// @param _newTotalSupply New total supply in shares\\n    event RewardsEarned(\\n        address indexed _collector,\\n        uint256 _oldTotalUnderlyingBalance,\\n        uint256 _oldTotalSupply,\\n        uint256 _newTotalUnderlyingBalance,\\n        uint256 _newTotalSupply\\n    );\\n\\n    /// @notice The computed amount of shares to mint is 0\\n    error ZeroMintedShares();\\n\\n    /// @notice The access was denied\\n    /// @param account The account that was denied\\n    error Denied(address account);\\n\\n    /// @notice Initializes the River system\\n    /// @param _depositContractAddress Address to make Consensus Layer deposits\\n    /// @param _elFeeRecipientAddress Address that receives the execution layer fees\\n    /// @param _withdrawalCredentials Credentials to use for every validator deposit\\n    /// @param _oracleAddress The address of the Oracle contract\\n    /// @param _systemAdministratorAddress Administrator address\\n    /// @param _allowlistAddress Address of the allowlist contract\\n    /// @param _operatorRegistryAddress Address of the operator registry\\n    /// @param _collectorAddress Address receiving the the global fee on revenue\\n    /// @param _globalFee Amount retained when the ETH balance increases and sent to the collector\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _operatorRegistryAddress,\\n        address _collectorAddress,\\n        uint256 _globalFee\\n    ) external;\\n\\n    /// @notice Get the current global fee\\n    /// @return The global fee\\n    function getGlobalFee() external view returns (uint256);\\n\\n    /// @notice Retrieve the allowlist address\\n    /// @return The allowlist address\\n    function getAllowlist() external view returns (address);\\n\\n    /// @notice Retrieve the collector address\\n    /// @return The collector address\\n    function getCollector() external view returns (address);\\n\\n    /// @notice Retrieve the execution layer fee recipient\\n    /// @return The execution layer fee recipient address\\n    function getELFeeRecipient() external view returns (address);\\n\\n    /// @notice Retrieve the operators registry\\n    /// @return The operators registry address\\n    function getOperatorsRegistry() external view returns (address);\\n\\n    /// @notice Changes the global fee parameter\\n    /// @param newFee New fee value\\n    function setGlobalFee(uint256 newFee) external;\\n\\n    /// @notice Changes the allowlist address\\n    /// @param _newAllowlist New address for the allowlist\\n    function setAllowlist(address _newAllowlist) external;\\n\\n    /// @notice Changes the collector address\\n    /// @param _newCollector New address for the collector\\n    function setCollector(address _newCollector) external;\\n\\n    /// @notice Changes the execution layer fee recipient\\n    /// @param _newELFeeRecipient New address for the recipient\\n    function setELFeeRecipient(address _newELFeeRecipient) external;\\n\\n    /// @notice Input for execution layer fee earnings\\n    function sendELFees() external payable;\\n}\\n\",\"keccak256\":\"0xb49107de594a37139c9cd1d1652eb9f119634d97b2ef60e25325d88b3a34766a\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IConsensusLayerDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Consensys Layer Deposit Manager Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the interactions with the official deposit contract\\ninterface IConsensusLayerDepositManagerV1 {\\n    /// @notice A validator key got funded on the deposit contract\\n    /// @param publicKey BLS Public key that got funded\\n    event FundedValidatorKey(bytes publicKey);\\n\\n    /// @notice The stored deposit contract address changed\\n    /// @param depositContract Address of the deposit contract\\n    event SetDepositContractAddress(address indexed depositContract);\\n\\n    /// @notice The stored withdrawal credentials changed\\n    /// @param withdrawalCredentials The withdrawal credentials to use for deposits\\n    event SetWithdrawalCredentials(bytes32 withdrawalCredentials);\\n\\n    /// @notice Not enough funds to deposit one validator\\n    error NotEnoughFunds();\\n\\n    /// @notice The length of the BLS Public key is invalid during deposit\\n    error InconsistentPublicKeys();\\n\\n    /// @notice The length of the BLS Signature is invalid during deposit\\n    error InconsistentSignatures();\\n\\n    /// @notice The internal key retrieval returned no keys\\n    error NoAvailableValidatorKeys();\\n\\n    /// @notice The received count of public keys to deposit is invalid\\n    error InvalidPublicKeyCount();\\n\\n    /// @notice The received count of signatures to deposit is invalid\\n    error InvalidSignatureCount();\\n\\n    /// @notice The withdrawal credentials value is null\\n    error InvalidWithdrawalCredentials();\\n\\n    /// @notice An error occured during the deposit\\n    error ErrorOnDeposit();\\n\\n    /// @notice Returns the amount of pending ETH\\n    /// @return The amount of pending ETH\\n    function getBalanceToDeposit() external view returns (uint256);\\n\\n    /// @notice Retrieve the withdrawal credentials\\n    /// @return The withdrawal credentials\\n    function getWithdrawalCredentials() external view returns (bytes32);\\n\\n    /// @notice Get the deposited validator count (the count of deposits made by the contract)\\n    /// @return The deposited validator count\\n    function getDepositedValidatorCount() external view returns (uint256);\\n\\n    /// @notice Deposits current balance to the Consensus Layer by batches of 32 ETH\\n    /// @param _maxCount The maximum amount of validator keys to fund\\n    function depositToConsensusLayer(uint256 _maxCount) external;\\n}\\n\",\"keccak256\":\"0x2215d3054ece419e846f376e7624094b5ce24b3c72be745a4b5aa4e756c4cb42\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IOracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Oracle Manager (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the inputs provided by the oracle\\ninterface IOracleManagerV1 {\\n    /// @notice The stored oracle address changed\\n    /// @param oracleAddress The new oracle address\\n    event SetOracle(address indexed oracleAddress);\\n\\n    /// @notice The consensus layer data provided by the oracle has been updated\\n    /// @param validatorCount The new count of validators running on the consensus layer\\n    /// @param validatorTotalBalance The new total balance sum of all validators\\n    /// @param roundId Round identifier\\n    event ConsensusLayerDataUpdate(uint256 validatorCount, uint256 validatorTotalBalance, bytes32 roundId);\\n\\n    /// @notice The reported validator count is invalid\\n    /// @param providedValidatorCount The received validator count value\\n    /// @param depositedValidatorCount The number of deposits performed by the system\\n    error InvalidValidatorCountReport(uint256 providedValidatorCount, uint256 depositedValidatorCount);\\n\\n    /// @notice Get oracle address\\n    /// @return The oracle address\\n    function getOracle() external view returns (address);\\n\\n    /// @notice Get CL validator total balance\\n    /// @return The CL Validator total balance\\n    function getCLValidatorTotalBalance() external view returns (uint256);\\n\\n    /// @notice Get CL validator count (the amount of validator reported by the oracles)\\n    /// @return The CL validator count\\n    function getCLValidatorCount() external view returns (uint256);\\n\\n    /// @notice Set the oracle address\\n    /// @param _oracleAddress Address of the oracle\\n    function setOracle(address _oracleAddress) external;\\n\\n    /// @notice Sets the validator count and validator total balance sum reported by the oracle\\n    /// @dev Can only be called by the oracle address\\n    /// @dev The round id is a blackbox value that should only be used to identify unique reports\\n    /// @dev When a report is performed, River computes the amount of fees that can be pulled\\n    /// @dev from the execution layer fee recipient. This amount is capped by the max allowed\\n    /// @dev increase provided during the report.\\n    /// @dev If the total asset balance increases (from the reported total balance and the pulled funds)\\n    /// @dev we then compute the share that must be taken for the collector on the positive delta.\\n    /// @dev The execution layer fees are taken into account here because they are the product of\\n    /// @dev node operator's work, just like consensus layer fees, and both should be handled in the\\n    /// @dev same manner, as a single revenue stream for the users and the collector.\\n    /// @param _validatorCount The number of active validators on the consensus layer\\n    /// @param _validatorTotalBalance The balance sum of the active validators on the consensus layer\\n    /// @param _roundId An identifier for this update\\n    /// @param _maxIncrease The maximum allowed increase in the total balance\\n    function setConsensusLayerData(\\n        uint256 _validatorCount,\\n        uint256 _validatorTotalBalance,\\n        bytes32 _roundId,\\n        uint256 _maxIncrease\\n    ) external;\\n}\\n\",\"keccak256\":\"0x088ff39852e3000fbe31c62da75c41bba38aaf2f2d66f99ba698835b840ef6bc\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/ISharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Shares Manager Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the shares of the depositor and the ERC20 interface\\ninterface ISharesManagerV1 is IERC20 {\\n    /// @notice Balance too low to perform operation\\n    error BalanceTooLow();\\n\\n    /// @notice Allowance too low to perform operation\\n    /// @param _from Account where funds are sent from\\n    /// @param _operator Account attempting the transfer\\n    /// @param _allowance Current allowance\\n    /// @param _value Requested transfer value in shares\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n\\n    /// @notice Invalid empty transfer\\n    error NullTransfer();\\n\\n    /// @notice Invalid transfer recipients\\n    /// @param _from Account sending the funds in the invalid transfer\\n    /// @param _to Account receiving the funds in the invalid transfer\\n    error UnauthorizedTransfer(address _from, address _to);\\n\\n    /// @notice Retrieve the token name\\n    /// @return The token name\\n    function name() external pure returns (string memory);\\n\\n    /// @notice Retrieve the token symbol\\n    /// @return The token symbol\\n    function symbol() external pure returns (string memory);\\n\\n    /// @notice Retrieve the decimal count\\n    /// @return The decimal count\\n    function decimals() external pure returns (uint8);\\n\\n    /// @notice Retrieve the total token supply\\n    /// @return The total supply in shares\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the total underlying asset supply\\n    /// @return The total underlying asset supply\\n    function totalUnderlyingSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The balance of the account in shares\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The underlying balance of the account\\n    function balanceOfUnderlying(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance from an amount of shares\\n    /// @param _shares Amount of shares to convert\\n    /// @return The underlying asset balance represented by the shares\\n    function underlyingBalanceFromShares(uint256 _shares) external view returns (uint256);\\n\\n    /// @notice Retrieve the shares count from an underlying asset amount\\n    /// @param _underlyingAssetAmount Amount of underlying asset to convert\\n    /// @return The amount of shares worth the underlying asset amopunt\\n    function sharesFromUnderlyingBalance(uint256 _underlyingAssetAmount) external view returns (uint256);\\n\\n    /// @notice Retrieve the allowance value for a spender\\n    /// @param _owner Address that issued the allowance\\n    /// @param _spender Address that received the allowance\\n    /// @return The allowance in shares for a given spender\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    /// @notice Performs a transfer from the message sender to the provided account\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Performs a transfer between two recipients\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Approves an account for future spendings\\n    /// @dev An approved account can use transferFrom to transfer funds on behalf of the token owner\\n    /// @param _spender Address that is allowed to spend the tokens\\n    /// @param _value The allowed amount in shares, will override previous value\\n    /// @return True if success\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    /// @notice Increase allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _additionalValue Amount of shares to add\\n    /// @return True if success\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool);\\n\\n    /// @notice Decrease allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _subtractableValue Amount of shares to subtract\\n    /// @return True if success\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool);\\n}\\n\",\"keccak256\":\"0x947debdcf17b72c13c3ca1a840795ed935bde5d4f345e52fa1bed1895212da66\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IUserDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title User Deposit Manager (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the inbound transfers cases or the explicit submissions\\ninterface IUserDepositManagerV1 {\\n    /// @notice User deposited ETH in the system\\n    /// @param depositor Address performing the deposit\\n    /// @param recipient Address receiving the minted shares\\n    /// @param amount Amount in ETH deposited\\n    event UserDeposit(address indexed depositor, address indexed recipient, uint256 amount);\\n\\n    /// @notice And empty deposit attempt was made\\n    error EmptyDeposit();\\n\\n    /// @notice Explicit deposit method to mint on msg.sender\\n    function deposit() external payable;\\n\\n    /// @notice Explicit deposit method to mint on msg.sender and transfer to _recipient\\n    /// @param _recipient Address receiving the minted LsETH\\n    function depositAndTransfer(address _recipient) external payable;\\n\\n    /// @notice Implicit deposit method, when the user performs a regular transfer to the contract\\n    receive() external payable;\\n\\n    /// @notice Invalid call, when the user sends a transaction with a data payload but no method matched\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x1abcda34431bfbb82b6ede5c852f4ece6544cca24616f58cb44ed340df0ef06b\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\nimport \\\"../state/shared/PendingAdministratorAddress.sol\\\";\\n\\n/// @title Lib Administrable\\n/// @author Kiln\\n/// @notice This library handles the admin and pending admin storage vars\\nlibrary LibAdministrable {\\n    /// @notice Retrieve the system admin\\n    /// @return The address of the system admin\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n\\n    /// @notice Retrieve the pending system admin\\n    /// @return The adress of the pending system admin\\n    function _getPendingAdmin() internal view returns (address) {\\n        return PendingAdministratorAddress.get();\\n    }\\n\\n    /// @notice Sets the system admin\\n    /// @param _admin New system admin\\n    function _setAdmin(address _admin) internal {\\n        AdministratorAddress.set(_admin);\\n    }\\n\\n    /// @notice Sets the pending system admin\\n    /// @param _pendingAdmin New pending system admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        PendingAdministratorAddress.set(_pendingAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0xbe4cec02aff69406624f3ab71a19948997aaf74f63e171137f2f3b85bdb7bc3a\",\"license\":\"MIT\"},\"contracts/src/libraries/LibBasisPoints.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Lib Basis Points\\n/// @notice Holds the basis points max value\\nlibrary LibBasisPoints {\\n    /// @notice The max value for basis points (represents 100%)\\n    uint256 internal constant BASIS_POINTS_MAX = 10_000;\\n}\\n\",\"keccak256\":\"0x97228a01dcd48f033555e3a44f9be37fb474a1b027f703f28097d539808f1c6c\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibErrors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Errors\\n/// @notice Library of common errors\\nlibrary LibErrors {\\n    /// @notice The operator is unauthorized for the caller\\n    /// @param caller Addres performing the call\\n    error Unauthorized(address caller);\\n\\n    /// @notice The call was invalid\\n    error InvalidCall();\\n\\n    /// @notice The argument was invalid\\n    error InvalidArgument();\\n\\n    /// @notice The address is zero\\n    error InvalidZeroAddress();\\n\\n    /// @notice The string is empty\\n    error InvalidEmptyString();\\n\\n    /// @notice The fee is invalid\\n    error InvalidFee();\\n}\\n\",\"keccak256\":\"0x76d2ef5b294a8f2e934c3ce286ee77238ae03a35a7507a378659b37db6d18f03\",\"license\":\"MIT\"},\"contracts/src/libraries/LibSanitize.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./LibErrors.sol\\\";\\nimport \\\"./LibBasisPoints.sol\\\";\\n\\n/// @title Lib Sanitize\\n/// @notice Utilities to sanitize input values\\nlibrary LibSanitize {\\n    /// @notice Reverts if address is 0\\n    /// @param _address Address to check\\n    function _notZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert LibErrors.InvalidZeroAddress();\\n        }\\n    }\\n\\n    /// @notice Reverts if string is empty\\n    /// @param _string String to check\\n    function _notEmptyString(string memory _string) internal pure {\\n        if (bytes(_string).length == 0) {\\n            revert LibErrors.InvalidEmptyString();\\n        }\\n    }\\n\\n    /// @notice Reverts if fee is invalid\\n    /// @param _fee Fee to check\\n    function _validFee(uint256 _fee) internal pure {\\n        if (_fee > LibBasisPoints.BASIS_POINTS_MAX) {\\n            revert LibErrors.InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8aeeb866c4657a96c8b4c006340c7996d15a6f0044b730c276bc3ba8d5bcd48\",\"license\":\"MIT\"},\"contracts/src/libraries/LibUnstructuredStorage.sol\":{\"content\":\"// SPDX-License-Identifier:    MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @title Lib Unstructured Storage\\n/// @notice Utilities to work with unstructured storage\\nlibrary LibUnstructuredStorage {\\n    /// @notice Retrieve a bool value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bool value\\n    function getStorageBool(bytes32 _position) internal view returns (bool data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an address value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The address value\\n    function getStorageAddress(bytes32 _position) internal view returns (address data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve a bytes32 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bytes32 value\\n    function getStorageBytes32(bytes32 _position) internal view returns (bytes32 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an uint256 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The uint256 value\\n    function getStorageUint256(bytes32 _position) internal view returns (uint256 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Sets a bool value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bool value to set\\n    function setStorageBool(bytes32 _position, bool _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an address value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The address value to set\\n    function setStorageAddress(bytes32 _position, address _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets a bytes32 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bytes32 value to set\\n    function setStorageBytes32(bytes32 _position, bytes32 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an uint256 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The uint256 value to set\\n    function setStorageUint256(bytes32 _position, uint256 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8e1a2f0dc18e023e12747355b3c95258d4de698f2bb6196222a1dc92940caa3\",\"license\":\"MIT\"},\"contracts/src/state/oracle/CLSpec.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Consensus Layer Spec Storage\\n/// @notice Utility to manage the Consensus Layer Spec in storage\\nlibrary CLSpec {\\n    /// @notice Storage slot of the Consensus Layer Spec\\n    bytes32 internal constant CL_SPEC_SLOT = bytes32(uint256(keccak256(\\\"river.state.clSpec\\\")) - 1);\\n\\n    /// @notice The Consensus Layer Spec structure\\n    struct CLSpecStruct {\\n        /// @custom:attribute The count of epochs per frame, 225 means 24h\\n        uint64 epochsPerFrame;\\n        /// @custom:attribute The count of slots in an epoch (32 on mainnet)\\n        uint64 slotsPerEpoch;\\n        /// @custom:attribute The seconds in a slot (12 on mainnet)\\n        uint64 secondsPerSlot;\\n        /// @custom:attribute The block timestamp of the first consensus layer block\\n        uint64 genesisTime;\\n    }\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        CLSpecStruct value;\\n    }\\n\\n    /// @notice Retrieve the Consensus Layer Spec from storage\\n    /// @return The Consensus Layer Spec\\n    function get() internal view returns (CLSpecStruct memory) {\\n        bytes32 slot = CL_SPEC_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Consensus Layer Spec value in storage\\n    /// @param _newCLSpec The new value to set in storage\\n    function set(CLSpecStruct memory _newCLSpec) internal {\\n        bytes32 slot = CL_SPEC_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newCLSpec;\\n    }\\n}\\n\",\"keccak256\":\"0x065ca2b07a900ed72bdf44d6b6fa6d6c158910fe128a66f268b9af989bf30dc1\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/ExpectedEpochId.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Expected Epoch Id Storage\\n/// @notice Utility to manage the Expected Epoch Id in storage\\nlibrary ExpectedEpochId {\\n    /// @notice Storage slot of the Expected Epoch Id\\n    bytes32 internal constant EXPECTED_EPOCH_ID_SLOT = bytes32(uint256(keccak256(\\\"river.state.expectedEpochId\\\")) - 1);\\n\\n    /// @notice Retrieve the Expected Epoch Id\\n    /// @return The Expected Epoch Id\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(EXPECTED_EPOCH_ID_SLOT);\\n    }\\n\\n    /// @notice Sets the Expected Epoch Id\\n    /// @param _newValue New Expected Epoch Id\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(EXPECTED_EPOCH_ID_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x58dac2bad3c2d8a80bb68730a01cd065dca888c65943da3e61ebd44bad2fbda9\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/LastEpochId.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Last Epoch Id Storage\\n/// @notice Utility to manage the Last Epoch Id in storage\\nlibrary LastEpochId {\\n    /// @notice Storage slot of the Last Epoch Id\\n    bytes32 internal constant LAST_EPOCH_ID_SLOT = bytes32(uint256(keccak256(\\\"river.state.lastEpochId\\\")) - 1);\\n\\n    /// @notice Retrieve the Last Epoch Id\\n    /// @return The Last Epoch Id\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(LAST_EPOCH_ID_SLOT);\\n    }\\n\\n    /// @notice Sets the Last Epoch Id\\n    /// @param _newValue New Last Epoch Id\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(LAST_EPOCH_ID_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x7a992b8b6c71cfb28f504186b7846e6b7957491d5a67bed446713d48bee4c31a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/OracleMembers.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Oracle Members Storage\\n/// @notice Utility to manage the Oracle Members in storage\\n/// @dev There can only be up to 256 oracle members. This is due to how report statuses are stored in Reports Positions\\nlibrary OracleMembers {\\n    /// @notice Storage slot of the Oracle Members\\n    bytes32 internal constant ORACLE_MEMBERS_SLOT = bytes32(uint256(keccak256(\\\"river.state.oracleMembers\\\")) - 1);\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The array of oracle members\\n        address[] value;\\n    }\\n\\n    /// @notice Retrieve the list of oracle members\\n    /// @return List of oracle members\\n    function get() internal view returns (address[] memory) {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Add a new oracle member to the list\\n    /// @param _newOracleMember Address of the new oracle member\\n    function push(address _newOracleMember) internal {\\n        LibSanitize._notZeroAddress(_newOracleMember);\\n\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_newOracleMember);\\n    }\\n\\n    /// @notice Set an address in the oracle member list\\n    /// @param _index The index to edit\\n    /// @param _newOracleAddress The new value of the oracle member\\n    function set(uint256 _index, address _newOracleAddress) internal {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_index] = _newOracleAddress;\\n    }\\n\\n    /// @notice Retrieve the index of the oracle member\\n    /// @param _memberAddress The address to lookup\\n    /// @return The index of the member, -1 if not found\\n    function indexOf(address _memberAddress) internal view returns (int256) {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        for (uint256 idx = 0; idx < r.value.length;) {\\n            if (r.value[idx] == _memberAddress) {\\n                return int256(idx);\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return int256(-1);\\n    }\\n\\n    /// @notice Delete the oracle member at the given index\\n    /// @param _idx The index of the member to remove\\n    function deleteItem(uint256 _idx) internal {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 lastIdx = r.value.length - 1;\\n        if (lastIdx != _idx) {\\n            r.value[_idx] = r.value[lastIdx];\\n        }\\n\\n        r.value.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x15d800646b54c37160442613719e79e68269aedb112705d63f88e2da7e7c0f04\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/Quorum.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Quorum Storage\\n/// @notice Utility to manage the Quorum in storage\\nlibrary Quorum {\\n    /// @notice Storage slot of the Quorum\\n    bytes32 internal constant QUORUM_SLOT = bytes32(uint256(keccak256(\\\"river.state.quorum\\\")) - 1);\\n\\n    /// @notice Retrieve the Quorum\\n    /// @return The Quorum\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(QUORUM_SLOT);\\n    }\\n\\n    /// @notice Sets the Quorum\\n    /// @param _newValue New Quorum\\n    function set(uint256 _newValue) internal {\\n        return LibUnstructuredStorage.setStorageUint256(QUORUM_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x792a970cdecd7fb20f3e9be818ba247032cc499a88a300b0e1ae7120cdf41483\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/ReportBounds.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Report Bounds Storage\\n/// @notice Utility to manage the Report Bounds in storage\\nlibrary ReportBounds {\\n    /// @notice Storage slot of the Report Bounds\\n    bytes32 internal constant REPORT_BOUNDS_SLOT = bytes32(uint256(keccak256(\\\"river.state.reportBounds\\\")) - 1);\\n\\n    /// @notice The Report Bounds structure\\n    struct ReportBoundsStruct {\\n        /// @custom:attribute The maximum allowed annual apr, checked before submitting a report to River\\n        uint256 annualAprUpperBound;\\n        /// @custom:attribute The maximum allowed balance decrease, also checked before submitting a report to River\\n        uint256 relativeLowerBound;\\n    }\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        ReportBoundsStruct value;\\n    }\\n\\n    /// @notice Retrieve the Report Bounds from storage\\n    /// @return The Report Bounds\\n    function get() internal view returns (ReportBoundsStruct memory) {\\n        bytes32 slot = REPORT_BOUNDS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Report Bounds in storage\\n    /// @param _newReportBounds The new Report Bounds value\\n    function set(ReportBoundsStruct memory _newReportBounds) internal {\\n        bytes32 slot = REPORT_BOUNDS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newReportBounds;\\n    }\\n}\\n\",\"keccak256\":\"0xbae9eb981ca4714656f2cee8137329d94196fca58d0c18a097da583662023ca9\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/ReportsPositions.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Reports Positions Storage\\n/// @notice Utility to manage the Reports Positions in storage\\n/// @dev Each bit in the stored uint256 value tells if the member at a given index has reported\\nlibrary ReportsPositions {\\n    /// @notice Storage slot of the Reports Positions\\n    bytes32 internal constant REPORTS_POSITIONS_SLOT = bytes32(uint256(keccak256(\\\"river.state.reportsPositions\\\")) - 1);\\n\\n    /// @notice Retrieve the Reports Positions at index\\n    /// @param _idx The index to retrieve\\n    /// @return True if already reported\\n    function get(uint256 _idx) internal view returns (bool) {\\n        uint256 mask = 1 << _idx;\\n        return LibUnstructuredStorage.getStorageUint256(REPORTS_POSITIONS_SLOT) & mask == mask;\\n    }\\n\\n    /// @notice Retrieve the raw Reports Positions from storage\\n    /// @return Raw Reports Positions\\n    function getRaw() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(REPORTS_POSITIONS_SLOT);\\n    }\\n\\n    /// @notice Register an index as reported\\n    /// @param _idx The index to register\\n    function register(uint256 _idx) internal {\\n        uint256 mask = 1 << _idx;\\n        return LibUnstructuredStorage.setStorageUint256(\\n            REPORTS_POSITIONS_SLOT, LibUnstructuredStorage.getStorageUint256(REPORTS_POSITIONS_SLOT) | mask\\n        );\\n    }\\n\\n    /// @notice Clears all the report positions in storage\\n    function clear() internal {\\n        return LibUnstructuredStorage.setStorageUint256(REPORTS_POSITIONS_SLOT, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x690b7a1cd9f56d779214291e2af6472352c992f2fd7bf7d52f101d4ce4efb2ec\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/ReportsVariants.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Reports Variants Storage\\n/// @notice Utility to manage the Reports Variants in storage\\nlibrary ReportsVariants {\\n    /// @notice Storage slot of the Reports Variants\\n    bytes32 internal constant REPORTS_VARIANTS_SLOT = bytes32(uint256(keccak256(\\\"river.state.reportsVariants\\\")) - 1);\\n\\n    /// @notice Mask used to extra the report values from the variant\\n    /// @notice This is the packing done inside the variant in storage\\n    /// @notice\\n    /// @notice [ 0,  16) : <voteCount>           oracle member's total vote count for the numbers below (uint16, 2 bytes)\\n    /// @notice [16,  48) : <beaconValidators>    total number of beacon validators (uint32, 4 bytes)\\n    /// @notice [48, 112) : <beaconBalance>       total balance of all the beacon validators (uint64, 6 bytes)\\n    /// @notice\\n    /// @notice So applying this mask, we can extra the voteCount out to perform comparisons on the report values\\n    /// @notice\\n    /// @notice xx...xx <beaconBalance> <beaconValidators> xxxx & COUNT_OUTMASK  ==\\n    /// @notice 00...00 <beaconBalance> <beaconValidators> 0000\\n    uint256 internal constant COUNT_OUTMASK = 0xFFFFFFFFFFFFFFFFFFFFFFFF0000;\\n\\n    /// @notice Structure in storage\\n    struct Slot {\\n        /// @custom:attribute The list of variants\\n        uint256[] value;\\n    }\\n\\n    /// @notice Retrieve the Reports Variants from storage\\n    /// @return The Reports Variants\\n    function get() internal view returns (uint256[] memory) {\\n        bytes32 slot = REPORTS_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Reports Variants value at index\\n    /// @param _idx The index to set\\n    /// @param _val The value to set\\n    function set(uint256 _idx, uint256 _val) internal {\\n        bytes32 slot = REPORTS_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_idx] = _val;\\n    }\\n\\n    /// @notice Add a new variant in the list\\n    /// @param _variant The new variant to add\\n    function push(uint256 _variant) internal {\\n        bytes32 slot = REPORTS_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_variant);\\n    }\\n\\n    /// @notice Retrieve the index of a specific variant, ignoring the count field\\n    /// @param _variant Variant value to lookup\\n    /// @return The index of the variant, -1 if not found\\n    function indexOfReport(uint256 _variant) internal view returns (int256) {\\n        bytes32 slot = REPORTS_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        for (uint256 idx = 0; idx < r.value.length;) {\\n            if (r.value[idx] & COUNT_OUTMASK == _variant) {\\n                return int256(idx);\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return int256(-1);\\n    }\\n\\n    /// @notice Clear all variants from storage\\n    function clear() internal {\\n        bytes32 slot = REPORTS_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        delete r.value;\\n    }\\n}\\n\",\"keccak256\":\"0x3b530eec9ad68d68f37ff26607694a96b4b72d1abf9688a2bb501c933bc4057a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrator Address Storage\\n/// @notice Utility to manage the Administrator Address in storage\\nlibrary AdministratorAddress {\\n    /// @notice Storage slot of the Administrator Address\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Administrator Address\\n    /// @return The Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Administrator Address\\n    /// @param _newValue New Administrator Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x4f702b4454858199ca8fd15ef1cee63d9dc3d4d8f2ff7a2f859a4e151e46e8ec\",\"license\":\"MIT\"},\"contracts/src/state/shared/PendingAdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Pending Administrator Address Storage\\n/// @notice Utility to manage the Pending Administrator Address in storage\\nlibrary PendingAdministratorAddress {\\n    /// @notice Storage slot of the Pending Administrator Address\\n    bytes32 public constant PENDING_ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.pendingAdministratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Pending Administrator Address\\n    /// @return The Pending Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Pending Administrator Address\\n    /// @param _newValue New Pending Administrator Address\\n    function set(address _newValue) internal {\\n        LibUnstructuredStorage.setStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x2164cafa435d1e1650037164e2b094ca3af00cc68e05b59140406aa59b1949f2\",\"license\":\"MIT\"},\"contracts/src/state/shared/RiverAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title River Address Storage\\n/// @notice Utility to manage the River Address in storage\\nlibrary RiverAddress {\\n    /// @notice Storage slot of the River Address\\n    bytes32 internal constant RIVER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.riverAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the River Address\\n    /// @return The River Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(RIVER_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the River Address\\n    /// @param _newValue New River Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(RIVER_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xffc846d2e04891e3b0625a9e710fa2a18b4e1af43609f0d76d6c3b7bf5c51384\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Version Storage\\n/// @notice Utility to manage the Version in storage\\nlibrary Version {\\n    /// @notice Storage slot of the Version\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    /// @notice Retrieve the Version\\n    /// @return The Version\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    /// @notice Sets the Version\\n    /// @param _newValue New Version\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(VERSION_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x82f1cc4bbb1f16c1cdbac93596334805eb1a2e0e40ccbd0ab0f78e22d3f83864\",\"license\":\"BUSL-1.1\"},\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506124c6806100206000396000f3fe608060405234801561001057600080fd5b50600436106101845760003560e01c806389896aef116100d9578063a519f06011610087578063a519f06014610381578063bc8b8f9714610389578063c1ba4e591461039c578063c26c12eb146103af578063d0468156146103b7578063dabb5757146103bf578063fad2e86a146103d457600080fd5b806389896aef14610302578063906117671461030a57806398041ea31461031d5780639d49cca1146103305780639e55746414610353578063a230c52414610366578063a29a839f1461037957600080fd5b80634b47b74f116101365780634b47b74f146102735780635190dce01461027b578063557ed1ba1461029e57806357fa8547146102a4578063628105d1146102b75780636e9960c3146102ca57806372f79b13146102df57600080fd5b80630e18b681146101895780631045a96614610193578063147bf6c4146101d957806314c8cd6a146101ec57806316f6f03e146102025780632dc5c97c1461021557806347c1a7e414610260575b600080fd5b6101916103dc565b005b6101a66101a136600461201c565b61043c565b604080516001600160401b03909416845263ffffffff909216602084015261ffff16908201526060015b60405180910390f35b6101916101e7366004612051565b610485565b6101f46104cc565b6040519081526020016101d0565b61019161021036600461206c565b6104db565b61021d6105ae565b6040516101d0919081516001600160401b039081168252602080840151821690830152604080840151821690830152606092830151169181019190915260800190565b61019161026e3660046120ad565b6105da565b6101f46106a5565b61028e610289366004612051565b6106af565b60405190151581526020016101d0565b426101f4565b6101f46102b236600461201c565b6106da565b6101916102c5366004612101565b6106f1565b6102d26107de565b6040516101d09190612134565b6102e76107e8565b604080519384526020840192909252908201526060016101d0565b6101f4610887565b610191610318366004612148565b610891565b61019161032b36600461206c565b610aeb565b610338610baf565b604080518251815260209283015192810192909252016101d0565b610191610361366004612191565b610bcb565b61028e610374366004612051565b610c60565b6101f4610c74565b6102d2610c90565b6101916103973660046121b3565b610c9a565b6101916103aa36600461201c565b610e96565b6101f4610f0c565b6102d2610f16565b6103c7610f20565b6040516101d0919061223c565b6101f4610f2a565b6103e4610f3a565b6001600160a01b0316336001600160a01b031614610420573360405163472511eb60e11b81526004016104179190612134565b60405180910390fd5b61043061042b610f3a565b610f44565b61043a6000610f8d565b565b60008060008061044a610fcd565b858151811061045b5761045b612289565b6020026020010151905061047881603081901c9160109190911c90565b9096909550909350915050565b61048d611042565b6001600160a01b0316336001600160a01b0316146104c0573360405163472511eb60e11b81526004016104179190612134565b6104c981610f8d565b50565b60006104d661104c565b905090565b6104e3611042565b6001600160a01b0316336001600160a01b031614610516573360405163472511eb60e11b81526004016104179190612134565b60006105218361106e565b905060008112156105455760405163574b16a760e11b815260040160405180910390fd5b61054e816110ef565b6105566111d2565b61055e6111f4565b600061056861121d565b9050610574838261124d565b6040516001600160a01b038516907f7693a3e9eac51f172f145e6f54bc5554168997a1f4efb40f3fad091aa7cfb0e790600090a250505050565b6040805160808101825260008082526020820181905291810182905260608101919091526104d661132f565b6105e2611042565b6001600160a01b0316336001600160a01b031614610615573360405163472511eb60e11b81526004016104179190612134565b6106626040518060800160405280866001600160401b03168152602001856001600160401b03168152602001846001600160401b03168152602001836001600160401b03168152506113c8565b7f4a7503ca21ae5342feb83892e899e95fb309502a0016ed300e4965e2dbfe733584848484604051610697949392919061229f565b60405180910390a150505050565b60006104d6611461565b6000806106bb8361106e565b905080600019141580156106d357506106d381611491565b9392505050565b6000806106e561132f565b90506106d383826114c2565b6106f9611042565b6001600160a01b0316336001600160a01b03161461072c573360405163472511eb60e11b81526004016104179190612134565b610735816114e4565b60006107408261106e565b1261076057806040516307bbad8160e51b81526004016104179190612134565b600061076b8361106e565b9050600081121561078f5760405163574b16a760e11b815260040160405180910390fd5b610799818361150b565b816001600160a01b0316836001600160a01b03167fc20826a9a3cb354d2c12357704db9eb03d7344375b092d70146dbbbc4d3f84d160405160405180910390a3505050565b60006104d6611042565b6000806000806107f661132f565b905061080a61080482611575565b826114c2565b935060008160200151826040015161082291906122e0565b6001600160401b03169050610837818661230f565b82606001516001600160401b031661084f919061232e565b825190945060019061086a906001600160401b03168361230f565b610874908661232e565b61087e9190612346565b92505050909192565b60006104d66115c3565b600061089c3361106e565b90508060001914156108c3573360405163472511eb60e11b81526004016104179190612134565b60006108cd61132f565b905060006108d9611461565b905080861015610906576040516304f6456960e11b81526004810187905260248101829052604401610417565b8086111561095957600061092261091c84611575565b846114c2565b905080871461094e5760405163983b675160e01b81526004810188905260248101829052604401610417565b610957876115f3565b505b61096283611491565b1561098957604051637a6a90d160e11b815260048101879052336024820152604401610417565b61099283611642565b60006109ab6001600160401b038716633b9aca0061235d565b604080518981526001600160801b038316602082015263ffffffff88168183015233606082015290519192507fb2b4027d60bee3bc1b4f7912bd94b5b9868db0e25ecbbfe0b1e4d55eb71b5462919081900360800190a1601085901b65ffffffff000016603087901b6dffffffffffffffff00000000000016176000610a3082611686565b90506000610a3c61121d565b905060008212610ab2576000610a50610fcd565b8381518110610a6157610a61612289565b6020026020010151905081610a738290565b610a7e906001612383565b61ffff1610610a9857610a938b868b8a6116f8565b610aac565b610aac83610aa783600161232e565b611979565b50610adf565b8060011415610acc57610ac78a858a896116f8565b610adf565b610adf610ada84600161232e565b6119c1565b50505050505050505050565b610af3611042565b6001600160a01b0316336001600160a01b031614610b26573360405163472511eb60e11b81526004016104179190612134565b6000610b318361106e565b905060008112610b5657826040516307bbad8160e51b81526004016104179190612134565b610b5f836119f6565b6000610b6961121d565b9050610b75838261124d565b6040516001600160a01b038516907f1a2323d99020f3db8e6ea85b1eea81e5bf422695877228e3d8a0241d7e957a6c90600090a250505050565b60408051808201909152600080825260208201526104d6611a4f565b610bd3611042565b6001600160a01b0316336001600160a01b031614610c06573360405163472511eb60e11b81526004016104179190612134565b610c23604051806040016040528084815260200183815250611aaf565b60408051838152602081018390527f5ab79ffcd89b6380c7fbdd89d02cfe3d9c53c99a85e150c2319075018d1aac5c910160405180910390a15050565b600080610c6c8361106e565b121592915050565b600080610c7f61132f565b9050610c8a81611575565b91505090565b60006104d6611af2565b6000610ca4611b22565b8114610cd55780610cb3611b22565b604051631cfd276760e31b815260048101929092526024820152604401610417565b610ce8610ce382600161232e565b611b52565b610cf188610f44565b610cfa89611b85565b7ffc0d749143b04e0d92a3b49edae84a45f6bc88b75e99d9118ec4d7e87fe626c589604051610d299190612134565b60405180910390a1610d7e6040518060800160405280896001600160401b03168152602001886001600160401b03168152602001876001600160401b03168152602001866001600160401b03168152506113c8565b7f4a7503ca21ae5342feb83892e899e95fb309502a0016ed300e4965e2dbfe733587878787604051610db3949392919061229f565b60405180910390a1610dd8604051806040016040528085815260200184815250611aaf565b60408051848152602081018490527f5ab79ffcd89b6380c7fbdd89d02cfe3d9c53c99a85e150c2319075018d1aac5c910160405180910390a1610e1b6001611bbc565b604051600181527f8e72be630a666d46b219565c1647e3792924d9c74e901fa3c4a33e23b91fb9b19060200160405180910390a17f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610e83939291906123a9565b60405180910390a1505050505050505050565b610e9e611042565b6001600160a01b0316336001600160a01b031614610ed1573360405163472511eb60e11b81526004016104179190612134565b6000610edb61121d565b905081811415610efe5760405163a9cb9e0d60e01b815260040160405180910390fd5b610f08828261124d565b5050565b60006104d661121d565b60006104d6610f3a565b60606104d6611bea565b6000610f34610fcd565b51905090565b60006104d6611c68565b610f4d816114e4565b610f5681611c98565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b610f9681611ca1565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b60606000610fea6001600080516020612471833981519152612346565b805460408051602080840282018101909252828152929350839291839183018282801561103657602002820191906000526020600020905b815481526020019060010190808311611022575b50505050509250505090565b60006104d6611caa565b60006104d661106a6001600080516020612451833981519152612346565b5490565b60008061108a6001600080516020612431833981519152612346565b90508060005b81548110156110e357846001600160a01b03168260000182815481106110b8576110b8612289565b6000918252602090912001546001600160a01b031614156110db57949350505050565b600101611090565b50600019949350505050565b600061110a6001600080516020612431833981519152612346565b8054909150819060009061112090600190612346565b90508381146111995781600001818154811061113e5761113e612289565b60009182526020909120015482546001600160a01b039091169083908690811061116a5761116a612289565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b81548290806111aa576111aa6123df565b600082815260209020810160001990810180546001600160a01b031916905501905550505050565b61043a6111ee6001600080516020612451833981519152612346565b60009055565b600061120f6001600080516020612471833981519152612346565b905080610f08816000611fea565b60006104d661106a60017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb612346565b6000611257611bea565b519050821580156112685750600081115b8061127257508083115b156112905760405163a9cb9e0d60e01b815260040160405180910390fd5b828211156112ee576000806112a485611cda565b9150915081156112eb57603081901c601082901c6112e86112c3611461565b6112da6001600160401b038516633b9aca0061235d565b836112e361132f565b6116f8565b50505b50505b6112f783611bbc565b6040518381527f8e72be630a666d46b219565c1647e3792924d9c74e901fa3c4a33e23b91fb9b19060200160405180910390a1505050565b60408051608081018252600080825260208201819052918101829052606081018290529061137e60017fd84ee2c84c954c65bef1459fe03b761a42f49234527e3cd8fd9dce87cb83742b612346565b6040805160808101825291546001600160401b038082168452600160401b820481166020850152600160801b8204811692840192909252600160c01b900416606082015292915050565b60006113f560017fd84ee2c84c954c65bef1459fe03b761a42f49234527e3cd8fd9dce87cb83742b612346565b82518154602085015160408601516060909601516001600160401b03908116600160c01b026001600160c01b03978216600160801b02979097166001600160801b03928216600160401b026001600160801b031990941691909416179190911716179290921790915550565b60006104d661106a60017f45d0d54fdd66220435526b0d20a3e002dad71447d5a32fb8efce72e62d4e0228612346565b6000600180831b90819081906114b99061106a90600080516020612451833981519152612346565b16149392505050565b80516000906001600160401b03166114da81856123f5565b6106d3919061230f565b6001600160a01b0381166104c95760405163f6b2911f60e01b815260040160405180910390fd5b60006115266001600080516020612431833981519152612346565b80549091508190839082908690811061154157611541612289565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b60008160400151826020015161158b91906122e0565b6001600160401b031682606001516001600160401b03166115a94290565b6115b39190612346565b6115bd91906123f5565b92915050565b60006104d661106a60017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed612346565b6115fb6111d2565b6116036111f4565b61160c81611df3565b6040518181527fcdcd275f4d96ed683d684f3610a92beacdebcf1ee4d37e2df526fb9001e1ea639060200160405180910390a150565b600180821b90610f089061166490600080516020612451833981519152612346565b8261168161106a6001600080516020612451833981519152612346565b179055565b6000806116a26001600080516020612471833981519152612346565b90508060005b81548110156110e357846dffffffffffffffffffffffff00008360000183815481106116d6576116d6612289565b90600052602060002001541614156116f057949350505050565b6001016116a8565b805161171690611711906001600160401b03168661232e565b6115f3565b6000611720611af2565b90506000816001600160a01b031663143a08d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611762573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117869190612417565b9050600083604001516001600160401b031684602001516001600160401b03166117ae6115c3565b6117b8908a612346565b6117c2919061230f565b6117cc919061230f565b905060006117da8383611e21565b60405163cc48cd3160e01b815263ffffffff881660048201526001600160801b0389166024820152604481018a9052606481018290529091506001600160a01b0385169063cc48cd3190608401600060405180830381600087803b15801561184157600080fd5b505af1158015611855573d6000803e3d6000fd5b505050506000846001600160a01b031663143a08d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bd9190612417565b90506118ca818585611e66565b6118d389611f57565b7fdafd48d1eba2a416b2aca45e9ead3ad18b84e868fa6d2e1a3048bfd37ed10a32818585886001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119599190612417565b604080519485526020850193909352918301526060820152608001610e83565b60006119946001600080516020612471833981519152612346565b8054909150819083908290869081106119af576119af612289565b60009182526020909120015550505050565b60006119dc6001600080516020612471833981519152612346565b805460018101825560009182526020909120019190915550565b6119ff816114e4565b6000611a1a6001600080516020612431833981519152612346565b8054600181018255600091825260209091200180546001600160a01b0319166001600160a01b03939093169290921790915550565b60408051808201909152600080825260208201526000611a9060017ff81b149de6749a3f46464b2cce61e24462f67599ea4a5ce028aaf4ab1521f96e612346565b6040805180820190915281548152600190910154602082015292915050565b6000611adc60017ff81b149de6749a3f46464b2cce61e24462f67599ea4a5ce028aaf4ab1521f96e612346565b8251815560209092015160019092019190915550565b60006104d661106a60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c612346565b60006104d661106a60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd612346565b6104c9611b8060017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd612346565b829055565b611b8e816114e4565b6104c9611b8060017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c612346565b6104c9611b8060017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb612346565b60606000611c076001600080516020612431833981519152612346565b805460408051602080840282018101909252828152929350839291839183018282801561103657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611c3f5750505050509250505090565b60006104d661106a60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281612346565b6104c981611f85565b6104c981611fbc565b60006104d661106a60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113612346565b6000806000611ce7610fcd565b9050805160011415611d405783611d1582600081518110611d0a57611d0a612289565b602002602001015190565b61ffff16101581600081518110611d2e57611d2e612289565b60200260200101519250925050915091565b8051611d525750600093849350915050565b60008060008060005b8551811015611db857611d79868281518110611d0a57611d0a612289565b91508261ffff168261ffff1610611db0578261ffff168261ffff161415611da557836001019350611db0565b809450819250600093505b600101611d5b565b50878261ffff1610158015611dcb575082155b858581518110611ddd57611ddd612289565b6020026020010151965096505050505050915091565b6104c9611b8060017f45d0d54fdd66220435526b0d20a3e002dad71447d5a32fb8efce72e62d4e0228612346565b600080611e2c611a4f565b519050611e3f6301e1338061271061230f565b83611e4a838761230f565b611e54919061230f565b611e5e91906123f5565b949350505050565b818310611ef0576000611e77611a4f565b51905081611e85848361230f565b611e8f919061230f565b611e998486612346565b611ea96301e1338061271061230f565b611eb3919061230f565b1115611eea5760405163eb7a968960e01b815260048101849052602481018590526044810183905260648101829052608401610417565b50505050565b6000611efa611a4f565b602001519050611f0a838261230f565b611f148585612346565b611f209061271061230f565b1115611eea5760405163063bb83f60e11b815260048101849052602481018590526044810183905260648101829052608401610417565b6104c9611b8060017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed612346565b611f8e816114e4565b6104c9611b8060017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113612346565b6104c9611b8060017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281612346565b50805460008255906000526020600020908101906104c991905b808211156120185760008155600101612004565b5090565b60006020828403121561202e57600080fd5b5035919050565b80356001600160a01b038116811461204c57600080fd5b919050565b60006020828403121561206357600080fd5b6106d382612035565b6000806040838503121561207f57600080fd5b61208883612035565b946020939093013593505050565b80356001600160401b038116811461204c57600080fd5b600080600080608085870312156120c357600080fd5b6120cc85612096565b93506120da60208601612096565b92506120e860408601612096565b91506120f660608601612096565b905092959194509250565b6000806040838503121561211457600080fd5b61211d83612035565b915061212b60208401612035565b90509250929050565b6001600160a01b0391909116815260200190565b60008060006060848603121561215d57600080fd5b8335925061216d60208501612096565b9150604084013563ffffffff8116811461218657600080fd5b809150509250925092565b600080604083850312156121a457600080fd5b50508035926020909101359150565b600080600080600080600080610100898b0312156121d057600080fd5b6121d989612035565b97506121e760208a01612035565b96506121f560408a01612096565b955061220360608a01612096565b945061221160808a01612096565b935061221f60a08a01612096565b925060c0890135915060e089013590509295985092959890939650565b6020808252825182820181905260009190848201906040850190845b8181101561227d5783516001600160a01b031683529284019291840191600101612258565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b6001600160401b03948516815292841660208401529083166040830152909116606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0380831681851681830481118215151615612306576123066122ca565b02949350505050565b6000816000190483118215151615612329576123296122ca565b500290565b60008219821115612341576123416122ca565b500190565b600082821015612358576123586122ca565b500390565b60006001600160801b0382811684821681151582840482111615612306576123066122ca565b600061ffff8083168185168083038211156123a0576123a06122ca565b01949350505050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b634e487b7160e01b600052603160045260246000fd5b60008261241257634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561242957600080fd5b505191905056fec4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7f1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcda26469706673582212209b8d450cb135967bbc6aeaa30ecff63db9b00fff0274ec1506a0261e076c365664736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101845760003560e01c806389896aef116100d9578063a519f06011610087578063a519f06014610381578063bc8b8f9714610389578063c1ba4e591461039c578063c26c12eb146103af578063d0468156146103b7578063dabb5757146103bf578063fad2e86a146103d457600080fd5b806389896aef14610302578063906117671461030a57806398041ea31461031d5780639d49cca1146103305780639e55746414610353578063a230c52414610366578063a29a839f1461037957600080fd5b80634b47b74f116101365780634b47b74f146102735780635190dce01461027b578063557ed1ba1461029e57806357fa8547146102a4578063628105d1146102b75780636e9960c3146102ca57806372f79b13146102df57600080fd5b80630e18b681146101895780631045a96614610193578063147bf6c4146101d957806314c8cd6a146101ec57806316f6f03e146102025780632dc5c97c1461021557806347c1a7e414610260575b600080fd5b6101916103dc565b005b6101a66101a136600461201c565b61043c565b604080516001600160401b03909416845263ffffffff909216602084015261ffff16908201526060015b60405180910390f35b6101916101e7366004612051565b610485565b6101f46104cc565b6040519081526020016101d0565b61019161021036600461206c565b6104db565b61021d6105ae565b6040516101d0919081516001600160401b039081168252602080840151821690830152604080840151821690830152606092830151169181019190915260800190565b61019161026e3660046120ad565b6105da565b6101f46106a5565b61028e610289366004612051565b6106af565b60405190151581526020016101d0565b426101f4565b6101f46102b236600461201c565b6106da565b6101916102c5366004612101565b6106f1565b6102d26107de565b6040516101d09190612134565b6102e76107e8565b604080519384526020840192909252908201526060016101d0565b6101f4610887565b610191610318366004612148565b610891565b61019161032b36600461206c565b610aeb565b610338610baf565b604080518251815260209283015192810192909252016101d0565b610191610361366004612191565b610bcb565b61028e610374366004612051565b610c60565b6101f4610c74565b6102d2610c90565b6101916103973660046121b3565b610c9a565b6101916103aa36600461201c565b610e96565b6101f4610f0c565b6102d2610f16565b6103c7610f20565b6040516101d0919061223c565b6101f4610f2a565b6103e4610f3a565b6001600160a01b0316336001600160a01b031614610420573360405163472511eb60e11b81526004016104179190612134565b60405180910390fd5b61043061042b610f3a565b610f44565b61043a6000610f8d565b565b60008060008061044a610fcd565b858151811061045b5761045b612289565b6020026020010151905061047881603081901c9160109190911c90565b9096909550909350915050565b61048d611042565b6001600160a01b0316336001600160a01b0316146104c0573360405163472511eb60e11b81526004016104179190612134565b6104c981610f8d565b50565b60006104d661104c565b905090565b6104e3611042565b6001600160a01b0316336001600160a01b031614610516573360405163472511eb60e11b81526004016104179190612134565b60006105218361106e565b905060008112156105455760405163574b16a760e11b815260040160405180910390fd5b61054e816110ef565b6105566111d2565b61055e6111f4565b600061056861121d565b9050610574838261124d565b6040516001600160a01b038516907f7693a3e9eac51f172f145e6f54bc5554168997a1f4efb40f3fad091aa7cfb0e790600090a250505050565b6040805160808101825260008082526020820181905291810182905260608101919091526104d661132f565b6105e2611042565b6001600160a01b0316336001600160a01b031614610615573360405163472511eb60e11b81526004016104179190612134565b6106626040518060800160405280866001600160401b03168152602001856001600160401b03168152602001846001600160401b03168152602001836001600160401b03168152506113c8565b7f4a7503ca21ae5342feb83892e899e95fb309502a0016ed300e4965e2dbfe733584848484604051610697949392919061229f565b60405180910390a150505050565b60006104d6611461565b6000806106bb8361106e565b905080600019141580156106d357506106d381611491565b9392505050565b6000806106e561132f565b90506106d383826114c2565b6106f9611042565b6001600160a01b0316336001600160a01b03161461072c573360405163472511eb60e11b81526004016104179190612134565b610735816114e4565b60006107408261106e565b1261076057806040516307bbad8160e51b81526004016104179190612134565b600061076b8361106e565b9050600081121561078f5760405163574b16a760e11b815260040160405180910390fd5b610799818361150b565b816001600160a01b0316836001600160a01b03167fc20826a9a3cb354d2c12357704db9eb03d7344375b092d70146dbbbc4d3f84d160405160405180910390a3505050565b60006104d6611042565b6000806000806107f661132f565b905061080a61080482611575565b826114c2565b935060008160200151826040015161082291906122e0565b6001600160401b03169050610837818661230f565b82606001516001600160401b031661084f919061232e565b825190945060019061086a906001600160401b03168361230f565b610874908661232e565b61087e9190612346565b92505050909192565b60006104d66115c3565b600061089c3361106e565b90508060001914156108c3573360405163472511eb60e11b81526004016104179190612134565b60006108cd61132f565b905060006108d9611461565b905080861015610906576040516304f6456960e11b81526004810187905260248101829052604401610417565b8086111561095957600061092261091c84611575565b846114c2565b905080871461094e5760405163983b675160e01b81526004810188905260248101829052604401610417565b610957876115f3565b505b61096283611491565b1561098957604051637a6a90d160e11b815260048101879052336024820152604401610417565b61099283611642565b60006109ab6001600160401b038716633b9aca0061235d565b604080518981526001600160801b038316602082015263ffffffff88168183015233606082015290519192507fb2b4027d60bee3bc1b4f7912bd94b5b9868db0e25ecbbfe0b1e4d55eb71b5462919081900360800190a1601085901b65ffffffff000016603087901b6dffffffffffffffff00000000000016176000610a3082611686565b90506000610a3c61121d565b905060008212610ab2576000610a50610fcd565b8381518110610a6157610a61612289565b6020026020010151905081610a738290565b610a7e906001612383565b61ffff1610610a9857610a938b868b8a6116f8565b610aac565b610aac83610aa783600161232e565b611979565b50610adf565b8060011415610acc57610ac78a858a896116f8565b610adf565b610adf610ada84600161232e565b6119c1565b50505050505050505050565b610af3611042565b6001600160a01b0316336001600160a01b031614610b26573360405163472511eb60e11b81526004016104179190612134565b6000610b318361106e565b905060008112610b5657826040516307bbad8160e51b81526004016104179190612134565b610b5f836119f6565b6000610b6961121d565b9050610b75838261124d565b6040516001600160a01b038516907f1a2323d99020f3db8e6ea85b1eea81e5bf422695877228e3d8a0241d7e957a6c90600090a250505050565b60408051808201909152600080825260208201526104d6611a4f565b610bd3611042565b6001600160a01b0316336001600160a01b031614610c06573360405163472511eb60e11b81526004016104179190612134565b610c23604051806040016040528084815260200183815250611aaf565b60408051838152602081018390527f5ab79ffcd89b6380c7fbdd89d02cfe3d9c53c99a85e150c2319075018d1aac5c910160405180910390a15050565b600080610c6c8361106e565b121592915050565b600080610c7f61132f565b9050610c8a81611575565b91505090565b60006104d6611af2565b6000610ca4611b22565b8114610cd55780610cb3611b22565b604051631cfd276760e31b815260048101929092526024820152604401610417565b610ce8610ce382600161232e565b611b52565b610cf188610f44565b610cfa89611b85565b7ffc0d749143b04e0d92a3b49edae84a45f6bc88b75e99d9118ec4d7e87fe626c589604051610d299190612134565b60405180910390a1610d7e6040518060800160405280896001600160401b03168152602001886001600160401b03168152602001876001600160401b03168152602001866001600160401b03168152506113c8565b7f4a7503ca21ae5342feb83892e899e95fb309502a0016ed300e4965e2dbfe733587878787604051610db3949392919061229f565b60405180910390a1610dd8604051806040016040528085815260200184815250611aaf565b60408051848152602081018490527f5ab79ffcd89b6380c7fbdd89d02cfe3d9c53c99a85e150c2319075018d1aac5c910160405180910390a1610e1b6001611bbc565b604051600181527f8e72be630a666d46b219565c1647e3792924d9c74e901fa3c4a33e23b91fb9b19060200160405180910390a17f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610e83939291906123a9565b60405180910390a1505050505050505050565b610e9e611042565b6001600160a01b0316336001600160a01b031614610ed1573360405163472511eb60e11b81526004016104179190612134565b6000610edb61121d565b905081811415610efe5760405163a9cb9e0d60e01b815260040160405180910390fd5b610f08828261124d565b5050565b60006104d661121d565b60006104d6610f3a565b60606104d6611bea565b6000610f34610fcd565b51905090565b60006104d6611c68565b610f4d816114e4565b610f5681611c98565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b610f9681611ca1565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b60606000610fea6001600080516020612471833981519152612346565b805460408051602080840282018101909252828152929350839291839183018282801561103657602002820191906000526020600020905b815481526020019060010190808311611022575b50505050509250505090565b60006104d6611caa565b60006104d661106a6001600080516020612451833981519152612346565b5490565b60008061108a6001600080516020612431833981519152612346565b90508060005b81548110156110e357846001600160a01b03168260000182815481106110b8576110b8612289565b6000918252602090912001546001600160a01b031614156110db57949350505050565b600101611090565b50600019949350505050565b600061110a6001600080516020612431833981519152612346565b8054909150819060009061112090600190612346565b90508381146111995781600001818154811061113e5761113e612289565b60009182526020909120015482546001600160a01b039091169083908690811061116a5761116a612289565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b81548290806111aa576111aa6123df565b600082815260209020810160001990810180546001600160a01b031916905501905550505050565b61043a6111ee6001600080516020612451833981519152612346565b60009055565b600061120f6001600080516020612471833981519152612346565b905080610f08816000611fea565b60006104d661106a60017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb612346565b6000611257611bea565b519050821580156112685750600081115b8061127257508083115b156112905760405163a9cb9e0d60e01b815260040160405180910390fd5b828211156112ee576000806112a485611cda565b9150915081156112eb57603081901c601082901c6112e86112c3611461565b6112da6001600160401b038516633b9aca0061235d565b836112e361132f565b6116f8565b50505b50505b6112f783611bbc565b6040518381527f8e72be630a666d46b219565c1647e3792924d9c74e901fa3c4a33e23b91fb9b19060200160405180910390a1505050565b60408051608081018252600080825260208201819052918101829052606081018290529061137e60017fd84ee2c84c954c65bef1459fe03b761a42f49234527e3cd8fd9dce87cb83742b612346565b6040805160808101825291546001600160401b038082168452600160401b820481166020850152600160801b8204811692840192909252600160c01b900416606082015292915050565b60006113f560017fd84ee2c84c954c65bef1459fe03b761a42f49234527e3cd8fd9dce87cb83742b612346565b82518154602085015160408601516060909601516001600160401b03908116600160c01b026001600160c01b03978216600160801b02979097166001600160801b03928216600160401b026001600160801b031990941691909416179190911716179290921790915550565b60006104d661106a60017f45d0d54fdd66220435526b0d20a3e002dad71447d5a32fb8efce72e62d4e0228612346565b6000600180831b90819081906114b99061106a90600080516020612451833981519152612346565b16149392505050565b80516000906001600160401b03166114da81856123f5565b6106d3919061230f565b6001600160a01b0381166104c95760405163f6b2911f60e01b815260040160405180910390fd5b60006115266001600080516020612431833981519152612346565b80549091508190839082908690811061154157611541612289565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b60008160400151826020015161158b91906122e0565b6001600160401b031682606001516001600160401b03166115a94290565b6115b39190612346565b6115bd91906123f5565b92915050565b60006104d661106a60017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed612346565b6115fb6111d2565b6116036111f4565b61160c81611df3565b6040518181527fcdcd275f4d96ed683d684f3610a92beacdebcf1ee4d37e2df526fb9001e1ea639060200160405180910390a150565b600180821b90610f089061166490600080516020612451833981519152612346565b8261168161106a6001600080516020612451833981519152612346565b179055565b6000806116a26001600080516020612471833981519152612346565b90508060005b81548110156110e357846dffffffffffffffffffffffff00008360000183815481106116d6576116d6612289565b90600052602060002001541614156116f057949350505050565b6001016116a8565b805161171690611711906001600160401b03168661232e565b6115f3565b6000611720611af2565b90506000816001600160a01b031663143a08d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611762573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117869190612417565b9050600083604001516001600160401b031684602001516001600160401b03166117ae6115c3565b6117b8908a612346565b6117c2919061230f565b6117cc919061230f565b905060006117da8383611e21565b60405163cc48cd3160e01b815263ffffffff881660048201526001600160801b0389166024820152604481018a9052606481018290529091506001600160a01b0385169063cc48cd3190608401600060405180830381600087803b15801561184157600080fd5b505af1158015611855573d6000803e3d6000fd5b505050506000846001600160a01b031663143a08d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bd9190612417565b90506118ca818585611e66565b6118d389611f57565b7fdafd48d1eba2a416b2aca45e9ead3ad18b84e868fa6d2e1a3048bfd37ed10a32818585886001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119599190612417565b604080519485526020850193909352918301526060820152608001610e83565b60006119946001600080516020612471833981519152612346565b8054909150819083908290869081106119af576119af612289565b60009182526020909120015550505050565b60006119dc6001600080516020612471833981519152612346565b805460018101825560009182526020909120019190915550565b6119ff816114e4565b6000611a1a6001600080516020612431833981519152612346565b8054600181018255600091825260209091200180546001600160a01b0319166001600160a01b03939093169290921790915550565b60408051808201909152600080825260208201526000611a9060017ff81b149de6749a3f46464b2cce61e24462f67599ea4a5ce028aaf4ab1521f96e612346565b6040805180820190915281548152600190910154602082015292915050565b6000611adc60017ff81b149de6749a3f46464b2cce61e24462f67599ea4a5ce028aaf4ab1521f96e612346565b8251815560209092015160019092019190915550565b60006104d661106a60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c612346565b60006104d661106a60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd612346565b6104c9611b8060017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd612346565b829055565b611b8e816114e4565b6104c9611b8060017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c612346565b6104c9611b8060017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb612346565b60606000611c076001600080516020612431833981519152612346565b805460408051602080840282018101909252828152929350839291839183018282801561103657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611c3f5750505050509250505090565b60006104d661106a60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281612346565b6104c981611f85565b6104c981611fbc565b60006104d661106a60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113612346565b6000806000611ce7610fcd565b9050805160011415611d405783611d1582600081518110611d0a57611d0a612289565b602002602001015190565b61ffff16101581600081518110611d2e57611d2e612289565b60200260200101519250925050915091565b8051611d525750600093849350915050565b60008060008060005b8551811015611db857611d79868281518110611d0a57611d0a612289565b91508261ffff168261ffff1610611db0578261ffff168261ffff161415611da557836001019350611db0565b809450819250600093505b600101611d5b565b50878261ffff1610158015611dcb575082155b858581518110611ddd57611ddd612289565b6020026020010151965096505050505050915091565b6104c9611b8060017f45d0d54fdd66220435526b0d20a3e002dad71447d5a32fb8efce72e62d4e0228612346565b600080611e2c611a4f565b519050611e3f6301e1338061271061230f565b83611e4a838761230f565b611e54919061230f565b611e5e91906123f5565b949350505050565b818310611ef0576000611e77611a4f565b51905081611e85848361230f565b611e8f919061230f565b611e998486612346565b611ea96301e1338061271061230f565b611eb3919061230f565b1115611eea5760405163eb7a968960e01b815260048101849052602481018590526044810183905260648101829052608401610417565b50505050565b6000611efa611a4f565b602001519050611f0a838261230f565b611f148585612346565b611f209061271061230f565b1115611eea5760405163063bb83f60e11b815260048101849052602481018590526044810183905260648101829052608401610417565b6104c9611b8060017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed612346565b611f8e816114e4565b6104c9611b8060017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113612346565b6104c9611b8060017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281612346565b50805460008255906000526020600020908101906104c991905b808211156120185760008155600101612004565b5090565b60006020828403121561202e57600080fd5b5035919050565b80356001600160a01b038116811461204c57600080fd5b919050565b60006020828403121561206357600080fd5b6106d382612035565b6000806040838503121561207f57600080fd5b61208883612035565b946020939093013593505050565b80356001600160401b038116811461204c57600080fd5b600080600080608085870312156120c357600080fd5b6120cc85612096565b93506120da60208601612096565b92506120e860408601612096565b91506120f660608601612096565b905092959194509250565b6000806040838503121561211457600080fd5b61211d83612035565b915061212b60208401612035565b90509250929050565b6001600160a01b0391909116815260200190565b60008060006060848603121561215d57600080fd5b8335925061216d60208501612096565b9150604084013563ffffffff8116811461218657600080fd5b809150509250925092565b600080604083850312156121a457600080fd5b50508035926020909101359150565b600080600080600080600080610100898b0312156121d057600080fd5b6121d989612035565b97506121e760208a01612035565b96506121f560408a01612096565b955061220360608a01612096565b945061221160808a01612096565b935061221f60a08a01612096565b925060c0890135915060e089013590509295985092959890939650565b6020808252825182820181905260009190848201906040850190845b8181101561227d5783516001600160a01b031683529284019291840191600101612258565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b6001600160401b03948516815292841660208401529083166040830152909116606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0380831681851681830481118215151615612306576123066122ca565b02949350505050565b6000816000190483118215151615612329576123296122ca565b500290565b60008219821115612341576123416122ca565b500190565b600082821015612358576123586122ca565b500390565b60006001600160801b0382811684821681151582840482111615612306576123066122ca565b600061ffff8083168185168083038211156123a0576123a06122ca565b01949350505050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b634e487b7160e01b600052603160045260246000fd5b60008261241257634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561242957600080fd5b505191905056fec4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7f1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcda26469706673582212209b8d450cb135967bbc6aeaa30ecff63db9b00fff0274ec1506a0261e076c365664736f6c634300080a0033",
  "devdoc": {
    "author": "Kiln",
    "errors": {
      "AddressAlreadyInUse(address)": [
        {
          "params": {
            "newAddress": "The address already in use"
          }
        }
      ],
      "AlreadyReported(uint256,address)": [
        {
          "params": {
            "epochId": "The epoch id provided as input",
            "member": "The oracle member"
          }
        }
      ],
      "EpochTooOld(uint256,uint256)": [
        {
          "params": {
            "minExpectedEpochId": "The minimum epoch id expected",
            "providedEpochId": "The epoch id provided as input"
          }
        }
      ],
      "InvalidInitialization(uint256,uint256)": [
        {
          "params": {
            "expectedVersion": "The version that was expected",
            "version": "The version that was attempting to be initialized"
          }
        }
      ],
      "NotFrameFirstEpochId(uint256,uint256)": [
        {
          "params": {
            "expectedFrameFirstEpochId": "The frame first epoch id that was expected",
            "providedEpochId": "The epoch id provided as input"
          }
        }
      ],
      "TotalValidatorBalanceDecreaseOutOfBound(uint256,uint256,uint256,uint256)": [
        {
          "params": {
            "postTotalEth": "The new total balance",
            "prevTotalEth": "The previous total balance",
            "relativeLowerBound": "The maximum relative decrease allowed",
            "timeElapsed": "The time since last report"
          }
        }
      ],
      "TotalValidatorBalanceIncreaseOutOfBound(uint256,uint256,uint256,uint256)": [
        {
          "params": {
            "annualAprUpperBound": "The maximum apr allowed",
            "postTotalEth": "The new total balance",
            "prevTotalEth": "The previous total balance",
            "timeElapsed": "The time since last report"
          }
        }
      ],
      "Unauthorized(address)": [
        {
          "params": {
            "caller": "Addres performing the call"
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "acceptAdmin()": {
        "details": "Only callable by the pending admin. Resets the pending admin if succesful."
      },
      "addMember(address,uint256)": {
        "details": "Only callable by the adminstrator",
        "params": {
          "_newOracleMember": "Address of the new member",
          "_newQuorum": "New quorum value"
        }
      },
      "getAdmin()": {
        "returns": {
          "_0": "The admin address"
        }
      },
      "getCLSpec()": {
        "returns": {
          "_0": "The Consensus Layer Specification"
        }
      },
      "getCurrentEpochId()": {
        "returns": {
          "_0": "The current epoch id"
        }
      },
      "getCurrentFrame()": {
        "returns": {
          "_endTime": "The timestamp of the end of the frame in seconds",
          "_startEpochId": "The epoch at the beginning of the frame",
          "_startTime": "The timestamp of the beginning of the frame in seconds"
        }
      },
      "getExpectedEpochId()": {
        "returns": {
          "_0": "The current expected epoch id"
        }
      },
      "getFrameFirstEpochId(uint256)": {
        "params": {
          "_epochId": "Epoch id used to get the frame"
        },
        "returns": {
          "_0": "The first epoch id of the frame containing the given epoch id"
        }
      },
      "getGlobalReportStatus()": {
        "returns": {
          "_0": "The raw report status value"
        }
      },
      "getLastCompletedEpochId()": {
        "returns": {
          "_0": "The last completed epoch id"
        }
      },
      "getMemberReportStatus(address)": {
        "params": {
          "_oracleMember": "Address of member to check"
        },
        "returns": {
          "_0": "True if member has reported"
        }
      },
      "getOracleMembers()": {
        "returns": {
          "_0": "The oracle members"
        }
      },
      "getPendingAdmin()": {
        "returns": {
          "_0": "The pending admin address"
        }
      },
      "getQuorum()": {
        "returns": {
          "_0": "The current quorum"
        }
      },
      "getReportBounds()": {
        "returns": {
          "_0": "The report bounds"
        }
      },
      "getReportVariant(uint256)": {
        "params": {
          "_idx": "Index of report"
        },
        "returns": {
          "_clBalance": "The reported consensus layer balance sum of River's validators",
          "_clValidators": "The reported validator count",
          "_reportCount": "The number of similar reports"
        }
      },
      "getReportVariantsCount()": {
        "returns": {
          "_0": "The count of report variants"
        }
      },
      "getRiver()": {
        "returns": {
          "_0": "The address of River"
        }
      },
      "getTime()": {
        "returns": {
          "_0": "The current timestamp from the EVM context"
        }
      },
      "initOracleV1(address,address,uint64,uint64,uint64,uint64,uint256,uint256)": {
        "params": {
          "_administratorAddress": "Address able to call administrative methods",
          "_annualAprUpperBound": "CL bound parameter. Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.",
          "_epochsPerFrame": "CL spec parameter. Number of epochs in a frame.",
          "_genesisTime": "CL spec parameter. Timestamp of the genesis slot.",
          "_relativeLowerBound": "CL bound parameter. Maximum relative balance decrease.",
          "_river": "Address of the River contract, able to receive oracle input data after quorum is met",
          "_secondsPerSlot": "CL spec parameter. Number of seconds between slots.",
          "_slotsPerEpoch": "CL spec parameter. Number of slots in one epoch."
        }
      },
      "isMember(address)": {
        "details": "Performs a naive search, do not call this on-chain, used as an off-chain helper",
        "params": {
          "_memberAddress": "Address of the member"
        },
        "returns": {
          "_0": "True if address is a member"
        }
      },
      "proposeAdmin(address)": {
        "details": "This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.",
        "params": {
          "_newAdmin": "New admin address"
        }
      },
      "removeMember(address,uint256)": {
        "details": "Only callable by the adminstrator",
        "params": {
          "_newQuorum": "New quorum value",
          "_oracleMember": "Address to remove"
        }
      },
      "reportConsensusLayerData(uint256,uint64,uint32)": {
        "details": "Only callable by an oracle memberThe epoch id is expected to be >= to the expected epoch id stored in the contractThe epoch id is expected to be the first epoch of its frameThe Consensus Layer Validator count is the amount of running validators managed by River.Until withdrawals are enabled, this count also takes into account any exited and slashed validatoras funds are still locked on the consensus layer.",
        "params": {
          "_clValidatorCount": "Total River validator count",
          "_clValidatorsBalance": "Total balance of River validators",
          "_epochId": "Epoch where the balance and validator count has been computed"
        }
      },
      "setCLSpec(uint64,uint64,uint64,uint64)": {
        "details": "Only callable by the adminstrator",
        "params": {
          "_epochsPerFrame": "Number of epochs in a frame.",
          "_genesisTime": "Timestamp of the genesis slot.",
          "_secondsPerSlot": "Number of seconds between slots.",
          "_slotsPerEpoch": "Number of slots in one epoch."
        }
      },
      "setMember(address,address)": {
        "details": "Only callable by the adminitratorCannot use an address already in use",
        "params": {
          "_newAddress": "New address for the member",
          "_oracleMember": "Address to change"
        }
      },
      "setQuorum(uint256)": {
        "details": "Only callable by the adminstrator",
        "params": {
          "_newQuorum": "New quorum parameter"
        }
      },
      "setReportBounds(uint256,uint256)": {
        "details": "Only callable by the adminstrator",
        "params": {
          "_annualAprUpperBound": "Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.",
          "_relativeLowerBound": "Maximum relative balance decrease."
        }
      }
    },
    "title": "Oracle (v1)",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AddressAlreadyInUse(address)": [
        {
          "notice": "The address is already in use by an oracle member"
        }
      ],
      "AlreadyReported(uint256,address)": [
        {
          "notice": "The member already reported on the given epoch id"
        }
      ],
      "EpochTooOld(uint256,uint256)": [
        {
          "notice": "The provided epoch is too old compared to the expected epoch id"
        }
      ],
      "InvalidArgument()": [
        {
          "notice": "The argument was invalid"
        }
      ],
      "InvalidCall()": [
        {
          "notice": "The call was invalid"
        }
      ],
      "InvalidInitialization(uint256,uint256)": [
        {
          "notice": "An error occured during the initialization"
        }
      ],
      "InvalidZeroAddress()": [
        {
          "notice": "The address is zero"
        }
      ],
      "NotFrameFirstEpochId(uint256,uint256)": [
        {
          "notice": "The provided epoch is not at the beginning of its frame"
        }
      ],
      "TotalValidatorBalanceDecreaseOutOfBound(uint256,uint256,uint256,uint256)": [
        {
          "notice": "The negative delta in balance is above the allowed lower bound"
        }
      ],
      "TotalValidatorBalanceIncreaseOutOfBound(uint256,uint256,uint256,uint256)": [
        {
          "notice": "The delta in balance is above the allowed upper bound"
        }
      ],
      "Unauthorized(address)": [
        {
          "notice": "The operator is unauthorized for the caller"
        }
      ]
    },
    "events": {
      "AddMember(address)": {
        "notice": "A member has been added to the oracle member list"
      },
      "CLReported(uint256,uint128,uint32,address)": {
        "notice": "Consensus Layer data has been reported by an oracle member"
      },
      "ExpectedEpochIdUpdated(uint256)": {
        "notice": "The expected epoch id has been changed"
      },
      "Initialize(uint256,bytes)": {
        "notice": "Emitted when the contract is properly initialized"
      },
      "PostTotalShares(uint256,uint256,uint256,uint256)": {
        "notice": "The report has been submitted to river"
      },
      "RemoveMember(address)": {
        "notice": "A member has been removed from the oracle member list"
      },
      "SetAdmin(address)": {
        "notice": "The admin address changed"
      },
      "SetBounds(uint256,uint256)": {
        "notice": "The report bounds have been changed"
      },
      "SetMember(address,address)": {
        "notice": "A member address has been edited"
      },
      "SetPendingAdmin(address)": {
        "notice": "The pending admin address changed"
      },
      "SetQuorum(uint256)": {
        "notice": "The storage quorum value has been changed"
      },
      "SetRiver(address)": {
        "notice": "The storage river address value has been changed"
      },
      "SetSpec(uint64,uint64,uint64,uint64)": {
        "notice": "The consensus layer spec has been changed"
      }
    },
    "kind": "user",
    "methods": {
      "acceptAdmin()": {
        "notice": "Accept the transfer of ownership"
      },
      "addMember(address,uint256)": {
        "notice": "Adds new address as oracle member, giving the ability to push cl reports."
      },
      "getAdmin()": {
        "notice": "Retrieves the current admin address"
      },
      "getCLSpec()": {
        "notice": "Retrieve the current cl spec"
      },
      "getCurrentEpochId()": {
        "notice": "Retrieve the current epoch id based on block timestamp"
      },
      "getCurrentFrame()": {
        "notice": "Retrieve the current frame details"
      },
      "getExpectedEpochId()": {
        "notice": "Retrieve expected epoch id"
      },
      "getFrameFirstEpochId(uint256)": {
        "notice": "Retrieve the first epoch id of the frame of the provided epoch id"
      },
      "getGlobalReportStatus()": {
        "notice": "Retrieve member report status"
      },
      "getLastCompletedEpochId()": {
        "notice": "Retrieve the last completed epoch id"
      },
      "getMemberReportStatus(address)": {
        "notice": "Retrieve member report status"
      },
      "getOracleMembers()": {
        "notice": "Retrieve the list of oracle members"
      },
      "getPendingAdmin()": {
        "notice": "Retrieve the current pending admin address"
      },
      "getQuorum()": {
        "notice": "Retrieve the current quorum"
      },
      "getReportBounds()": {
        "notice": "Retrieve the report bounds"
      },
      "getReportVariant(uint256)": {
        "notice": "Retrieve decoded report at provided index"
      },
      "getReportVariantsCount()": {
        "notice": "Retrieve report variants count"
      },
      "getRiver()": {
        "notice": "Retrieve River address"
      },
      "getTime()": {
        "notice": "Retrieve the block timestamp"
      },
      "initOracleV1(address,address,uint64,uint64,uint64,uint64,uint256,uint256)": {
        "notice": "Initializes the oracle"
      },
      "isMember(address)": {
        "notice": "Returns true if address is member"
      },
      "proposeAdmin(address)": {
        "notice": "Proposes a new address as admin"
      },
      "removeMember(address,uint256)": {
        "notice": "Removes an address from the oracle members."
      },
      "reportConsensusLayerData(uint256,uint64,uint32)": {
        "notice": "Report cl chain data"
      },
      "setCLSpec(uint64,uint64,uint64,uint64)": {
        "notice": "Edits the cl spec parameters"
      },
      "setMember(address,address)": {
        "notice": "Changes the address of an oracle member"
      },
      "setQuorum(uint256)": {
        "notice": "Edits the quorum required to forward cl data to River"
      },
      "setReportBounds(uint256,uint256)": {
        "notice": "Edits the cl bounds parameters"
      }
    },
    "notice": "This contract handles the input from the allowed oracle members. Highly inspired by Lido's implementation.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}