{
    "address": "0xcA0F4b8A5d692C48765574645636e469F06c6070",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_operator",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_allowance",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "AllowanceTooLow",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "BalanceTooLow",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "version",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "expectedVersion",
                    "type": "uint256"
                }
            ],
            "name": "InvalidInitialization",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidZeroAddress",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "NullTransfer",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TokenTransferError",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                }
            ],
            "name": "UnauthorizedTransfer",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "recipient",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "shares",
                    "type": "uint256"
                }
            ],
            "name": "Burn",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "version",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "bytes",
                    "name": "cdata",
                    "type": "bytes"
                }
            ],
            "name": "Initialize",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "recipient",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "shares",
                    "type": "uint256"
                }
            ],
            "name": "Mint",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "river",
                    "type": "address"
                }
            ],
            "name": "SetRiver",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_spender",
                    "type": "address"
                }
            ],
            "name": "allowance",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_recipient",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_shares",
                    "type": "uint256"
                }
            ],
            "name": "burn",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "decimals",
            "outputs": [
                {
                    "internalType": "uint8",
                    "name": "",
                    "type": "uint8"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_subtractableValue",
                    "type": "uint256"
                }
            ],
            "name": "decreaseAllowance",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_additionalValue",
                    "type": "uint256"
                }
            ],
            "name": "increaseAllowance",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_river",
                    "type": "address"
                }
            ],
            "name": "initWLSETHV1",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_recipient",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_shares",
                    "type": "uint256"
                }
            ],
            "name": "mint",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "sharesOf",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "transfer",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_logic",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "__admin",
                    "type": "address"
                },
                {
                    "internalType": "bytes",
                    "name": "_data",
                    "type": "bytes"
                }
            ],
            "stateMutability": "payable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "CallWhenPaused",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "previousAdmin",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "newAdmin",
                    "type": "address"
                }
            ],
            "name": "AdminChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "beacon",
                    "type": "address"
                }
            ],
            "name": "BeaconUpgraded",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "Paused",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "Unpaused",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "implementation",
                    "type": "address"
                }
            ],
            "name": "Upgraded",
            "type": "event"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "admin",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "admin_",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newAdmin",
                    "type": "address"
                }
            ],
            "name": "changeAdmin",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "implementation",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "implementation_",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "pause",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "paused",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "unpause",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newImplementation",
                    "type": "address"
                }
            ],
            "name": "upgradeTo",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newImplementation",
                    "type": "address"
                },
                {
                    "internalType": "bytes",
                    "name": "data",
                    "type": "bytes"
                }
            ],
            "name": "upgradeToAndCall",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0x1e7c77f3e6798f0b1a17dc6efc02d25378ac69d7827a902f8c891f91888ccfd4",
    "receipt": {
        "to": null,
        "from": "0x341C40B94bF2afBFa42573cB78f16Ee15a056238",
        "contractAddress": "0xcA0F4b8A5d692C48765574645636e469F06c6070",
        "transactionIndex": 27,
        "gasUsed": "775052",
        "logsBloom": "0x
        "blockHash": "0x1129048bf43bf4105878cf38cddaae34c590a9d736893c51f92ab23e858e3739",
        "transactionHash": "0x1e7c77f3e6798f0b1a17dc6efc02d25378ac69d7827a902f8c891f91888ccfd4",
        "logs": [
            {
                "transactionIndex": 27,
                "blockNumber": 7685740,
                "transactionHash": "0x1e7c77f3e6798f0b1a17dc6efc02d25378ac69d7827a902f8c891f91888ccfd4",
                "address": "0xcA0F4b8A5d692C48765574645636e469F06c6070",
                "topics": [
                    "0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b",
                    "0x000000000000000000000000c22de60c1f6668a73b6076acda69eddebace3aee"
                ],
                "data": "0x",
                "logIndex": 61,
                "blockHash": "0x1129048bf43bf4105878cf38cddaae34c590a9d736893c51f92ab23e858e3739"
            },
            {
                "transactionIndex": 27,
                "blockNumber": 7685740,
                "transactionHash": "0x1e7c77f3e6798f0b1a17dc6efc02d25378ac69d7827a902f8c891f91888ccfd4",
                "address": "0xcA0F4b8A5d692C48765574645636e469F06c6070",
                "topics": [
                    "0xfc0d749143b04e0d92a3b49edae84a45f6bc88b75e99d9118ec4d7e87fe626c5",
                    "0x000000000000000000000000d5a7087835f63d3c28c11ce29de094cbc20c67e1"
                ],
                "data": "0x",
                "logIndex": 62,
                "blockHash": "0x1129048bf43bf4105878cf38cddaae34c590a9d736893c51f92ab23e858e3739"
            },
            {
                "transactionIndex": 27,
                "blockNumber": 7685740,
                "transactionHash": "0x1e7c77f3e6798f0b1a17dc6efc02d25378ac69d7827a902f8c891f91888ccfd4",
                "address": "0xcA0F4b8A5d692C48765574645636e469F06c6070",
                "topics": [
                    "0x1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a71"
                ],
                "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000240fa74a10000000000000000000000000d5a7087835f63d3c28c11ce29de094cbc20c67e100000000000000000000000000000000000000000000000000000000",
                "logIndex": 63,
                "blockHash": "0x1129048bf43bf4105878cf38cddaae34c590a9d736893c51f92ab23e858e3739"
            },
            {
                "transactionIndex": 27,
                "blockNumber": 7685740,
                "transactionHash": "0x1e7c77f3e6798f0b1a17dc6efc02d25378ac69d7827a902f8c891f91888ccfd4",
                "address": "0xcA0F4b8A5d692C48765574645636e469F06c6070",
                "topics": [
                    "0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f"
                ],
                "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007706a7d768054c10eb4fc9103ea322f62831cb9",
                "logIndex": 64,
                "blockHash": "0x1129048bf43bf4105878cf38cddaae34c590a9d736893c51f92ab23e858e3739"
            }
        ],
        "blockNumber": 7685740,
        "cumulativeGasUsed": "16367093",
        "status": 1,
        "byzantium": true
    },
    "args": [
        "0xc22DE60c1F6668A73B6076aCDa69EddeBaCe3aEe",
        "0x07706A7D768054c10eB4FC9103Ea322f62831cb9",
        "0x0fa74a10000000000000000000000000d5a7087835f63d3c28c11ce29de094cbc20c67e1"
    ],
    "numDeployments": 1,
    "solcInputHash": "803b991b13fc3eb82937205601e77786",
    "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallWhenPaused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kiln\",\"events\":{\"Paused(address)\":{\"params\":{\"admin\":\"The admin at the time of the pause event\"}},\"Unpaused(address)\":{\"params\":{\"admin\":\"The admin at the time of the unpause event\"}}},\"kind\":\"dev\",\"methods\":{\"admin()\":{\"details\":\"Returns the current admin. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\"},\"changeAdmin(address)\":{\"details\":\"Changes the admin of the proxy. Emits an {AdminChanged} event. NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\"},\"constructor\":{\"details\":\"The Admin of the proxy should not be the same as theadmin on the implementation logics. The admin here isthe only account allowed to perform calls on the proxy(the calls are never delegated to the implementation)\",\"params\":{\"__admin\":\"Address of the admin in charge of the proxy\",\"_data\":\"Calldata for an atomic initialization\",\"_logic\":\"Address of the implementation\"}},\"implementation()\":{\"details\":\"Returns the current implementation. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\"},\"pause()\":{\"details\":\"Pauses system\"},\"paused()\":{\"details\":\"Retrieves Paused state\",\"returns\":{\"_0\":\"Paused state\"}},\"unpause()\":{\"details\":\"Unpauses system\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy. NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy, and then call a function from the new implementation as specified by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract. NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\"}},\"title\":\"TUPProxy (Transparent Upgradeable Pausable Proxy)\",\"version\":1},\"userdoc\":{\"errors\":{\"CallWhenPaused()\":[{\"notice\":\"A call happened while the system was paused\"}]},\"events\":{\"Paused(address)\":{\"notice\":\"The system is now paused\"},\"Unpaused(address)\":{\"notice\":\"The system is now unpaused\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract extends the Transparent Upgradeable proxy and adds a system wide pause feature.         When the system is paused, the fallback will fail no matter what calls are made.         Address Zero is allowed to perform calls even if paused to allow view calls made         from RPC providers to properly work.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/TUPProxy.sol\":\"TUPProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/TUPProxy.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\n/// @title TUPProxy (Transparent Upgradeable Pausable Proxy)\\n/// @author Kiln\\n/// @notice This contract extends the Transparent Upgradeable proxy and adds a system wide pause feature.\\n///         When the system is paused, the fallback will fail no matter what calls are made.\\n///         Address Zero is allowed to perform calls even if paused to allow view calls made\\n///         from RPC providers to properly work.\\ncontract TUPProxy is TransparentUpgradeableProxy {\\n    /// @notice Storage slot of the pause status value\\n    bytes32 private constant _PAUSE_SLOT = bytes32(uint256(keccak256(\\\"river.tupproxy.pause\\\")) - 1);\\n\\n    /// @notice A call happened while the system was paused\\n    error CallWhenPaused();\\n\\n    /// @notice The system is now paused\\n    /// @param admin The admin at the time of the pause event\\n    event Paused(address admin);\\n\\n    /// @notice The system is now unpaused\\n    /// @param admin The admin at the time of the unpause event\\n    event Unpaused(address admin);\\n\\n    /// @dev The Admin of the proxy should not be the same as the\\n    /// @dev admin on the implementation logics. The admin here is\\n    /// @dev the only account allowed to perform calls on the proxy\\n    /// @dev (the calls are never delegated to the implementation)\\n    /// @param _logic Address of the implementation\\n    /// @param __admin Address of the admin in charge of the proxy\\n    /// @param _data Calldata for an atomic initialization\\n    constructor(address _logic, address __admin, bytes memory _data)\\n        payable\\n        TransparentUpgradeableProxy(_logic, __admin, _data)\\n    {}\\n\\n    /// @dev Retrieves Paused state\\n    /// @return Paused state\\n    function paused() external ifAdmin returns (bool) {\\n        return StorageSlot.getBooleanSlot(_PAUSE_SLOT).value;\\n    }\\n\\n    /// @dev Pauses system\\n    function pause() external ifAdmin {\\n        StorageSlot.getBooleanSlot(_PAUSE_SLOT).value = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /// @dev Unpauses system\\n    function unpause() external ifAdmin {\\n        StorageSlot.getBooleanSlot(_PAUSE_SLOT).value = false;\\n        emit Unpaused(msg.sender);\\n    }\\n\\n    /// @dev Overrides the fallback method to check if system is not paused before\\n    /// @dev Address Zero is allowed to perform calls even if system is paused. This allows\\n    /// view functions to be called when the system is paused as rpc providers can easily\\n    /// set the sender address to zero.\\n    function _beforeFallback() internal override {\\n        if (!StorageSlot.getBooleanSlot(_PAUSE_SLOT).value || msg.sender == address(0)) {\\n            super._beforeFallback();\\n        } else {\\n            revert CallWhenPaused();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x35bd93df3a77dae6301c8c0011d32f89efe3715fa2bdef7f2ad364949b7da6cb\",\"license\":\"BUSL-1.1\"},\"openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "",
    "deployedBytecode": "",
    "devdoc": {
        "author": "Kiln",
        "events": {
            "Paused(address)": {
                "params": {
                    "admin": "The admin at the time of the pause event"
                }
            },
            "Unpaused(address)": {
                "params": {
                    "admin": "The admin at the time of the unpause event"
                }
            }
        },
        "kind": "dev",
        "methods": {
            "admin()": {
                "details": "Returns the current admin. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`"
            },
            "changeAdmin(address)": {
                "details": "Changes the admin of the proxy. Emits an {AdminChanged} event. NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}."
            },
            "constructor": {
                "details": "The Admin of the proxy should not be the same as theadmin on the implementation logics. The admin here isthe only account allowed to perform calls on the proxy(the calls are never delegated to the implementation)",
                "params": {
                    "__admin": "Address of the admin in charge of the proxy",
                    "_data": "Calldata for an atomic initialization",
                    "_logic": "Address of the implementation"
                }
            },
            "implementation()": {
                "details": "Returns the current implementation. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`"
            },
            "pause()": {
                "details": "Pauses system"
            },
            "paused()": {
                "details": "Retrieves Paused state",
                "returns": {
                    "_0": "Paused state"
                }
            },
            "unpause()": {
                "details": "Unpauses system"
            },
            "upgradeTo(address)": {
                "details": "Upgrade the implementation of the proxy. NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}."
            },
            "upgradeToAndCall(address,bytes)": {
                "details": "Upgrade the implementation of the proxy, and then call a function from the new implementation as specified by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract. NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}."
            }
        },
        "title": "TUPProxy (Transparent Upgradeable Pausable Proxy)",
        "version": 1
    },
    "userdoc": {
        "errors": {
            "CallWhenPaused()": [
                {
                    "notice": "A call happened while the system was paused"
                }
            ]
        },
        "events": {
            "Paused(address)": {
                "notice": "The system is now paused"
            },
            "Unpaused(address)": {
                "notice": "The system is now unpaused"
            }
        },
        "kind": "user",
        "methods": {},
        "notice": "This contract extends the Transparent Upgradeable proxy and adds a system wide pause feature.         When the system is paused, the fallback will fail no matter what calls are made.         Address Zero is allowed to perform calls even if paused to allow view calls made         from RPC providers to properly work.",
        "version": 1
    },
    "storageLayout": {
        "storage": [],
        "types": null
    },
    "implementations": {
        "names": [
            "WLSETHV1_Implementation_0_2_2.json",
            "WLSETHV1_Implementation_0_4_0.json"
        ],
        "transactionHash": [
            "0xe0ed25d54afeb2190b44a846e286637703c0d04ee9b116ec3e3a477752eada43",
            "0x3be9be647c90a88badbd8a1163d49a29ecc32d976934e9289c456436ebeddfed"
        ],
        "receipt": [
            {
                "to": null,
                "from": "0x341C40B94bF2afBFa42573cB78f16Ee15a056238",
                "contractAddress": "0xc22DE60c1F6668A73B6076aCDa69EddeBaCe3aEe",
                "transactionIndex": 54,
                "gasUsed": "958813",
                "logsBloom": "0x
                "blockHash": "0x6579c4b75fcff9d290d948a720df00c467d97a694d71933ba82af90c6152adab",
                "transactionHash": "0xe0ed25d54afeb2190b44a846e286637703c0d04ee9b116ec3e3a477752eada43",
                "logs": [],
                "blockNumber": 7685739,
                "cumulativeGasUsed": "20156854",
                "status": 1,
                "byzantium": true
            },
            {
                "to": null,
                "from": "0x341C40B94bF2afBFa42573cB78f16Ee15a056238",
                "contractAddress": "0x800030b0C11E0A0E88729BBE1f1fB5E77a57B08f",
                "transactionIndex": 16,
                "gasUsed": "951834",
                "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "blockHash": "0xfa67861f569e08ac79f42d85daeb909d9e45327ada3b9dc50739db4d15b02baa",
                "transactionHash": "0x3be9be647c90a88badbd8a1163d49a29ecc32d976934e9289c456436ebeddfed",
                "logs": [],
                "blockNumber": 7709006,
                "cumulativeGasUsed": "3290894",
                "status": 1,
                "byzantium": true
            }
        ],
        "args": [
            [],
            []
        ],
        "numDeployments": [
            1,
            1
        ],
        "solcInputHash": [
            "656663a520c7d1a8fa475138c7426bea",
            "d46223a1947b2b7fbc79fc0dfd1c596b"
        ],
        "metadata": [
            "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"AllowanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTransferError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"UnauthorizedTransfer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"cdata\",\"type\":\"bytes\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"river\",\"type\":\"address\"}],\"name\":\"SetRiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractableValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_additionalValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_river\",\"type\":\"address\"}],\"name\":\"initWLSETHV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kiln\",\"errors\":{\"AllowanceTooLow(address,address,uint256,uint256)\":[{\"params\":{\"_allowance\":\"Current allowance\",\"_from\":\"Account where funds are sent from\",\"_operator\":\"Account attempting the transfer\",\"_value\":\"Requested transfer value\"}}],\"InvalidInitialization(uint256,uint256)\":[{\"params\":{\"expectedVersion\":\"The version that was expected\",\"version\":\"The version that was attempting to be initialized\"}}],\"UnauthorizedTransfer(address,address)\":[{\"params\":{\"_from\":\"Account sending the funds in the invalid transfer\",\"_to\":\"Account receiving the funds in the invalid transfer\"}}]},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"_owner\":\"Owner that gave the allowance\",\"_spender\":\"Spender that received the allowance\"},\"returns\":{\"_0\":\"The allowance of the owner to the spender\"}},\"approve(address,uint256)\":{\"params\":{\"_spender\":\"Spender that receives the allowance\",\"_value\":\"Amount to allow\"},\"returns\":{\"_0\":\"True if success\"}},\"balanceOf(address)\":{\"params\":{\"_owner\":\"Owner to check the balance\"},\"returns\":{\"_0\":\"The balance of the owner\"}},\"burn(address,uint256)\":{\"details\":\"The message sender burns shares from its balance for the LsETH equivalent valueThe message sender doesn't need to approve the contract to burn the sharesThe freed LsETH is sent to the specified recipient\",\"params\":{\"_recipient\":\"The account receiving the underlying LsETH tokens after shares are burned\",\"_shares\":\"Amount of LsETH to free by burning wrapped LsETH\"}},\"decimals()\":{\"returns\":{\"_0\":\"The decimal count\"}},\"decreaseAllowance(address,uint256)\":{\"params\":{\"_spender\":\"Spender that receives the allowance\",\"_subtractableValue\":\"Amount to subtract\"},\"returns\":{\"_0\":\"True if success\"}},\"increaseAllowance(address,uint256)\":{\"params\":{\"_additionalValue\":\"Amount to add\",\"_spender\":\"Spender that receives the allowance\"},\"returns\":{\"_0\":\"True if success\"}},\"initWLSETHV1(address)\":{\"params\":{\"_river\":\"Address of the River contract\"}},\"mint(address,uint256)\":{\"details\":\"The message sender locks LsETH tokens and received wrapped LsETH tokens in exchangeThe message sender needs to approve the contract to mint the wrapped tokensThe minted wrapped LsETH is sent to the specified recipient\",\"params\":{\"_recipient\":\"The account receiving the new minted wrapped LsETH\",\"_shares\":\"The amount of LsETH to wrap\"}},\"name()\":{\"returns\":{\"_0\":\"The name of the token\"}},\"sharesOf(address)\":{\"params\":{\"_owner\":\"Owner to check the shares balance\"},\"returns\":{\"_0\":\"The shares of the owner\"}},\"symbol()\":{\"returns\":{\"_0\":\"The symbol of the token\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"The total supply\"}},\"transfer(address,uint256)\":{\"params\":{\"_to\":\"Recipient of the transfer\",\"_value\":\"Amount to transfer\"},\"returns\":{\"_0\":\"True if success\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"It is expected that _from has given at least _value allowance to msg.sender\",\"params\":{\"_from\":\"Sender account\",\"_to\":\"Recipient of the transfer\",\"_value\":\"Amount to transfer\"},\"returns\":{\"_0\":\"True if success\"}}},\"title\":\"Wrapped LsETH (v1)\",\"version\":1},\"userdoc\":{\"errors\":{\"AllowanceTooLow(address,address,uint256,uint256)\":[{\"notice\":\"Allowance too low to perform operation\"}],\"BalanceTooLow()\":[{\"notice\":\"Balance too low to perform operation\"}],\"InvalidInitialization(uint256,uint256)\":[{\"notice\":\"An error occured during the initialization\"}],\"InvalidZeroAddress()\":[{\"notice\":\"The address is zero\"}],\"NullTransfer()\":[{\"notice\":\"Invalid empty transfer\"}],\"TokenTransferError()\":[{\"notice\":\"The token transfer failed during the minting or burning process\"}],\"UnauthorizedTransfer(address,address)\":[{\"notice\":\"Invalid transfer recipients\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"An approval has been made\"},\"Burn(address,uint256)\":{\"notice\":\"Tokens have been burned\"},\"Initialize(uint256,bytes)\":{\"notice\":\"Emitted when the contract is properly initialized\"},\"Mint(address,uint256)\":{\"notice\":\"Tokens have been minted\"},\"SetRiver(address)\":{\"notice\":\"The stored value of river has been changed\"},\"Transfer(address,address,uint256)\":{\"notice\":\"A transfer has been made\"}},\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Retrieves the token allowance given from one address to another\"},\"approve(address,uint256)\":{\"notice\":\"Approves another account to transfer tokens\"},\"balanceOf(address)\":{\"notice\":\"Retrieves the token balance of the specified user\"},\"burn(address,uint256)\":{\"notice\":\"Burn tokens and retrieve underlying LsETH tokens\"},\"decimals()\":{\"notice\":\"Retrieves the token decimal count\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Decrease allowance to another account\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Increase allowance to another account\"},\"initWLSETHV1(address)\":{\"notice\":\"Initializes the wrapped token contract\"},\"mint(address,uint256)\":{\"notice\":\"Mint tokens by providing LsETH tokens\"},\"name()\":{\"notice\":\"Retrieves the token full name\"},\"sharesOf(address)\":{\"notice\":\"Retrieves the raw shares count of the user\"},\"symbol()\":{\"notice\":\"Retrieves the token symbol\"},\"totalSupply()\":{\"notice\":\"Retrieves the token total supply\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers tokens between the message sender and a recipient\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers tokens between two accounts\"}},\"notice\":\"This contract wraps the LsETH token into a rebase token, more suitable for some DeFi use-cases         like stable swaps.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/WLSETH.1.sol\":\"WLSETHV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\n/// @title Initializable\\n/// @author Kiln\\n/// @notice This contract ensures that initializers are called only once per version\\ncontract Initializable {\\n    /// @notice An error occured during the initialization\\n    /// @param version The version that was attempting to be initialized\\n    /// @param expectedVersion The version that was expected\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    /// @notice Emitted when the contract is properly initialized\\n    /// @param version New version of the contracts\\n    /// @param cdata Complete calldata that was used during the initialization\\n    event Initialize(uint256 version, bytes cdata);\\n\\n    /// @notice Use this modifier on initializers along with a hard-coded version number\\n    /// @param _version Version to initialize\\n    modifier init(uint256 _version) {\\n        if (_version != Version.get()) {\\n            revert InvalidInitialization(_version, Version.get());\\n        }\\n        Version.set(_version + 1); // prevents reentrency on the called method\\n        _;\\n        emit Initialize(_version, msg.data);\\n    }\\n}\\n\",\"keccak256\":\"0xc85d24988a02608db50067c5319e3b42eec8e45726045489bdb8ea1f33e1ce67\",\"license\":\"BUSL-1.1\"},\"contracts/src/WLSETH.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\nimport \\\"./interfaces/IWLSETH.1.sol\\\";\\n\\nimport \\\"./Initializable.sol\\\";\\n\\nimport \\\"./state/shared/RiverAddress.sol\\\";\\nimport \\\"./state/shared/ApprovalsPerOwner.sol\\\";\\nimport \\\"./state/wlseth/BalanceOf.sol\\\";\\n\\n/// @title Wrapped LsETH (v1)\\n/// @author Kiln\\n/// @notice This contract wraps the LsETH token into a rebase token, more suitable for some DeFi use-cases\\n///         like stable swaps.\\ncontract WLSETHV1 is IWLSETHV1, Initializable, ReentrancyGuard {\\n    /// @notice Ensures that the value is not 0\\n    /// @param _value Value that must be > 0\\n    modifier isNotNull(uint256 _value) {\\n        if (_value == 0) {\\n            revert NullTransfer();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Ensures that the owner has enough funds\\n    /// @param _owner Owner of the balance to verify\\n    /// @param _value Minimum required value\\n    modifier hasFunds(address _owner, uint256 _value) {\\n        if (_balanceOf(_owner) < _value) {\\n            revert BalanceTooLow();\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function initWLSETHV1(address _river) external init(0) {\\n        RiverAddress.set(_river);\\n        emit SetRiver(_river);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function name() external pure returns (string memory) {\\n        return \\\"Wrapped Liquid Staked ETH\\\";\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function symbol() external pure returns (string memory) {\\n        return \\\"wLsETH\\\";\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function totalSupply() external view returns (uint256) {\\n        return IRiverV1(payable(RiverAddress.get())).balanceOfUnderlying(address(this));\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function balanceOf(address _owner) external view returns (uint256) {\\n        return _balanceOf(_owner);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function sharesOf(address _owner) external view returns (uint256) {\\n        return BalanceOf.get(_owner);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function allowance(address _owner, address _spender) external view returns (uint256) {\\n        return ApprovalsPerOwner.get(_owner, _spender);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function transfer(address _to, uint256 _value)\\n        external\\n        isNotNull(_value)\\n        hasFunds(msg.sender, _value)\\n        returns (bool)\\n    {\\n        if (_to == address(0)) {\\n            revert UnauthorizedTransfer(msg.sender, address(0));\\n        }\\n        return _transfer(msg.sender, _to, _value);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        external\\n        isNotNull(_value)\\n        hasFunds(_from, _value)\\n        returns (bool)\\n    {\\n        if (_to == address(0)) {\\n            revert UnauthorizedTransfer(_from, address(0));\\n        }\\n        _spendAllowance(_from, _value);\\n        return _transfer(_from, _to, _value);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function approve(address _spender, uint256 _value) external returns (bool) {\\n        ApprovalsPerOwner.set(msg.sender, _spender, _value);\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool) {\\n        uint256 newApprovalValue = ApprovalsPerOwner.get(msg.sender, _spender) + _additionalValue;\\n        ApprovalsPerOwner.set(msg.sender, _spender, newApprovalValue);\\n        emit Approval(msg.sender, _spender, newApprovalValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool) {\\n        uint256 newApprovalValue = ApprovalsPerOwner.get(msg.sender, _spender) - _subtractableValue;\\n        ApprovalsPerOwner.set(msg.sender, _spender, newApprovalValue);\\n        emit Approval(msg.sender, _spender, newApprovalValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function mint(address _recipient, uint256 _shares) external nonReentrant {\\n        BalanceOf.set(_recipient, BalanceOf.get(_recipient) + _shares);\\n        IRiverV1 river = IRiverV1(payable(RiverAddress.get()));\\n        if (!river.transferFrom(msg.sender, address(this), _shares)) {\\n            revert TokenTransferError();\\n        }\\n        emit Mint(_recipient, _shares);\\n        emit Transfer(address(0), _recipient, river.underlyingBalanceFromShares(_shares));\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function burn(address _recipient, uint256 _shares) external nonReentrant {\\n        uint256 shares = BalanceOf.get(msg.sender);\\n        if (_shares > shares) {\\n            revert BalanceTooLow();\\n        }\\n        BalanceOf.set(msg.sender, shares - _shares);\\n        IRiverV1 river = IRiverV1(payable(RiverAddress.get()));\\n        if (!river.transfer(_recipient, _shares)) {\\n            revert TokenTransferError();\\n        }\\n        emit Transfer(msg.sender, address(0), river.underlyingBalanceFromShares(_shares));\\n        emit Burn(_recipient, _shares);\\n    }\\n\\n    /// @notice Internal utility to spend the allowance of an account from the message sender\\n    /// @param _from Address owning the allowance\\n    /// @param _value Amount of allowance to spend\\n    function _spendAllowance(address _from, uint256 _value) internal {\\n        uint256 currentAllowance = ApprovalsPerOwner.get(_from, msg.sender);\\n        if (currentAllowance < _value) {\\n            revert AllowanceTooLow(_from, msg.sender, currentAllowance, _value);\\n        }\\n        if (currentAllowance != type(uint256).max) {\\n            ApprovalsPerOwner.set(_from, msg.sender, currentAllowance - _value);\\n        }\\n    }\\n\\n    /// @notice Internal utility to retrieve the amount of token per owner\\n    /// @param _owner Account to be checked\\n    /// @return The balance of the account\\n    function _balanceOf(address _owner) internal view returns (uint256) {\\n        return IRiverV1(payable(RiverAddress.get())).underlyingBalanceFromShares(BalanceOf.get(_owner));\\n    }\\n\\n    /// @notice Internal utility to perform an unchecked transfer\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount to be sent\\n    /// @return True if success\\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\\n        uint256 valueToShares = IRiverV1(payable(RiverAddress.get())).sharesFromUnderlyingBalance(_value);\\n        BalanceOf.set(_from, BalanceOf.get(_from) - valueToShares);\\n        BalanceOf.set(_to, BalanceOf.get(_to) + valueToShares);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xdc7e7acf4c337b9b72a86318de23b1cbe305701e12a669f32064c1bbcb1724ae\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRiver.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./components/IConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"./components/IOracleManager.1.sol\\\";\\nimport \\\"./components/ISharesManager.1.sol\\\";\\nimport \\\"./components/IUserDepositManager.1.sol\\\";\\n\\n/// @title River Interface (v1)\\n/// @author Kiln\\n/// @notice The main system interface\\ninterface IRiverV1 is IConsensusLayerDepositManagerV1, IUserDepositManagerV1, ISharesManagerV1, IOracleManagerV1 {\\n    /// @notice Funds have been pulled from the Execution Layer Fee Recipient\\n    /// @param amount The amount pulled\\n    event PulledELFees(uint256 amount);\\n\\n    /// @notice The stored Execution Layer Fee Recipient has been changed\\n    /// @param elFeeRecipient The new Execution Layer Fee Recipient\\n    event SetELFeeRecipient(address indexed elFeeRecipient);\\n\\n    /// @notice The stored Collector has been changed\\n    /// @param collector The new Collector\\n    event SetCollector(address indexed collector);\\n\\n    /// @notice The stored Allowlist has been changed\\n    /// @param allowlist The new Allowlist\\n    event SetAllowlist(address indexed allowlist);\\n\\n    /// @notice The stored Global Fee has been changed\\n    /// @param fee The new Global Fee\\n    event SetGlobalFee(uint256 fee);\\n\\n    /// @notice The stored Operators Registry has been changed\\n    /// @param operatorRegistry The new Operators Registry\\n    event SetOperatorsRegistry(address indexed operatorRegistry);\\n\\n    /// @notice The system underlying supply increased. This is a snapshot of the balances for accounting purposes\\n    /// @param _collector The address of the collector during this event\\n    /// @param _oldTotalUnderlyingBalance Old total ETH balance under management by River\\n    /// @param _oldTotalSupply Old total supply in shares\\n    /// @param _newTotalUnderlyingBalance New total ETH balance under management by River\\n    /// @param _newTotalSupply New total supply in shares\\n    event RewardsEarned(\\n        address indexed _collector,\\n        uint256 _oldTotalUnderlyingBalance,\\n        uint256 _oldTotalSupply,\\n        uint256 _newTotalUnderlyingBalance,\\n        uint256 _newTotalSupply\\n    );\\n\\n    /// @notice The computed amount of shares to mint is 0\\n    error ZeroMintedShares();\\n\\n    /// @notice The access was denied\\n    /// @param account The account that was denied\\n    error Denied(address account);\\n\\n    /// @notice Initializes the River system\\n    /// @param _depositContractAddress Address to make Consensus Layer deposits\\n    /// @param _elFeeRecipientAddress Address that receives the execution layer fees\\n    /// @param _withdrawalCredentials Credentials to use for every validator deposit\\n    /// @param _oracleAddress The address of the Oracle contract\\n    /// @param _systemAdministratorAddress Administrator address\\n    /// @param _allowlistAddress Address of the allowlist contract\\n    /// @param _operatorRegistryAddress Address of the operator registry\\n    /// @param _collectorAddress Address receiving the the global fee on revenue\\n    /// @param _globalFee Amount retained when the ETH balance increases and sent to the collector\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _operatorRegistryAddress,\\n        address _collectorAddress,\\n        uint256 _globalFee\\n    ) external;\\n\\n    /// @notice Get the current global fee\\n    /// @return The global fee\\n    function getGlobalFee() external view returns (uint256);\\n\\n    /// @notice Retrieve the allowlist address\\n    /// @return The allowlist address\\n    function getAllowlist() external view returns (address);\\n\\n    /// @notice Retrieve the collector address\\n    /// @return The collector address\\n    function getCollector() external view returns (address);\\n\\n    /// @notice Retrieve the execution layer fee recipient\\n    /// @return The execution layer fee recipient address\\n    function getELFeeRecipient() external view returns (address);\\n\\n    /// @notice Retrieve the operators registry\\n    /// @return The operators registry address\\n    function getOperatorsRegistry() external view returns (address);\\n\\n    /// @notice Changes the global fee parameter\\n    /// @param newFee New fee value\\n    function setGlobalFee(uint256 newFee) external;\\n\\n    /// @notice Changes the allowlist address\\n    /// @param _newAllowlist New address for the allowlist\\n    function setAllowlist(address _newAllowlist) external;\\n\\n    /// @notice Changes the collector address\\n    /// @param _newCollector New address for the collector\\n    function setCollector(address _newCollector) external;\\n\\n    /// @notice Changes the execution layer fee recipient\\n    /// @param _newELFeeRecipient New address for the recipient\\n    function setELFeeRecipient(address _newELFeeRecipient) external;\\n\\n    /// @notice Input for execution layer fee earnings\\n    function sendELFees() external payable;\\n}\\n\",\"keccak256\":\"0xb49107de594a37139c9cd1d1652eb9f119634d97b2ef60e25325d88b3a34766a\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IWLSETH.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Wrapped LsETH Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to wrap the LsETH token into a rebase token.\\ninterface IWLSETHV1 {\\n    /// @notice A transfer has been made\\n    /// @param from The transfer sender\\n    /// @param to The transfer recipient\\n    /// @param value The amount transfered\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice An approval has been made\\n    /// @param owner The token owner\\n    /// @param spender The account allowed by the owner\\n    /// @param value The amount allowed\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Tokens have been minted\\n    /// @param recipient The account receiving the new tokens\\n    /// @param shares The amount of LsETH provided\\n    event Mint(address indexed recipient, uint256 shares);\\n\\n    /// @notice Tokens have been burned\\n    /// @param recipient The account that receive the underlying LsETH\\n    /// @param shares The amount of LsETH that got sent back\\n    event Burn(address indexed recipient, uint256 shares);\\n\\n    /// @notice The stored value of river has been changed\\n    /// @param river The new address of river\\n    event SetRiver(address indexed river);\\n\\n    /// @notice The token transfer failed during the minting or burning process\\n    error TokenTransferError();\\n\\n    /// @notice Balance too low to perform operation\\n    error BalanceTooLow();\\n\\n    /// @notice Allowance too low to perform operation\\n    /// @param _from Account where funds are sent from\\n    /// @param _operator Account attempting the transfer\\n    /// @param _allowance Current allowance\\n    /// @param _value Requested transfer value\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n\\n    /// @notice Invalid empty transfer\\n    error NullTransfer();\\n\\n    /// @notice Invalid transfer recipients\\n    /// @param _from Account sending the funds in the invalid transfer\\n    /// @param _to Account receiving the funds in the invalid transfer\\n    error UnauthorizedTransfer(address _from, address _to);\\n\\n    /// @notice Initializes the wrapped token contract\\n    /// @param _river Address of the River contract\\n    function initWLSETHV1(address _river) external;\\n\\n    /// @notice Retrieves the token full name\\n    /// @return The name of the token\\n    function name() external pure returns (string memory);\\n\\n    /// @notice Retrieves the token symbol\\n    /// @return The symbol of the token\\n    function symbol() external pure returns (string memory);\\n\\n    /// @notice Retrieves the token decimal count\\n    /// @return The decimal count\\n    function decimals() external pure returns (uint8);\\n\\n    /// @notice Retrieves the token total supply\\n    /// @return The total supply\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Retrieves the token balance of the specified user\\n    /// @param _owner Owner to check the balance\\n    /// @return The balance of the owner\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieves the raw shares count of the user\\n    /// @param _owner Owner to check the shares balance\\n    /// @return The shares of the owner\\n    function sharesOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieves the token allowance given from one address to another\\n    /// @param _owner Owner that gave the allowance\\n    /// @param _spender Spender that received the allowance\\n    /// @return The allowance of the owner to the spender\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    /// @notice Transfers tokens between the message sender and a recipient\\n    /// @param _to Recipient of the transfer\\n    /// @param _value Amount to transfer\\n    /// @return True if success\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Transfers tokens between two accounts\\n    /// @dev It is expected that _from has given at least _value allowance to msg.sender\\n    /// @param _from Sender account\\n    /// @param _to Recipient of the transfer\\n    /// @param _value Amount to transfer\\n    /// @return True if success\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Approves another account to transfer tokens\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _value Amount to allow\\n    /// @return True if success\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    /// @notice Increase allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _additionalValue Amount to add\\n    /// @return True if success\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool);\\n\\n    /// @notice Decrease allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _subtractableValue Amount to subtract\\n    /// @return True if success\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool);\\n\\n    /// @notice Mint tokens by providing LsETH tokens\\n    /// @dev The message sender locks LsETH tokens and received wrapped LsETH tokens in exchange\\n    /// @dev The message sender needs to approve the contract to mint the wrapped tokens\\n    /// @dev The minted wrapped LsETH is sent to the specified recipient\\n    /// @param _recipient The account receiving the new minted wrapped LsETH\\n    /// @param _shares The amount of LsETH to wrap\\n    function mint(address _recipient, uint256 _shares) external;\\n\\n    /// @notice Burn tokens and retrieve underlying LsETH tokens\\n    /// @dev The message sender burns shares from its balance for the LsETH equivalent value\\n    /// @dev The message sender doesn't need to approve the contract to burn the shares\\n    /// @dev The freed LsETH is sent to the specified recipient\\n    /// @param _recipient The account receiving the underlying LsETH tokens after shares are burned\\n    /// @param _shares Amount of LsETH to free by burning wrapped LsETH\\n    function burn(address _recipient, uint256 _shares) external;\\n}\\n\",\"keccak256\":\"0xba6c6746790cbdcecb28fdaebd51477f88564a9d8e05a456ec87ac6974700ee5\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IConsensusLayerDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Consensys Layer Deposit Manager Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the interactions with the official deposit contract\\ninterface IConsensusLayerDepositManagerV1 {\\n    /// @notice A validator key got funded on the deposit contract\\n    /// @param publicKey BLS Public key that got funded\\n    event FundedValidatorKey(bytes publicKey);\\n\\n    /// @notice The stored deposit contract address changed\\n    /// @param depositContract Address of the deposit contract\\n    event SetDepositContractAddress(address indexed depositContract);\\n\\n    /// @notice The stored withdrawal credentials changed\\n    /// @param withdrawalCredentials The withdrawal credentials to use for deposits\\n    event SetWithdrawalCredentials(bytes32 withdrawalCredentials);\\n\\n    /// @notice Not enough funds to deposit one validator\\n    error NotEnoughFunds();\\n\\n    /// @notice The length of the BLS Public key is invalid during deposit\\n    error InconsistentPublicKeys();\\n\\n    /// @notice The length of the BLS Signature is invalid during deposit\\n    error InconsistentSignatures();\\n\\n    /// @notice The internal key retrieval returned no keys\\n    error NoAvailableValidatorKeys();\\n\\n    /// @notice The received count of public keys to deposit is invalid\\n    error InvalidPublicKeyCount();\\n\\n    /// @notice The received count of signatures to deposit is invalid\\n    error InvalidSignatureCount();\\n\\n    /// @notice The withdrawal credentials value is null\\n    error InvalidWithdrawalCredentials();\\n\\n    /// @notice An error occured during the deposit\\n    error ErrorOnDeposit();\\n\\n    /// @notice Returns the amount of pending ETH\\n    /// @return The amount of pending ETH\\n    function getBalanceToDeposit() external view returns (uint256);\\n\\n    /// @notice Retrieve the withdrawal credentials\\n    /// @return The withdrawal credentials\\n    function getWithdrawalCredentials() external view returns (bytes32);\\n\\n    /// @notice Get the deposited validator count (the count of deposits made by the contract)\\n    /// @return The deposited validator count\\n    function getDepositedValidatorCount() external view returns (uint256);\\n\\n    /// @notice Deposits current balance to the Consensus Layer by batches of 32 ETH\\n    /// @param _maxCount The maximum amount of validator keys to fund\\n    function depositToConsensusLayer(uint256 _maxCount) external;\\n}\\n\",\"keccak256\":\"0x2215d3054ece419e846f376e7624094b5ce24b3c72be745a4b5aa4e756c4cb42\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IOracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Oracle Manager (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the inputs provided by the oracle\\ninterface IOracleManagerV1 {\\n    /// @notice The stored oracle address changed\\n    /// @param oracleAddress The new oracle address\\n    event SetOracle(address indexed oracleAddress);\\n\\n    /// @notice The consensus layer data provided by the oracle has been updated\\n    /// @param validatorCount The new count of validators running on the consensus layer\\n    /// @param validatorTotalBalance The new total balance sum of all validators\\n    /// @param roundId Round identifier\\n    event ConsensusLayerDataUpdate(uint256 validatorCount, uint256 validatorTotalBalance, bytes32 roundId);\\n\\n    /// @notice The reported validator count is invalid\\n    /// @param providedValidatorCount The received validator count value\\n    /// @param depositedValidatorCount The number of deposits performed by the system\\n    error InvalidValidatorCountReport(uint256 providedValidatorCount, uint256 depositedValidatorCount);\\n\\n    /// @notice Get oracle address\\n    /// @return The oracle address\\n    function getOracle() external view returns (address);\\n\\n    /// @notice Get CL validator total balance\\n    /// @return The CL Validator total balance\\n    function getCLValidatorTotalBalance() external view returns (uint256);\\n\\n    /// @notice Get CL validator count (the amount of validator reported by the oracles)\\n    /// @return The CL validator count\\n    function getCLValidatorCount() external view returns (uint256);\\n\\n    /// @notice Set the oracle address\\n    /// @param _oracleAddress Address of the oracle\\n    function setOracle(address _oracleAddress) external;\\n\\n    /// @notice Sets the validator count and validator total balance sum reported by the oracle\\n    /// @dev Can only be called by the oracle address\\n    /// @dev The round id is a blackbox value that should only be used to identify unique reports\\n    /// @dev When a report is performed, River computes the amount of fees that can be pulled\\n    /// @dev from the execution layer fee recipient. This amount is capped by the max allowed\\n    /// @dev increase provided during the report.\\n    /// @dev If the total asset balance increases (from the reported total balance and the pulled funds)\\n    /// @dev we then compute the share that must be taken for the collector on the positive delta.\\n    /// @dev The execution layer fees are taken into account here because they are the product of\\n    /// @dev node operator's work, just like consensus layer fees, and both should be handled in the\\n    /// @dev same manner, as a single revenue stream for the users and the collector.\\n    /// @param _validatorCount The number of active validators on the consensus layer\\n    /// @param _validatorTotalBalance The balance sum of the active validators on the consensus layer\\n    /// @param _roundId An identifier for this update\\n    /// @param _maxIncrease The maximum allowed increase in the total balance\\n    function setConsensusLayerData(\\n        uint256 _validatorCount,\\n        uint256 _validatorTotalBalance,\\n        bytes32 _roundId,\\n        uint256 _maxIncrease\\n    ) external;\\n}\\n\",\"keccak256\":\"0x088ff39852e3000fbe31c62da75c41bba38aaf2f2d66f99ba698835b840ef6bc\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/ISharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Shares Manager Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the shares of the depositor and the ERC20 interface\\ninterface ISharesManagerV1 is IERC20 {\\n    /// @notice Balance too low to perform operation\\n    error BalanceTooLow();\\n\\n    /// @notice Allowance too low to perform operation\\n    /// @param _from Account where funds are sent from\\n    /// @param _operator Account attempting the transfer\\n    /// @param _allowance Current allowance\\n    /// @param _value Requested transfer value in shares\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n\\n    /// @notice Invalid empty transfer\\n    error NullTransfer();\\n\\n    /// @notice Invalid transfer recipients\\n    /// @param _from Account sending the funds in the invalid transfer\\n    /// @param _to Account receiving the funds in the invalid transfer\\n    error UnauthorizedTransfer(address _from, address _to);\\n\\n    /// @notice Retrieve the token name\\n    /// @return The token name\\n    function name() external pure returns (string memory);\\n\\n    /// @notice Retrieve the token symbol\\n    /// @return The token symbol\\n    function symbol() external pure returns (string memory);\\n\\n    /// @notice Retrieve the decimal count\\n    /// @return The decimal count\\n    function decimals() external pure returns (uint8);\\n\\n    /// @notice Retrieve the total token supply\\n    /// @return The total supply in shares\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the total underlying asset supply\\n    /// @return The total underlying asset supply\\n    function totalUnderlyingSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The balance of the account in shares\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The underlying balance of the account\\n    function balanceOfUnderlying(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance from an amount of shares\\n    /// @param _shares Amount of shares to convert\\n    /// @return The underlying asset balance represented by the shares\\n    function underlyingBalanceFromShares(uint256 _shares) external view returns (uint256);\\n\\n    /// @notice Retrieve the shares count from an underlying asset amount\\n    /// @param _underlyingAssetAmount Amount of underlying asset to convert\\n    /// @return The amount of shares worth the underlying asset amopunt\\n    function sharesFromUnderlyingBalance(uint256 _underlyingAssetAmount) external view returns (uint256);\\n\\n    /// @notice Retrieve the allowance value for a spender\\n    /// @param _owner Address that issued the allowance\\n    /// @param _spender Address that received the allowance\\n    /// @return The allowance in shares for a given spender\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    /// @notice Performs a transfer from the message sender to the provided account\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Performs a transfer between two recipients\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Approves an account for future spendings\\n    /// @dev An approved account can use transferFrom to transfer funds on behalf of the token owner\\n    /// @param _spender Address that is allowed to spend the tokens\\n    /// @param _value The allowed amount in shares, will override previous value\\n    /// @return True if success\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    /// @notice Increase allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _additionalValue Amount of shares to add\\n    /// @return True if success\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool);\\n\\n    /// @notice Decrease allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _subtractableValue Amount of shares to subtract\\n    /// @return True if success\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool);\\n}\\n\",\"keccak256\":\"0x947debdcf17b72c13c3ca1a840795ed935bde5d4f345e52fa1bed1895212da66\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IUserDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title User Deposit Manager (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the inbound transfers cases or the explicit submissions\\ninterface IUserDepositManagerV1 {\\n    /// @notice User deposited ETH in the system\\n    /// @param depositor Address performing the deposit\\n    /// @param recipient Address receiving the minted shares\\n    /// @param amount Amount in ETH deposited\\n    event UserDeposit(address indexed depositor, address indexed recipient, uint256 amount);\\n\\n    /// @notice And empty deposit attempt was made\\n    error EmptyDeposit();\\n\\n    /// @notice Explicit deposit method to mint on msg.sender\\n    function deposit() external payable;\\n\\n    /// @notice Explicit deposit method to mint on msg.sender and transfer to _recipient\\n    /// @param _recipient Address receiving the minted LsETH\\n    function depositAndTransfer(address _recipient) external payable;\\n\\n    /// @notice Implicit deposit method, when the user performs a regular transfer to the contract\\n    receive() external payable;\\n\\n    /// @notice Invalid call, when the user sends a transaction with a data payload but no method matched\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x1abcda34431bfbb82b6ede5c852f4ece6544cca24616f58cb44ed340df0ef06b\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibBasisPoints.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Lib Basis Points\\n/// @notice Holds the basis points max value\\nlibrary LibBasisPoints {\\n    /// @notice The max value for basis points (represents 100%)\\n    uint256 internal constant BASIS_POINTS_MAX = 10_000;\\n}\\n\",\"keccak256\":\"0x97228a01dcd48f033555e3a44f9be37fb474a1b027f703f28097d539808f1c6c\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibErrors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Errors\\n/// @notice Library of common errors\\nlibrary LibErrors {\\n    /// @notice The operator is unauthorized for the caller\\n    /// @param caller Addres performing the call\\n    error Unauthorized(address caller);\\n\\n    /// @notice The call was invalid\\n    error InvalidCall();\\n\\n    /// @notice The argument was invalid\\n    error InvalidArgument();\\n\\n    /// @notice The address is zero\\n    error InvalidZeroAddress();\\n\\n    /// @notice The string is empty\\n    error InvalidEmptyString();\\n\\n    /// @notice The fee is invalid\\n    error InvalidFee();\\n}\\n\",\"keccak256\":\"0x76d2ef5b294a8f2e934c3ce286ee77238ae03a35a7507a378659b37db6d18f03\",\"license\":\"MIT\"},\"contracts/src/libraries/LibSanitize.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./LibErrors.sol\\\";\\nimport \\\"./LibBasisPoints.sol\\\";\\n\\n/// @title Lib Sanitize\\n/// @notice Utilities to sanitize input values\\nlibrary LibSanitize {\\n    /// @notice Reverts if address is 0\\n    /// @param _address Address to check\\n    function _notZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert LibErrors.InvalidZeroAddress();\\n        }\\n    }\\n\\n    /// @notice Reverts if string is empty\\n    /// @param _string String to check\\n    function _notEmptyString(string memory _string) internal pure {\\n        if (bytes(_string).length == 0) {\\n            revert LibErrors.InvalidEmptyString();\\n        }\\n    }\\n\\n    /// @notice Reverts if fee is invalid\\n    /// @param _fee Fee to check\\n    function _validFee(uint256 _fee) internal pure {\\n        if (_fee > LibBasisPoints.BASIS_POINTS_MAX) {\\n            revert LibErrors.InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8aeeb866c4657a96c8b4c006340c7996d15a6f0044b730c276bc3ba8d5bcd48\",\"license\":\"MIT\"},\"contracts/src/libraries/LibUnstructuredStorage.sol\":{\"content\":\"// SPDX-License-Identifier:    MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @title Lib Unstructured Storage\\n/// @notice Utilities to work with unstructured storage\\nlibrary LibUnstructuredStorage {\\n    /// @notice Retrieve a bool value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bool value\\n    function getStorageBool(bytes32 _position) internal view returns (bool data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an address value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The address value\\n    function getStorageAddress(bytes32 _position) internal view returns (address data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve a bytes32 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bytes32 value\\n    function getStorageBytes32(bytes32 _position) internal view returns (bytes32 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an uint256 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The uint256 value\\n    function getStorageUint256(bytes32 _position) internal view returns (uint256 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Sets a bool value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bool value to set\\n    function setStorageBool(bytes32 _position, bool _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an address value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The address value to set\\n    function setStorageAddress(bytes32 _position, address _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets a bytes32 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bytes32 value to set\\n    function setStorageBytes32(bytes32 _position, bytes32 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an uint256 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The uint256 value to set\\n    function setStorageUint256(bytes32 _position, uint256 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8e1a2f0dc18e023e12747355b3c95258d4de698f2bb6196222a1dc92940caa3\",\"license\":\"MIT\"},\"contracts/src/state/shared/ApprovalsPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Approvals Per Owner Storage\\n/// @notice Utility to manage the Approvals Per Owner in storage\\nlibrary ApprovalsPerOwner {\\n    /// @notice Storage slot of the Approvals Per Owner\\n    bytes32 internal constant APPROVALS_PER_OWNER_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.approvalsPerOwner\\\")) - 1);\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from an owner to an operator to the approval amount\\n        mapping(address => mapping(address => uint256)) value;\\n    }\\n\\n    /// @notice Retrieve the approval for an owner to an operator\\n    /// @param _owner The account that gave the approval\\n    /// @param _operator The account receiving the approval\\n    /// @return The value of the approval\\n    function get(address _owner, address _operator) internal view returns (uint256) {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_owner][_operator];\\n    }\\n\\n    /// @notice Set the approval value for an owner to an operator\\n    /// @param _owner The account that gives the approval\\n    /// @param _operator The account receiving the approval\\n    /// @param _newValue The value of the approval\\n    function set(address _owner, address _operator, uint256 _newValue) internal {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_owner][_operator] = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0xc8ec39447b09747e3cfff1c456743b4f52fafbd994122ebf8285035fc497c95c\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/RiverAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title River Address Storage\\n/// @notice Utility to manage the River Address in storage\\nlibrary RiverAddress {\\n    /// @notice Storage slot of the River Address\\n    bytes32 internal constant RIVER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.riverAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the River Address\\n    /// @return The River Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(RIVER_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the River Address\\n    /// @param _newValue New River Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(RIVER_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xffc846d2e04891e3b0625a9e710fa2a18b4e1af43609f0d76d6c3b7bf5c51384\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Version Storage\\n/// @notice Utility to manage the Version in storage\\nlibrary Version {\\n    /// @notice Storage slot of the Version\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    /// @notice Retrieve the Version\\n    /// @return The Version\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    /// @notice Sets the Version\\n    /// @param _newValue New Version\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(VERSION_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x82f1cc4bbb1f16c1cdbac93596334805eb1a2e0e40ccbd0ab0f78e22d3f83864\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/wlseth/BalanceOf.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Balance Storage\\n/// @notice Utility to manage the Balance in storage\\nlibrary BalanceOf {\\n    /// @notice Storage slot of the Balance\\n    bytes32 internal constant BALANCE_OF_SLOT = bytes32(uint256(keccak256(\\\"river.state.balanceOf\\\")) - 1);\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from an owner to its balance\\n        mapping(address => uint256) value;\\n    }\\n\\n    /// @notice Retrieve balance of an owner\\n    /// @param _owner The owner of the balance\\n    /// @return The balance of the owner\\n    function get(address _owner) internal view returns (uint256) {\\n        bytes32 slot = BALANCE_OF_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_owner];\\n    }\\n\\n    /// @notice Set the balance of an owner\\n    /// @param _owner The owner to change the balance of\\n    /// @param _newValue New balance value for the owner\\n    function set(address _owner, uint256 _newValue) internal {\\n        bytes32 slot = BALANCE_OF_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_owner] = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0xf52be4ba5ff038027e2514501d3e67fa8a00e9001fa48ccba4013815fd17e341\",\"license\":\"BUSL-1.1\"},\"openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}",
            "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"AllowanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTransferError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"UnauthorizedTransfer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"cdata\",\"type\":\"bytes\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"river\",\"type\":\"address\"}],\"name\":\"SetRiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractableValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_additionalValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_river\",\"type\":\"address\"}],\"name\":\"initWLSETHV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kiln\",\"errors\":{\"AllowanceTooLow(address,address,uint256,uint256)\":[{\"params\":{\"_allowance\":\"Current allowance\",\"_from\":\"Account where funds are sent from\",\"_operator\":\"Account attempting the transfer\",\"_value\":\"Requested transfer value\"}}],\"InvalidInitialization(uint256,uint256)\":[{\"params\":{\"expectedVersion\":\"The version that was expected\",\"version\":\"The version that was attempting to be initialized\"}}],\"UnauthorizedTransfer(address,address)\":[{\"params\":{\"_from\":\"Account sending the funds in the invalid transfer\",\"_to\":\"Account receiving the funds in the invalid transfer\"}}]},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"_owner\":\"Owner that gave the allowance\",\"_spender\":\"Spender that received the allowance\"},\"returns\":{\"_0\":\"The allowance of the owner to the spender\"}},\"approve(address,uint256)\":{\"params\":{\"_spender\":\"Spender that receives the allowance\",\"_value\":\"Amount to allow\"},\"returns\":{\"_0\":\"True if success\"}},\"balanceOf(address)\":{\"params\":{\"_owner\":\"Owner to check the balance\"},\"returns\":{\"_0\":\"The balance of the owner\"}},\"burn(address,uint256)\":{\"details\":\"The message sender burns shares from its balance for the LsETH equivalent valueThe message sender doesn't need to approve the contract to burn the sharesThe freed LsETH is sent to the specified recipient\",\"params\":{\"_recipient\":\"The account receiving the underlying LsETH tokens after shares are burned\",\"_shares\":\"Amount of LsETH to free by burning wrapped LsETH\"}},\"decimals()\":{\"returns\":{\"_0\":\"The decimal count\"}},\"decreaseAllowance(address,uint256)\":{\"params\":{\"_spender\":\"Spender that receives the allowance\",\"_subtractableValue\":\"Amount to subtract\"},\"returns\":{\"_0\":\"True if success\"}},\"increaseAllowance(address,uint256)\":{\"params\":{\"_additionalValue\":\"Amount to add\",\"_spender\":\"Spender that receives the allowance\"},\"returns\":{\"_0\":\"True if success\"}},\"initWLSETHV1(address)\":{\"params\":{\"_river\":\"Address of the River contract\"}},\"mint(address,uint256)\":{\"details\":\"The message sender locks LsETH tokens and received wrapped LsETH tokens in exchangeThe message sender needs to approve the contract to mint the wrapped tokensThe minted wrapped LsETH is sent to the specified recipient\",\"params\":{\"_recipient\":\"The account receiving the new minted wrapped LsETH\",\"_shares\":\"The amount of LsETH to wrap\"}},\"name()\":{\"returns\":{\"_0\":\"The name of the token\"}},\"sharesOf(address)\":{\"params\":{\"_owner\":\"Owner to check the shares balance\"},\"returns\":{\"_0\":\"The shares of the owner\"}},\"symbol()\":{\"returns\":{\"_0\":\"The symbol of the token\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"The total supply\"}},\"transfer(address,uint256)\":{\"params\":{\"_to\":\"Recipient of the transfer\",\"_value\":\"Amount to transfer\"},\"returns\":{\"_0\":\"True if success\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"It is expected that _from has given at least _value allowance to msg.sender\",\"params\":{\"_from\":\"Sender account\",\"_to\":\"Recipient of the transfer\",\"_value\":\"Amount to transfer\"},\"returns\":{\"_0\":\"True if success\"}}},\"title\":\"Wrapped LsETH (v1)\",\"version\":1},\"userdoc\":{\"errors\":{\"AllowanceTooLow(address,address,uint256,uint256)\":[{\"notice\":\"Allowance too low to perform operation\"}],\"BalanceTooLow()\":[{\"notice\":\"Balance too low to perform operation\"}],\"InvalidInitialization(uint256,uint256)\":[{\"notice\":\"An error occured during the initialization\"}],\"InvalidZeroAddress()\":[{\"notice\":\"The address is zero\"}],\"NullTransfer()\":[{\"notice\":\"Invalid empty transfer\"}],\"TokenTransferError()\":[{\"notice\":\"The token transfer failed during the minting or burning process\"}],\"UnauthorizedTransfer(address,address)\":[{\"notice\":\"Invalid transfer recipients\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"An approval has been made\"},\"Burn(address,uint256)\":{\"notice\":\"Tokens have been burned\"},\"Initialize(uint256,bytes)\":{\"notice\":\"Emitted when the contract is properly initialized\"},\"Mint(address,uint256)\":{\"notice\":\"Tokens have been minted\"},\"SetRiver(address)\":{\"notice\":\"The stored value of river has been changed\"},\"Transfer(address,address,uint256)\":{\"notice\":\"A transfer has been made\"}},\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Retrieves the token allowance given from one address to another\"},\"approve(address,uint256)\":{\"notice\":\"Approves another account to transfer tokens\"},\"balanceOf(address)\":{\"notice\":\"Retrieves the token balance of the specified user\"},\"burn(address,uint256)\":{\"notice\":\"Burn tokens and retrieve underlying LsETH tokens\"},\"decimals()\":{\"notice\":\"Retrieves the token decimal count\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Decrease allowance to another account\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Increase allowance to another account\"},\"initWLSETHV1(address)\":{\"notice\":\"Initializes the wrapped token contract\"},\"mint(address,uint256)\":{\"notice\":\"Mint tokens by providing LsETH tokens\"},\"name()\":{\"notice\":\"Retrieves the token full name\"},\"sharesOf(address)\":{\"notice\":\"Retrieves the raw shares count of the user\"},\"symbol()\":{\"notice\":\"Retrieves the token symbol\"},\"totalSupply()\":{\"notice\":\"Retrieves the token total supply\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers tokens between the message sender and a recipient\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers tokens between two accounts\"}},\"notice\":\"This contract wraps the LsETH token into a rebase token, more suitable for some DeFi use-cases         like stable swaps.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/WLSETH.1.sol\":\"WLSETHV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\n/// @title Initializable\\n/// @author Kiln\\n/// @notice This contract ensures that initializers are called only once per version\\ncontract Initializable {\\n    /// @notice An error occured during the initialization\\n    /// @param version The version that was attempting to be initialized\\n    /// @param expectedVersion The version that was expected\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    /// @notice Emitted when the contract is properly initialized\\n    /// @param version New version of the contracts\\n    /// @param cdata Complete calldata that was used during the initialization\\n    event Initialize(uint256 version, bytes cdata);\\n\\n    /// @notice Use this modifier on initializers along with a hard-coded version number\\n    /// @param _version Version to initialize\\n    modifier init(uint256 _version) {\\n        if (_version != Version.get()) {\\n            revert InvalidInitialization(_version, Version.get());\\n        }\\n        Version.set(_version + 1); // prevents reentrency on the called method\\n        _;\\n        emit Initialize(_version, msg.data);\\n    }\\n}\\n\",\"keccak256\":\"0xc85d24988a02608db50067c5319e3b42eec8e45726045489bdb8ea1f33e1ce67\",\"license\":\"BUSL-1.1\"},\"contracts/src/WLSETH.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\nimport \\\"./interfaces/IWLSETH.1.sol\\\";\\n\\nimport \\\"./Initializable.sol\\\";\\n\\nimport \\\"./state/shared/RiverAddress.sol\\\";\\nimport \\\"./state/shared/ApprovalsPerOwner.sol\\\";\\nimport \\\"./state/wlseth/BalanceOf.sol\\\";\\n\\n/// @title Wrapped LsETH (v1)\\n/// @author Kiln\\n/// @notice This contract wraps the LsETH token into a rebase token, more suitable for some DeFi use-cases\\n///         like stable swaps.\\ncontract WLSETHV1 is IWLSETHV1, Initializable, ReentrancyGuard {\\n    /// @notice Ensures that the value is not 0\\n    /// @param _value Value that must be > 0\\n    modifier isNotNull(uint256 _value) {\\n        if (_value == 0) {\\n            revert NullTransfer();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Ensures that the owner has enough funds\\n    /// @param _owner Owner of the balance to verify\\n    /// @param _value Minimum required value\\n    modifier hasFunds(address _owner, uint256 _value) {\\n        if (_balanceOf(_owner) < _value) {\\n            revert BalanceTooLow();\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function initWLSETHV1(address _river) external init(0) {\\n        RiverAddress.set(_river);\\n        emit SetRiver(_river);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function name() external pure returns (string memory) {\\n        return \\\"Wrapped Liquid Staked ETH\\\";\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function symbol() external pure returns (string memory) {\\n        return \\\"wLsETH\\\";\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function totalSupply() external view returns (uint256) {\\n        return IRiverV1(payable(RiverAddress.get())).balanceOfUnderlying(address(this));\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function balanceOf(address _owner) external view returns (uint256) {\\n        return _balanceOf(_owner);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function sharesOf(address _owner) external view returns (uint256) {\\n        return BalanceOf.get(_owner);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function allowance(address _owner, address _spender) external view returns (uint256) {\\n        return ApprovalsPerOwner.get(_owner, _spender);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function transfer(address _to, uint256 _value)\\n        external\\n        isNotNull(_value)\\n        hasFunds(msg.sender, _value)\\n        returns (bool)\\n    {\\n        if (_to == address(0)) {\\n            revert UnauthorizedTransfer(msg.sender, address(0));\\n        }\\n        return _transfer(msg.sender, _to, _value);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        external\\n        isNotNull(_value)\\n        hasFunds(_from, _value)\\n        returns (bool)\\n    {\\n        if (_to == address(0)) {\\n            revert UnauthorizedTransfer(_from, address(0));\\n        }\\n        _spendAllowance(_from, _value);\\n        return _transfer(_from, _to, _value);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function approve(address _spender, uint256 _value) external returns (bool) {\\n        _approve(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool) {\\n        _approve(msg.sender, _spender, ApprovalsPerOwner.get(msg.sender, _spender) + _additionalValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool) {\\n        _approve(msg.sender, _spender, ApprovalsPerOwner.get(msg.sender, _spender) - _subtractableValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function mint(address _recipient, uint256 _shares) external nonReentrant {\\n        BalanceOf.set(_recipient, BalanceOf.get(_recipient) + _shares);\\n        IRiverV1 river = IRiverV1(payable(RiverAddress.get()));\\n        if (!river.transferFrom(msg.sender, address(this), _shares)) {\\n            revert TokenTransferError();\\n        }\\n        emit Mint(_recipient, _shares);\\n        emit Transfer(address(0), _recipient, river.underlyingBalanceFromShares(_shares));\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function burn(address _recipient, uint256 _shares) external nonReentrant {\\n        uint256 shares = BalanceOf.get(msg.sender);\\n        if (_shares > shares) {\\n            revert BalanceTooLow();\\n        }\\n        BalanceOf.set(msg.sender, shares - _shares);\\n        IRiverV1 river = IRiverV1(payable(RiverAddress.get()));\\n        if (!river.transfer(_recipient, _shares)) {\\n            revert TokenTransferError();\\n        }\\n        emit Transfer(msg.sender, address(0), river.underlyingBalanceFromShares(_shares));\\n        emit Burn(_recipient, _shares);\\n    }\\n\\n    /// @notice Internal utility to spend the allowance of an account from the message sender\\n    /// @param _from Address owning the allowance\\n    /// @param _value Amount of allowance to spend\\n    function _spendAllowance(address _from, uint256 _value) internal {\\n        uint256 currentAllowance = ApprovalsPerOwner.get(_from, msg.sender);\\n        if (currentAllowance < _value) {\\n            revert AllowanceTooLow(_from, msg.sender, currentAllowance, _value);\\n        }\\n        if (currentAllowance != type(uint256).max) {\\n            _approve(_from, msg.sender, currentAllowance - _value);\\n        }\\n    }\\n\\n    /// @notice Internal utility to change the allowance of an owner to a spender\\n    /// @param _owner The owner of the wrapped tokens\\n    /// @param _spender The allowed spender of the wrapped tokens\\n    /// @param _value The new allowance value\\n    function _approve(address _owner, address _spender, uint256 _value) internal {\\n        LibSanitize._notZeroAddress(_owner);\\n        LibSanitize._notZeroAddress(_spender);\\n        ApprovalsPerOwner.set(_owner, _spender, _value);\\n        emit Approval(_owner, _spender, _value);\\n    }\\n\\n    /// @notice Internal utility to retrieve the amount of token per owner\\n    /// @param _owner Account to be checked\\n    /// @return The balance of the account\\n    function _balanceOf(address _owner) internal view returns (uint256) {\\n        return IRiverV1(payable(RiverAddress.get())).underlyingBalanceFromShares(BalanceOf.get(_owner));\\n    }\\n\\n    /// @notice Internal utility to perform an unchecked transfer\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount to be sent\\n    /// @return True if success\\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\\n        uint256 valueToShares = IRiverV1(payable(RiverAddress.get())).sharesFromUnderlyingBalance(_value);\\n        BalanceOf.set(_from, BalanceOf.get(_from) - valueToShares);\\n        BalanceOf.set(_to, BalanceOf.get(_to) + valueToShares);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xfb197c902e5f0382e35cb635593bcefcaed2a40ffcb24972cdc39d0c7eef1317\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRiver.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./components/IConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"./components/IOracleManager.1.sol\\\";\\nimport \\\"./components/ISharesManager.1.sol\\\";\\nimport \\\"./components/IUserDepositManager.1.sol\\\";\\n\\n/// @title River Interface (v1)\\n/// @author Kiln\\n/// @notice The main system interface\\ninterface IRiverV1 is IConsensusLayerDepositManagerV1, IUserDepositManagerV1, ISharesManagerV1, IOracleManagerV1 {\\n    /// @notice Funds have been pulled from the Execution Layer Fee Recipient\\n    /// @param amount The amount pulled\\n    event PulledELFees(uint256 amount);\\n\\n    /// @notice The stored Execution Layer Fee Recipient has been changed\\n    /// @param elFeeRecipient The new Execution Layer Fee Recipient\\n    event SetELFeeRecipient(address indexed elFeeRecipient);\\n\\n    /// @notice The stored Collector has been changed\\n    /// @param collector The new Collector\\n    event SetCollector(address indexed collector);\\n\\n    /// @notice The stored Allowlist has been changed\\n    /// @param allowlist The new Allowlist\\n    event SetAllowlist(address indexed allowlist);\\n\\n    /// @notice The stored Global Fee has been changed\\n    /// @param fee The new Global Fee\\n    event SetGlobalFee(uint256 fee);\\n\\n    /// @notice The stored Operators Registry has been changed\\n    /// @param operatorRegistry The new Operators Registry\\n    event SetOperatorsRegistry(address indexed operatorRegistry);\\n\\n    /// @notice The system underlying supply increased. This is a snapshot of the balances for accounting purposes\\n    /// @param _collector The address of the collector during this event\\n    /// @param _oldTotalUnderlyingBalance Old total ETH balance under management by River\\n    /// @param _oldTotalSupply Old total supply in shares\\n    /// @param _newTotalUnderlyingBalance New total ETH balance under management by River\\n    /// @param _newTotalSupply New total supply in shares\\n    event RewardsEarned(\\n        address indexed _collector,\\n        uint256 _oldTotalUnderlyingBalance,\\n        uint256 _oldTotalSupply,\\n        uint256 _newTotalUnderlyingBalance,\\n        uint256 _newTotalSupply\\n    );\\n\\n    /// @notice The computed amount of shares to mint is 0\\n    error ZeroMintedShares();\\n\\n    /// @notice The access was denied\\n    /// @param account The account that was denied\\n    error Denied(address account);\\n\\n    /// @notice Initializes the River system\\n    /// @param _depositContractAddress Address to make Consensus Layer deposits\\n    /// @param _elFeeRecipientAddress Address that receives the execution layer fees\\n    /// @param _withdrawalCredentials Credentials to use for every validator deposit\\n    /// @param _oracleAddress The address of the Oracle contract\\n    /// @param _systemAdministratorAddress Administrator address\\n    /// @param _allowlistAddress Address of the allowlist contract\\n    /// @param _operatorRegistryAddress Address of the operator registry\\n    /// @param _collectorAddress Address receiving the the global fee on revenue\\n    /// @param _globalFee Amount retained when the ETH balance increases and sent to the collector\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _operatorRegistryAddress,\\n        address _collectorAddress,\\n        uint256 _globalFee\\n    ) external;\\n\\n    /// @notice Get the current global fee\\n    /// @return The global fee\\n    function getGlobalFee() external view returns (uint256);\\n\\n    /// @notice Retrieve the allowlist address\\n    /// @return The allowlist address\\n    function getAllowlist() external view returns (address);\\n\\n    /// @notice Retrieve the collector address\\n    /// @return The collector address\\n    function getCollector() external view returns (address);\\n\\n    /// @notice Retrieve the execution layer fee recipient\\n    /// @return The execution layer fee recipient address\\n    function getELFeeRecipient() external view returns (address);\\n\\n    /// @notice Retrieve the operators registry\\n    /// @return The operators registry address\\n    function getOperatorsRegistry() external view returns (address);\\n\\n    /// @notice Changes the global fee parameter\\n    /// @param newFee New fee value\\n    function setGlobalFee(uint256 newFee) external;\\n\\n    /// @notice Changes the allowlist address\\n    /// @param _newAllowlist New address for the allowlist\\n    function setAllowlist(address _newAllowlist) external;\\n\\n    /// @notice Changes the collector address\\n    /// @param _newCollector New address for the collector\\n    function setCollector(address _newCollector) external;\\n\\n    /// @notice Changes the execution layer fee recipient\\n    /// @param _newELFeeRecipient New address for the recipient\\n    function setELFeeRecipient(address _newELFeeRecipient) external;\\n\\n    /// @notice Input for execution layer fee earnings\\n    function sendELFees() external payable;\\n}\\n\",\"keccak256\":\"0xb49107de594a37139c9cd1d1652eb9f119634d97b2ef60e25325d88b3a34766a\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IWLSETH.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Wrapped LsETH Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to wrap the LsETH token into a rebase token.\\ninterface IWLSETHV1 {\\n    /// @notice A transfer has been made\\n    /// @param from The transfer sender\\n    /// @param to The transfer recipient\\n    /// @param value The amount transfered\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice An approval has been made\\n    /// @param owner The token owner\\n    /// @param spender The account allowed by the owner\\n    /// @param value The amount allowed\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Tokens have been minted\\n    /// @param recipient The account receiving the new tokens\\n    /// @param shares The amount of LsETH provided\\n    event Mint(address indexed recipient, uint256 shares);\\n\\n    /// @notice Tokens have been burned\\n    /// @param recipient The account that receive the underlying LsETH\\n    /// @param shares The amount of LsETH that got sent back\\n    event Burn(address indexed recipient, uint256 shares);\\n\\n    /// @notice The stored value of river has been changed\\n    /// @param river The new address of river\\n    event SetRiver(address indexed river);\\n\\n    /// @notice The token transfer failed during the minting or burning process\\n    error TokenTransferError();\\n\\n    /// @notice Balance too low to perform operation\\n    error BalanceTooLow();\\n\\n    /// @notice Allowance too low to perform operation\\n    /// @param _from Account where funds are sent from\\n    /// @param _operator Account attempting the transfer\\n    /// @param _allowance Current allowance\\n    /// @param _value Requested transfer value\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n\\n    /// @notice Invalid empty transfer\\n    error NullTransfer();\\n\\n    /// @notice Invalid transfer recipients\\n    /// @param _from Account sending the funds in the invalid transfer\\n    /// @param _to Account receiving the funds in the invalid transfer\\n    error UnauthorizedTransfer(address _from, address _to);\\n\\n    /// @notice Initializes the wrapped token contract\\n    /// @param _river Address of the River contract\\n    function initWLSETHV1(address _river) external;\\n\\n    /// @notice Retrieves the token full name\\n    /// @return The name of the token\\n    function name() external pure returns (string memory);\\n\\n    /// @notice Retrieves the token symbol\\n    /// @return The symbol of the token\\n    function symbol() external pure returns (string memory);\\n\\n    /// @notice Retrieves the token decimal count\\n    /// @return The decimal count\\n    function decimals() external pure returns (uint8);\\n\\n    /// @notice Retrieves the token total supply\\n    /// @return The total supply\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Retrieves the token balance of the specified user\\n    /// @param _owner Owner to check the balance\\n    /// @return The balance of the owner\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieves the raw shares count of the user\\n    /// @param _owner Owner to check the shares balance\\n    /// @return The shares of the owner\\n    function sharesOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieves the token allowance given from one address to another\\n    /// @param _owner Owner that gave the allowance\\n    /// @param _spender Spender that received the allowance\\n    /// @return The allowance of the owner to the spender\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    /// @notice Transfers tokens between the message sender and a recipient\\n    /// @param _to Recipient of the transfer\\n    /// @param _value Amount to transfer\\n    /// @return True if success\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Transfers tokens between two accounts\\n    /// @dev It is expected that _from has given at least _value allowance to msg.sender\\n    /// @param _from Sender account\\n    /// @param _to Recipient of the transfer\\n    /// @param _value Amount to transfer\\n    /// @return True if success\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Approves another account to transfer tokens\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _value Amount to allow\\n    /// @return True if success\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    /// @notice Increase allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _additionalValue Amount to add\\n    /// @return True if success\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool);\\n\\n    /// @notice Decrease allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _subtractableValue Amount to subtract\\n    /// @return True if success\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool);\\n\\n    /// @notice Mint tokens by providing LsETH tokens\\n    /// @dev The message sender locks LsETH tokens and received wrapped LsETH tokens in exchange\\n    /// @dev The message sender needs to approve the contract to mint the wrapped tokens\\n    /// @dev The minted wrapped LsETH is sent to the specified recipient\\n    /// @param _recipient The account receiving the new minted wrapped LsETH\\n    /// @param _shares The amount of LsETH to wrap\\n    function mint(address _recipient, uint256 _shares) external;\\n\\n    /// @notice Burn tokens and retrieve underlying LsETH tokens\\n    /// @dev The message sender burns shares from its balance for the LsETH equivalent value\\n    /// @dev The message sender doesn't need to approve the contract to burn the shares\\n    /// @dev The freed LsETH is sent to the specified recipient\\n    /// @param _recipient The account receiving the underlying LsETH tokens after shares are burned\\n    /// @param _shares Amount of LsETH to free by burning wrapped LsETH\\n    function burn(address _recipient, uint256 _shares) external;\\n}\\n\",\"keccak256\":\"0xba6c6746790cbdcecb28fdaebd51477f88564a9d8e05a456ec87ac6974700ee5\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IConsensusLayerDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Consensys Layer Deposit Manager Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the interactions with the official deposit contract\\ninterface IConsensusLayerDepositManagerV1 {\\n    /// @notice A validator key got funded on the deposit contract\\n    /// @param publicKey BLS Public key that got funded\\n    event FundedValidatorKey(bytes publicKey);\\n\\n    /// @notice The stored deposit contract address changed\\n    /// @param depositContract Address of the deposit contract\\n    event SetDepositContractAddress(address indexed depositContract);\\n\\n    /// @notice The stored withdrawal credentials changed\\n    /// @param withdrawalCredentials The withdrawal credentials to use for deposits\\n    event SetWithdrawalCredentials(bytes32 withdrawalCredentials);\\n\\n    /// @notice Not enough funds to deposit one validator\\n    error NotEnoughFunds();\\n\\n    /// @notice The length of the BLS Public key is invalid during deposit\\n    error InconsistentPublicKeys();\\n\\n    /// @notice The length of the BLS Signature is invalid during deposit\\n    error InconsistentSignatures();\\n\\n    /// @notice The internal key retrieval returned no keys\\n    error NoAvailableValidatorKeys();\\n\\n    /// @notice The received count of public keys to deposit is invalid\\n    error InvalidPublicKeyCount();\\n\\n    /// @notice The received count of signatures to deposit is invalid\\n    error InvalidSignatureCount();\\n\\n    /// @notice The withdrawal credentials value is null\\n    error InvalidWithdrawalCredentials();\\n\\n    /// @notice An error occured during the deposit\\n    error ErrorOnDeposit();\\n\\n    /// @notice Returns the amount of pending ETH\\n    /// @return The amount of pending ETH\\n    function getBalanceToDeposit() external view returns (uint256);\\n\\n    /// @notice Retrieve the withdrawal credentials\\n    /// @return The withdrawal credentials\\n    function getWithdrawalCredentials() external view returns (bytes32);\\n\\n    /// @notice Get the deposited validator count (the count of deposits made by the contract)\\n    /// @return The deposited validator count\\n    function getDepositedValidatorCount() external view returns (uint256);\\n\\n    /// @notice Deposits current balance to the Consensus Layer by batches of 32 ETH\\n    /// @param _maxCount The maximum amount of validator keys to fund\\n    function depositToConsensusLayer(uint256 _maxCount) external;\\n}\\n\",\"keccak256\":\"0x2215d3054ece419e846f376e7624094b5ce24b3c72be745a4b5aa4e756c4cb42\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IOracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Oracle Manager (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the inputs provided by the oracle\\ninterface IOracleManagerV1 {\\n    /// @notice The stored oracle address changed\\n    /// @param oracleAddress The new oracle address\\n    event SetOracle(address indexed oracleAddress);\\n\\n    /// @notice The consensus layer data provided by the oracle has been updated\\n    /// @param validatorCount The new count of validators running on the consensus layer\\n    /// @param validatorTotalBalance The new total balance sum of all validators\\n    /// @param roundId Round identifier\\n    event ConsensusLayerDataUpdate(uint256 validatorCount, uint256 validatorTotalBalance, bytes32 roundId);\\n\\n    /// @notice The reported validator count is invalid\\n    /// @param providedValidatorCount The received validator count value\\n    /// @param depositedValidatorCount The number of deposits performed by the system\\n    error InvalidValidatorCountReport(uint256 providedValidatorCount, uint256 depositedValidatorCount);\\n\\n    /// @notice Get oracle address\\n    /// @return The oracle address\\n    function getOracle() external view returns (address);\\n\\n    /// @notice Get CL validator total balance\\n    /// @return The CL Validator total balance\\n    function getCLValidatorTotalBalance() external view returns (uint256);\\n\\n    /// @notice Get CL validator count (the amount of validator reported by the oracles)\\n    /// @return The CL validator count\\n    function getCLValidatorCount() external view returns (uint256);\\n\\n    /// @notice Set the oracle address\\n    /// @param _oracleAddress Address of the oracle\\n    function setOracle(address _oracleAddress) external;\\n\\n    /// @notice Sets the validator count and validator total balance sum reported by the oracle\\n    /// @dev Can only be called by the oracle address\\n    /// @dev The round id is a blackbox value that should only be used to identify unique reports\\n    /// @dev When a report is performed, River computes the amount of fees that can be pulled\\n    /// @dev from the execution layer fee recipient. This amount is capped by the max allowed\\n    /// @dev increase provided during the report.\\n    /// @dev If the total asset balance increases (from the reported total balance and the pulled funds)\\n    /// @dev we then compute the share that must be taken for the collector on the positive delta.\\n    /// @dev The execution layer fees are taken into account here because they are the product of\\n    /// @dev node operator's work, just like consensus layer fees, and both should be handled in the\\n    /// @dev same manner, as a single revenue stream for the users and the collector.\\n    /// @param _validatorCount The number of active validators on the consensus layer\\n    /// @param _validatorTotalBalance The balance sum of the active validators on the consensus layer\\n    /// @param _roundId An identifier for this update\\n    /// @param _maxIncrease The maximum allowed increase in the total balance\\n    function setConsensusLayerData(\\n        uint256 _validatorCount,\\n        uint256 _validatorTotalBalance,\\n        bytes32 _roundId,\\n        uint256 _maxIncrease\\n    ) external;\\n}\\n\",\"keccak256\":\"0x088ff39852e3000fbe31c62da75c41bba38aaf2f2d66f99ba698835b840ef6bc\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/ISharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Shares Manager Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the shares of the depositor and the ERC20 interface\\ninterface ISharesManagerV1 is IERC20 {\\n    /// @notice Balance too low to perform operation\\n    error BalanceTooLow();\\n\\n    /// @notice Allowance too low to perform operation\\n    /// @param _from Account where funds are sent from\\n    /// @param _operator Account attempting the transfer\\n    /// @param _allowance Current allowance\\n    /// @param _value Requested transfer value in shares\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n\\n    /// @notice Invalid empty transfer\\n    error NullTransfer();\\n\\n    /// @notice Invalid transfer recipients\\n    /// @param _from Account sending the funds in the invalid transfer\\n    /// @param _to Account receiving the funds in the invalid transfer\\n    error UnauthorizedTransfer(address _from, address _to);\\n\\n    /// @notice Retrieve the token name\\n    /// @return The token name\\n    function name() external pure returns (string memory);\\n\\n    /// @notice Retrieve the token symbol\\n    /// @return The token symbol\\n    function symbol() external pure returns (string memory);\\n\\n    /// @notice Retrieve the decimal count\\n    /// @return The decimal count\\n    function decimals() external pure returns (uint8);\\n\\n    /// @notice Retrieve the total token supply\\n    /// @return The total supply in shares\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the total underlying asset supply\\n    /// @return The total underlying asset supply\\n    function totalUnderlyingSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The balance of the account in shares\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The underlying balance of the account\\n    function balanceOfUnderlying(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance from an amount of shares\\n    /// @param _shares Amount of shares to convert\\n    /// @return The underlying asset balance represented by the shares\\n    function underlyingBalanceFromShares(uint256 _shares) external view returns (uint256);\\n\\n    /// @notice Retrieve the shares count from an underlying asset amount\\n    /// @param _underlyingAssetAmount Amount of underlying asset to convert\\n    /// @return The amount of shares worth the underlying asset amopunt\\n    function sharesFromUnderlyingBalance(uint256 _underlyingAssetAmount) external view returns (uint256);\\n\\n    /// @notice Retrieve the allowance value for a spender\\n    /// @param _owner Address that issued the allowance\\n    /// @param _spender Address that received the allowance\\n    /// @return The allowance in shares for a given spender\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    /// @notice Performs a transfer from the message sender to the provided account\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Performs a transfer between two recipients\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Approves an account for future spendings\\n    /// @dev An approved account can use transferFrom to transfer funds on behalf of the token owner\\n    /// @param _spender Address that is allowed to spend the tokens\\n    /// @param _value The allowed amount in shares, will override previous value\\n    /// @return True if success\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    /// @notice Increase allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _additionalValue Amount of shares to add\\n    /// @return True if success\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool);\\n\\n    /// @notice Decrease allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _subtractableValue Amount of shares to subtract\\n    /// @return True if success\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool);\\n}\\n\",\"keccak256\":\"0x947debdcf17b72c13c3ca1a840795ed935bde5d4f345e52fa1bed1895212da66\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IUserDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title User Deposit Manager (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the inbound transfers cases or the explicit submissions\\ninterface IUserDepositManagerV1 {\\n    /// @notice User deposited ETH in the system\\n    /// @param depositor Address performing the deposit\\n    /// @param recipient Address receiving the minted shares\\n    /// @param amount Amount in ETH deposited\\n    event UserDeposit(address indexed depositor, address indexed recipient, uint256 amount);\\n\\n    /// @notice And empty deposit attempt was made\\n    error EmptyDeposit();\\n\\n    /// @notice Explicit deposit method to mint on msg.sender\\n    function deposit() external payable;\\n\\n    /// @notice Explicit deposit method to mint on msg.sender and transfer to _recipient\\n    /// @param _recipient Address receiving the minted LsETH\\n    function depositAndTransfer(address _recipient) external payable;\\n\\n    /// @notice Implicit deposit method, when the user performs a regular transfer to the contract\\n    receive() external payable;\\n\\n    /// @notice Invalid call, when the user sends a transaction with a data payload but no method matched\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x1abcda34431bfbb82b6ede5c852f4ece6544cca24616f58cb44ed340df0ef06b\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibBasisPoints.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Lib Basis Points\\n/// @notice Holds the basis points max value\\nlibrary LibBasisPoints {\\n    /// @notice The max value for basis points (represents 100%)\\n    uint256 internal constant BASIS_POINTS_MAX = 10_000;\\n}\\n\",\"keccak256\":\"0x97228a01dcd48f033555e3a44f9be37fb474a1b027f703f28097d539808f1c6c\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibErrors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Errors\\n/// @notice Library of common errors\\nlibrary LibErrors {\\n    /// @notice The operator is unauthorized for the caller\\n    /// @param caller Address performing the call\\n    error Unauthorized(address caller);\\n\\n    /// @notice The call was invalid\\n    error InvalidCall();\\n\\n    /// @notice The argument was invalid\\n    error InvalidArgument();\\n\\n    /// @notice The address is zero\\n    error InvalidZeroAddress();\\n\\n    /// @notice The string is empty\\n    error InvalidEmptyString();\\n\\n    /// @notice The fee is invalid\\n    error InvalidFee();\\n}\\n\",\"keccak256\":\"0x7bdbd4ada124723fa08e2088405ba0bf4453beb23d84f4af09e894e06e751f33\",\"license\":\"MIT\"},\"contracts/src/libraries/LibSanitize.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./LibErrors.sol\\\";\\nimport \\\"./LibBasisPoints.sol\\\";\\n\\n/// @title Lib Sanitize\\n/// @notice Utilities to sanitize input values\\nlibrary LibSanitize {\\n    /// @notice Reverts if address is 0\\n    /// @param _address Address to check\\n    function _notZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert LibErrors.InvalidZeroAddress();\\n        }\\n    }\\n\\n    /// @notice Reverts if string is empty\\n    /// @param _string String to check\\n    function _notEmptyString(string memory _string) internal pure {\\n        if (bytes(_string).length == 0) {\\n            revert LibErrors.InvalidEmptyString();\\n        }\\n    }\\n\\n    /// @notice Reverts if fee is invalid\\n    /// @param _fee Fee to check\\n    function _validFee(uint256 _fee) internal pure {\\n        if (_fee > LibBasisPoints.BASIS_POINTS_MAX) {\\n            revert LibErrors.InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8aeeb866c4657a96c8b4c006340c7996d15a6f0044b730c276bc3ba8d5bcd48\",\"license\":\"MIT\"},\"contracts/src/libraries/LibUnstructuredStorage.sol\":{\"content\":\"// SPDX-License-Identifier:    MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @title Lib Unstructured Storage\\n/// @notice Utilities to work with unstructured storage\\nlibrary LibUnstructuredStorage {\\n    /// @notice Retrieve a bool value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bool value\\n    function getStorageBool(bytes32 _position) internal view returns (bool data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an address value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The address value\\n    function getStorageAddress(bytes32 _position) internal view returns (address data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve a bytes32 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bytes32 value\\n    function getStorageBytes32(bytes32 _position) internal view returns (bytes32 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an uint256 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The uint256 value\\n    function getStorageUint256(bytes32 _position) internal view returns (uint256 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Sets a bool value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bool value to set\\n    function setStorageBool(bytes32 _position, bool _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an address value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The address value to set\\n    function setStorageAddress(bytes32 _position, address _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets a bytes32 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bytes32 value to set\\n    function setStorageBytes32(bytes32 _position, bytes32 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an uint256 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The uint256 value to set\\n    function setStorageUint256(bytes32 _position, uint256 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8e1a2f0dc18e023e12747355b3c95258d4de698f2bb6196222a1dc92940caa3\",\"license\":\"MIT\"},\"contracts/src/state/shared/ApprovalsPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Approvals Per Owner Storage\\n/// @notice Utility to manage the Approvals Per Owner in storage\\nlibrary ApprovalsPerOwner {\\n    /// @notice Storage slot of the Approvals Per Owner\\n    bytes32 internal constant APPROVALS_PER_OWNER_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.approvalsPerOwner\\\")) - 1);\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from an owner to an operator to the approval amount\\n        mapping(address => mapping(address => uint256)) value;\\n    }\\n\\n    /// @notice Retrieve the approval for an owner to an operator\\n    /// @param _owner The account that gave the approval\\n    /// @param _operator The account receiving the approval\\n    /// @return The value of the approval\\n    function get(address _owner, address _operator) internal view returns (uint256) {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_owner][_operator];\\n    }\\n\\n    /// @notice Set the approval value for an owner to an operator\\n    /// @param _owner The account that gives the approval\\n    /// @param _operator The account receiving the approval\\n    /// @param _newValue The value of the approval\\n    function set(address _owner, address _operator, uint256 _newValue) internal {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_owner][_operator] = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0xc8ec39447b09747e3cfff1c456743b4f52fafbd994122ebf8285035fc497c95c\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/RiverAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title River Address Storage\\n/// @notice Utility to manage the River Address in storage\\nlibrary RiverAddress {\\n    /// @notice Storage slot of the River Address\\n    bytes32 internal constant RIVER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.riverAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the River Address\\n    /// @return The River Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(RIVER_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the River Address\\n    /// @param _newValue New River Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(RIVER_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xffc846d2e04891e3b0625a9e710fa2a18b4e1af43609f0d76d6c3b7bf5c51384\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Version Storage\\n/// @notice Utility to manage the Version in storage\\nlibrary Version {\\n    /// @notice Storage slot of the Version\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    /// @notice Retrieve the Version\\n    /// @return The Version\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    /// @notice Sets the Version\\n    /// @param _newValue New Version\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(VERSION_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x82f1cc4bbb1f16c1cdbac93596334805eb1a2e0e40ccbd0ab0f78e22d3f83864\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/wlseth/BalanceOf.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Balance Storage\\n/// @notice Utility to manage the Balance in storage\\nlibrary BalanceOf {\\n    /// @notice Storage slot of the Balance\\n    bytes32 internal constant BALANCE_OF_SLOT = bytes32(uint256(keccak256(\\\"river.state.balanceOf\\\")) - 1);\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from an owner to its balance\\n        mapping(address => uint256) value;\\n    }\\n\\n    /// @notice Retrieve balance of an owner\\n    /// @param _owner The owner of the balance\\n    /// @return The balance of the owner\\n    function get(address _owner) internal view returns (uint256) {\\n        bytes32 slot = BALANCE_OF_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_owner];\\n    }\\n\\n    /// @notice Set the balance of an owner\\n    /// @param _owner The owner to change the balance of\\n    /// @param _newValue New balance value for the owner\\n    function set(address _owner, uint256 _newValue) internal {\\n        bytes32 slot = BALANCE_OF_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_owner] = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0xf52be4ba5ff038027e2514501d3e67fa8a00e9001fa48ccba4013815fd17e341\",\"license\":\"BUSL-1.1\"},\"openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}"
        ],
        "bytecode": [
            "",
            ""
        ],
        "deployedBytecode": [
            "",
            ""
        ],
        "devdoc": [
            {
                "author": "Kiln",
                "errors": {
                    "AllowanceTooLow(address,address,uint256,uint256)": [
                        {
                            "params": {
                                "_allowance": "Current allowance",
                                "_from": "Account where funds are sent from",
                                "_operator": "Account attempting the transfer",
                                "_value": "Requested transfer value"
                            }
                        }
                    ],
                    "InvalidInitialization(uint256,uint256)": [
                        {
                            "params": {
                                "expectedVersion": "The version that was expected",
                                "version": "The version that was attempting to be initialized"
                            }
                        }
                    ],
                    "UnauthorizedTransfer(address,address)": [
                        {
                            "params": {
                                "_from": "Account sending the funds in the invalid transfer",
                                "_to": "Account receiving the funds in the invalid transfer"
                            }
                        }
                    ]
                },
                "kind": "dev",
                "methods": {
                    "allowance(address,address)": {
                        "params": {
                            "_owner": "Owner that gave the allowance",
                            "_spender": "Spender that received the allowance"
                        },
                        "returns": {
                            "_0": "The allowance of the owner to the spender"
                        }
                    },
                    "approve(address,uint256)": {
                        "params": {
                            "_spender": "Spender that receives the allowance",
                            "_value": "Amount to allow"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "balanceOf(address)": {
                        "params": {
                            "_owner": "Owner to check the balance"
                        },
                        "returns": {
                            "_0": "The balance of the owner"
                        }
                    },
                    "burn(address,uint256)": {
                        "details": "The message sender burns shares from its balance for the LsETH equivalent valueThe message sender doesn't need to approve the contract to burn the sharesThe freed LsETH is sent to the specified recipient",
                        "params": {
                            "_recipient": "The account receiving the underlying LsETH tokens after shares are burned",
                            "_shares": "Amount of LsETH to free by burning wrapped LsETH"
                        }
                    },
                    "decimals()": {
                        "returns": {
                            "_0": "The decimal count"
                        }
                    },
                    "decreaseAllowance(address,uint256)": {
                        "params": {
                            "_spender": "Spender that receives the allowance",
                            "_subtractableValue": "Amount to subtract"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "increaseAllowance(address,uint256)": {
                        "params": {
                            "_additionalValue": "Amount to add",
                            "_spender": "Spender that receives the allowance"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "initWLSETHV1(address)": {
                        "params": {
                            "_river": "Address of the River contract"
                        }
                    },
                    "mint(address,uint256)": {
                        "details": "The message sender locks LsETH tokens and received wrapped LsETH tokens in exchangeThe message sender needs to approve the contract to mint the wrapped tokensThe minted wrapped LsETH is sent to the specified recipient",
                        "params": {
                            "_recipient": "The account receiving the new minted wrapped LsETH",
                            "_shares": "The amount of LsETH to wrap"
                        }
                    },
                    "name()": {
                        "returns": {
                            "_0": "The name of the token"
                        }
                    },
                    "sharesOf(address)": {
                        "params": {
                            "_owner": "Owner to check the shares balance"
                        },
                        "returns": {
                            "_0": "The shares of the owner"
                        }
                    },
                    "symbol()": {
                        "returns": {
                            "_0": "The symbol of the token"
                        }
                    },
                    "totalSupply()": {
                        "returns": {
                            "_0": "The total supply"
                        }
                    },
                    "transfer(address,uint256)": {
                        "params": {
                            "_to": "Recipient of the transfer",
                            "_value": "Amount to transfer"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "transferFrom(address,address,uint256)": {
                        "details": "It is expected that _from has given at least _value allowance to msg.sender",
                        "params": {
                            "_from": "Sender account",
                            "_to": "Recipient of the transfer",
                            "_value": "Amount to transfer"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    }
                },
                "title": "Wrapped LsETH (v1)",
                "version": 1
            },
            {
                "author": "Kiln",
                "errors": {
                    "AllowanceTooLow(address,address,uint256,uint256)": [
                        {
                            "params": {
                                "_allowance": "Current allowance",
                                "_from": "Account where funds are sent from",
                                "_operator": "Account attempting the transfer",
                                "_value": "Requested transfer value"
                            }
                        }
                    ],
                    "InvalidInitialization(uint256,uint256)": [
                        {
                            "params": {
                                "expectedVersion": "The version that was expected",
                                "version": "The version that was attempting to be initialized"
                            }
                        }
                    ],
                    "UnauthorizedTransfer(address,address)": [
                        {
                            "params": {
                                "_from": "Account sending the funds in the invalid transfer",
                                "_to": "Account receiving the funds in the invalid transfer"
                            }
                        }
                    ]
                },
                "kind": "dev",
                "methods": {
                    "allowance(address,address)": {
                        "params": {
                            "_owner": "Owner that gave the allowance",
                            "_spender": "Spender that received the allowance"
                        },
                        "returns": {
                            "_0": "The allowance of the owner to the spender"
                        }
                    },
                    "approve(address,uint256)": {
                        "params": {
                            "_spender": "Spender that receives the allowance",
                            "_value": "Amount to allow"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "balanceOf(address)": {
                        "params": {
                            "_owner": "Owner to check the balance"
                        },
                        "returns": {
                            "_0": "The balance of the owner"
                        }
                    },
                    "burn(address,uint256)": {
                        "details": "The message sender burns shares from its balance for the LsETH equivalent valueThe message sender doesn't need to approve the contract to burn the sharesThe freed LsETH is sent to the specified recipient",
                        "params": {
                            "_recipient": "The account receiving the underlying LsETH tokens after shares are burned",
                            "_shares": "Amount of LsETH to free by burning wrapped LsETH"
                        }
                    },
                    "decimals()": {
                        "returns": {
                            "_0": "The decimal count"
                        }
                    },
                    "decreaseAllowance(address,uint256)": {
                        "params": {
                            "_spender": "Spender that receives the allowance",
                            "_subtractableValue": "Amount to subtract"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "increaseAllowance(address,uint256)": {
                        "params": {
                            "_additionalValue": "Amount to add",
                            "_spender": "Spender that receives the allowance"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "initWLSETHV1(address)": {
                        "params": {
                            "_river": "Address of the River contract"
                        }
                    },
                    "mint(address,uint256)": {
                        "details": "The message sender locks LsETH tokens and received wrapped LsETH tokens in exchangeThe message sender needs to approve the contract to mint the wrapped tokensThe minted wrapped LsETH is sent to the specified recipient",
                        "params": {
                            "_recipient": "The account receiving the new minted wrapped LsETH",
                            "_shares": "The amount of LsETH to wrap"
                        }
                    },
                    "name()": {
                        "returns": {
                            "_0": "The name of the token"
                        }
                    },
                    "sharesOf(address)": {
                        "params": {
                            "_owner": "Owner to check the shares balance"
                        },
                        "returns": {
                            "_0": "The shares of the owner"
                        }
                    },
                    "symbol()": {
                        "returns": {
                            "_0": "The symbol of the token"
                        }
                    },
                    "totalSupply()": {
                        "returns": {
                            "_0": "The total supply"
                        }
                    },
                    "transfer(address,uint256)": {
                        "params": {
                            "_to": "Recipient of the transfer",
                            "_value": "Amount to transfer"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    },
                    "transferFrom(address,address,uint256)": {
                        "details": "It is expected that _from has given at least _value allowance to msg.sender",
                        "params": {
                            "_from": "Sender account",
                            "_to": "Recipient of the transfer",
                            "_value": "Amount to transfer"
                        },
                        "returns": {
                            "_0": "True if success"
                        }
                    }
                },
                "title": "Wrapped LsETH (v1)",
                "version": 1
            }
        ],
        "userdoc": [
            {
                "errors": {
                    "AllowanceTooLow(address,address,uint256,uint256)": [
                        {
                            "notice": "Allowance too low to perform operation"
                        }
                    ],
                    "BalanceTooLow()": [
                        {
                            "notice": "Balance too low to perform operation"
                        }
                    ],
                    "InvalidInitialization(uint256,uint256)": [
                        {
                            "notice": "An error occured during the initialization"
                        }
                    ],
                    "InvalidZeroAddress()": [
                        {
                            "notice": "The address is zero"
                        }
                    ],
                    "NullTransfer()": [
                        {
                            "notice": "Invalid empty transfer"
                        }
                    ],
                    "TokenTransferError()": [
                        {
                            "notice": "The token transfer failed during the minting or burning process"
                        }
                    ],
                    "UnauthorizedTransfer(address,address)": [
                        {
                            "notice": "Invalid transfer recipients"
                        }
                    ]
                },
                "events": {
                    "Approval(address,address,uint256)": {
                        "notice": "An approval has been made"
                    },
                    "Burn(address,uint256)": {
                        "notice": "Tokens have been burned"
                    },
                    "Initialize(uint256,bytes)": {
                        "notice": "Emitted when the contract is properly initialized"
                    },
                    "Mint(address,uint256)": {
                        "notice": "Tokens have been minted"
                    },
                    "SetRiver(address)": {
                        "notice": "The stored value of river has been changed"
                    },
                    "Transfer(address,address,uint256)": {
                        "notice": "A transfer has been made"
                    }
                },
                "kind": "user",
                "methods": {
                    "allowance(address,address)": {
                        "notice": "Retrieves the token allowance given from one address to another"
                    },
                    "approve(address,uint256)": {
                        "notice": "Approves another account to transfer tokens"
                    },
                    "balanceOf(address)": {
                        "notice": "Retrieves the token balance of the specified user"
                    },
                    "burn(address,uint256)": {
                        "notice": "Burn tokens and retrieve underlying LsETH tokens"
                    },
                    "decimals()": {
                        "notice": "Retrieves the token decimal count"
                    },
                    "decreaseAllowance(address,uint256)": {
                        "notice": "Decrease allowance to another account"
                    },
                    "increaseAllowance(address,uint256)": {
                        "notice": "Increase allowance to another account"
                    },
                    "initWLSETHV1(address)": {
                        "notice": "Initializes the wrapped token contract"
                    },
                    "mint(address,uint256)": {
                        "notice": "Mint tokens by providing LsETH tokens"
                    },
                    "name()": {
                        "notice": "Retrieves the token full name"
                    },
                    "sharesOf(address)": {
                        "notice": "Retrieves the raw shares count of the user"
                    },
                    "symbol()": {
                        "notice": "Retrieves the token symbol"
                    },
                    "totalSupply()": {
                        "notice": "Retrieves the token total supply"
                    },
                    "transfer(address,uint256)": {
                        "notice": "Transfers tokens between the message sender and a recipient"
                    },
                    "transferFrom(address,address,uint256)": {
                        "notice": "Transfers tokens between two accounts"
                    }
                },
                "notice": "This contract wraps the LsETH token into a rebase token, more suitable for some DeFi use-cases         like stable swaps.",
                "version": 1
            },
            {
                "errors": {
                    "AllowanceTooLow(address,address,uint256,uint256)": [
                        {
                            "notice": "Allowance too low to perform operation"
                        }
                    ],
                    "BalanceTooLow()": [
                        {
                            "notice": "Balance too low to perform operation"
                        }
                    ],
                    "InvalidInitialization(uint256,uint256)": [
                        {
                            "notice": "An error occured during the initialization"
                        }
                    ],
                    "InvalidZeroAddress()": [
                        {
                            "notice": "The address is zero"
                        }
                    ],
                    "NullTransfer()": [
                        {
                            "notice": "Invalid empty transfer"
                        }
                    ],
                    "TokenTransferError()": [
                        {
                            "notice": "The token transfer failed during the minting or burning process"
                        }
                    ],
                    "UnauthorizedTransfer(address,address)": [
                        {
                            "notice": "Invalid transfer recipients"
                        }
                    ]
                },
                "events": {
                    "Approval(address,address,uint256)": {
                        "notice": "An approval has been made"
                    },
                    "Burn(address,uint256)": {
                        "notice": "Tokens have been burned"
                    },
                    "Initialize(uint256,bytes)": {
                        "notice": "Emitted when the contract is properly initialized"
                    },
                    "Mint(address,uint256)": {
                        "notice": "Tokens have been minted"
                    },
                    "SetRiver(address)": {
                        "notice": "The stored value of river has been changed"
                    },
                    "Transfer(address,address,uint256)": {
                        "notice": "A transfer has been made"
                    }
                },
                "kind": "user",
                "methods": {
                    "allowance(address,address)": {
                        "notice": "Retrieves the token allowance given from one address to another"
                    },
                    "approve(address,uint256)": {
                        "notice": "Approves another account to transfer tokens"
                    },
                    "balanceOf(address)": {
                        "notice": "Retrieves the token balance of the specified user"
                    },
                    "burn(address,uint256)": {
                        "notice": "Burn tokens and retrieve underlying LsETH tokens"
                    },
                    "decimals()": {
                        "notice": "Retrieves the token decimal count"
                    },
                    "decreaseAllowance(address,uint256)": {
                        "notice": "Decrease allowance to another account"
                    },
                    "increaseAllowance(address,uint256)": {
                        "notice": "Increase allowance to another account"
                    },
                    "initWLSETHV1(address)": {
                        "notice": "Initializes the wrapped token contract"
                    },
                    "mint(address,uint256)": {
                        "notice": "Mint tokens by providing LsETH tokens"
                    },
                    "name()": {
                        "notice": "Retrieves the token full name"
                    },
                    "sharesOf(address)": {
                        "notice": "Retrieves the raw shares count of the user"
                    },
                    "symbol()": {
                        "notice": "Retrieves the token symbol"
                    },
                    "totalSupply()": {
                        "notice": "Retrieves the token total supply"
                    },
                    "transfer(address,uint256)": {
                        "notice": "Transfers tokens between the message sender and a recipient"
                    },
                    "transferFrom(address,address,uint256)": {
                        "notice": "Transfers tokens between two accounts"
                    }
                },
                "notice": "This contract wraps the LsETH token into a rebase token, more suitable for some DeFi use-cases         like stable swaps.",
                "version": 1
            }
        ],
        "storageLayout": [
            {
                "storage": [
                    {
                        "astId": 11050,
                        "contract": "contracts/src/WLSETH.1.sol:WLSETHV1",
                        "label": "_status",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    }
                ],
                "types": {
                    "t_uint256": {
                        "encoding": "inplace",
                        "label": "uint256",
                        "numberOfBytes": "32"
                    }
                }
            },
            {
                "storage": [
                    {
                        "astId": 10892,
                        "contract": "contracts/src/WLSETH.1.sol:WLSETHV1",
                        "label": "_status",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    }
                ],
                "types": {
                    "t_uint256": {
                        "encoding": "inplace",
                        "label": "uint256",
                        "numberOfBytes": "32"
                    }
                }
            }
        ]
    }
}