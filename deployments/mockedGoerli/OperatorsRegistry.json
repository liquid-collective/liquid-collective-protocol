{
    "address": "0xcd5820D0C8e4B65dE50eEB4d823a6a26437ABb63",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "InactiveOperator",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidArgument",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidArrayLengths",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidEmptyArray",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidEmptyString",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidFundedKeyDeletionAttempt",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidIndexOutOfBounds",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "version",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "expectedVersion",
                    "type": "uint256"
                }
            ],
            "name": "InvalidInitialization",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidKeyCount",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidKeysLength",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidUnsortedIndexes",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidZeroAddress",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "limit",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "keyCount",
                    "type": "uint256"
                }
            ],
            "name": "OperatorLimitTooHigh",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "limit",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "fundedKeyCount",
                    "type": "uint256"
                }
            ],
            "name": "OperatorLimitTooLow",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "OperatorNotFound",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "SliceOutOfBounds",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "SliceOverflow",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "caller",
                    "type": "address"
                }
            ],
            "name": "Unauthorized",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "UnorderedOperatorList",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "string",
                    "name": "name",
                    "type": "string"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "operatorAddress",
                    "type": "address"
                }
            ],
            "name": "AddedOperator",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "bytes",
                    "name": "publicKeysAndSignatures",
                    "type": "bytes"
                }
            ],
            "name": "AddedValidatorKeys",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "version",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "bytes",
                    "name": "cdata",
                    "type": "bytes"
                }
            ],
            "name": "Initialize",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "currentLimit",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "newLimit",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "latestKeysEditBlockNumber",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "snapshotBlock",
                    "type": "uint256"
                }
            ],
            "name": "OperatorEditsAfterSnapshot",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "limit",
                    "type": "uint256"
                }
            ],
            "name": "OperatorLimitUnchanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "bytes",
                    "name": "publicKey",
                    "type": "bytes"
                }
            ],
            "name": "RemovedValidatorKey",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "SetAdmin",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newOperatorAddress",
                    "type": "address"
                }
            ],
            "name": "SetOperatorAddress",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "newLimit",
                    "type": "uint256"
                }
            ],
            "name": "SetOperatorLimit",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "string",
                    "name": "newName",
                    "type": "string"
                }
            ],
            "name": "SetOperatorName",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "bool",
                    "name": "active",
                    "type": "bool"
                }
            ],
            "name": "SetOperatorStatus",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "newStoppedValidatorCount",
                    "type": "uint256"
                }
            ],
            "name": "SetOperatorStoppedValidatorCount",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "pendingAdmin",
                    "type": "address"
                }
            ],
            "name": "SetPendingAdmin",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "river",
                    "type": "address"
                }
            ],
            "name": "SetRiver",
            "type": "event"
        },
        {
            "inputs": [],
            "name": "acceptAdmin",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "string",
                    "name": "_name",
                    "type": "string"
                },
                {
                    "internalType": "address",
                    "name": "_operator",
                    "type": "address"
                }
            ],
            "name": "addOperator",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_index",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_keyCount",
                    "type": "uint256"
                },
                {
                    "internalType": "bytes",
                    "name": "_publicKeysAndSignatures",
                    "type": "bytes"
                }
            ],
            "name": "addValidators",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getAdmin",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_index",
                    "type": "uint256"
                }
            ],
            "name": "getOperator",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "bool",
                            "name": "active",
                            "type": "bool"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "internalType": "address",
                            "name": "operator",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "limit",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "funded",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "keys",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "stopped",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "latestKeysEditBlockNumber",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct Operators.Operator",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOperatorCount",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPendingAdmin",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getRiver",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_operatorIndex",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_validatorIndex",
                    "type": "uint256"
                }
            ],
            "name": "getValidator",
            "outputs": [
                {
                    "internalType": "bytes",
                    "name": "publicKey",
                    "type": "bytes"
                },
                {
                    "internalType": "bytes",
                    "name": "signature",
                    "type": "bytes"
                },
                {
                    "internalType": "bool",
                    "name": "funded",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_admin",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_river",
                    "type": "address"
                }
            ],
            "name": "initOperatorsRegistryV1",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "listActiveOperators",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "bool",
                            "name": "active",
                            "type": "bool"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "internalType": "address",
                            "name": "operator",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "limit",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "funded",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "keys",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "stopped",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "latestKeysEditBlockNumber",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct Operators.Operator[]",
                    "name": "",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_count",
                    "type": "uint256"
                }
            ],
            "name": "pickNextValidators",
            "outputs": [
                {
                    "internalType": "bytes[]",
                    "name": "publicKeys",
                    "type": "bytes[]"
                },
                {
                    "internalType": "bytes[]",
                    "name": "signatures",
                    "type": "bytes[]"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_newAdmin",
                    "type": "address"
                }
            ],
            "name": "proposeAdmin",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_index",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256[]",
                    "name": "_indexes",
                    "type": "uint256[]"
                }
            ],
            "name": "removeValidators",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_index",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_newOperatorAddress",
                    "type": "address"
                }
            ],
            "name": "setOperatorAddress",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256[]",
                    "name": "_operatorIndexes",
                    "type": "uint256[]"
                },
                {
                    "internalType": "uint256[]",
                    "name": "_newLimits",
                    "type": "uint256[]"
                },
                {
                    "internalType": "uint256",
                    "name": "_snapshotBlock",
                    "type": "uint256"
                }
            ],
            "name": "setOperatorLimits",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_index",
                    "type": "uint256"
                },
                {
                    "internalType": "string",
                    "name": "_newName",
                    "type": "string"
                }
            ],
            "name": "setOperatorName",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_index",
                    "type": "uint256"
                },
                {
                    "internalType": "bool",
                    "name": "_newStatus",
                    "type": "bool"
                }
            ],
            "name": "setOperatorStatus",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_index",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_newStoppedValidatorCount",
                    "type": "uint256"
                }
            ],
            "name": "setOperatorStoppedValidatorCount",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_logic",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "__admin",
                    "type": "address"
                },
                {
                    "internalType": "bytes",
                    "name": "_data",
                    "type": "bytes"
                }
            ],
            "stateMutability": "payable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "CallWhenPaused",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "previousAdmin",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "newAdmin",
                    "type": "address"
                }
            ],
            "name": "AdminChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "beacon",
                    "type": "address"
                }
            ],
            "name": "BeaconUpgraded",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "Paused",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "Unpaused",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "implementation",
                    "type": "address"
                }
            ],
            "name": "Upgraded",
            "type": "event"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "admin",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "admin_",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newAdmin",
                    "type": "address"
                }
            ],
            "name": "changeAdmin",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "implementation",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "implementation_",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "pause",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "paused",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "unpause",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newImplementation",
                    "type": "address"
                }
            ],
            "name": "upgradeTo",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newImplementation",
                    "type": "address"
                },
                {
                    "internalType": "bytes",
                    "name": "data",
                    "type": "bytes"
                }
            ],
            "name": "upgradeToAndCall",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0xc22326de5f2a4839775760ac3631615f4051a57035ae1ce0100036e0e7d161fb",
    "receipt": {
        "to": null,
        "from": "0x341C40B94bF2afBFa42573cB78f16Ee15a056238",
        "contractAddress": "0xcd5820D0C8e4B65dE50eEB4d823a6a26437ABb63",
        "transactionIndex": 54,
        "gasUsed": "799663",
        "logsBloom": "0x
        "blockHash": "0x6a1fb2349152be25718f9450419c4084d1ab8707ce682aa6a9aae11c5b60fc6f",
        "transactionHash": "0xc22326de5f2a4839775760ac3631615f4051a57035ae1ce0100036e0e7d161fb",
        "logs": [
            {
                "transactionIndex": 54,
                "blockNumber": 7685735,
                "transactionHash": "0xc22326de5f2a4839775760ac3631615f4051a57035ae1ce0100036e0e7d161fb",
                "address": "0xcd5820D0C8e4B65dE50eEB4d823a6a26437ABb63",
                "topics": [
                    "0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b",
                    "0x0000000000000000000000003b8ca6c355ce3acbd2b1878ba4390ae369ea2aa1"
                ],
                "data": "0x",
                "logIndex": 118,
                "blockHash": "0x6a1fb2349152be25718f9450419c4084d1ab8707ce682aa6a9aae11c5b60fc6f"
            },
            {
                "transactionIndex": 54,
                "blockNumber": 7685735,
                "transactionHash": "0xc22326de5f2a4839775760ac3631615f4051a57035ae1ce0100036e0e7d161fb",
                "address": "0xcd5820D0C8e4B65dE50eEB4d823a6a26437ABb63",
                "topics": [
                    "0x5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a1",
                    "0x000000000000000000000000f7f327ba5698cf050f91688867ded7a88706ca4a"
                ],
                "data": "0x",
                "logIndex": 119,
                "blockHash": "0x6a1fb2349152be25718f9450419c4084d1ab8707ce682aa6a9aae11c5b60fc6f"
            },
            {
                "transactionIndex": 54,
                "blockNumber": 7685735,
                "transactionHash": "0xc22326de5f2a4839775760ac3631615f4051a57035ae1ce0100036e0e7d161fb",
                "address": "0xcd5820D0C8e4B65dE50eEB4d823a6a26437ABb63",
                "topics": [
                    "0xfc0d749143b04e0d92a3b49edae84a45f6bc88b75e99d9118ec4d7e87fe626c5",
                    "0x000000000000000000000000d5a7087835f63d3c28c11ce29de094cbc20c67e1"
                ],
                "data": "0x",
                "logIndex": 120,
                "blockHash": "0x6a1fb2349152be25718f9450419c4084d1ab8707ce682aa6a9aae11c5b60fc6f"
            },
            {
                "transactionIndex": 54,
                "blockNumber": 7685735,
                "transactionHash": "0xc22326de5f2a4839775760ac3631615f4051a57035ae1ce0100036e0e7d161fb",
                "address": "0xcd5820D0C8e4B65dE50eEB4d823a6a26437ABb63",
                "topics": [
                    "0x1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a71"
                ],
                "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000004454001d09000000000000000000000000f7f327ba5698cf050f91688867ded7a88706ca4a000000000000000000000000d5a7087835f63d3c28c11ce29de094cbc20c67e100000000000000000000000000000000000000000000000000000000",
                "logIndex": 121,
                "blockHash": "0x6a1fb2349152be25718f9450419c4084d1ab8707ce682aa6a9aae11c5b60fc6f"
            },
            {
                "transactionIndex": 54,
                "blockNumber": 7685735,
                "transactionHash": "0xc22326de5f2a4839775760ac3631615f4051a57035ae1ce0100036e0e7d161fb",
                "address": "0xcd5820D0C8e4B65dE50eEB4d823a6a26437ABb63",
                "topics": [
                    "0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f"
                ],
                "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007706a7d768054c10eb4fc9103ea322f62831cb9",
                "logIndex": 122,
                "blockHash": "0x6a1fb2349152be25718f9450419c4084d1ab8707ce682aa6a9aae11c5b60fc6f"
            }
        ],
        "blockNumber": 7685735,
        "cumulativeGasUsed": "20162554",
        "status": 1,
        "byzantium": true
    },
    "args": [
        "0x3b8CA6c355CE3ACBd2b1878ba4390ae369Ea2aa1",
        "0x07706A7D768054c10eB4FC9103Ea322f62831cb9",
        "0x54001d09000000000000000000000000f7f327ba5698cf050f91688867ded7a88706ca4a000000000000000000000000d5a7087835f63d3c28c11ce29de094cbc20c67e1"
    ],
    "numDeployments": 1,
    "solcInputHash": "803b991b13fc3eb82937205601e77786",
    "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallWhenPaused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kiln\",\"events\":{\"Paused(address)\":{\"params\":{\"admin\":\"The admin at the time of the pause event\"}},\"Unpaused(address)\":{\"params\":{\"admin\":\"The admin at the time of the unpause event\"}}},\"kind\":\"dev\",\"methods\":{\"admin()\":{\"details\":\"Returns the current admin. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\"},\"changeAdmin(address)\":{\"details\":\"Changes the admin of the proxy. Emits an {AdminChanged} event. NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\"},\"constructor\":{\"details\":\"The Admin of the proxy should not be the same as theadmin on the implementation logics. The admin here isthe only account allowed to perform calls on the proxy(the calls are never delegated to the implementation)\",\"params\":{\"__admin\":\"Address of the admin in charge of the proxy\",\"_data\":\"Calldata for an atomic initialization\",\"_logic\":\"Address of the implementation\"}},\"implementation()\":{\"details\":\"Returns the current implementation. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\"},\"pause()\":{\"details\":\"Pauses system\"},\"paused()\":{\"details\":\"Retrieves Paused state\",\"returns\":{\"_0\":\"Paused state\"}},\"unpause()\":{\"details\":\"Unpauses system\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy. NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy, and then call a function from the new implementation as specified by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract. NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\"}},\"title\":\"TUPProxy (Transparent Upgradeable Pausable Proxy)\",\"version\":1},\"userdoc\":{\"errors\":{\"CallWhenPaused()\":[{\"notice\":\"A call happened while the system was paused\"}]},\"events\":{\"Paused(address)\":{\"notice\":\"The system is now paused\"},\"Unpaused(address)\":{\"notice\":\"The system is now unpaused\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract extends the Transparent Upgradeable proxy and adds a system wide pause feature.         When the system is paused, the fallback will fail no matter what calls are made.         Address Zero is allowed to perform calls even if paused to allow view calls made         from RPC providers to properly work.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/TUPProxy.sol\":\"TUPProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/TUPProxy.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\n/// @title TUPProxy (Transparent Upgradeable Pausable Proxy)\\n/// @author Kiln\\n/// @notice This contract extends the Transparent Upgradeable proxy and adds a system wide pause feature.\\n///         When the system is paused, the fallback will fail no matter what calls are made.\\n///         Address Zero is allowed to perform calls even if paused to allow view calls made\\n///         from RPC providers to properly work.\\ncontract TUPProxy is TransparentUpgradeableProxy {\\n    /// @notice Storage slot of the pause status value\\n    bytes32 private constant _PAUSE_SLOT = bytes32(uint256(keccak256(\\\"river.tupproxy.pause\\\")) - 1);\\n\\n    /// @notice A call happened while the system was paused\\n    error CallWhenPaused();\\n\\n    /// @notice The system is now paused\\n    /// @param admin The admin at the time of the pause event\\n    event Paused(address admin);\\n\\n    /// @notice The system is now unpaused\\n    /// @param admin The admin at the time of the unpause event\\n    event Unpaused(address admin);\\n\\n    /// @dev The Admin of the proxy should not be the same as the\\n    /// @dev admin on the implementation logics. The admin here is\\n    /// @dev the only account allowed to perform calls on the proxy\\n    /// @dev (the calls are never delegated to the implementation)\\n    /// @param _logic Address of the implementation\\n    /// @param __admin Address of the admin in charge of the proxy\\n    /// @param _data Calldata for an atomic initialization\\n    constructor(address _logic, address __admin, bytes memory _data)\\n        payable\\n        TransparentUpgradeableProxy(_logic, __admin, _data)\\n    {}\\n\\n    /// @dev Retrieves Paused state\\n    /// @return Paused state\\n    function paused() external ifAdmin returns (bool) {\\n        return StorageSlot.getBooleanSlot(_PAUSE_SLOT).value;\\n    }\\n\\n    /// @dev Pauses system\\n    function pause() external ifAdmin {\\n        StorageSlot.getBooleanSlot(_PAUSE_SLOT).value = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /// @dev Unpauses system\\n    function unpause() external ifAdmin {\\n        StorageSlot.getBooleanSlot(_PAUSE_SLOT).value = false;\\n        emit Unpaused(msg.sender);\\n    }\\n\\n    /// @dev Overrides the fallback method to check if system is not paused before\\n    /// @dev Address Zero is allowed to perform calls even if system is paused. This allows\\n    /// view functions to be called when the system is paused as rpc providers can easily\\n    /// set the sender address to zero.\\n    function _beforeFallback() internal override {\\n        if (!StorageSlot.getBooleanSlot(_PAUSE_SLOT).value || msg.sender == address(0)) {\\n            super._beforeFallback();\\n        } else {\\n            revert CallWhenPaused();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x35bd93df3a77dae6301c8c0011d32f89efe3715fa2bdef7f2ad364949b7da6cb\",\"license\":\"BUSL-1.1\"},\"openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x608060405234801561001057600080fd5b50613238806100206000396000f3fe608060405234801561001057600080fd5b50600436106101115760003560e01c80635a16f135116100ad578063a194732311610071578063a194732314610243578063a519f06014610264578063a5b703e51461026c578063d04681561461027f578063f87e52961461028757600080fd5b80635a16f135146101d15780635f41a0c4146101e457806363b4118f146101f75780636e9960c3146102195780638cb310031461022e57600080fd5b806305f63c8a146101165780630e18b6811461013f578063147bf6c4146101495780631864636c1461015c5780631a4a7c611461016f5780633925132114610185578063460e6efb1461019857806350545d2f146101ab57806354001d09146101be575b600080fd5b610129610124366004612b3c565b61029a565b6040516101369190612c15565b60405180910390f35b6101476103a6565b005b610147610157366004612c44565b610406565b61014761016a366004612caa565b61044d565b61017761090b565b604051908152602001610136565b610147610193366004612d36565b61091a565b6101476101a6366004612d74565b610ad6565b6101776101b9366004612de7565b610d6d565b6101476101cc366004612e3a565b610e95565b6101476101df366004612e6d565b610f6a565b6101476101f2366004612ea2565b610ffc565b61020a610205366004612ea2565b6110a2565b60405161013693929190612ec4565b6102216110ce565b6040516101369190612efc565b6102366110d8565b6040516101369190612f10565b610256610251366004612b3c565b6110e2565b604051610136929190612fc7565b610221611132565b61014761027a366004612ff5565b61113c565b610221611437565b610147610295366004613047565b611441565b6102a26129df565b6102ab82611598565b604080516101008101909152815460ff16151581526001820180549192916020840191906102d89061306a565b80601f01602080910402602001604051908101604052809291908181526020018280546103049061306a565b80156103515780601f1061032657610100808354040283529160200191610351565b820191906000526020600020905b81548152906001019060200180831161033457829003601f168201915b505050918352505060028201546001600160a01b03166020820152600382015460408201526004820154606082015260058201546080820152600682015460a082015260079091015460c09091015292915050565b6103ae611609565b6001600160a01b0316336001600160a01b0316146103ea573360405163472511eb60e11b81526004016103e19190612efc565b60405180910390fd5b6103fa6103f5611609565b611613565b610404600061165c565b565b61040e61169c565b6001600160a01b0316336001600160a01b031614610441573360405163472511eb60e11b81526004016103e19190612efc565b61044a8161165c565b50565b826104566110ce565b6001600160a01b0316336001600160a01b031614156106a357818061048e576040516379b348ff60e11b815260040160405180910390fd5b600061049986611598565b60058101549091508086866000816104b3576104b36130a5565b90506020020135106104d8576040516317df2d8d60e01b815260040160405180910390fd5b600086866104e76001876130d1565b8181106104f6576104f66130a5565b90506020020135905082600401548110156105245760405163213af80760e21b815260040160405180910390fd5b60038301546005840154146105428961053d87866130d1565b6116a6565b60005b8581101561066f576000898983818110610561576105616130a5565b90506020020135905060008211801561059c575089896105826001856130d1565b818110610591576105916130a5565b905060200201358110155b156105ba5760405163c9ee26af60e01b815260040160405180910390fd5b60019091019060006105cc83876130d1565b905060006105da8d846116c4565b50905060006105e98e8461183a565b90506105f68e8583611906565b61062e8e8460005b6040519080825280601f01601f191660200182016040528015610628576020820181803683370190505b50611906565b8d7f70cf8064c7574b284afe278226e25779f45a4c3715653674aa651b34e9a190928360405161065e91906130fe565b60405180910390a250505050610545565b81156106845760058501546003860155610698565b846003015483101561069857600385018390555b505050505050610905565b60006106ae82611598565b805490915060ff166106d6576040516301550a7360e41b8152600481018390526024016103e1565b60028101546001600160a01b03163314610705573360405163472511eb60e11b81526004016103e19190612efc565b8280610724576040516379b348ff60e11b815260040160405180910390fd5b600061072f87611598565b6005810154909150808787600081610749576107496130a5565b905060200201351061076e576040516317df2d8d60e01b815260040160405180910390fd5b6000878761077d6001876130d1565b81811061078c5761078c6130a5565b90506020020135905082600401548110156107ba5760405163213af80760e21b815260040160405180910390fd5b60038301546005840154146107d38a61053d87866130d1565b60005b858110156108d45760008a8a838181106107f2576107f26130a5565b90506020020135905060008211801561082d57508a8a6108136001856130d1565b818110610822576108226130a5565b905060200201358110155b1561084b5760405163c9ee26af60e01b815260040160405180910390fd5b600190910190600061085d83876130d1565b9050600061086b8e846116c4565b509050600061087a8f8461183a565b90506108878f8583611906565b6108938f8460006105fe565b8e7f70cf8064c7574b284afe278226e25779f45a4c3715653674aa651b34e9a19092836040516108c391906130fe565b60405180910390a2505050506107d6565b81156108e957600585015460038601556108fd565b84600301548310156108fd57600385018390555b505050505050505b50505050565b600061091561194b565b905090565b826109236110ce565b6001600160a01b0316336001600160a01b031614156109d75761097b83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061196e92505050565b600061098685611598565b9050610996600182018585612a2f565b50847f9ad13f126d3d603b0b284edba7645ca0e423840767c48809bb5f87e72197e11485856040516109c992919061313a565b60405180910390a250610905565b60006109e282611598565b805490915060ff16610a0a576040516301550a7360e41b8152600481018390526024016103e1565b60028101546001600160a01b03163314610a39573360405163472511eb60e11b81526004016103e19190612efc565b610a7884848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061196e92505050565b6000610a8386611598565b9050610a93600182018686612a2f565b50857f9ad13f126d3d603b0b284edba7645ca0e423840767c48809bb5f87e72197e1148686604051610ac692919061313a565b60405180910390a2505050505050565b610ade61169c565b6001600160a01b0316336001600160a01b031614610b11573360405163472511eb60e11b81526004016103e19190612efc565b838214610b315760405163a9854bc960e01b815260040160405180910390fd5b83610b4f57604051637b329aa360e01b815260040160405180910390fd5b60005b84811015610d65576000868683818110610b6e57610b6e6130a5565b9050602002013590506000858584818110610b8b57610b8b6130a5565b905060200201359050600083118015610bc657508787610bac6001866130d1565b818110610bbb57610bbb6130a5565b905060200201358211155b15610be4576040516357e557ed60e11b815260040160405180910390fd5b6000610bef83611598565b600381015490915082811415610c4857837fe8b22569f1f7ba3802b89b579382ccac4e223f8062d6dd73f9cd757bd46ff8aa84604051610c3191815260200190565b60405180910390a284600101945050505050610b52565b816007015486108015610c5a57508083115b15610cb757858260070154857f5482b63bdf9e3775fdd3157e4933cfbc1d6fa1ec354ed3fc9a547e5438fd3e4e8487604051610ca0929190918252602082015260400190565b60405180910390a484600101945050505050610b52565b8160050154831115610cf3576005820154604051630d7bdb4960e41b8152600481018690526024810185905260448101919091526064016103e1565b8160040154831015610d2c5760048083015460405163044816df60e51b81529182018690526024820185905260448201526064016103e1565b6003820183905560405183815284907f3adbeb5fbb94c52b64d90b31188c68a740868dde2238e03a04d581cae22cedf090602001610c31565b505050505050565b6000610d7761169c565b6001600160a01b0316336001600160a01b031614610daa573360405163472511eb60e11b81526004016103e19190612efc565b600060405180610100016040528060011515815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b038616602083015260408201819052606082018190526080820181905260a082018190524360c0909201919091529091506001610e3c8361198d565b610e4691906130d1565b9050836001600160a01b0316817f28febbb5486eda5a1e47ad578f9cb32c8a1983c86c80ab823ea5dc1fc04ede5e8888604051610e8492919061313a565b60405180910390a395945050505050565b6000610e9f611a6f565b8114610ed05780610eae611a6f565b604051631cfd276760e31b8152600481019290925260248201526044016103e1565b610ee3610ede826001613156565b611aa3565b610eec83611613565b610ef582611ad6565b6040516001600160a01b038316907ffc0d749143b04e0d92a3b49edae84a45f6bc88b75e99d9118ec4d7e87fe626c590600090a27f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610f5d9392919061316e565b60405180910390a1505050565b610f7261169c565b6001600160a01b0316336001600160a01b031614610fa5573360405163472511eb60e11b81526004016103e19190612efc565b6000610fb083611598565b805460ff1916831515908117825560405190815290915083907fe3bc5e5d3b000a1f65d146c40a38d89b1743b5729f4c6fe65f2e4b2dc620f2f2906020015b60405180910390a2505050565b61100461169c565b6001600160a01b0316336001600160a01b031614611037573360405163472511eb60e11b81526004016103e19190612efc565b600061104283611598565b905080600401548211156110695760405163a9cb9e0d60e01b815260040160405180910390fd5b6006810182905560405182815283907f773694db4f98cd263e42d4f798bcf603781d4491e48e8cbe96c219c1f13b777d90602001610fef565b60608060006110b185856116c4565b90935091506110bf85611598565b60040154841090509250925092565b600061091561169c565b6060610915611b0d565b6060806110ed611d60565b6001600160a01b0316336001600160a01b031614611120573360405163472511eb60e11b81526004016103e19190612efc565b61112983611d90565b91509150915091565b6000610915611d60565b836111456110ce565b6001600160a01b0316336001600160a01b031614156112a8578361117c576040516379b348ff60e11b815260040160405180910390fd5b61118860606030613156565b6111929085613188565b82146111b157604051630368f86360e41b815260040160405180910390fd5b60006111bc86611598565b905060005b8581101561125357600061122e86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061121392506060915060309050613156565b61121d9085613188565b61122960606030613156565b6120d2565b905061124a888385600501546112449190613156565b83611906565b506001016111c1565b506112688686836005015461053d9190613156565b857f402e5ac3e483073137c527378b15e69f7f4a1c75c1adc0aa36f0c456876c05a0858560405161129a92919061313a565b60405180910390a250611430565b60006112b382611598565b805490915060ff166112db576040516301550a7360e41b8152600481018390526024016103e1565b60028101546001600160a01b0316331461130a573360405163472511eb60e11b81526004016103e19190612efc565b84611328576040516379b348ff60e11b815260040160405180910390fd5b61133460606030613156565b61133e9086613188565b831461135d57604051630368f86360e41b815260040160405180910390fd5b600061136887611598565b905060005b868110156113de5760006113bf87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061121392506060915060309050613156565b90506113d5898385600501546112449190613156565b5060010161136d565b506113f38787836005015461053d9190613156565b867f402e5ac3e483073137c527378b15e69f7f4a1c75c1adc0aa36f0c456876c05a0868660405161142592919061313a565b60405180910390a250505b5050505050565b6000610915611609565b8161144a6110ce565b6001600160a01b0316336001600160a01b031614156114cc5761146c82612195565b600061147784611598565b6002810180546001600160a01b0319166001600160a01b0386169081179091556040519192509085907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e790600090a350505050565b60006114d782611598565b805490915060ff166114ff576040516301550a7360e41b8152600481018390526024016103e1565b60028101546001600160a01b0316331461152e573360405163472511eb60e11b81526004016103e19190612efc565b61153783612195565b600061154285611598565b6002810180546001600160a01b0319166001600160a01b0387169081179091556040519192509086907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e790600090a35050505050565b6000806115b460016000805160206131e38339815191526130d1565b8054909150819084106115dd576040516302d72d2160e01b8152600481018590526024016103e1565b8060000184815481106115f2576115f26130a5565b906000526020600020906008020192505050919050565b60006109156121bc565b61161c81612195565b611625816121ec565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b611665816121f5565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b60006109156121fe565b60006116b183611598565b6005810192909255504360079091015550565b60608060006116e260016000805160206131c38339815191526130d1565b60008681526020828152604080832088845290915290208054919250829161179690829061170f9061306a565b80601f016020809104026020016040519081016040528092919081815260200182805461173b9061306a565b80156117885780601f1061175d57610100808354040283529160200191611788565b820191906000526020600020905b81548152906001019060200180831161176b57829003601f168201915b5050505050600060306120d2565b945061182e8180546117a79061306a565b80601f01602080910402602001604051908101604052809291908181526020018280546117d39061306a565b80156118205780601f106117f557610100808354040283529160200191611820565b820191906000526020600020905b81548152906001019060200180831161180357829003601f168201915b5050505050603060606120d2565b93505050509250929050565b6060600061185760016000805160206131c38339815191526130d1565b60008581526020828152604080832087845290915290208054919250829161187e9061306a565b80601f01602080910402602001604051908101604052809291908181526020018280546118aa9061306a565b80156118f75780601f106118cc576101008083540402835291602001916118f7565b820191906000526020600020905b8154815290600101906020018083116118da57829003601f168201915b50505050509250505092915050565b600061192160016000805160206131c38339815191526130d1565b600085815260208281526040808320878452825290912084519293508392610d6592860190612ab3565b60008061196760016000805160206131e38339815191526130d1565b5492915050565b805161044a57604051638d46fe0560e01b815260040160405180910390fd5b600061199c8260400151612195565b6119a9826020015161196e565b60006119c460016000805160206131e38339815191526130d1565b80546001808201835560008381526020908190208751600890940201805460ff19169315159390931783558681015180519495508594889493611a0c93908501920190612ab3565b5060408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e090910151600790910155549392505050565b6000610915611a9f60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6130d1565b5490565b61044a611ad160017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6130d1565b829055565b611adf81612195565b61044a611ad160017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c6130d1565b60606000611b2a60016000805160206131e38339815191526130d1565b80549091508190600090815b81811015611b7b57836000018181548110611b5357611b536130a5565b600091825260209091206008909102015460ff1615611b73578260010192505b600101611b36565b506000826001600160401b03811115611b9657611b966130e8565b604051908082528060200260200182016040528015611bcf57816020015b611bbc6129df565b815260200190600190039081611bb45790505b5090506000805b83811015611d5457856000018181548110611bf357611bf36130a5565b600091825260209091206008909102015460ff1615611d4c57856000018181548110611c2157611c216130a5565b6000918252602091829020604080516101008101909152600890920201805460ff16151582526001810180549293919291840191611c5e9061306a565b80601f0160208091040260200160405190810160405280929190818152602001828054611c8a9061306a565b8015611cd75780601f10611cac57610100808354040283529160200191611cd7565b820191906000526020600020905b815481529060010190602001808311611cba57829003601f168201915b505050918352505060028201546001600160a01b03166020820152600382015460408201526004820154606082015260058201546080820152600682015460a082015260079091015460c0909101528351849084908110611d3a57611d3a6130a5565b60200260200101819052508160010191505b600101611bd6565b50909695505050505050565b6000610915611a9f60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c6130d1565b6060806000611d9d61222e565b9050805160001415611e0b576040805160008082526020820190925290611dd4565b6060815260200190600190039081611dbf5790505b506040805160008082526020820190925290611e00565b6060815260200190600190039081611deb5790505b509250925050915091565b8315611fa75760005b8151811015611e5157611e3f828281518110611e3257611e326130a5565b602002602001015161260b565b15611e4957611e51565b600101611e14565b8151811415611e605750611fa7565b6000611e6d826001613156565b90505b8251811015611ede57611e9b838381518110611e8e57611e8e6130a5565b602002602001015161262e565b611eb0848381518110611e8e57611e8e6130a5565b108015611ecd5750611ecd838281518110611e3257611e326130a5565b15611ed6578091505b600101611e70565b506000611f63611f5d848481518110611ef957611ef96130a5565b60200260200101516101000151858581518110611f1857611f186130a5565b602002602001015160800151611f2e9190613156565b858581518110611f4057611f406130a5565b602002602001015160600151611f5691906130d1565b600561265a565b8761265a565b905080838381518110611f7857611f786130a5565b602002602001015161010001818151611f919190613156565b905250611f9e81876130d1565b95505050611e0b565b60005b81518110156120cb576000828281518110611fc757611fc76130a5565b6020026020010151610100015111156120bb57600080612040848481518110611ff257611ff26130a5565b602002602001015160e00151858581518110612010576120106130a5565b60200260200101516080015186868151811061202e5761202e6130a5565b60200260200101516101000151612672565b9150915061204e8683612854565b955061205a8582612854565b945083838151811061206e5761206e6130a5565b602002602001015161010001516120a1858581518110612090576120906130a5565b602002602001015160e00151611598565b60040160008282546120b39190613156565b909155505050505b6120c4816131a7565b9050611faa565b5050915091565b60608182601f0110156120f8576040516323d5783d60e11b815260040160405180910390fd5b6121028284613156565b8451101561212357604051633b99b53d60e01b815260040160405180910390fd5b606082158015612142576040519150600082526020820160405261218c565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561217b578051835260209283019201612163565b5050858452601f01601f1916604052505b50949350505050565b6001600160a01b03811661044a5760405163f6b2911f60e01b815260040160405180910390fd5b6000610915611a9f60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a98472816130d1565b61044a8161295e565b61044a81612995565b6000610915611a9f60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb1136130d1565b6060600061224b60016000805160206131e38339815191526130d1565b80549091508190600090815b8181101561239557612381846000018281548110612277576122776130a5565b6000918252602091829020604080516101008101909152600890920201805460ff161515825260018101805492939192918401916122b49061306a565b80601f01602080910402602001604051908101604052809291908181526020018280546122e09061306a565b801561232d5780601f106123025761010080835404028352916020019161232d565b820191906000526020600020905b81548152906001019060200180831161231057829003601f168201915b505050918352505060028201546001600160a01b03166020820152600382015460408201526004820154606082015260058201546080820152600682015460a082015260079091015460c0909101526129c3565b1561238d578260010192505b600101612257565b506000826001600160401b038111156123b0576123b06130e8565b60405190808252806020026020018201604052801561243b57816020015b6124286040518061012001604052806000151581526020016060815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816123ce5790505b5090506000805b83811015611d54576000866000018281548110612461576124616130a5565b6000918252602091829020604080516101008101909152600890920201805460ff1615158252600181018054929391929184019161249e9061306a565b80601f01602080910402602001604051908101604052809291908181526020018280546124ca9061306a565b80156125175780601f106124ec57610100808354040283529160200191612517565b820191906000526020600020905b8154815290600101906020018083116124fa57829003601f168201915b505050918352505060028201546001600160a01b03166020820152600382015460408201526004820154606082015260058201546080820152600682015460a082015260079091015460c0909101529050612571816129c3565b15612602576040518061012001604052808260000151151581526020018260200151815260200182604001516001600160a01b0316815260200182606001518152602001826080015181526020018260a0015181526020018260c00151815260200183815260200160008152508484815181106125f0576125f06130a5565b60200260200101819052508260010192505b50600101612442565b6000816060015182610100015183608001516126279190613156565b1092915050565b60008160c00151826101000151836080015161264a9190613156565b61265491906130d1565b92915050565b6000818311612669578261266b565b815b9392505050565b606080826001600160401b0381111561268d5761268d6130e8565b6040519080825280602002602001820160405280156126c057816020015b60608152602001906001900390816126ab5790505b509150826001600160401b038111156126db576126db6130e8565b60405190808252806020026020018201604052801561270e57816020015b60608152602001906001900390816126f95790505b509050600061272c60016000805160206131c38339815191526130d1565b90508060005b85811015612849576000888152602083905260408120816127538a85613156565b8152602001908152602001600020805461276c9061306a565b80601f01602080910402602001604051908101604052809291908181526020018280546127989061306a565b80156127e55780601f106127ba576101008083540402835291602001916127e5565b820191906000526020600020905b8154815290600101906020018083116127c857829003601f168201915b505050505090506127f981600060306120d2565b86838151811061280b5761280b6130a5565b602002602001018190525061282381603060606120d2565b858381518110612835576128356130a5565b602090810291909101015250600101612732565b505050935093915050565b60606000825184516128669190613156565b6001600160401b0381111561287d5761287d6130e8565b6040519080825280602002602001820160405280156128b057816020015b606081526020019060019003908161289b5790505b50905060005b84518110156128fe578481815181106128d1576128d16130a5565b60200260200101518282815181106128eb576128eb6130a5565b60209081029190910101526001016128b6565b5060005b83518110156129565783818151811061291d5761291d6130a5565b6020026020010151828651836129339190613156565b81518110612943576129436130a5565b6020908102919091010152600101612902565b509392505050565b61296781612195565b61044a611ad160017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb1136130d1565b61044a611ad160017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a98472816130d1565b8051600090801561265457505060808101516060909101511190565b6040518061010001604052806000151581526020016060815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b828054612a3b9061306a565b90600052602060002090601f016020900481019282612a5d5760008555612aa3565b82601f10612a765782800160ff19823516178555612aa3565b82800160010185558215612aa3579182015b82811115612aa3578235825591602001919060010190612a88565b50612aaf929150612b27565b5090565b828054612abf9061306a565b90600052602060002090601f016020900481019282612ae15760008555612aa3565b82601f10612afa57805160ff1916838001178555612aa3565b82800160010185558215612aa3579182015b82811115612aa3578251825591602001919060010190612b0c565b5b80821115612aaf5760008155600101612b28565b600060208284031215612b4e57600080fd5b5035919050565b6000815180845260005b81811015612b7b57602081850181015186830182015201612b5f565b81811115612b8d576000602083870101525b50601f01601f19169290920160200192915050565b60006101008251151584526020830151816020860152612bc482860182612b55565b91505060018060a01b036040840151166040850152606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e08501528091505092915050565b60208152600061266b6020830184612ba2565b80356001600160a01b0381168114612c3f57600080fd5b919050565b600060208284031215612c5657600080fd5b61266b82612c28565b60008083601f840112612c7157600080fd5b5081356001600160401b03811115612c8857600080fd5b6020830191508360208260051b8501011115612ca357600080fd5b9250929050565b600080600060408486031215612cbf57600080fd5b8335925060208401356001600160401b03811115612cdc57600080fd5b612ce886828701612c5f565b9497909650939450505050565b60008083601f840112612d0757600080fd5b5081356001600160401b03811115612d1e57600080fd5b602083019150836020828501011115612ca357600080fd5b600080600060408486031215612d4b57600080fd5b8335925060208401356001600160401b03811115612d6857600080fd5b612ce886828701612cf5565b600080600080600060608688031215612d8c57600080fd5b85356001600160401b0380821115612da357600080fd5b612daf89838a01612c5f565b90975095506020880135915080821115612dc857600080fd5b50612dd588828901612c5f565b96999598509660400135949350505050565b600080600060408486031215612dfc57600080fd5b83356001600160401b03811115612e1257600080fd5b612e1e86828701612cf5565b9094509250612e31905060208501612c28565b90509250925092565b60008060408385031215612e4d57600080fd5b612e5683612c28565b9150612e6460208401612c28565b90509250929050565b60008060408385031215612e8057600080fd5b8235915060208301358015158114612e9757600080fd5b809150509250929050565b60008060408385031215612eb557600080fd5b50508035926020909101359150565b606081526000612ed76060830186612b55565b8281036020840152612ee98186612b55565b9150508215156040830152949350505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612f6557603f19888603018452612f53858351612ba2565b94509285019290850190600101612f37565b5092979650505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015612fba578284038952612fa8848351612b55565b98850198935090840190600101612f90565b5091979650505050505050565b604081526000612fda6040830185612f72565b8281036020840152612fec8185612f72565b95945050505050565b6000806000806060858703121561300b57600080fd5b843593506020850135925060408501356001600160401b0381111561302f57600080fd5b61303b87828801612cf5565b95989497509550505050565b6000806040838503121561305a57600080fd5b82359150612e6460208401612c28565b600181811c9082168061307e57607f821691505b6020821081141561309f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156130e3576130e36130bb565b500390565b634e487b7160e01b600052604160045260246000fd5b60208152600061266b6020830184612b55565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152600061314e602083018486613111565b949350505050565b60008219821115613169576131696130bb565b500190565b838152604060208201526000612fec604083018486613111565b60008160001904831182151516156131a2576131a26130bb565b500290565b60006000198214156131bb576131bb6130bb565b506001019056fe6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113a2646970667358221220b80c8ca9e345a6c49bce4ff541b5a268b2c6a1f0bd70bced87615bd82747de0864736f6c634300080a0033",
    "deployedBytecode": "",
    "devdoc": {
        "author": "Kiln",
        "events": {
            "Paused(address)": {
                "params": {
                    "admin": "The admin at the time of the pause event"
                }
            },
            "Unpaused(address)": {
                "params": {
                    "admin": "The admin at the time of the unpause event"
                }
            }
        },
        "kind": "dev",
        "methods": {
            "admin()": {
                "details": "Returns the current admin. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`"
            },
            "changeAdmin(address)": {
                "details": "Changes the admin of the proxy. Emits an {AdminChanged} event. NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}."
            },
            "constructor": {
                "details": "The Admin of the proxy should not be the same as theadmin on the implementation logics. The admin here isthe only account allowed to perform calls on the proxy(the calls are never delegated to the implementation)",
                "params": {
                    "__admin": "Address of the admin in charge of the proxy",
                    "_data": "Calldata for an atomic initialization",
                    "_logic": "Address of the implementation"
                }
            },
            "implementation()": {
                "details": "Returns the current implementation. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`"
            },
            "pause()": {
                "details": "Pauses system"
            },
            "paused()": {
                "details": "Retrieves Paused state",
                "returns": {
                    "_0": "Paused state"
                }
            },
            "unpause()": {
                "details": "Unpauses system"
            },
            "upgradeTo(address)": {
                "details": "Upgrade the implementation of the proxy. NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}."
            },
            "upgradeToAndCall(address,bytes)": {
                "details": "Upgrade the implementation of the proxy, and then call a function from the new implementation as specified by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract. NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}."
            }
        },
        "title": "TUPProxy (Transparent Upgradeable Pausable Proxy)",
        "version": 1
    },
    "userdoc": {
        "errors": {
            "CallWhenPaused()": [
                {
                    "notice": "A call happened while the system was paused"
                }
            ]
        },
        "events": {
            "Paused(address)": {
                "notice": "The system is now paused"
            },
            "Unpaused(address)": {
                "notice": "The system is now unpaused"
            }
        },
        "kind": "user",
        "methods": {},
        "notice": "This contract extends the Transparent Upgradeable proxy and adds a system wide pause feature.         When the system is paused, the fallback will fail no matter what calls are made.         Address Zero is allowed to perform calls even if paused to allow view calls made         from RPC providers to properly work.",
        "version": 1
    },
    "storageLayout": {
        "storage": [],
        "types": null
    },
    "implementations": {
        "names": [
            "OperatorsRegistryV1_Implementation_0_2_2.json",
            "OperatorsRegistryV1_Implementation_0_4_0.json"
        ],
        "transactionHash": [
            "0xf5f150a211619cd78e77c1a768f27a2430841973951a1d6716eb3d55687d96cb",
            "0x02af3579aa544d1f0aab533b2c6f13f4398e2a1a3e37c199ed412120f4e9cce0"
        ],
        "receipt": [
            {
                "to": null,
                "from": "0x341C40B94bF2afBFa42573cB78f16Ee15a056238",
                "contractAddress": "0x3b8CA6c355CE3ACBd2b1878ba4390ae369Ea2aa1",
                "transactionIndex": 31,
                "gasUsed": "2830930",
                "logsBloom": "0x
                "blockHash": "0x3f0b54aff19c9aa4bab7f0a4beb631dc56970ed0c90791154342c108ab1e6ee3",
                "transactionHash": "0xf5f150a211619cd78e77c1a768f27a2430841973951a1d6716eb3d55687d96cb",
                "logs": [],
                "blockNumber": 7685732,
                "cumulativeGasUsed": "13708066",
                "status": 1,
                "byzantium": true
            },
            {
                "to": null,
                "from": "0x341C40B94bF2afBFa42573cB78f16Ee15a056238",
                "contractAddress": "0x9F414a78461105218AfcFEE79cAC07E81aB46bAC",
                "transactionIndex": 21,
                "gasUsed": "2829646",
                "logsBloom": "0x
                "blockHash": "0x6a60068ae8f71911e2b0803018bfd926330db1dfddc08dbb2feb6120b32c9ea7",
                "transactionHash": "0x02af3579aa544d1f0aab533b2c6f13f4398e2a1a3e37c199ed412120f4e9cce0",
                "logs": [],
                "blockNumber": 7709003,
                "cumulativeGasUsed": "6947071",
                "status": 1,
                "byzantium": true
            }
        ],
        "args": [
            [],
            []
        ],
        "numDeployments": [
            1,
            1
        ],
        "solcInputHash": [
            "656663a520c7d1a8fa475138c7426bea",
            "d46223a1947b2b7fbc79fc0dfd1c596b"
        ],
        "metadata": [
            "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"InactiveOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEmptyString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFundedKeyDeletionAttempt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidKeyCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidKeysLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUnsortedIndexes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keyCount\",\"type\":\"uint256\"}],\"name\":\"OperatorLimitTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundedKeyCount\",\"type\":\"uint256\"}],\"name\":\"OperatorLimitTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OperatorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnorderedOperatorList\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"}],\"name\":\"AddedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKeysAndSignatures\",\"type\":\"bytes\"}],\"name\":\"AddedValidatorKeys\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"cdata\",\"type\":\"bytes\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"latestKeysEditBlockNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"OperatorEditsAfterSnapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"OperatorLimitUnchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"RemovedValidatorKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperatorAddress\",\"type\":\"address\"}],\"name\":\"SetOperatorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"SetOperatorLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"SetOperatorName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetOperatorStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStoppedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"SetOperatorStoppedValidatorCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"SetPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"river\",\"type\":\"address\"}],\"name\":\"SetRiver\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_keyCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_publicKeysAndSignatures\",\"type\":\"bytes\"}],\"name\":\"addValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getOperator\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestKeysEditBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct Operators.Operator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorIndex\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"funded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_river\",\"type\":\"address\"}],\"name\":\"initOperatorsRegistryV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listActiveOperators\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestKeysEditBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct Operators.Operator[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"pickNextValidators\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"publicKeys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"proposeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"removeValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOperatorAddress\",\"type\":\"address\"}],\"name\":\"setOperatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_operatorIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newLimits\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"setOperatorLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"}],\"name\":\"setOperatorName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"setOperatorStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newStoppedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"setOperatorStoppedValidatorCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kiln\",\"errors\":{\"InactiveOperator(uint256)\":[{\"params\":{\"index\":\"The operator index\"}}],\"InvalidInitialization(uint256,uint256)\":[{\"params\":{\"expectedVersion\":\"The version that was expected\",\"version\":\"The version that was attempting to be initialized\"}}],\"OperatorLimitTooHigh(uint256,uint256,uint256)\":[{\"params\":{\"index\":\"The operator index\",\"keyCount\":\"The operator key count\",\"limit\":\"The new limit provided\"}}],\"OperatorLimitTooLow(uint256,uint256,uint256)\":[{\"params\":{\"fundedKeyCount\":\"The operator funded key count\",\"index\":\"The operator index\",\"limit\":\"The new limit provided\"}}],\"OperatorNotFound(uint256)\":[{\"params\":{\"index\":\"The provided index\"}}],\"Unauthorized(address)\":[{\"params\":{\"caller\":\"Addres performing the call\"}}]},\"kind\":\"dev\",\"methods\":{\"acceptAdmin()\":{\"details\":\"Only callable by the pending admin. Resets the pending admin if succesful.\"},\"addOperator(string,address)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_name\":\"The name identifying the operator\",\"_operator\":\"The address representing the operator, receiving the rewards\"},\"returns\":{\"_0\":\"The index of the new operator\"}},\"addValidators(uint256,uint256,bytes)\":{\"details\":\"Only callable by the administrator or the operator address\",\"params\":{\"_index\":\"The operator index\",\"_keyCount\":\"The amount of keys provided\",\"_publicKeysAndSignatures\":\"Public keys of the validator, concatenated\"}},\"getAdmin()\":{\"returns\":{\"_0\":\"The admin address\"}},\"getOperator(uint256)\":{\"params\":{\"_index\":\"The index of the operator\"},\"returns\":{\"_0\":\"The details of the operator\"}},\"getOperatorCount()\":{\"returns\":{\"_0\":\"The operator count\"}},\"getPendingAdmin()\":{\"returns\":{\"_0\":\"The pending admin address\"}},\"getRiver()\":{\"returns\":{\"_0\":\"The address of River\"}},\"getValidator(uint256,uint256)\":{\"params\":{\"_operatorIndex\":\"The index of the operator\",\"_validatorIndex\":\"The index of the validator\"},\"returns\":{\"funded\":\"True if validator has been funded\",\"publicKey\":\"The public key of the validator\",\"signature\":\"The signature used during deposit\"}},\"initOperatorsRegistryV1(address,address)\":{\"params\":{\"_admin\":\"Admin in charge of managing operators\",\"_river\":\"Address of River system\"}},\"listActiveOperators()\":{\"returns\":{\"_0\":\"The list of active operators and their details\"}},\"pickNextValidators(uint256)\":{\"params\":{\"_count\":\"Max amount of keys requested\"},\"returns\":{\"publicKeys\":\"An array of public keys\",\"signatures\":\"An array of signatures linked to the public keys\"}},\"proposeAdmin(address)\":{\"details\":\"This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.\",\"params\":{\"_newAdmin\":\"New admin address\"}},\"removeValidators(uint256,uint256[])\":{\"details\":\"Only callable by the administrator or the operator addressThe indexes must be provided sorted in decreasing order and duplicate-free, otherwise the method will revertThe operator limit will be set to the lowest deleted key index if the operator's limit wasn't equal to its total key countThe operator or the admin cannot remove funded keys\",\"params\":{\"_index\":\"The operator index\",\"_indexes\":\"The indexes of the keys to remove\"}},\"setOperatorAddress(uint256,address)\":{\"details\":\"Only callable by the administrator or the previous operator address\",\"params\":{\"_index\":\"The operator index\",\"_newOperatorAddress\":\"The new address of the operator\"}},\"setOperatorLimits(uint256[],uint256[],uint256)\":{\"details\":\"Only callable by the administratorThe operator indexes must be in increasing order and contain no duplicateThe limit cannot exceed the total key count of the operatorThe _indexes and _newLimits must have the same length.Each limit value is applied to the operator index at the same index in the _indexes array.\",\"params\":{\"_newLimits\":\"The new staking limit of the operators\",\"_operatorIndexes\":\"The operator indexes, in increasing order and duplicate free\",\"_snapshotBlock\":\"The block number at which the snapshot was computed\"}},\"setOperatorName(uint256,string)\":{\"details\":\"Only callable by the administrator or the operator\",\"params\":{\"_index\":\"The operator index\",\"_newName\":\"The new operator name\"}},\"setOperatorStatus(uint256,bool)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_index\":\"The operator index\",\"_newStatus\":\"The new status of the operator\"}},\"setOperatorStoppedValidatorCount(uint256,uint256)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_index\":\"The operator index\",\"_newStoppedValidatorCount\":\"The new stopped validator count of the operator\"}}},\"title\":\"Operators Registry (v1)\",\"version\":1},\"userdoc\":{\"errors\":{\"InactiveOperator(uint256)\":[{\"notice\":\"The calling operator is inactive\"}],\"InvalidArgument()\":[{\"notice\":\"The argument was invalid\"}],\"InvalidArrayLengths()\":[{\"notice\":\"The provided operator and limits array have different lengths\"}],\"InvalidEmptyArray()\":[{\"notice\":\"The provided operator and limits array are empty\"}],\"InvalidEmptyString()\":[{\"notice\":\"The string is empty\"}],\"InvalidFundedKeyDeletionAttempt()\":[{\"notice\":\"A funded key deletion has been attempted\"}],\"InvalidIndexOutOfBounds()\":[{\"notice\":\"The index that is removed is out of bounds\"}],\"InvalidInitialization(uint256,uint256)\":[{\"notice\":\"An error occured during the initialization\"}],\"InvalidKeyCount()\":[{\"notice\":\"The provided key count is 0\"}],\"InvalidKeysLength()\":[{\"notice\":\"The provided concatenated keys do not have the expected length\"}],\"InvalidUnsortedIndexes()\":[{\"notice\":\"The index provided are not sorted properly (descending order)\"}],\"InvalidZeroAddress()\":[{\"notice\":\"The address is zero\"}],\"OperatorLimitTooHigh(uint256,uint256,uint256)\":[{\"notice\":\"The value for the operator limit is too high\"}],\"OperatorLimitTooLow(uint256,uint256,uint256)\":[{\"notice\":\"The value for the limit is too low\"}],\"OperatorNotFound(uint256)\":[{\"notice\":\"The operator was not found\"}],\"SliceOutOfBounds()\":[{\"notice\":\"The slice is outside of the initial bytes bounds\"}],\"SliceOverflow()\":[{\"notice\":\"The length overflows an uint\"}],\"Unauthorized(address)\":[{\"notice\":\"The operator is unauthorized for the caller\"}],\"UnorderedOperatorList()\":[{\"notice\":\"The provided list of operators is not in increasing order\"}]},\"events\":{\"AddedOperator(uint256,string,address)\":{\"notice\":\"A new operator has been added to the registry\"},\"AddedValidatorKeys(uint256,bytes)\":{\"notice\":\"The operator or the admin added new validator keys and signatures\"},\"Initialize(uint256,bytes)\":{\"notice\":\"Emitted when the contract is properly initialized\"},\"OperatorEditsAfterSnapshot(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"The operator edited its keys after the snapshot block\"},\"OperatorLimitUnchanged(uint256,uint256)\":{\"notice\":\"The call didn't alter the limit of the operator\"},\"RemovedValidatorKey(uint256,bytes)\":{\"notice\":\"The operator or the admin removed a public key and its signature from the registry\"},\"SetAdmin(address)\":{\"notice\":\"The admin address changed\"},\"SetOperatorAddress(uint256,address)\":{\"notice\":\"The operator address has been changed\"},\"SetOperatorLimit(uint256,uint256)\":{\"notice\":\"The operator limit has been changed\"},\"SetOperatorName(uint256,string)\":{\"notice\":\"The operator display name has been changed\"},\"SetOperatorStatus(uint256,bool)\":{\"notice\":\"The operator status has been changed\"},\"SetOperatorStoppedValidatorCount(uint256,uint256)\":{\"notice\":\"The operator stopped validator count has been changed\"},\"SetPendingAdmin(address)\":{\"notice\":\"The pending admin address changed\"},\"SetRiver(address)\":{\"notice\":\"The stored river address has been changed\"}},\"kind\":\"user\",\"methods\":{\"acceptAdmin()\":{\"notice\":\"Accept the transfer of ownership\"},\"addOperator(string,address)\":{\"notice\":\"Adds an operator to the registry\"},\"addValidators(uint256,uint256,bytes)\":{\"notice\":\"Adds new keys for an operator\"},\"getAdmin()\":{\"notice\":\"Retrieves the current admin address\"},\"getOperator(uint256)\":{\"notice\":\"Get operator details\"},\"getOperatorCount()\":{\"notice\":\"Get operator count\"},\"getPendingAdmin()\":{\"notice\":\"Retrieve the current pending admin address\"},\"getRiver()\":{\"notice\":\"Retrieve the River address\"},\"getValidator(uint256,uint256)\":{\"notice\":\"Get the details of a validator\"},\"initOperatorsRegistryV1(address,address)\":{\"notice\":\"Initializes the operators registry\"},\"listActiveOperators()\":{\"notice\":\"Retrieve the active operator set\"},\"pickNextValidators(uint256)\":{\"notice\":\"Retrieve validator keys based on operator statuses\"},\"proposeAdmin(address)\":{\"notice\":\"Proposes a new address as admin\"},\"removeValidators(uint256,uint256[])\":{\"notice\":\"Remove validator keys\"},\"setOperatorAddress(uint256,address)\":{\"notice\":\"Changes the operator address of an operator\"},\"setOperatorLimits(uint256[],uint256[],uint256)\":{\"notice\":\"Changes the operator staking limit\"},\"setOperatorName(uint256,string)\":{\"notice\":\"Changes the operator name\"},\"setOperatorStatus(uint256,bool)\":{\"notice\":\"Changes the operator status\"},\"setOperatorStoppedValidatorCount(uint256,uint256)\":{\"notice\":\"Changes the operator stopped validator count\"}},\"notice\":\"This contract handles the list of operators and their keys\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/OperatorsRegistry.1.sol\":\"OperatorsRegistryV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/Administrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IAdministrable.sol\\\";\\n\\nimport \\\"./libraries/LibAdministrable.sol\\\";\\nimport \\\"./libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrable\\n/// @author Kiln\\n/// @notice This contract handles the administration of the contracts\\nabstract contract Administrable is IAdministrable {\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() {\\n        if (msg.sender != LibAdministrable._getAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyPendingAdmin() {\\n        if (msg.sender != LibAdministrable._getPendingAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getAdmin() external view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getPendingAdmin() external view returns (address) {\\n        return LibAdministrable._getPendingAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function proposeAdmin(address _newAdmin) external onlyAdmin {\\n        _setPendingAdmin(_newAdmin);\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function acceptAdmin() external onlyPendingAdmin {\\n        _setAdmin(LibAdministrable._getPendingAdmin());\\n        _setPendingAdmin(address(0));\\n    }\\n\\n    /// @notice Internal utility to set the admin address\\n    /// @param _admin Address to set as admin\\n    function _setAdmin(address _admin) internal {\\n        LibSanitize._notZeroAddress(_admin);\\n        LibAdministrable._setAdmin(_admin);\\n        emit SetAdmin(_admin);\\n    }\\n\\n    /// @notice Internal utility to set the pending admin address\\n    /// @param _pendingAdmin Address to set as pending admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        LibAdministrable._setPendingAdmin(_pendingAdmin);\\n        emit SetPendingAdmin(_pendingAdmin);\\n    }\\n\\n    /// @notice Internal utility to retrieve the address of the current admin\\n    /// @return The address of admin\\n    function _getAdmin() internal view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n}\\n\",\"keccak256\":\"0xc9ce727028bc42bf4ea4247dfde9b57a5c36e1820aba5219207aa95c4f035372\",\"license\":\"BUSL-1.1\"},\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\n/// @title Initializable\\n/// @author Kiln\\n/// @notice This contract ensures that initializers are called only once per version\\ncontract Initializable {\\n    /// @notice An error occured during the initialization\\n    /// @param version The version that was attempting to be initialized\\n    /// @param expectedVersion The version that was expected\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    /// @notice Emitted when the contract is properly initialized\\n    /// @param version New version of the contracts\\n    /// @param cdata Complete calldata that was used during the initialization\\n    event Initialize(uint256 version, bytes cdata);\\n\\n    /// @notice Use this modifier on initializers along with a hard-coded version number\\n    /// @param _version Version to initialize\\n    modifier init(uint256 _version) {\\n        if (_version != Version.get()) {\\n            revert InvalidInitialization(_version, Version.get());\\n        }\\n        Version.set(_version + 1); // prevents reentrency on the called method\\n        _;\\n        emit Initialize(_version, msg.data);\\n    }\\n}\\n\",\"keccak256\":\"0xc85d24988a02608db50067c5319e3b42eec8e45726045489bdb8ea1f33e1ce67\",\"license\":\"BUSL-1.1\"},\"contracts/src/OperatorsRegistry.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IOperatorRegistry.1.sol\\\";\\n\\nimport \\\"./libraries/LibUint256.sol\\\";\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./Administrable.sol\\\";\\n\\nimport \\\"./state/operatorsRegistry/Operators.sol\\\";\\nimport \\\"./state/operatorsRegistry/ValidatorKeys.sol\\\";\\nimport \\\"./state/shared/RiverAddress.sol\\\";\\n\\n/// @title Operators Registry (v1)\\n/// @author Kiln\\n/// @notice This contract handles the list of operators and their keys\\ncontract OperatorsRegistryV1 is IOperatorsRegistryV1, Initializable, Administrable {\\n    /// @notice Maximum validators given to an operator per selection loop round\\n    uint256 internal constant MAX_VALIDATOR_ATTRIBUTION_PER_ROUND = 5;\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function initOperatorsRegistryV1(address _admin, address _river) external init(0) {\\n        _setAdmin(_admin);\\n        RiverAddress.set(_river);\\n        emit SetRiver(_river);\\n    }\\n\\n    /// @notice Prevent unauthorized calls\\n    modifier onlyRiver() virtual {\\n        if (msg.sender != RiverAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents anyone except the admin or the given operator to make the call. Also checks if operator is active\\n    /// @notice The admin is able to call this method on behalf of any operator, even if inactive\\n    /// @param _index The index identifying the operator\\n    modifier onlyOperatorOrAdmin(uint256 _index) {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n            return;\\n        }\\n        Operators.Operator storage operator = Operators.get(_index);\\n        if (!operator.active) {\\n            revert InactiveOperator(_index);\\n        }\\n        if (msg.sender != operator.operator) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getRiver() external view returns (address) {\\n        return RiverAddress.get();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getOperator(uint256 _index) external view returns (Operators.Operator memory) {\\n        return Operators.get(_index);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getOperatorCount() external view returns (uint256) {\\n        return Operators.getCount();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getValidator(uint256 _operatorIndex, uint256 _validatorIndex)\\n        external\\n        view\\n        returns (bytes memory publicKey, bytes memory signature, bool funded)\\n    {\\n        (publicKey, signature) = ValidatorKeys.get(_operatorIndex, _validatorIndex);\\n        funded = _validatorIndex < Operators.get(_operatorIndex).funded;\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function listActiveOperators() external view returns (Operators.Operator[] memory) {\\n        return Operators.getAllActive();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function addOperator(string calldata _name, address _operator) external onlyAdmin returns (uint256) {\\n        Operators.Operator memory newOperator = Operators.Operator({\\n            active: true,\\n            operator: _operator,\\n            name: _name,\\n            limit: 0,\\n            funded: 0,\\n            keys: 0,\\n            stopped: 0,\\n            latestKeysEditBlockNumber: block.number\\n        });\\n\\n        uint256 operatorIndex = Operators.push(newOperator) - 1;\\n\\n        emit AddedOperator(operatorIndex, newOperator.name, newOperator.operator);\\n        return operatorIndex;\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorAddress(uint256 _index, address _newOperatorAddress) external onlyOperatorOrAdmin(_index) {\\n        LibSanitize._notZeroAddress(_newOperatorAddress);\\n        Operators.Operator storage operator = Operators.get(_index);\\n\\n        operator.operator = _newOperatorAddress;\\n\\n        emit SetOperatorAddress(_index, _newOperatorAddress);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorName(uint256 _index, string calldata _newName) external onlyOperatorOrAdmin(_index) {\\n        LibSanitize._notEmptyString(_newName);\\n        Operators.Operator storage operator = Operators.get(_index);\\n        operator.name = _newName;\\n\\n        emit SetOperatorName(_index, _newName);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorStatus(uint256 _index, bool _newStatus) external onlyAdmin {\\n        Operators.Operator storage operator = Operators.get(_index);\\n        operator.active = _newStatus;\\n\\n        emit SetOperatorStatus(_index, _newStatus);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorStoppedValidatorCount(uint256 _index, uint256 _newStoppedValidatorCount) external onlyAdmin {\\n        Operators.Operator storage operator = Operators.get(_index);\\n\\n        if (_newStoppedValidatorCount > operator.funded) {\\n            revert LibErrors.InvalidArgument();\\n        }\\n\\n        operator.stopped = _newStoppedValidatorCount;\\n\\n        emit SetOperatorStoppedValidatorCount(_index, operator.stopped);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorLimits(\\n        uint256[] calldata _operatorIndexes,\\n        uint256[] calldata _newLimits,\\n        uint256 _snapshotBlock\\n    ) external onlyAdmin {\\n        if (_operatorIndexes.length != _newLimits.length) {\\n            revert InvalidArrayLengths();\\n        }\\n        if (_operatorIndexes.length == 0) {\\n            revert InvalidEmptyArray();\\n        }\\n        for (uint256 idx = 0; idx < _operatorIndexes.length;) {\\n            uint256 operatorIndex = _operatorIndexes[idx];\\n            uint256 newLimit = _newLimits[idx];\\n\\n            // prevents duplicates\\n            if (idx > 0 && !(operatorIndex > _operatorIndexes[idx - 1])) {\\n                revert UnorderedOperatorList();\\n            }\\n\\n            Operators.Operator storage operator = Operators.get(operatorIndex);\\n\\n            uint256 currentLimit = operator.limit;\\n            if (newLimit == currentLimit) {\\n                emit OperatorLimitUnchanged(operatorIndex, newLimit);\\n                unchecked {\\n                    ++idx;\\n                }\\n                continue;\\n            }\\n\\n            // we enter this condition if the operator edited its keys after the off-chain key audit was made\\n            // we will skip any limit update on that operator unless it was a decrease in the initial limit\\n            if (_snapshotBlock < operator.latestKeysEditBlockNumber && newLimit > currentLimit) {\\n                emit OperatorEditsAfterSnapshot(\\n                    operatorIndex, currentLimit, newLimit, operator.latestKeysEditBlockNumber, _snapshotBlock\\n                    );\\n                unchecked {\\n                    ++idx;\\n                }\\n                continue;\\n            }\\n\\n            // otherwise, we check for limit invariants that shouldn't happen if the off-chain key audit\\n            // was made properly, and if everything is respected, we update the limit\\n\\n            if (newLimit > operator.keys) {\\n                revert OperatorLimitTooHigh(operatorIndex, newLimit, operator.keys);\\n            }\\n\\n            if (newLimit < operator.funded) {\\n                revert OperatorLimitTooLow(operatorIndex, newLimit, operator.funded);\\n            }\\n\\n            operator.limit = newLimit;\\n            emit SetOperatorLimit(operatorIndex, newLimit);\\n\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function addValidators(uint256 _index, uint256 _keyCount, bytes calldata _publicKeysAndSignatures)\\n        external\\n        onlyOperatorOrAdmin(_index)\\n    {\\n        if (_keyCount == 0) {\\n            revert InvalidKeyCount();\\n        }\\n\\n        if (\\n            _publicKeysAndSignatures.length\\n                != _keyCount * (ValidatorKeys.PUBLIC_KEY_LENGTH + ValidatorKeys.SIGNATURE_LENGTH)\\n        ) {\\n            revert InvalidKeysLength();\\n        }\\n\\n        Operators.Operator storage operator = Operators.get(_index);\\n\\n        for (uint256 idx = 0; idx < _keyCount;) {\\n            bytes memory publicKeyAndSignature = LibBytes.slice(\\n                _publicKeysAndSignatures,\\n                idx * (ValidatorKeys.PUBLIC_KEY_LENGTH + ValidatorKeys.SIGNATURE_LENGTH),\\n                ValidatorKeys.PUBLIC_KEY_LENGTH + ValidatorKeys.SIGNATURE_LENGTH\\n            );\\n            ValidatorKeys.set(_index, operator.keys + idx, publicKeyAndSignature);\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        Operators.setKeys(_index, operator.keys + _keyCount);\\n\\n        emit AddedValidatorKeys(_index, _publicKeysAndSignatures);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function removeValidators(uint256 _index, uint256[] calldata _indexes) external onlyOperatorOrAdmin(_index) {\\n        uint256 indexesLength = _indexes.length;\\n        if (indexesLength == 0) {\\n            revert InvalidKeyCount();\\n        }\\n\\n        Operators.Operator storage operator = Operators.get(_index);\\n\\n        uint256 totalKeys = operator.keys;\\n\\n        if (!(_indexes[0] < totalKeys)) {\\n            revert InvalidIndexOutOfBounds();\\n        }\\n\\n        uint256 lastIndex = _indexes[indexesLength - 1];\\n\\n        if (lastIndex < operator.funded) {\\n            revert InvalidFundedKeyDeletionAttempt();\\n        }\\n\\n        bool limitEqualsKeyCount = operator.keys == operator.limit;\\n        Operators.setKeys(_index, totalKeys - indexesLength);\\n\\n        uint256 idx;\\n        for (; idx < indexesLength;) {\\n            uint256 keyIndex = _indexes[idx];\\n\\n            if (idx > 0 && !(keyIndex < _indexes[idx - 1])) {\\n                revert InvalidUnsortedIndexes();\\n            }\\n\\n            unchecked {\\n                ++idx;\\n            }\\n\\n            uint256 lastKeyIndex = totalKeys - idx;\\n\\n            (bytes memory removedPublicKey,) = ValidatorKeys.get(_index, keyIndex);\\n            (bytes memory lastPublicKeyAndSignature) = ValidatorKeys.getRaw(_index, lastKeyIndex);\\n            ValidatorKeys.set(_index, keyIndex, lastPublicKeyAndSignature);\\n            ValidatorKeys.set(_index, lastKeyIndex, new bytes(0));\\n\\n            emit RemovedValidatorKey(_index, removedPublicKey);\\n        }\\n\\n        if (limitEqualsKeyCount) {\\n            operator.limit = operator.keys;\\n        } else if (lastIndex < operator.limit) {\\n            operator.limit = lastIndex;\\n        }\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function pickNextValidators(uint256 _count)\\n        external\\n        onlyRiver\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        return _pickNextValidatorsFromActiveOperators(_count);\\n    }\\n\\n    /// @notice Internal utility to concatenate bytes arrays together\\n    /// @param _arr1 First array\\n    /// @param _arr2 Second array\\n    /// @return The result of the concatenation of _arr1 + _arr2\\n    function _concatenateByteArrays(bytes[] memory _arr1, bytes[] memory _arr2)\\n        internal\\n        pure\\n        returns (bytes[] memory)\\n    {\\n        bytes[] memory res = new bytes[](_arr1.length + _arr2.length);\\n        for (uint256 idx = 0; idx < _arr1.length;) {\\n            res[idx] = _arr1[idx];\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        for (uint256 idx = 0; idx < _arr2.length;) {\\n            res[idx + _arr1.length] = _arr2[idx];\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        return res;\\n    }\\n\\n    /// @notice Internal utility to verify if an operator has fundable keys during the selection process\\n    /// @param _operator The Operator structure in memory\\n    /// @return True if at least one fundable key is available\\n    function _hasFundableKeys(Operators.CachedOperator memory _operator) internal pure returns (bool) {\\n        return (_operator.funded + _operator.picked) < _operator.limit;\\n    }\\n\\n    /// @notice Internal utility to get the count of active validators during the selection process\\n    /// @param _operator The Operator structure in memory\\n    /// @return The count of active validators for the operator\\n    function _getActiveKeyCount(Operators.CachedOperator memory _operator) internal pure returns (uint256) {\\n        return (_operator.funded + _operator.picked) - _operator.stopped;\\n    }\\n\\n    /// @notice Internal utility to retrieve _count or lower fundable keys\\n    /// @dev The selection process starts by retrieving the full list of active operators with at least one fundable key.\\n    /// @dev\\n    /// @dev An operator is considered to have at least one fundable key when their staking limit is higher than their funded key count.\\n    /// @dev\\n    /// @dev    isFundable = operator.active && operator.limit > operator.funded\\n    /// @dev\\n    /// @dev The internal utility will loop on all operators and select the operator with the lowest active validator count.\\n    /// @dev The active validator count is computed by subtracting the stopped validator count to the funded validator count.\\n    /// @dev\\n    /// @dev    activeValidatorCount = operator.funded - operator.stopped\\n    /// @dev\\n    /// @dev During the selection process, we keep in memory all previously selected operators and the number of given validators inside a field\\n    /// @dev called picked that only exists on the CachedOperator structure in memory.\\n    /// @dev\\n    /// @dev    isFundable = operator.active && operator.limit > (operator.funded + operator.picked)\\n    /// @dev    activeValidatorCount = (operator.funded + operator.picked) - operator.stopped\\n    /// @dev\\n    /// @dev When we reach the requested key count or when all available keys are used, we perform a final loop on all the operators and extract keys\\n    /// @dev if any operator has a positive picked count. We then update the storage counters and return the arrays with the public keys and signatures.\\n    /// @param _count Amount of keys required. Contract is expected to send _count or lower.\\n    /// @return publicKeys An array of fundable public keys\\n    /// @return signatures An array of signatures linked to the public keys\\n    function _pickNextValidatorsFromActiveOperators(uint256 _count)\\n        internal\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        Operators.CachedOperator[] memory operators = Operators.getAllFundable();\\n\\n        if (operators.length == 0) {\\n            return (new bytes[](0), new bytes[](0));\\n        }\\n\\n        while (_count > 0) {\\n            // loop on operators to find the first that has fundable keys, taking into account previous loop round attributions\\n            uint256 selectedOperatorIndex = 0;\\n            for (; selectedOperatorIndex < operators.length;) {\\n                if (_hasFundableKeys(operators[selectedOperatorIndex])) {\\n                    break;\\n                }\\n                unchecked {\\n                    ++selectedOperatorIndex;\\n                }\\n            }\\n\\n            // if we reach the end, we have allocated all keys\\n            if (selectedOperatorIndex == operators.length) {\\n                break;\\n            }\\n\\n            // we start from the next operator and we try to find one that has fundable keys but a lower (funded + picked) - stopped value\\n            for (uint256 idx = selectedOperatorIndex + 1; idx < operators.length;) {\\n                if (\\n                    _getActiveKeyCount(operators[idx]) < _getActiveKeyCount(operators[selectedOperatorIndex])\\n                        && _hasFundableKeys(operators[idx])\\n                ) {\\n                    selectedOperatorIndex = idx;\\n                }\\n                unchecked {\\n                    ++idx;\\n                }\\n            }\\n\\n            // we take the smallest value between limit - (funded + picked), _requestedAmount and MAX_VALIDATOR_ATTRIBUTION_PER_ROUND\\n            uint256 pickedKeyCount = LibUint256.min(\\n                LibUint256.min(\\n                    operators[selectedOperatorIndex].limit\\n                        - (operators[selectedOperatorIndex].funded + operators[selectedOperatorIndex].picked),\\n                    MAX_VALIDATOR_ATTRIBUTION_PER_ROUND\\n                ),\\n                _count\\n            );\\n\\n            // we update the cached picked amount\\n            operators[selectedOperatorIndex].picked += pickedKeyCount;\\n\\n            // we update the requested amount count\\n            _count -= pickedKeyCount;\\n        }\\n\\n        // we loop on all operators\\n        for (uint256 idx = 0; idx < operators.length; ++idx) {\\n            // if we picked keys on any operator, we extract the keys from storage and concatenate them in the result\\n            // we then update the funded value\\n            if (operators[idx].picked > 0) {\\n                (bytes[] memory _publicKeys, bytes[] memory _signatures) =\\n                    ValidatorKeys.getKeys(operators[idx].index, operators[idx].funded, operators[idx].picked);\\n                publicKeys = _concatenateByteArrays(publicKeys, _publicKeys);\\n                signatures = _concatenateByteArrays(signatures, _signatures);\\n                (Operators.get(operators[idx].index)).funded += operators[idx].picked;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7074e85f393aae081f6cc9f48c51804edf3dfe676374effa878755fadb5d79bf\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Administrable Interface\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the ownership of the contracts\\ninterface IAdministrable {\\n    /// @notice The pending admin address changed\\n    /// @param pendingAdmin New pending admin address\\n    event SetPendingAdmin(address indexed pendingAdmin);\\n\\n    /// @notice The admin address changed\\n    /// @param admin New admin address\\n    event SetAdmin(address indexed admin);\\n\\n    /// @notice Retrieves the current admin address\\n    /// @return The admin address\\n    function getAdmin() external view returns (address);\\n\\n    /// @notice Retrieve the current pending admin address\\n    /// @return The pending admin address\\n    function getPendingAdmin() external view returns (address);\\n\\n    /// @notice Proposes a new address as admin\\n    /// @dev This security prevents setting an invalid address as an admin. The pending\\n    /// @dev admin has to claim its ownership of the contract, and prove that the new\\n    /// @dev address is able to perform regular transactions.\\n    /// @param _newAdmin New admin address\\n    function proposeAdmin(address _newAdmin) external;\\n\\n    /// @notice Accept the transfer of ownership\\n    /// @dev Only callable by the pending admin. Resets the pending admin if succesful.\\n    function acceptAdmin() external;\\n}\\n\",\"keccak256\":\"0xe45ef81bf9326bac437dcf901eeb80628d5c87d51dcbcf3addb80e834ba7bfea\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IOperatorRegistry.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/operatorsRegistry/Operators.sol\\\";\\n\\n/// @title Operators Registry Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the list of operators and their keys\\ninterface IOperatorsRegistryV1 {\\n    /// @notice A new operator has been added to the registry\\n    /// @param index The operator index\\n    /// @param name The operator display name\\n    /// @param operatorAddress The operator address\\n    event AddedOperator(uint256 indexed index, string name, address indexed operatorAddress);\\n\\n    /// @notice The operator status has been changed\\n    /// @param index The operator index\\n    /// @param active True if the operator is active\\n    event SetOperatorStatus(uint256 indexed index, bool active);\\n\\n    /// @notice The operator limit has been changed\\n    /// @param index The operator index\\n    /// @param newLimit The new operator staking limit\\n    event SetOperatorLimit(uint256 indexed index, uint256 newLimit);\\n\\n    /// @notice The operator stopped validator count has been changed\\n    /// @param index The operator index\\n    /// @param newStoppedValidatorCount The new stopped validator count\\n    event SetOperatorStoppedValidatorCount(uint256 indexed index, uint256 newStoppedValidatorCount);\\n\\n    /// @notice The operator address has been changed\\n    /// @param index The operator index\\n    /// @param newOperatorAddress The new operator address\\n    event SetOperatorAddress(uint256 indexed index, address indexed newOperatorAddress);\\n\\n    /// @notice The operator display name has been changed\\n    /// @param index The operator index\\n    /// @param newName The new display name\\n    event SetOperatorName(uint256 indexed index, string newName);\\n\\n    /// @notice The operator or the admin added new validator keys and signatures\\n    /// @dev The public keys and signatures are concatenated\\n    /// @dev A public key is 48 bytes long\\n    /// @dev A signature is 96 bytes long\\n    /// @dev [P1, S1, P2, S2, ..., PN, SN] where N is the bytes length divided by (96 + 48)\\n    /// @param index The operator index\\n    /// @param publicKeysAndSignatures The concatenated public keys and signatures\\n    event AddedValidatorKeys(uint256 indexed index, bytes publicKeysAndSignatures);\\n\\n    /// @notice The operator or the admin removed a public key and its signature from the registry\\n    /// @param index The operator index\\n    /// @param publicKey The BLS public key that has been removed\\n    event RemovedValidatorKey(uint256 indexed index, bytes publicKey);\\n\\n    /// @notice The stored river address has been changed\\n    /// @param river The new river address\\n    event SetRiver(address indexed river);\\n\\n    /// @notice The operator edited its keys after the snapshot block\\n    /// @dev This means that we cannot assume that its key set is checked by the snapshot\\n    /// @dev This happens only if the limit was meant to be increased\\n    /// @param index The operator index\\n    /// @param currentLimit The current operator limit\\n    /// @param newLimit The new operator limit that was attempted to be set\\n    /// @param latestKeysEditBlockNumber The last block number at which the operator changed its keys\\n    /// @param snapshotBlock The block number of the snapshot\\n    event OperatorEditsAfterSnapshot(\\n        uint256 indexed index,\\n        uint256 currentLimit,\\n        uint256 newLimit,\\n        uint256 indexed latestKeysEditBlockNumber,\\n        uint256 indexed snapshotBlock\\n    );\\n\\n    /// @notice The call didn't alter the limit of the operator\\n    /// @param index The operator index\\n    /// @param limit The limit of the operator\\n    event OperatorLimitUnchanged(uint256 indexed index, uint256 limit);\\n\\n    /// @notice The calling operator is inactive\\n    /// @param index The operator index\\n    error InactiveOperator(uint256 index);\\n\\n    /// @notice A funded key deletion has been attempted\\n    error InvalidFundedKeyDeletionAttempt();\\n\\n    /// @notice The index provided are not sorted properly (descending order)\\n    error InvalidUnsortedIndexes();\\n\\n    /// @notice The provided operator and limits array have different lengths\\n    error InvalidArrayLengths();\\n\\n    /// @notice The provided operator and limits array are empty\\n    error InvalidEmptyArray();\\n\\n    /// @notice The provided key count is 0\\n    error InvalidKeyCount();\\n\\n    /// @notice The provided concatenated keys do not have the expected length\\n    error InvalidKeysLength();\\n\\n    /// @notice The index that is removed is out of bounds\\n    error InvalidIndexOutOfBounds();\\n\\n    /// @notice The value for the operator limit is too high\\n    /// @param index The operator index\\n    /// @param limit The new limit provided\\n    /// @param keyCount The operator key count\\n    error OperatorLimitTooHigh(uint256 index, uint256 limit, uint256 keyCount);\\n\\n    /// @notice The value for the limit is too low\\n    /// @param index The operator index\\n    /// @param limit The new limit provided\\n    /// @param fundedKeyCount The operator funded key count\\n    error OperatorLimitTooLow(uint256 index, uint256 limit, uint256 fundedKeyCount);\\n\\n    /// @notice The provided list of operators is not in increasing order\\n    error UnorderedOperatorList();\\n\\n    /// @notice Initializes the operators registry\\n    /// @param _admin Admin in charge of managing operators\\n    /// @param _river Address of River system\\n    function initOperatorsRegistryV1(address _admin, address _river) external;\\n\\n    /// @notice Retrieve the River address\\n    /// @return The address of River\\n    function getRiver() external view returns (address);\\n\\n    /// @notice Get operator details\\n    /// @param _index The index of the operator\\n    /// @return The details of the operator\\n    function getOperator(uint256 _index) external view returns (Operators.Operator memory);\\n\\n    /// @notice Get operator count\\n    /// @return The operator count\\n    function getOperatorCount() external view returns (uint256);\\n\\n    /// @notice Get the details of a validator\\n    /// @param _operatorIndex The index of the operator\\n    /// @param _validatorIndex The index of the validator\\n    /// @return publicKey The public key of the validator\\n    /// @return signature The signature used during deposit\\n    /// @return funded True if validator has been funded\\n    function getValidator(uint256 _operatorIndex, uint256 _validatorIndex)\\n        external\\n        view\\n        returns (bytes memory publicKey, bytes memory signature, bool funded);\\n\\n    /// @notice Retrieve the active operator set\\n    /// @return The list of active operators and their details\\n    function listActiveOperators() external view returns (Operators.Operator[] memory);\\n\\n    /// @notice Adds an operator to the registry\\n    /// @dev Only callable by the administrator\\n    /// @param _name The name identifying the operator\\n    /// @param _operator The address representing the operator, receiving the rewards\\n    /// @return The index of the new operator\\n    function addOperator(string calldata _name, address _operator) external returns (uint256);\\n\\n    /// @notice Changes the operator address of an operator\\n    /// @dev Only callable by the administrator or the previous operator address\\n    /// @param _index The operator index\\n    /// @param _newOperatorAddress The new address of the operator\\n    function setOperatorAddress(uint256 _index, address _newOperatorAddress) external;\\n\\n    /// @notice Changes the operator name\\n    /// @dev Only callable by the administrator or the operator\\n    /// @param _index The operator index\\n    /// @param _newName The new operator name\\n    function setOperatorName(uint256 _index, string calldata _newName) external;\\n\\n    /// @notice Changes the operator status\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStatus The new status of the operator\\n    function setOperatorStatus(uint256 _index, bool _newStatus) external;\\n\\n    /// @notice Changes the operator stopped validator count\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStoppedValidatorCount The new stopped validator count of the operator\\n    function setOperatorStoppedValidatorCount(uint256 _index, uint256 _newStoppedValidatorCount) external;\\n\\n    /// @notice Changes the operator staking limit\\n    /// @dev Only callable by the administrator\\n    /// @dev The operator indexes must be in increasing order and contain no duplicate\\n    /// @dev The limit cannot exceed the total key count of the operator\\n    /// @dev The _indexes and _newLimits must have the same length.\\n    /// @dev Each limit value is applied to the operator index at the same index in the _indexes array.\\n    /// @param _operatorIndexes The operator indexes, in increasing order and duplicate free\\n    /// @param _newLimits The new staking limit of the operators\\n    /// @param _snapshotBlock The block number at which the snapshot was computed\\n    function setOperatorLimits(\\n        uint256[] calldata _operatorIndexes,\\n        uint256[] calldata _newLimits,\\n        uint256 _snapshotBlock\\n    ) external;\\n\\n    /// @notice Adds new keys for an operator\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @param _index The operator index\\n    /// @param _keyCount The amount of keys provided\\n    /// @param _publicKeysAndSignatures Public keys of the validator, concatenated\\n    function addValidators(uint256 _index, uint256 _keyCount, bytes calldata _publicKeysAndSignatures) external;\\n\\n    /// @notice Remove validator keys\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @dev The indexes must be provided sorted in decreasing order and duplicate-free, otherwise the method will revert\\n    /// @dev The operator limit will be set to the lowest deleted key index if the operator's limit wasn't equal to its total key count\\n    /// @dev The operator or the admin cannot remove funded keys\\n    /// @param _index The operator index\\n    /// @param _indexes The indexes of the keys to remove\\n    function removeValidators(uint256 _index, uint256[] calldata _indexes) external;\\n\\n    /// @notice Retrieve validator keys based on operator statuses\\n    /// @param _count Max amount of keys requested\\n    /// @return publicKeys An array of public keys\\n    /// @return signatures An array of signatures linked to the public keys\\n    function pickNextValidators(uint256 _count)\\n        external\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n}\\n\",\"keccak256\":\"0x2fe6c4658ee8e4a462b79636a57f6ba884f4a9f5ef4fe8a6f58e3a6a3674c576\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\nimport \\\"../state/shared/PendingAdministratorAddress.sol\\\";\\n\\n/// @title Lib Administrable\\n/// @author Kiln\\n/// @notice This library handles the admin and pending admin storage vars\\nlibrary LibAdministrable {\\n    /// @notice Retrieve the system admin\\n    /// @return The address of the system admin\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n\\n    /// @notice Retrieve the pending system admin\\n    /// @return The adress of the pending system admin\\n    function _getPendingAdmin() internal view returns (address) {\\n        return PendingAdministratorAddress.get();\\n    }\\n\\n    /// @notice Sets the system admin\\n    /// @param _admin New system admin\\n    function _setAdmin(address _admin) internal {\\n        AdministratorAddress.set(_admin);\\n    }\\n\\n    /// @notice Sets the pending system admin\\n    /// @param _pendingAdmin New pending system admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        PendingAdministratorAddress.set(_pendingAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0xbe4cec02aff69406624f3ab71a19948997aaf74f63e171137f2f3b85bdb7bc3a\",\"license\":\"MIT\"},\"contracts/src/libraries/LibBasisPoints.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Lib Basis Points\\n/// @notice Holds the basis points max value\\nlibrary LibBasisPoints {\\n    /// @notice The max value for basis points (represents 100%)\\n    uint256 internal constant BASIS_POINTS_MAX = 10_000;\\n}\\n\",\"keccak256\":\"0x97228a01dcd48f033555e3a44f9be37fb474a1b027f703f28097d539808f1c6c\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibBytes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Bytes\\n/// @notice This library helps manipulating bytes\\nlibrary LibBytes {\\n    /// @notice The length overflows an uint\\n    error SliceOverflow();\\n\\n    /// @notice The slice is outside of the initial bytes bounds\\n    error SliceOutOfBounds();\\n\\n    /// @notice Slices the provided bytes\\n    /// @param _bytes Bytes to slice\\n    /// @param _start The starting index of the slice\\n    /// @param _length The length of the slice\\n    /// @return The slice of _bytes starting at _start of length _length\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\n        unchecked {\\n            if (_length + 31 < _length) {\\n                revert SliceOverflow();\\n            }\\n        }\\n        if (_bytes.length < _start + _length) {\\n            revert SliceOutOfBounds();\\n        }\\n\\n        bytes memory tempBytes;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } { mstore(mc, mload(cc)) }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xbcc2d6e851fd5e66e5661856fa089fadd69150c75e07978d89faf6ea8d867234\",\"license\":\"MIT\"},\"contracts/src/libraries/LibErrors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Errors\\n/// @notice Library of common errors\\nlibrary LibErrors {\\n    /// @notice The operator is unauthorized for the caller\\n    /// @param caller Addres performing the call\\n    error Unauthorized(address caller);\\n\\n    /// @notice The call was invalid\\n    error InvalidCall();\\n\\n    /// @notice The argument was invalid\\n    error InvalidArgument();\\n\\n    /// @notice The address is zero\\n    error InvalidZeroAddress();\\n\\n    /// @notice The string is empty\\n    error InvalidEmptyString();\\n\\n    /// @notice The fee is invalid\\n    error InvalidFee();\\n}\\n\",\"keccak256\":\"0x76d2ef5b294a8f2e934c3ce286ee77238ae03a35a7507a378659b37db6d18f03\",\"license\":\"MIT\"},\"contracts/src/libraries/LibSanitize.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./LibErrors.sol\\\";\\nimport \\\"./LibBasisPoints.sol\\\";\\n\\n/// @title Lib Sanitize\\n/// @notice Utilities to sanitize input values\\nlibrary LibSanitize {\\n    /// @notice Reverts if address is 0\\n    /// @param _address Address to check\\n    function _notZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert LibErrors.InvalidZeroAddress();\\n        }\\n    }\\n\\n    /// @notice Reverts if string is empty\\n    /// @param _string String to check\\n    function _notEmptyString(string memory _string) internal pure {\\n        if (bytes(_string).length == 0) {\\n            revert LibErrors.InvalidEmptyString();\\n        }\\n    }\\n\\n    /// @notice Reverts if fee is invalid\\n    /// @param _fee Fee to check\\n    function _validFee(uint256 _fee) internal pure {\\n        if (_fee > LibBasisPoints.BASIS_POINTS_MAX) {\\n            revert LibErrors.InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8aeeb866c4657a96c8b4c006340c7996d15a6f0044b730c276bc3ba8d5bcd48\",\"license\":\"MIT\"},\"contracts/src/libraries/LibUint256.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Uint256\\n/// @notice Utilities to perform uint operations\\nlibrary LibUint256 {\\n    /// @notice Converts a value to little endian (64 bits)\\n    /// @param _value The value to convert\\n    /// @return result The converted value\\n    function toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n        result = 0;\\n        uint256 tempValue = _value;\\n        result = tempValue & 0xFF;\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        assert(0 == tempValue); // fully converted\\n        result <<= (24 * 8);\\n    }\\n\\n    /// @notice Returns the minimum value\\n    /// @param _a First value\\n    /// @param _b Second value\\n    /// @return Smallest value between _a and _b\\n    function min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a > _b ? _b : _a);\\n    }\\n}\\n\",\"keccak256\":\"0xac75e924b50fa887249f6435a710d691f25e95973466f4c91ac4f5d49a2ece4a\",\"license\":\"MIT\"},\"contracts/src/libraries/LibUnstructuredStorage.sol\":{\"content\":\"// SPDX-License-Identifier:    MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @title Lib Unstructured Storage\\n/// @notice Utilities to work with unstructured storage\\nlibrary LibUnstructuredStorage {\\n    /// @notice Retrieve a bool value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bool value\\n    function getStorageBool(bytes32 _position) internal view returns (bool data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an address value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The address value\\n    function getStorageAddress(bytes32 _position) internal view returns (address data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve a bytes32 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bytes32 value\\n    function getStorageBytes32(bytes32 _position) internal view returns (bytes32 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an uint256 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The uint256 value\\n    function getStorageUint256(bytes32 _position) internal view returns (uint256 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Sets a bool value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bool value to set\\n    function setStorageBool(bytes32 _position, bool _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an address value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The address value to set\\n    function setStorageAddress(bytes32 _position, address _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets a bytes32 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bytes32 value to set\\n    function setStorageBytes32(bytes32 _position, bytes32 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an uint256 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The uint256 value to set\\n    function setStorageUint256(bytes32 _position, uint256 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8e1a2f0dc18e023e12747355b3c95258d4de698f2bb6196222a1dc92940caa3\",\"license\":\"MIT\"},\"contracts/src/state/operatorsRegistry/Operators.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Operators Storage\\n/// @notice Utility to manage the Operators in storage\\nlibrary Operators {\\n    /// @notice Storage slot of the Operators\\n    bytes32 internal constant OPERATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.operators\\\")) - 1);\\n\\n    /// @notice The Operator structure in storage\\n    struct Operator {\\n        /// @custom:attribute True if the operator is active and allowed to operate on River\\n        bool active;\\n        /// @custom:attribute Display name of the operator\\n        string name;\\n        /// @custom:attribute Address of the operator\\n        address operator;\\n        /// @dev The following values respect this invariant:\\n        /// @dev     keys >= limit >= funded >= stopped\\n\\n        /// @custom:attribute Staking limit of the operator\\n        uint256 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint256 funded;\\n        /// @custom:attribute The total count of keys of the operator\\n        uint256 keys;\\n        /// @custom:attribute The count of stopped validators. Stopped validators are validators\\n        ///                   that exited the consensus layer (voluntary or slashed)\\n        uint256 stopped;\\n        uint256 latestKeysEditBlockNumber;\\n    }\\n\\n    /// @notice The Operator structure when loaded in memory\\n    struct CachedOperator {\\n        /// @custom:attribute True if the operator is active and allowed to operate on River\\n        bool active;\\n        /// @custom:attribute Display name of the operator\\n        string name;\\n        /// @custom:attribute Address of the operator\\n        address operator;\\n        /// @custom:attribute Staking limit of the operator\\n        uint256 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint256 funded;\\n        /// @custom:attribute The total count of keys of the operator\\n        uint256 keys;\\n        /// @custom:attribute The count of stopped validators\\n        uint256 stopped;\\n        /// @custom:attribute The count of stopped validators. Stopped validators are validators\\n        ///                   that exited the consensus layer (voluntary or slashed)\\n        uint256 index;\\n        /// @custom:attribute The amount of picked keys, buffer used before changing funded in storage\\n        uint256 picked;\\n    }\\n\\n    /// @notice The structure at the storage slot\\n    struct SlotOperator {\\n        /// @custom:attribute Array containing all the operators\\n        Operator[] value;\\n    }\\n\\n    /// @notice The operator was not found\\n    /// @param index The provided index\\n    error OperatorNotFound(uint256 index);\\n\\n    /// @notice Retrieve the operator in storage\\n    /// @param _index The index of the operator\\n    /// @return The Operator structure\\n    function get(uint256 _index) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (r.value.length <= _index) {\\n            revert OperatorNotFound(_index);\\n        }\\n\\n        return r.value[_index];\\n    }\\n\\n    /// @notice Retrieve the operator count in storage\\n    /// @return The count of operators in storage\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Retrieve all the active operators\\n    /// @return The list of active operator structures\\n    function getAllActive() internal view returns (Operator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        Operator[] memory activeOperators = new Operator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                activeOperators[activeIdx] = r.value[idx];\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    /// @notice Retrieve all the active and fundable operators\\n    /// @return The list of active and fundable operators\\n    function getAllFundable() internal view returns (CachedOperator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (_hasFundableKeys(r.value[idx])) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        CachedOperator[] memory activeOperators = new CachedOperator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            Operator memory op = r.value[idx];\\n            if (_hasFundableKeys(op)) {\\n                activeOperators[activeIdx] = CachedOperator({\\n                    active: op.active,\\n                    name: op.name,\\n                    operator: op.operator,\\n                    limit: op.limit,\\n                    funded: op.funded,\\n                    keys: op.keys,\\n                    stopped: op.stopped,\\n                    index: idx,\\n                    picked: 0\\n                });\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    /// @notice Add a new operator in storage\\n    /// @param _newOperator Value of the new operator\\n    /// @return The size of the operator array after the operation\\n    function push(Operator memory _newOperator) internal returns (uint256) {\\n        LibSanitize._notZeroAddress(_newOperator.operator);\\n        LibSanitize._notEmptyString(_newOperator.name);\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_newOperator);\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Atomic operation to set the key count and update the latestKeysEditBlockNumber field at the same time\\n    /// @param _index The operator index\\n    /// @param _newKeys The new value for the key count\\n    function setKeys(uint256 _index, uint256 _newKeys) internal {\\n        Operator storage op = get(_index);\\n\\n        op.keys = _newKeys;\\n        op.latestKeysEditBlockNumber = block.number;\\n    }\\n\\n    /// @notice Checks if an operator is active and has fundable keys\\n    /// @param _operator The operator details\\n    /// @return True if active and fundable\\n    function _hasFundableKeys(Operators.Operator memory _operator) internal pure returns (bool) {\\n        return (_operator.active && _operator.limit > _operator.funded);\\n    }\\n}\\n\",\"keccak256\":\"0xded9f69550674563fe324c95487bdf9e6cad7390064209bdce2afde8dad8f0e2\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/operatorsRegistry/ValidatorKeys.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibBytes.sol\\\";\\n\\n/// @title Validator Keys Storage\\n/// @notice Utility to manage the validator keys in storage\\nlibrary ValidatorKeys {\\n    /// @notice Storage slot of the Validator Keys\\n    bytes32 internal constant VALIDATOR_KEYS_SLOT = bytes32(uint256(keccak256(\\\"river.state.validatorKeys\\\")) - 1);\\n\\n    /// @notice Length in bytes of a BLS Public Key used for validator deposits\\n    uint256 internal constant PUBLIC_KEY_LENGTH = 48;\\n\\n    /// @notice Length in bytes of a BLS Signature used for validator deposits\\n    uint256 internal constant SIGNATURE_LENGTH = 96;\\n\\n    /// @notice The provided public key is not matching the expected length\\n    error InvalidPublicKey();\\n\\n    /// @notice The provided signature is not matching the expected length\\n    error InvalidSignature();\\n\\n    /// @notice Structure of the Validator Keys in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from operator index to key index to key value\\n        mapping(uint256 => mapping(uint256 => bytes)) value;\\n    }\\n\\n    /// @notice Retrieve the Validator Key of an operator at a specific index\\n    /// @param _operatorIndex The operator index\\n    /// @param _idx the Validator Key index\\n    /// @return publicKey The Validator Key public key\\n    /// @return signature The Validator Key signature\\n    function get(uint256 _operatorIndex, uint256 _idx)\\n        internal\\n        view\\n        returns (bytes memory publicKey, bytes memory signature)\\n    {\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        bytes storage entry = r.value[_operatorIndex][_idx];\\n\\n        publicKey = LibBytes.slice(entry, 0, PUBLIC_KEY_LENGTH);\\n        signature = LibBytes.slice(entry, PUBLIC_KEY_LENGTH, SIGNATURE_LENGTH);\\n    }\\n\\n    /// @notice Retrieve the raw concatenated Validator Keys\\n    /// @param _operatorIndex The operator index\\n    /// @param _idx The Validator Key index\\n    /// @return The concatenated public key and signature\\n    function getRaw(uint256 _operatorIndex, uint256 _idx) internal view returns (bytes memory) {\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_operatorIndex][_idx];\\n    }\\n\\n    /// @notice Retrieve multiple keys of an operator starting at an index\\n    /// @param _operatorIndex The operator index\\n    /// @param _startIdx The starting index to retrieve the keys from\\n    /// @param _amount The amount of keys to retrieve\\n    /// @return publicKeys The public keys retrieved\\n    /// @return signatures The signatures associated with the public keys\\n    function getKeys(uint256 _operatorIndex, uint256 _startIdx, uint256 _amount)\\n        internal\\n        view\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        publicKeys = new bytes[](_amount);\\n        signatures = new bytes[](_amount);\\n\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n        uint256 idx;\\n        for (; idx < _amount;) {\\n            bytes memory rawCredentials = r.value[_operatorIndex][idx + _startIdx];\\n            publicKeys[idx] = LibBytes.slice(rawCredentials, 0, PUBLIC_KEY_LENGTH);\\n            signatures[idx] = LibBytes.slice(rawCredentials, PUBLIC_KEY_LENGTH, SIGNATURE_LENGTH);\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n    }\\n\\n    /// @notice Set the concatenated Validator Keys at an index for an operator\\n    /// @param _operatorIndex The operator index\\n    /// @param _idx The key index to write on\\n    /// @param _publicKeyAndSignature The concatenated Validator Keys\\n    function set(uint256 _operatorIndex, uint256 _idx, bytes memory _publicKeyAndSignature) internal {\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_operatorIndex][_idx] = _publicKeyAndSignature;\\n    }\\n}\\n\",\"keccak256\":\"0xe4f987cefb7458d463f2a20044d9dc651e3a13d88c64cef8de74e927339ed216\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrator Address Storage\\n/// @notice Utility to manage the Administrator Address in storage\\nlibrary AdministratorAddress {\\n    /// @notice Storage slot of the Administrator Address\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Administrator Address\\n    /// @return The Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Administrator Address\\n    /// @param _newValue New Administrator Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x4f702b4454858199ca8fd15ef1cee63d9dc3d4d8f2ff7a2f859a4e151e46e8ec\",\"license\":\"MIT\"},\"contracts/src/state/shared/PendingAdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Pending Administrator Address Storage\\n/// @notice Utility to manage the Pending Administrator Address in storage\\nlibrary PendingAdministratorAddress {\\n    /// @notice Storage slot of the Pending Administrator Address\\n    bytes32 public constant PENDING_ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.pendingAdministratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Pending Administrator Address\\n    /// @return The Pending Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Pending Administrator Address\\n    /// @param _newValue New Pending Administrator Address\\n    function set(address _newValue) internal {\\n        LibUnstructuredStorage.setStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x2164cafa435d1e1650037164e2b094ca3af00cc68e05b59140406aa59b1949f2\",\"license\":\"MIT\"},\"contracts/src/state/shared/RiverAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title River Address Storage\\n/// @notice Utility to manage the River Address in storage\\nlibrary RiverAddress {\\n    /// @notice Storage slot of the River Address\\n    bytes32 internal constant RIVER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.riverAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the River Address\\n    /// @return The River Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(RIVER_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the River Address\\n    /// @param _newValue New River Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(RIVER_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xffc846d2e04891e3b0625a9e710fa2a18b4e1af43609f0d76d6c3b7bf5c51384\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Version Storage\\n/// @notice Utility to manage the Version in storage\\nlibrary Version {\\n    /// @notice Storage slot of the Version\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    /// @notice Retrieve the Version\\n    /// @return The Version\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    /// @notice Sets the Version\\n    /// @param _newValue New Version\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(VERSION_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x82f1cc4bbb1f16c1cdbac93596334805eb1a2e0e40ccbd0ab0f78e22d3f83864\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
            "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"InactiveOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEmptyString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFundedKeyDeletionAttempt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidKeyCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidKeysLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUnsortedIndexes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keyCount\",\"type\":\"uint256\"}],\"name\":\"OperatorLimitTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundedKeyCount\",\"type\":\"uint256\"}],\"name\":\"OperatorLimitTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OperatorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnorderedOperatorList\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"}],\"name\":\"AddedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKeysAndSignatures\",\"type\":\"bytes\"}],\"name\":\"AddedValidatorKeys\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"cdata\",\"type\":\"bytes\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"latestKeysEditBlockNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"OperatorEditsAfterSnapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"OperatorLimitUnchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"RemovedValidatorKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperatorAddress\",\"type\":\"address\"}],\"name\":\"SetOperatorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"SetOperatorLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"SetOperatorName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetOperatorStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStoppedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"SetOperatorStoppedValidatorCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"SetPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"river\",\"type\":\"address\"}],\"name\":\"SetRiver\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_keyCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_publicKeysAndSignatures\",\"type\":\"bytes\"}],\"name\":\"addValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getOperator\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestKeysEditBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct Operators.Operator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorIndex\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"funded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_river\",\"type\":\"address\"}],\"name\":\"initOperatorsRegistryV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listActiveOperators\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestKeysEditBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct Operators.Operator[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"pickNextValidators\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"publicKeys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"proposeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"removeValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOperatorAddress\",\"type\":\"address\"}],\"name\":\"setOperatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_operatorIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newLimits\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"setOperatorLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"}],\"name\":\"setOperatorName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"setOperatorStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newStoppedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"setOperatorStoppedValidatorCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kiln\",\"errors\":{\"InactiveOperator(uint256)\":[{\"params\":{\"index\":\"The operator index\"}}],\"InvalidInitialization(uint256,uint256)\":[{\"params\":{\"expectedVersion\":\"The version that was expected\",\"version\":\"The version that was attempting to be initialized\"}}],\"OperatorLimitTooHigh(uint256,uint256,uint256)\":[{\"params\":{\"index\":\"The operator index\",\"keyCount\":\"The operator key count\",\"limit\":\"The new limit provided\"}}],\"OperatorLimitTooLow(uint256,uint256,uint256)\":[{\"params\":{\"fundedKeyCount\":\"The operator funded key count\",\"index\":\"The operator index\",\"limit\":\"The new limit provided\"}}],\"OperatorNotFound(uint256)\":[{\"params\":{\"index\":\"The provided index\"}}],\"Unauthorized(address)\":[{\"params\":{\"caller\":\"Address performing the call\"}}]},\"kind\":\"dev\",\"methods\":{\"acceptAdmin()\":{\"details\":\"Only callable by the pending admin. Resets the pending admin if succesful.\"},\"addOperator(string,address)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_name\":\"The name identifying the operator\",\"_operator\":\"The address representing the operator, receiving the rewards\"},\"returns\":{\"_0\":\"The index of the new operator\"}},\"addValidators(uint256,uint256,bytes)\":{\"details\":\"Only callable by the administrator or the operator address\",\"params\":{\"_index\":\"The operator index\",\"_keyCount\":\"The amount of keys provided\",\"_publicKeysAndSignatures\":\"Public keys of the validator, concatenated\"}},\"getAdmin()\":{\"returns\":{\"_0\":\"The admin address\"}},\"getOperator(uint256)\":{\"params\":{\"_index\":\"The index of the operator\"},\"returns\":{\"_0\":\"The details of the operator\"}},\"getOperatorCount()\":{\"returns\":{\"_0\":\"The operator count\"}},\"getPendingAdmin()\":{\"returns\":{\"_0\":\"The pending admin address\"}},\"getRiver()\":{\"returns\":{\"_0\":\"The address of River\"}},\"getValidator(uint256,uint256)\":{\"params\":{\"_operatorIndex\":\"The index of the operator\",\"_validatorIndex\":\"The index of the validator\"},\"returns\":{\"funded\":\"True if validator has been funded\",\"publicKey\":\"The public key of the validator\",\"signature\":\"The signature used during deposit\"}},\"initOperatorsRegistryV1(address,address)\":{\"params\":{\"_admin\":\"Admin in charge of managing operators\",\"_river\":\"Address of River system\"}},\"listActiveOperators()\":{\"returns\":{\"_0\":\"The list of active operators and their details\"}},\"pickNextValidators(uint256)\":{\"params\":{\"_count\":\"Max amount of keys requested\"},\"returns\":{\"publicKeys\":\"An array of public keys\",\"signatures\":\"An array of signatures linked to the public keys\"}},\"proposeAdmin(address)\":{\"details\":\"This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.\",\"params\":{\"_newAdmin\":\"New admin address\"}},\"removeValidators(uint256,uint256[])\":{\"details\":\"Only callable by the administrator or the operator addressThe indexes must be provided sorted in decreasing order and duplicate-free, otherwise the method will revertThe operator limit will be set to the lowest deleted key index if the operator's limit wasn't equal to its total key countThe operator or the admin cannot remove funded keysWhen removing validators, the indexes of specific unfunded keys can be changed in order to properlyremove the keys from the storage array. Beware of this specific behavior when chaining calls as thetargeted public key indexes can point to a different key after a first call was made and performedsome swaps\",\"params\":{\"_index\":\"The operator index\",\"_indexes\":\"The indexes of the keys to remove\"}},\"setOperatorAddress(uint256,address)\":{\"details\":\"Only callable by the administrator or the previous operator address\",\"params\":{\"_index\":\"The operator index\",\"_newOperatorAddress\":\"The new address of the operator\"}},\"setOperatorLimits(uint256[],uint256[],uint256)\":{\"details\":\"Only callable by the administratorThe operator indexes must be in increasing order and contain no duplicateThe limit cannot exceed the total key count of the operatorThe _indexes and _newLimits must have the same length.Each limit value is applied to the operator index at the same index in the _indexes array.\",\"params\":{\"_newLimits\":\"The new staking limit of the operators\",\"_operatorIndexes\":\"The operator indexes, in increasing order and duplicate free\",\"_snapshotBlock\":\"The block number at which the snapshot was computed\"}},\"setOperatorName(uint256,string)\":{\"details\":\"Only callable by the administrator or the operator\",\"params\":{\"_index\":\"The operator index\",\"_newName\":\"The new operator name\"}},\"setOperatorStatus(uint256,bool)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_index\":\"The operator index\",\"_newStatus\":\"The new status of the operator\"}},\"setOperatorStoppedValidatorCount(uint256,uint256)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_index\":\"The operator index\",\"_newStoppedValidatorCount\":\"The new stopped validator count of the operator\"}}},\"title\":\"Operators Registry (v1)\",\"version\":1},\"userdoc\":{\"errors\":{\"InactiveOperator(uint256)\":[{\"notice\":\"The calling operator is inactive\"}],\"InvalidArgument()\":[{\"notice\":\"The argument was invalid\"}],\"InvalidArrayLengths()\":[{\"notice\":\"The provided operator and limits array have different lengths\"}],\"InvalidEmptyArray()\":[{\"notice\":\"The provided operator and limits array are empty\"}],\"InvalidEmptyString()\":[{\"notice\":\"The string is empty\"}],\"InvalidFundedKeyDeletionAttempt()\":[{\"notice\":\"A funded key deletion has been attempted\"}],\"InvalidIndexOutOfBounds()\":[{\"notice\":\"The index that is removed is out of bounds\"}],\"InvalidInitialization(uint256,uint256)\":[{\"notice\":\"An error occured during the initialization\"}],\"InvalidKeyCount()\":[{\"notice\":\"The provided key count is 0\"}],\"InvalidKeysLength()\":[{\"notice\":\"The provided concatenated keys do not have the expected length\"}],\"InvalidUnsortedIndexes()\":[{\"notice\":\"The index provided are not sorted properly (descending order)\"}],\"InvalidZeroAddress()\":[{\"notice\":\"The address is zero\"}],\"OperatorLimitTooHigh(uint256,uint256,uint256)\":[{\"notice\":\"The value for the operator limit is too high\"}],\"OperatorLimitTooLow(uint256,uint256,uint256)\":[{\"notice\":\"The value for the limit is too low\"}],\"OperatorNotFound(uint256)\":[{\"notice\":\"The operator was not found\"}],\"SliceOutOfBounds()\":[{\"notice\":\"The slice is outside of the initial bytes bounds\"}],\"SliceOverflow()\":[{\"notice\":\"The length overflows an uint\"}],\"Unauthorized(address)\":[{\"notice\":\"The operator is unauthorized for the caller\"}],\"UnorderedOperatorList()\":[{\"notice\":\"The provided list of operators is not in increasing order\"}]},\"events\":{\"AddedOperator(uint256,string,address)\":{\"notice\":\"A new operator has been added to the registry\"},\"AddedValidatorKeys(uint256,bytes)\":{\"notice\":\"The operator or the admin added new validator keys and signatures\"},\"Initialize(uint256,bytes)\":{\"notice\":\"Emitted when the contract is properly initialized\"},\"OperatorEditsAfterSnapshot(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"The operator edited its keys after the snapshot block\"},\"OperatorLimitUnchanged(uint256,uint256)\":{\"notice\":\"The call didn't alter the limit of the operator\"},\"RemovedValidatorKey(uint256,bytes)\":{\"notice\":\"The operator or the admin removed a public key and its signature from the registry\"},\"SetAdmin(address)\":{\"notice\":\"The admin address changed\"},\"SetOperatorAddress(uint256,address)\":{\"notice\":\"The operator address has been changed\"},\"SetOperatorLimit(uint256,uint256)\":{\"notice\":\"The operator limit has been changed\"},\"SetOperatorName(uint256,string)\":{\"notice\":\"The operator display name has been changed\"},\"SetOperatorStatus(uint256,bool)\":{\"notice\":\"The operator status has been changed\"},\"SetOperatorStoppedValidatorCount(uint256,uint256)\":{\"notice\":\"The operator stopped validator count has been changed\"},\"SetPendingAdmin(address)\":{\"notice\":\"The pending admin address changed\"},\"SetRiver(address)\":{\"notice\":\"The stored river address has been changed\"}},\"kind\":\"user\",\"methods\":{\"acceptAdmin()\":{\"notice\":\"Accept the transfer of ownership\"},\"addOperator(string,address)\":{\"notice\":\"Adds an operator to the registry\"},\"addValidators(uint256,uint256,bytes)\":{\"notice\":\"Adds new keys for an operator\"},\"getAdmin()\":{\"notice\":\"Retrieves the current admin address\"},\"getOperator(uint256)\":{\"notice\":\"Get operator details\"},\"getOperatorCount()\":{\"notice\":\"Get operator count\"},\"getPendingAdmin()\":{\"notice\":\"Retrieve the current pending admin address\"},\"getRiver()\":{\"notice\":\"Retrieve the River address\"},\"getValidator(uint256,uint256)\":{\"notice\":\"Get the details of a validator\"},\"initOperatorsRegistryV1(address,address)\":{\"notice\":\"Initializes the operators registry\"},\"listActiveOperators()\":{\"notice\":\"Retrieve the active operator set\"},\"pickNextValidators(uint256)\":{\"notice\":\"Retrieve validator keys based on operator statuses\"},\"proposeAdmin(address)\":{\"notice\":\"Proposes a new address as admin\"},\"removeValidators(uint256,uint256[])\":{\"notice\":\"Remove validator keys\"},\"setOperatorAddress(uint256,address)\":{\"notice\":\"Changes the operator address of an operator\"},\"setOperatorLimits(uint256[],uint256[],uint256)\":{\"notice\":\"Changes the operator staking limit\"},\"setOperatorName(uint256,string)\":{\"notice\":\"Changes the operator name\"},\"setOperatorStatus(uint256,bool)\":{\"notice\":\"Changes the operator status\"},\"setOperatorStoppedValidatorCount(uint256,uint256)\":{\"notice\":\"Changes the operator stopped validator count\"}},\"notice\":\"This contract handles the list of operators and their keys\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/OperatorsRegistry.1.sol\":\"OperatorsRegistryV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/Administrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IAdministrable.sol\\\";\\n\\nimport \\\"./libraries/LibAdministrable.sol\\\";\\nimport \\\"./libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrable\\n/// @author Kiln\\n/// @notice This contract handles the administration of the contracts\\nabstract contract Administrable is IAdministrable {\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() {\\n        if (msg.sender != LibAdministrable._getAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyPendingAdmin() {\\n        if (msg.sender != LibAdministrable._getPendingAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getAdmin() external view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getPendingAdmin() external view returns (address) {\\n        return LibAdministrable._getPendingAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function proposeAdmin(address _newAdmin) external onlyAdmin {\\n        _setPendingAdmin(_newAdmin);\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function acceptAdmin() external onlyPendingAdmin {\\n        _setAdmin(LibAdministrable._getPendingAdmin());\\n        _setPendingAdmin(address(0));\\n    }\\n\\n    /// @notice Internal utility to set the admin address\\n    /// @param _admin Address to set as admin\\n    function _setAdmin(address _admin) internal {\\n        LibSanitize._notZeroAddress(_admin);\\n        LibAdministrable._setAdmin(_admin);\\n        emit SetAdmin(_admin);\\n    }\\n\\n    /// @notice Internal utility to set the pending admin address\\n    /// @param _pendingAdmin Address to set as pending admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        LibAdministrable._setPendingAdmin(_pendingAdmin);\\n        emit SetPendingAdmin(_pendingAdmin);\\n    }\\n\\n    /// @notice Internal utility to retrieve the address of the current admin\\n    /// @return The address of admin\\n    function _getAdmin() internal view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n}\\n\",\"keccak256\":\"0xc9ce727028bc42bf4ea4247dfde9b57a5c36e1820aba5219207aa95c4f035372\",\"license\":\"BUSL-1.1\"},\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\n/// @title Initializable\\n/// @author Kiln\\n/// @notice This contract ensures that initializers are called only once per version\\ncontract Initializable {\\n    /// @notice An error occured during the initialization\\n    /// @param version The version that was attempting to be initialized\\n    /// @param expectedVersion The version that was expected\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    /// @notice Emitted when the contract is properly initialized\\n    /// @param version New version of the contracts\\n    /// @param cdata Complete calldata that was used during the initialization\\n    event Initialize(uint256 version, bytes cdata);\\n\\n    /// @notice Use this modifier on initializers along with a hard-coded version number\\n    /// @param _version Version to initialize\\n    modifier init(uint256 _version) {\\n        if (_version != Version.get()) {\\n            revert InvalidInitialization(_version, Version.get());\\n        }\\n        Version.set(_version + 1); // prevents reentrency on the called method\\n        _;\\n        emit Initialize(_version, msg.data);\\n    }\\n}\\n\",\"keccak256\":\"0xc85d24988a02608db50067c5319e3b42eec8e45726045489bdb8ea1f33e1ce67\",\"license\":\"BUSL-1.1\"},\"contracts/src/OperatorsRegistry.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IOperatorRegistry.1.sol\\\";\\n\\nimport \\\"./libraries/LibUint256.sol\\\";\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./Administrable.sol\\\";\\n\\nimport \\\"./state/operatorsRegistry/Operators.sol\\\";\\nimport \\\"./state/operatorsRegistry/ValidatorKeys.sol\\\";\\nimport \\\"./state/shared/RiverAddress.sol\\\";\\n\\n/// @title Operators Registry (v1)\\n/// @author Kiln\\n/// @notice This contract handles the list of operators and their keys\\ncontract OperatorsRegistryV1 is IOperatorsRegistryV1, Initializable, Administrable {\\n    /// @notice Maximum validators given to an operator per selection loop round\\n    uint256 internal constant MAX_VALIDATOR_ATTRIBUTION_PER_ROUND = 5;\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function initOperatorsRegistryV1(address _admin, address _river) external init(0) {\\n        _setAdmin(_admin);\\n        RiverAddress.set(_river);\\n        emit SetRiver(_river);\\n    }\\n\\n    /// @notice Prevent unauthorized calls\\n    modifier onlyRiver() virtual {\\n        if (msg.sender != RiverAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents anyone except the admin or the given operator to make the call. Also checks if operator is active\\n    /// @notice The admin is able to call this method on behalf of any operator, even if inactive\\n    /// @param _index The index identifying the operator\\n    modifier onlyOperatorOrAdmin(uint256 _index) {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n            return;\\n        }\\n        Operators.Operator storage operator = Operators.get(_index);\\n        if (!operator.active) {\\n            revert InactiveOperator(_index);\\n        }\\n        if (msg.sender != operator.operator) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getRiver() external view returns (address) {\\n        return RiverAddress.get();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getOperator(uint256 _index) external view returns (Operators.Operator memory) {\\n        return Operators.get(_index);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getOperatorCount() external view returns (uint256) {\\n        return Operators.getCount();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getValidator(uint256 _operatorIndex, uint256 _validatorIndex)\\n        external\\n        view\\n        returns (bytes memory publicKey, bytes memory signature, bool funded)\\n    {\\n        (publicKey, signature) = ValidatorKeys.get(_operatorIndex, _validatorIndex);\\n        funded = _validatorIndex < Operators.get(_operatorIndex).funded;\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function listActiveOperators() external view returns (Operators.Operator[] memory) {\\n        return Operators.getAllActive();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function addOperator(string calldata _name, address _operator) external onlyAdmin returns (uint256) {\\n        Operators.Operator memory newOperator = Operators.Operator({\\n            active: true,\\n            operator: _operator,\\n            name: _name,\\n            limit: 0,\\n            funded: 0,\\n            keys: 0,\\n            stopped: 0,\\n            latestKeysEditBlockNumber: block.number\\n        });\\n\\n        uint256 operatorIndex = Operators.push(newOperator) - 1;\\n\\n        emit AddedOperator(operatorIndex, _name, _operator);\\n        return operatorIndex;\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorAddress(uint256 _index, address _newOperatorAddress) external onlyOperatorOrAdmin(_index) {\\n        LibSanitize._notZeroAddress(_newOperatorAddress);\\n        Operators.Operator storage operator = Operators.get(_index);\\n\\n        operator.operator = _newOperatorAddress;\\n\\n        emit SetOperatorAddress(_index, _newOperatorAddress);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorName(uint256 _index, string calldata _newName) external onlyOperatorOrAdmin(_index) {\\n        LibSanitize._notEmptyString(_newName);\\n        Operators.Operator storage operator = Operators.get(_index);\\n        operator.name = _newName;\\n\\n        emit SetOperatorName(_index, _newName);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorStatus(uint256 _index, bool _newStatus) external onlyAdmin {\\n        Operators.Operator storage operator = Operators.get(_index);\\n        operator.active = _newStatus;\\n\\n        emit SetOperatorStatus(_index, _newStatus);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorStoppedValidatorCount(uint256 _index, uint256 _newStoppedValidatorCount) external onlyAdmin {\\n        Operators.Operator storage operator = Operators.get(_index);\\n\\n        if (_newStoppedValidatorCount > operator.funded) {\\n            revert LibErrors.InvalidArgument();\\n        }\\n\\n        operator.stopped = _newStoppedValidatorCount;\\n\\n        emit SetOperatorStoppedValidatorCount(_index, _newStoppedValidatorCount);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorLimits(\\n        uint256[] calldata _operatorIndexes,\\n        uint256[] calldata _newLimits,\\n        uint256 _snapshotBlock\\n    ) external onlyAdmin {\\n        if (_operatorIndexes.length != _newLimits.length) {\\n            revert InvalidArrayLengths();\\n        }\\n        if (_operatorIndexes.length == 0) {\\n            revert InvalidEmptyArray();\\n        }\\n        for (uint256 idx = 0; idx < _operatorIndexes.length;) {\\n            uint256 operatorIndex = _operatorIndexes[idx];\\n            uint256 newLimit = _newLimits[idx];\\n\\n            // prevents duplicates\\n            if (idx > 0 && !(operatorIndex > _operatorIndexes[idx - 1])) {\\n                revert UnorderedOperatorList();\\n            }\\n\\n            Operators.Operator storage operator = Operators.get(operatorIndex);\\n\\n            uint256 currentLimit = operator.limit;\\n            if (newLimit == currentLimit) {\\n                emit OperatorLimitUnchanged(operatorIndex, newLimit);\\n                unchecked {\\n                    ++idx;\\n                }\\n                continue;\\n            }\\n\\n            // we enter this condition if the operator edited its keys after the off-chain key audit was made\\n            // we will skip any limit update on that operator unless it was a decrease in the initial limit\\n            if (_snapshotBlock < operator.latestKeysEditBlockNumber && newLimit > currentLimit) {\\n                emit OperatorEditsAfterSnapshot(\\n                    operatorIndex, currentLimit, newLimit, operator.latestKeysEditBlockNumber, _snapshotBlock\\n                    );\\n                unchecked {\\n                    ++idx;\\n                }\\n                continue;\\n            }\\n\\n            // otherwise, we check for limit invariants that shouldn't happen if the off-chain key audit\\n            // was made properly, and if everything is respected, we update the limit\\n\\n            if (newLimit > operator.keys) {\\n                revert OperatorLimitTooHigh(operatorIndex, newLimit, operator.keys);\\n            }\\n\\n            if (newLimit < operator.funded) {\\n                revert OperatorLimitTooLow(operatorIndex, newLimit, operator.funded);\\n            }\\n\\n            operator.limit = newLimit;\\n            emit SetOperatorLimit(operatorIndex, newLimit);\\n\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function addValidators(uint256 _index, uint256 _keyCount, bytes calldata _publicKeysAndSignatures)\\n        external\\n        onlyOperatorOrAdmin(_index)\\n    {\\n        if (_keyCount == 0) {\\n            revert InvalidKeyCount();\\n        }\\n\\n        if (\\n            _publicKeysAndSignatures.length\\n                != _keyCount * (ValidatorKeys.PUBLIC_KEY_LENGTH + ValidatorKeys.SIGNATURE_LENGTH)\\n        ) {\\n            revert InvalidKeysLength();\\n        }\\n\\n        Operators.Operator storage operator = Operators.get(_index);\\n\\n        for (uint256 idx = 0; idx < _keyCount;) {\\n            bytes memory publicKeyAndSignature = LibBytes.slice(\\n                _publicKeysAndSignatures,\\n                idx * (ValidatorKeys.PUBLIC_KEY_LENGTH + ValidatorKeys.SIGNATURE_LENGTH),\\n                ValidatorKeys.PUBLIC_KEY_LENGTH + ValidatorKeys.SIGNATURE_LENGTH\\n            );\\n            ValidatorKeys.set(_index, operator.keys + idx, publicKeyAndSignature);\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        Operators.setKeys(_index, operator.keys + _keyCount);\\n\\n        emit AddedValidatorKeys(_index, _publicKeysAndSignatures);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function removeValidators(uint256 _index, uint256[] calldata _indexes) external onlyOperatorOrAdmin(_index) {\\n        uint256 indexesLength = _indexes.length;\\n        if (indexesLength == 0) {\\n            revert InvalidKeyCount();\\n        }\\n\\n        Operators.Operator storage operator = Operators.get(_index);\\n\\n        uint256 totalKeys = operator.keys;\\n\\n        if (!(_indexes[0] < totalKeys)) {\\n            revert InvalidIndexOutOfBounds();\\n        }\\n\\n        uint256 lastIndex = _indexes[indexesLength - 1];\\n\\n        if (lastIndex < operator.funded) {\\n            revert InvalidFundedKeyDeletionAttempt();\\n        }\\n\\n        bool limitEqualsKeyCount = operator.keys == operator.limit;\\n        Operators.setKeys(_index, totalKeys - indexesLength);\\n\\n        uint256 idx;\\n        for (; idx < indexesLength;) {\\n            uint256 keyIndex = _indexes[idx];\\n\\n            if (idx > 0 && !(keyIndex < _indexes[idx - 1])) {\\n                revert InvalidUnsortedIndexes();\\n            }\\n\\n            unchecked {\\n                ++idx;\\n            }\\n\\n            uint256 lastKeyIndex = totalKeys - idx;\\n\\n            (bytes memory removedPublicKey,) = ValidatorKeys.get(_index, keyIndex);\\n            (bytes memory lastPublicKeyAndSignature) = ValidatorKeys.getRaw(_index, lastKeyIndex);\\n            ValidatorKeys.set(_index, keyIndex, lastPublicKeyAndSignature);\\n            ValidatorKeys.set(_index, lastKeyIndex, new bytes(0));\\n\\n            emit RemovedValidatorKey(_index, removedPublicKey);\\n        }\\n\\n        if (limitEqualsKeyCount) {\\n            operator.limit = operator.keys;\\n        } else if (lastIndex < operator.limit) {\\n            operator.limit = lastIndex;\\n        }\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function pickNextValidators(uint256 _count)\\n        external\\n        onlyRiver\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        return _pickNextValidatorsFromActiveOperators(_count);\\n    }\\n\\n    /// @notice Internal utility to concatenate bytes arrays together\\n    /// @param _arr1 First array\\n    /// @param _arr2 Second array\\n    /// @return The result of the concatenation of _arr1 + _arr2\\n    function _concatenateByteArrays(bytes[] memory _arr1, bytes[] memory _arr2)\\n        internal\\n        pure\\n        returns (bytes[] memory)\\n    {\\n        bytes[] memory res = new bytes[](_arr1.length + _arr2.length);\\n        for (uint256 idx = 0; idx < _arr1.length;) {\\n            res[idx] = _arr1[idx];\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        for (uint256 idx = 0; idx < _arr2.length;) {\\n            res[idx + _arr1.length] = _arr2[idx];\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        return res;\\n    }\\n\\n    /// @notice Internal utility to verify if an operator has fundable keys during the selection process\\n    /// @param _operator The Operator structure in memory\\n    /// @return True if at least one fundable key is available\\n    function _hasFundableKeys(Operators.CachedOperator memory _operator) internal pure returns (bool) {\\n        return (_operator.funded + _operator.picked) < _operator.limit;\\n    }\\n\\n    /// @notice Internal utility to get the count of active validators during the selection process\\n    /// @param _operator The Operator structure in memory\\n    /// @return The count of active validators for the operator\\n    function _getActiveKeyCount(Operators.CachedOperator memory _operator) internal pure returns (uint256) {\\n        return (_operator.funded + _operator.picked) - _operator.stopped;\\n    }\\n\\n    /// @notice Internal utility to retrieve _count or lower fundable keys\\n    /// @dev The selection process starts by retrieving the full list of active operators with at least one fundable key.\\n    /// @dev\\n    /// @dev An operator is considered to have at least one fundable key when their staking limit is higher than their funded key count.\\n    /// @dev\\n    /// @dev    isFundable = operator.active && operator.limit > operator.funded\\n    /// @dev\\n    /// @dev The internal utility will loop on all operators and select the operator with the lowest active validator count.\\n    /// @dev The active validator count is computed by subtracting the stopped validator count to the funded validator count.\\n    /// @dev\\n    /// @dev    activeValidatorCount = operator.funded - operator.stopped\\n    /// @dev\\n    /// @dev During the selection process, we keep in memory all previously selected operators and the number of given validators inside a field\\n    /// @dev called picked that only exists on the CachedOperator structure in memory.\\n    /// @dev\\n    /// @dev    isFundable = operator.active && operator.limit > (operator.funded + operator.picked)\\n    /// @dev    activeValidatorCount = (operator.funded + operator.picked) - operator.stopped\\n    /// @dev\\n    /// @dev When we reach the requested key count or when all available keys are used, we perform a final loop on all the operators and extract keys\\n    /// @dev if any operator has a positive picked count. We then update the storage counters and return the arrays with the public keys and signatures.\\n    /// @param _count Amount of keys required. Contract is expected to send _count or lower.\\n    /// @return publicKeys An array of fundable public keys\\n    /// @return signatures An array of signatures linked to the public keys\\n    function _pickNextValidatorsFromActiveOperators(uint256 _count)\\n        internal\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        Operators.CachedOperator[] memory operators = Operators.getAllFundable();\\n\\n        if (operators.length == 0) {\\n            return (new bytes[](0), new bytes[](0));\\n        }\\n\\n        while (_count > 0) {\\n            // loop on operators to find the first that has fundable keys, taking into account previous loop round attributions\\n            uint256 selectedOperatorIndex = 0;\\n            for (; selectedOperatorIndex < operators.length;) {\\n                if (_hasFundableKeys(operators[selectedOperatorIndex])) {\\n                    break;\\n                }\\n                unchecked {\\n                    ++selectedOperatorIndex;\\n                }\\n            }\\n\\n            // if we reach the end, we have allocated all keys\\n            if (selectedOperatorIndex == operators.length) {\\n                break;\\n            }\\n\\n            // we start from the next operator and we try to find one that has fundable keys but a lower (funded + picked) - stopped value\\n            for (uint256 idx = selectedOperatorIndex + 1; idx < operators.length;) {\\n                if (\\n                    _getActiveKeyCount(operators[idx]) < _getActiveKeyCount(operators[selectedOperatorIndex])\\n                        && _hasFundableKeys(operators[idx])\\n                ) {\\n                    selectedOperatorIndex = idx;\\n                }\\n                unchecked {\\n                    ++idx;\\n                }\\n            }\\n\\n            // we take the smallest value between limit - (funded + picked), _requestedAmount and MAX_VALIDATOR_ATTRIBUTION_PER_ROUND\\n            uint256 pickedKeyCount = LibUint256.min(\\n                LibUint256.min(\\n                    operators[selectedOperatorIndex].limit\\n                        - (operators[selectedOperatorIndex].funded + operators[selectedOperatorIndex].picked),\\n                    MAX_VALIDATOR_ATTRIBUTION_PER_ROUND\\n                ),\\n                _count\\n            );\\n\\n            // we update the cached picked amount\\n            operators[selectedOperatorIndex].picked += pickedKeyCount;\\n\\n            // we update the requested amount count\\n            _count -= pickedKeyCount;\\n        }\\n\\n        // we loop on all operators\\n        for (uint256 idx = 0; idx < operators.length; ++idx) {\\n            // if we picked keys on any operator, we extract the keys from storage and concatenate them in the result\\n            // we then update the funded value\\n            if (operators[idx].picked > 0) {\\n                (bytes[] memory _publicKeys, bytes[] memory _signatures) =\\n                    ValidatorKeys.getKeys(operators[idx].index, operators[idx].funded, operators[idx].picked);\\n                publicKeys = _concatenateByteArrays(publicKeys, _publicKeys);\\n                signatures = _concatenateByteArrays(signatures, _signatures);\\n                (Operators.get(operators[idx].index)).funded += operators[idx].picked;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d22ec1cac4f16447e99f5241e5226c70299c1bab217a33764c5f9b8493496bf\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Administrable Interface\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the ownership of the contracts\\ninterface IAdministrable {\\n    /// @notice The pending admin address changed\\n    /// @param pendingAdmin New pending admin address\\n    event SetPendingAdmin(address indexed pendingAdmin);\\n\\n    /// @notice The admin address changed\\n    /// @param admin New admin address\\n    event SetAdmin(address indexed admin);\\n\\n    /// @notice Retrieves the current admin address\\n    /// @return The admin address\\n    function getAdmin() external view returns (address);\\n\\n    /// @notice Retrieve the current pending admin address\\n    /// @return The pending admin address\\n    function getPendingAdmin() external view returns (address);\\n\\n    /// @notice Proposes a new address as admin\\n    /// @dev This security prevents setting an invalid address as an admin. The pending\\n    /// @dev admin has to claim its ownership of the contract, and prove that the new\\n    /// @dev address is able to perform regular transactions.\\n    /// @param _newAdmin New admin address\\n    function proposeAdmin(address _newAdmin) external;\\n\\n    /// @notice Accept the transfer of ownership\\n    /// @dev Only callable by the pending admin. Resets the pending admin if succesful.\\n    function acceptAdmin() external;\\n}\\n\",\"keccak256\":\"0xe45ef81bf9326bac437dcf901eeb80628d5c87d51dcbcf3addb80e834ba7bfea\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IOperatorRegistry.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/operatorsRegistry/Operators.sol\\\";\\n\\n/// @title Operators Registry Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the list of operators and their keys\\ninterface IOperatorsRegistryV1 {\\n    /// @notice A new operator has been added to the registry\\n    /// @param index The operator index\\n    /// @param name The operator display name\\n    /// @param operatorAddress The operator address\\n    event AddedOperator(uint256 indexed index, string name, address indexed operatorAddress);\\n\\n    /// @notice The operator status has been changed\\n    /// @param index The operator index\\n    /// @param active True if the operator is active\\n    event SetOperatorStatus(uint256 indexed index, bool active);\\n\\n    /// @notice The operator limit has been changed\\n    /// @param index The operator index\\n    /// @param newLimit The new operator staking limit\\n    event SetOperatorLimit(uint256 indexed index, uint256 newLimit);\\n\\n    /// @notice The operator stopped validator count has been changed\\n    /// @param index The operator index\\n    /// @param newStoppedValidatorCount The new stopped validator count\\n    event SetOperatorStoppedValidatorCount(uint256 indexed index, uint256 newStoppedValidatorCount);\\n\\n    /// @notice The operator address has been changed\\n    /// @param index The operator index\\n    /// @param newOperatorAddress The new operator address\\n    event SetOperatorAddress(uint256 indexed index, address indexed newOperatorAddress);\\n\\n    /// @notice The operator display name has been changed\\n    /// @param index The operator index\\n    /// @param newName The new display name\\n    event SetOperatorName(uint256 indexed index, string newName);\\n\\n    /// @notice The operator or the admin added new validator keys and signatures\\n    /// @dev The public keys and signatures are concatenated\\n    /// @dev A public key is 48 bytes long\\n    /// @dev A signature is 96 bytes long\\n    /// @dev [P1, S1, P2, S2, ..., PN, SN] where N is the bytes length divided by (96 + 48)\\n    /// @param index The operator index\\n    /// @param publicKeysAndSignatures The concatenated public keys and signatures\\n    event AddedValidatorKeys(uint256 indexed index, bytes publicKeysAndSignatures);\\n\\n    /// @notice The operator or the admin removed a public key and its signature from the registry\\n    /// @param index The operator index\\n    /// @param publicKey The BLS public key that has been removed\\n    event RemovedValidatorKey(uint256 indexed index, bytes publicKey);\\n\\n    /// @notice The stored river address has been changed\\n    /// @param river The new river address\\n    event SetRiver(address indexed river);\\n\\n    /// @notice The operator edited its keys after the snapshot block\\n    /// @dev This means that we cannot assume that its key set is checked by the snapshot\\n    /// @dev This happens only if the limit was meant to be increased\\n    /// @param index The operator index\\n    /// @param currentLimit The current operator limit\\n    /// @param newLimit The new operator limit that was attempted to be set\\n    /// @param latestKeysEditBlockNumber The last block number at which the operator changed its keys\\n    /// @param snapshotBlock The block number of the snapshot\\n    event OperatorEditsAfterSnapshot(\\n        uint256 indexed index,\\n        uint256 currentLimit,\\n        uint256 newLimit,\\n        uint256 indexed latestKeysEditBlockNumber,\\n        uint256 indexed snapshotBlock\\n    );\\n\\n    /// @notice The call didn't alter the limit of the operator\\n    /// @param index The operator index\\n    /// @param limit The limit of the operator\\n    event OperatorLimitUnchanged(uint256 indexed index, uint256 limit);\\n\\n    /// @notice The calling operator is inactive\\n    /// @param index The operator index\\n    error InactiveOperator(uint256 index);\\n\\n    /// @notice A funded key deletion has been attempted\\n    error InvalidFundedKeyDeletionAttempt();\\n\\n    /// @notice The index provided are not sorted properly (descending order)\\n    error InvalidUnsortedIndexes();\\n\\n    /// @notice The provided operator and limits array have different lengths\\n    error InvalidArrayLengths();\\n\\n    /// @notice The provided operator and limits array are empty\\n    error InvalidEmptyArray();\\n\\n    /// @notice The provided key count is 0\\n    error InvalidKeyCount();\\n\\n    /// @notice The provided concatenated keys do not have the expected length\\n    error InvalidKeysLength();\\n\\n    /// @notice The index that is removed is out of bounds\\n    error InvalidIndexOutOfBounds();\\n\\n    /// @notice The value for the operator limit is too high\\n    /// @param index The operator index\\n    /// @param limit The new limit provided\\n    /// @param keyCount The operator key count\\n    error OperatorLimitTooHigh(uint256 index, uint256 limit, uint256 keyCount);\\n\\n    /// @notice The value for the limit is too low\\n    /// @param index The operator index\\n    /// @param limit The new limit provided\\n    /// @param fundedKeyCount The operator funded key count\\n    error OperatorLimitTooLow(uint256 index, uint256 limit, uint256 fundedKeyCount);\\n\\n    /// @notice The provided list of operators is not in increasing order\\n    error UnorderedOperatorList();\\n\\n    /// @notice Initializes the operators registry\\n    /// @param _admin Admin in charge of managing operators\\n    /// @param _river Address of River system\\n    function initOperatorsRegistryV1(address _admin, address _river) external;\\n\\n    /// @notice Retrieve the River address\\n    /// @return The address of River\\n    function getRiver() external view returns (address);\\n\\n    /// @notice Get operator details\\n    /// @param _index The index of the operator\\n    /// @return The details of the operator\\n    function getOperator(uint256 _index) external view returns (Operators.Operator memory);\\n\\n    /// @notice Get operator count\\n    /// @return The operator count\\n    function getOperatorCount() external view returns (uint256);\\n\\n    /// @notice Get the details of a validator\\n    /// @param _operatorIndex The index of the operator\\n    /// @param _validatorIndex The index of the validator\\n    /// @return publicKey The public key of the validator\\n    /// @return signature The signature used during deposit\\n    /// @return funded True if validator has been funded\\n    function getValidator(uint256 _operatorIndex, uint256 _validatorIndex)\\n        external\\n        view\\n        returns (bytes memory publicKey, bytes memory signature, bool funded);\\n\\n    /// @notice Retrieve the active operator set\\n    /// @return The list of active operators and their details\\n    function listActiveOperators() external view returns (Operators.Operator[] memory);\\n\\n    /// @notice Adds an operator to the registry\\n    /// @dev Only callable by the administrator\\n    /// @param _name The name identifying the operator\\n    /// @param _operator The address representing the operator, receiving the rewards\\n    /// @return The index of the new operator\\n    function addOperator(string calldata _name, address _operator) external returns (uint256);\\n\\n    /// @notice Changes the operator address of an operator\\n    /// @dev Only callable by the administrator or the previous operator address\\n    /// @param _index The operator index\\n    /// @param _newOperatorAddress The new address of the operator\\n    function setOperatorAddress(uint256 _index, address _newOperatorAddress) external;\\n\\n    /// @notice Changes the operator name\\n    /// @dev Only callable by the administrator or the operator\\n    /// @param _index The operator index\\n    /// @param _newName The new operator name\\n    function setOperatorName(uint256 _index, string calldata _newName) external;\\n\\n    /// @notice Changes the operator status\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStatus The new status of the operator\\n    function setOperatorStatus(uint256 _index, bool _newStatus) external;\\n\\n    /// @notice Changes the operator stopped validator count\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStoppedValidatorCount The new stopped validator count of the operator\\n    function setOperatorStoppedValidatorCount(uint256 _index, uint256 _newStoppedValidatorCount) external;\\n\\n    /// @notice Changes the operator staking limit\\n    /// @dev Only callable by the administrator\\n    /// @dev The operator indexes must be in increasing order and contain no duplicate\\n    /// @dev The limit cannot exceed the total key count of the operator\\n    /// @dev The _indexes and _newLimits must have the same length.\\n    /// @dev Each limit value is applied to the operator index at the same index in the _indexes array.\\n    /// @param _operatorIndexes The operator indexes, in increasing order and duplicate free\\n    /// @param _newLimits The new staking limit of the operators\\n    /// @param _snapshotBlock The block number at which the snapshot was computed\\n    function setOperatorLimits(\\n        uint256[] calldata _operatorIndexes,\\n        uint256[] calldata _newLimits,\\n        uint256 _snapshotBlock\\n    ) external;\\n\\n    /// @notice Adds new keys for an operator\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @param _index The operator index\\n    /// @param _keyCount The amount of keys provided\\n    /// @param _publicKeysAndSignatures Public keys of the validator, concatenated\\n    function addValidators(uint256 _index, uint256 _keyCount, bytes calldata _publicKeysAndSignatures) external;\\n\\n    /// @notice Remove validator keys\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @dev The indexes must be provided sorted in decreasing order and duplicate-free, otherwise the method will revert\\n    /// @dev The operator limit will be set to the lowest deleted key index if the operator's limit wasn't equal to its total key count\\n    /// @dev The operator or the admin cannot remove funded keys\\n    /// @dev When removing validators, the indexes of specific unfunded keys can be changed in order to properly\\n    /// @dev remove the keys from the storage array. Beware of this specific behavior when chaining calls as the\\n    /// @dev targeted public key indexes can point to a different key after a first call was made and performed\\n    /// @dev some swaps\\n    /// @param _index The operator index\\n    /// @param _indexes The indexes of the keys to remove\\n    function removeValidators(uint256 _index, uint256[] calldata _indexes) external;\\n\\n    /// @notice Retrieve validator keys based on operator statuses\\n    /// @param _count Max amount of keys requested\\n    /// @return publicKeys An array of public keys\\n    /// @return signatures An array of signatures linked to the public keys\\n    function pickNextValidators(uint256 _count)\\n        external\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n}\\n\",\"keccak256\":\"0xe5155a676a2faf7a5909d6f167de643b6ce8db08facbc85ebfc17da157d3fc2d\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\nimport \\\"../state/shared/PendingAdministratorAddress.sol\\\";\\n\\n/// @title Lib Administrable\\n/// @author Kiln\\n/// @notice This library handles the admin and pending admin storage vars\\nlibrary LibAdministrable {\\n    /// @notice Retrieve the system admin\\n    /// @return The address of the system admin\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n\\n    /// @notice Retrieve the pending system admin\\n    /// @return The adress of the pending system admin\\n    function _getPendingAdmin() internal view returns (address) {\\n        return PendingAdministratorAddress.get();\\n    }\\n\\n    /// @notice Sets the system admin\\n    /// @param _admin New system admin\\n    function _setAdmin(address _admin) internal {\\n        AdministratorAddress.set(_admin);\\n    }\\n\\n    /// @notice Sets the pending system admin\\n    /// @param _pendingAdmin New pending system admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        PendingAdministratorAddress.set(_pendingAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0xbe4cec02aff69406624f3ab71a19948997aaf74f63e171137f2f3b85bdb7bc3a\",\"license\":\"MIT\"},\"contracts/src/libraries/LibBasisPoints.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Lib Basis Points\\n/// @notice Holds the basis points max value\\nlibrary LibBasisPoints {\\n    /// @notice The max value for basis points (represents 100%)\\n    uint256 internal constant BASIS_POINTS_MAX = 10_000;\\n}\\n\",\"keccak256\":\"0x97228a01dcd48f033555e3a44f9be37fb474a1b027f703f28097d539808f1c6c\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibBytes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Bytes\\n/// @notice This library helps manipulating bytes\\nlibrary LibBytes {\\n    /// @notice The length overflows an uint\\n    error SliceOverflow();\\n\\n    /// @notice The slice is outside of the initial bytes bounds\\n    error SliceOutOfBounds();\\n\\n    /// @notice Slices the provided bytes\\n    /// @param _bytes Bytes to slice\\n    /// @param _start The starting index of the slice\\n    /// @param _length The length of the slice\\n    /// @return The slice of _bytes starting at _start of length _length\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\n        unchecked {\\n            if (_length + 31 < _length) {\\n                revert SliceOverflow();\\n            }\\n        }\\n        if (_bytes.length < _start + _length) {\\n            revert SliceOutOfBounds();\\n        }\\n\\n        bytes memory tempBytes;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } { mstore(mc, mload(cc)) }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xbcc2d6e851fd5e66e5661856fa089fadd69150c75e07978d89faf6ea8d867234\",\"license\":\"MIT\"},\"contracts/src/libraries/LibErrors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Errors\\n/// @notice Library of common errors\\nlibrary LibErrors {\\n    /// @notice The operator is unauthorized for the caller\\n    /// @param caller Address performing the call\\n    error Unauthorized(address caller);\\n\\n    /// @notice The call was invalid\\n    error InvalidCall();\\n\\n    /// @notice The argument was invalid\\n    error InvalidArgument();\\n\\n    /// @notice The address is zero\\n    error InvalidZeroAddress();\\n\\n    /// @notice The string is empty\\n    error InvalidEmptyString();\\n\\n    /// @notice The fee is invalid\\n    error InvalidFee();\\n}\\n\",\"keccak256\":\"0x7bdbd4ada124723fa08e2088405ba0bf4453beb23d84f4af09e894e06e751f33\",\"license\":\"MIT\"},\"contracts/src/libraries/LibSanitize.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./LibErrors.sol\\\";\\nimport \\\"./LibBasisPoints.sol\\\";\\n\\n/// @title Lib Sanitize\\n/// @notice Utilities to sanitize input values\\nlibrary LibSanitize {\\n    /// @notice Reverts if address is 0\\n    /// @param _address Address to check\\n    function _notZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert LibErrors.InvalidZeroAddress();\\n        }\\n    }\\n\\n    /// @notice Reverts if string is empty\\n    /// @param _string String to check\\n    function _notEmptyString(string memory _string) internal pure {\\n        if (bytes(_string).length == 0) {\\n            revert LibErrors.InvalidEmptyString();\\n        }\\n    }\\n\\n    /// @notice Reverts if fee is invalid\\n    /// @param _fee Fee to check\\n    function _validFee(uint256 _fee) internal pure {\\n        if (_fee > LibBasisPoints.BASIS_POINTS_MAX) {\\n            revert LibErrors.InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8aeeb866c4657a96c8b4c006340c7996d15a6f0044b730c276bc3ba8d5bcd48\",\"license\":\"MIT\"},\"contracts/src/libraries/LibUint256.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Uint256\\n/// @notice Utilities to perform uint operations\\nlibrary LibUint256 {\\n    /// @notice Converts a value to little endian (64 bits)\\n    /// @param _value The value to convert\\n    /// @return result The converted value\\n    function toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n        result = 0;\\n        uint256 tempValue = _value;\\n        result = tempValue & 0xFF;\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        assert(0 == tempValue); // fully converted\\n        result <<= (24 * 8);\\n    }\\n\\n    /// @notice Returns the minimum value\\n    /// @param _a First value\\n    /// @param _b Second value\\n    /// @return Smallest value between _a and _b\\n    function min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a > _b ? _b : _a);\\n    }\\n}\\n\",\"keccak256\":\"0xac75e924b50fa887249f6435a710d691f25e95973466f4c91ac4f5d49a2ece4a\",\"license\":\"MIT\"},\"contracts/src/libraries/LibUnstructuredStorage.sol\":{\"content\":\"// SPDX-License-Identifier:    MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @title Lib Unstructured Storage\\n/// @notice Utilities to work with unstructured storage\\nlibrary LibUnstructuredStorage {\\n    /// @notice Retrieve a bool value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bool value\\n    function getStorageBool(bytes32 _position) internal view returns (bool data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an address value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The address value\\n    function getStorageAddress(bytes32 _position) internal view returns (address data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve a bytes32 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bytes32 value\\n    function getStorageBytes32(bytes32 _position) internal view returns (bytes32 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an uint256 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The uint256 value\\n    function getStorageUint256(bytes32 _position) internal view returns (uint256 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Sets a bool value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bool value to set\\n    function setStorageBool(bytes32 _position, bool _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an address value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The address value to set\\n    function setStorageAddress(bytes32 _position, address _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets a bytes32 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bytes32 value to set\\n    function setStorageBytes32(bytes32 _position, bytes32 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an uint256 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The uint256 value to set\\n    function setStorageUint256(bytes32 _position, uint256 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8e1a2f0dc18e023e12747355b3c95258d4de698f2bb6196222a1dc92940caa3\",\"license\":\"MIT\"},\"contracts/src/state/operatorsRegistry/Operators.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Operators Storage\\n/// @notice Utility to manage the Operators in storage\\nlibrary Operators {\\n    /// @notice Storage slot of the Operators\\n    bytes32 internal constant OPERATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.operators\\\")) - 1);\\n\\n    /// @notice The Operator structure in storage\\n    struct Operator {\\n        /// @custom:attribute True if the operator is active and allowed to operate on River\\n        bool active;\\n        /// @custom:attribute Display name of the operator\\n        string name;\\n        /// @custom:attribute Address of the operator\\n        address operator;\\n        /// @dev The following values respect this invariant:\\n        /// @dev     keys >= limit >= funded >= stopped\\n\\n        /// @custom:attribute Staking limit of the operator\\n        uint256 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint256 funded;\\n        /// @custom:attribute The total count of keys of the operator\\n        uint256 keys;\\n        /// @custom:attribute The count of stopped validators. Stopped validators are validators\\n        ///                   that exited the consensus layer (voluntary or slashed)\\n        uint256 stopped;\\n        uint256 latestKeysEditBlockNumber;\\n    }\\n\\n    /// @notice The Operator structure when loaded in memory\\n    struct CachedOperator {\\n        /// @custom:attribute True if the operator is active and allowed to operate on River\\n        bool active;\\n        /// @custom:attribute Display name of the operator\\n        string name;\\n        /// @custom:attribute Address of the operator\\n        address operator;\\n        /// @custom:attribute Staking limit of the operator\\n        uint256 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint256 funded;\\n        /// @custom:attribute The total count of keys of the operator\\n        uint256 keys;\\n        /// @custom:attribute The count of stopped validators\\n        uint256 stopped;\\n        /// @custom:attribute The count of stopped validators. Stopped validators are validators\\n        ///                   that exited the consensus layer (voluntary or slashed)\\n        uint256 index;\\n        /// @custom:attribute The amount of picked keys, buffer used before changing funded in storage\\n        uint256 picked;\\n    }\\n\\n    /// @notice The structure at the storage slot\\n    struct SlotOperator {\\n        /// @custom:attribute Array containing all the operators\\n        Operator[] value;\\n    }\\n\\n    /// @notice The operator was not found\\n    /// @param index The provided index\\n    error OperatorNotFound(uint256 index);\\n\\n    /// @notice Retrieve the operator in storage\\n    /// @param _index The index of the operator\\n    /// @return The Operator structure\\n    function get(uint256 _index) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (r.value.length <= _index) {\\n            revert OperatorNotFound(_index);\\n        }\\n\\n        return r.value[_index];\\n    }\\n\\n    /// @notice Retrieve the operator count in storage\\n    /// @return The count of operators in storage\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Retrieve all the active operators\\n    /// @return The list of active operator structures\\n    function getAllActive() internal view returns (Operator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        Operator[] memory activeOperators = new Operator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                activeOperators[activeIdx] = r.value[idx];\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    /// @notice Retrieve all the active and fundable operators\\n    /// @return The list of active and fundable operators\\n    function getAllFundable() internal view returns (CachedOperator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (_hasFundableKeys(r.value[idx])) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        CachedOperator[] memory activeOperators = new CachedOperator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            Operator memory op = r.value[idx];\\n            if (_hasFundableKeys(op)) {\\n                activeOperators[activeIdx] = CachedOperator({\\n                    active: op.active,\\n                    name: op.name,\\n                    operator: op.operator,\\n                    limit: op.limit,\\n                    funded: op.funded,\\n                    keys: op.keys,\\n                    stopped: op.stopped,\\n                    index: idx,\\n                    picked: 0\\n                });\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    /// @notice Add a new operator in storage\\n    /// @param _newOperator Value of the new operator\\n    /// @return The size of the operator array after the operation\\n    function push(Operator memory _newOperator) internal returns (uint256) {\\n        LibSanitize._notZeroAddress(_newOperator.operator);\\n        LibSanitize._notEmptyString(_newOperator.name);\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_newOperator);\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Atomic operation to set the key count and update the latestKeysEditBlockNumber field at the same time\\n    /// @param _index The operator index\\n    /// @param _newKeys The new value for the key count\\n    function setKeys(uint256 _index, uint256 _newKeys) internal {\\n        Operator storage op = get(_index);\\n\\n        op.keys = _newKeys;\\n        op.latestKeysEditBlockNumber = block.number;\\n    }\\n\\n    /// @notice Checks if an operator is active and has fundable keys\\n    /// @param _operator The operator details\\n    /// @return True if active and fundable\\n    function _hasFundableKeys(Operators.Operator memory _operator) internal pure returns (bool) {\\n        return (_operator.active && _operator.limit > _operator.funded);\\n    }\\n}\\n\",\"keccak256\":\"0xded9f69550674563fe324c95487bdf9e6cad7390064209bdce2afde8dad8f0e2\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/operatorsRegistry/ValidatorKeys.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibBytes.sol\\\";\\n\\n/// @title Validator Keys Storage\\n/// @notice Utility to manage the validator keys in storage\\nlibrary ValidatorKeys {\\n    /// @notice Storage slot of the Validator Keys\\n    bytes32 internal constant VALIDATOR_KEYS_SLOT = bytes32(uint256(keccak256(\\\"river.state.validatorKeys\\\")) - 1);\\n\\n    /// @notice Length in bytes of a BLS Public Key used for validator deposits\\n    uint256 internal constant PUBLIC_KEY_LENGTH = 48;\\n\\n    /// @notice Length in bytes of a BLS Signature used for validator deposits\\n    uint256 internal constant SIGNATURE_LENGTH = 96;\\n\\n    /// @notice The provided public key is not matching the expected length\\n    error InvalidPublicKey();\\n\\n    /// @notice The provided signature is not matching the expected length\\n    error InvalidSignature();\\n\\n    /// @notice Structure of the Validator Keys in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from operator index to key index to key value\\n        mapping(uint256 => mapping(uint256 => bytes)) value;\\n    }\\n\\n    /// @notice Retrieve the Validator Key of an operator at a specific index\\n    /// @param _operatorIndex The operator index\\n    /// @param _idx the Validator Key index\\n    /// @return publicKey The Validator Key public key\\n    /// @return signature The Validator Key signature\\n    function get(uint256 _operatorIndex, uint256 _idx)\\n        internal\\n        view\\n        returns (bytes memory publicKey, bytes memory signature)\\n    {\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        bytes storage entry = r.value[_operatorIndex][_idx];\\n\\n        publicKey = LibBytes.slice(entry, 0, PUBLIC_KEY_LENGTH);\\n        signature = LibBytes.slice(entry, PUBLIC_KEY_LENGTH, SIGNATURE_LENGTH);\\n    }\\n\\n    /// @notice Retrieve the raw concatenated Validator Keys\\n    /// @param _operatorIndex The operator index\\n    /// @param _idx The Validator Key index\\n    /// @return The concatenated public key and signature\\n    function getRaw(uint256 _operatorIndex, uint256 _idx) internal view returns (bytes memory) {\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_operatorIndex][_idx];\\n    }\\n\\n    /// @notice Retrieve multiple keys of an operator starting at an index\\n    /// @param _operatorIndex The operator index\\n    /// @param _startIdx The starting index to retrieve the keys from\\n    /// @param _amount The amount of keys to retrieve\\n    /// @return publicKeys The public keys retrieved\\n    /// @return signatures The signatures associated with the public keys\\n    function getKeys(uint256 _operatorIndex, uint256 _startIdx, uint256 _amount)\\n        internal\\n        view\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        publicKeys = new bytes[](_amount);\\n        signatures = new bytes[](_amount);\\n\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n        uint256 idx;\\n        for (; idx < _amount;) {\\n            bytes memory rawCredentials = r.value[_operatorIndex][idx + _startIdx];\\n            publicKeys[idx] = LibBytes.slice(rawCredentials, 0, PUBLIC_KEY_LENGTH);\\n            signatures[idx] = LibBytes.slice(rawCredentials, PUBLIC_KEY_LENGTH, SIGNATURE_LENGTH);\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n    }\\n\\n    /// @notice Set the concatenated Validator Keys at an index for an operator\\n    /// @param _operatorIndex The operator index\\n    /// @param _idx The key index to write on\\n    /// @param _publicKeyAndSignature The concatenated Validator Keys\\n    function set(uint256 _operatorIndex, uint256 _idx, bytes memory _publicKeyAndSignature) internal {\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_operatorIndex][_idx] = _publicKeyAndSignature;\\n    }\\n}\\n\",\"keccak256\":\"0xe4f987cefb7458d463f2a20044d9dc651e3a13d88c64cef8de74e927339ed216\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrator Address Storage\\n/// @notice Utility to manage the Administrator Address in storage\\nlibrary AdministratorAddress {\\n    /// @notice Storage slot of the Administrator Address\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Administrator Address\\n    /// @return The Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Administrator Address\\n    /// @param _newValue New Administrator Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x4f702b4454858199ca8fd15ef1cee63d9dc3d4d8f2ff7a2f859a4e151e46e8ec\",\"license\":\"MIT\"},\"contracts/src/state/shared/PendingAdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Pending Administrator Address Storage\\n/// @notice Utility to manage the Pending Administrator Address in storage\\nlibrary PendingAdministratorAddress {\\n    /// @notice Storage slot of the Pending Administrator Address\\n    bytes32 public constant PENDING_ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.pendingAdministratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Pending Administrator Address\\n    /// @return The Pending Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Pending Administrator Address\\n    /// @param _newValue New Pending Administrator Address\\n    function set(address _newValue) internal {\\n        LibUnstructuredStorage.setStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x2164cafa435d1e1650037164e2b094ca3af00cc68e05b59140406aa59b1949f2\",\"license\":\"MIT\"},\"contracts/src/state/shared/RiverAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title River Address Storage\\n/// @notice Utility to manage the River Address in storage\\nlibrary RiverAddress {\\n    /// @notice Storage slot of the River Address\\n    bytes32 internal constant RIVER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.riverAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the River Address\\n    /// @return The River Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(RIVER_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the River Address\\n    /// @param _newValue New River Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(RIVER_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xffc846d2e04891e3b0625a9e710fa2a18b4e1af43609f0d76d6c3b7bf5c51384\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Version Storage\\n/// @notice Utility to manage the Version in storage\\nlibrary Version {\\n    /// @notice Storage slot of the Version\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    /// @notice Retrieve the Version\\n    /// @return The Version\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    /// @notice Sets the Version\\n    /// @param _newValue New Version\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(VERSION_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x82f1cc4bbb1f16c1cdbac93596334805eb1a2e0e40ccbd0ab0f78e22d3f83864\",\"license\":\"BUSL-1.1\"}},\"version\":1}"
        ],
        "bytecode": [
            "0x608060405234801561001057600080fd5b5061323e806100206000396000f3fe608060405234801561001057600080fd5b50600436106101115760003560e01c80635a16f135116100ad578063a194732311610071578063a194732314610243578063a519f06014610264578063a5b703e51461026c578063d04681561461027f578063f87e52961461028757600080fd5b80635a16f135146101d15780635f41a0c4146101e457806363b4118f146101f75780636e9960c3146102195780638cb310031461022e57600080fd5b806305f63c8a146101165780630e18b6811461013f578063147bf6c4146101495780631864636c1461015c5780631a4a7c611461016f5780633925132114610185578063460e6efb1461019857806350545d2f146101ab57806354001d09146101be575b600080fd5b610129610124366004612b42565b61029a565b6040516101369190612c1b565b60405180910390f35b6101476103a6565b005b610147610157366004612c4a565b610406565b61014761016a366004612cb0565b61044d565b61017761090b565b604051908152602001610136565b610147610193366004612d3c565b61091a565b6101476101a6366004612d7a565b610ad6565b6101776101b9366004612ded565b610d6d565b6101476101cc366004612e40565b610e9b565b6101476101df366004612e73565b610f70565b6101476101f2366004612ea8565b611002565b61020a610205366004612ea8565b6110a8565b60405161013693929190612eca565b6102216110d4565b6040516101369190612f02565b6102366110de565b6040516101369190612f16565b610256610251366004612b42565b6110e8565b604051610136929190612fcd565b610221611138565b61014761027a366004612ffb565b611142565b61022161143d565b61014761029536600461304d565b611447565b6102a26129e5565b6102ab8261159e565b604080516101008101909152815460ff16151581526001820180549192916020840191906102d890613070565b80601f016020809104026020016040519081016040528092919081815260200182805461030490613070565b80156103515780601f1061032657610100808354040283529160200191610351565b820191906000526020600020905b81548152906001019060200180831161033457829003601f168201915b505050918352505060028201546001600160a01b03166020820152600382015460408201526004820154606082015260058201546080820152600682015460a082015260079091015460c09091015292915050565b6103ae61160f565b6001600160a01b0316336001600160a01b0316146103ea573360405163472511eb60e11b81526004016103e19190612f02565b60405180910390fd5b6103fa6103f561160f565b611619565b6104046000611662565b565b61040e6116a2565b6001600160a01b0316336001600160a01b031614610441573360405163472511eb60e11b81526004016103e19190612f02565b61044a81611662565b50565b826104566110d4565b6001600160a01b0316336001600160a01b031614156106a357818061048e576040516379b348ff60e11b815260040160405180910390fd5b60006104998661159e565b60058101549091508086866000816104b3576104b36130ab565b90506020020135106104d8576040516317df2d8d60e01b815260040160405180910390fd5b600086866104e76001876130d7565b8181106104f6576104f66130ab565b90506020020135905082600401548110156105245760405163213af80760e21b815260040160405180910390fd5b60038301546005840154146105428961053d87866130d7565b6116ac565b60005b8581101561066f576000898983818110610561576105616130ab565b90506020020135905060008211801561059c575089896105826001856130d7565b818110610591576105916130ab565b905060200201358110155b156105ba5760405163c9ee26af60e01b815260040160405180910390fd5b60019091019060006105cc83876130d7565b905060006105da8d846116ca565b50905060006105e98e84611840565b90506105f68e858361190c565b61062e8e8460005b6040519080825280601f01601f191660200182016040528015610628576020820181803683370190505b5061190c565b8d7f70cf8064c7574b284afe278226e25779f45a4c3715653674aa651b34e9a190928360405161065e9190613104565b60405180910390a250505050610545565b81156106845760058501546003860155610698565b846003015483101561069857600385018390555b505050505050610905565b60006106ae8261159e565b805490915060ff166106d6576040516301550a7360e41b8152600481018390526024016103e1565b60028101546001600160a01b03163314610705573360405163472511eb60e11b81526004016103e19190612f02565b8280610724576040516379b348ff60e11b815260040160405180910390fd5b600061072f8761159e565b6005810154909150808787600081610749576107496130ab565b905060200201351061076e576040516317df2d8d60e01b815260040160405180910390fd5b6000878761077d6001876130d7565b81811061078c5761078c6130ab565b90506020020135905082600401548110156107ba5760405163213af80760e21b815260040160405180910390fd5b60038301546005840154146107d38a61053d87866130d7565b60005b858110156108d45760008a8a838181106107f2576107f26130ab565b90506020020135905060008211801561082d57508a8a6108136001856130d7565b818110610822576108226130ab565b905060200201358110155b1561084b5760405163c9ee26af60e01b815260040160405180910390fd5b600190910190600061085d83876130d7565b9050600061086b8e846116ca565b509050600061087a8f84611840565b90506108878f858361190c565b6108938f8460006105fe565b8e7f70cf8064c7574b284afe278226e25779f45a4c3715653674aa651b34e9a19092836040516108c39190613104565b60405180910390a2505050506107d6565b81156108e957600585015460038601556108fd565b84600301548310156108fd57600385018390555b505050505050505b50505050565b6000610915611951565b905090565b826109236110d4565b6001600160a01b0316336001600160a01b031614156109d75761097b83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061197492505050565b60006109868561159e565b9050610996600182018585612a35565b50847f9ad13f126d3d603b0b284edba7645ca0e423840767c48809bb5f87e72197e11485856040516109c9929190613140565b60405180910390a250610905565b60006109e28261159e565b805490915060ff16610a0a576040516301550a7360e41b8152600481018390526024016103e1565b60028101546001600160a01b03163314610a39573360405163472511eb60e11b81526004016103e19190612f02565b610a7884848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061197492505050565b6000610a838661159e565b9050610a93600182018686612a35565b50857f9ad13f126d3d603b0b284edba7645ca0e423840767c48809bb5f87e72197e1148686604051610ac6929190613140565b60405180910390a2505050505050565b610ade6116a2565b6001600160a01b0316336001600160a01b031614610b11573360405163472511eb60e11b81526004016103e19190612f02565b838214610b315760405163a9854bc960e01b815260040160405180910390fd5b83610b4f57604051637b329aa360e01b815260040160405180910390fd5b60005b84811015610d65576000868683818110610b6e57610b6e6130ab565b9050602002013590506000858584818110610b8b57610b8b6130ab565b905060200201359050600083118015610bc657508787610bac6001866130d7565b818110610bbb57610bbb6130ab565b905060200201358211155b15610be4576040516357e557ed60e11b815260040160405180910390fd5b6000610bef8361159e565b600381015490915082811415610c4857837fe8b22569f1f7ba3802b89b579382ccac4e223f8062d6dd73f9cd757bd46ff8aa84604051610c3191815260200190565b60405180910390a284600101945050505050610b52565b816007015486108015610c5a57508083115b15610cb757858260070154857f5482b63bdf9e3775fdd3157e4933cfbc1d6fa1ec354ed3fc9a547e5438fd3e4e8487604051610ca0929190918252602082015260400190565b60405180910390a484600101945050505050610b52565b8160050154831115610cf3576005820154604051630d7bdb4960e41b8152600481018690526024810185905260448101919091526064016103e1565b8160040154831015610d2c5760048083015460405163044816df60e51b81529182018690526024820185905260448201526064016103e1565b6003820183905560405183815284907f3adbeb5fbb94c52b64d90b31188c68a740868dde2238e03a04d581cae22cedf090602001610c31565b505050505050565b6000610d776116a2565b6001600160a01b0316336001600160a01b031614610daa573360405163472511eb60e11b81526004016103e19190612f02565b600060405180610100016040528060011515815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b038616602083015260408201819052606082018190526080820181905260a082018190524360c0909201919091529091506001610e3c83611993565b610e4691906130d7565b905081604001516001600160a01b0316817f28febbb5486eda5a1e47ad578f9cb32c8a1983c86c80ab823ea5dc1fc04ede5e8460200151604051610e8a9190613104565b60405180910390a395945050505050565b6000610ea5611a75565b8114610ed65780610eb4611a75565b604051631cfd276760e31b8152600481019290925260248201526044016103e1565b610ee9610ee482600161315c565b611aa9565b610ef283611619565b610efb82611adc565b6040516001600160a01b038316907ffc0d749143b04e0d92a3b49edae84a45f6bc88b75e99d9118ec4d7e87fe626c590600090a27f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610f6393929190613174565b60405180910390a1505050565b610f786116a2565b6001600160a01b0316336001600160a01b031614610fab573360405163472511eb60e11b81526004016103e19190612f02565b6000610fb68361159e565b805460ff1916831515908117825560405190815290915083907fe3bc5e5d3b000a1f65d146c40a38d89b1743b5729f4c6fe65f2e4b2dc620f2f2906020015b60405180910390a2505050565b61100a6116a2565b6001600160a01b0316336001600160a01b03161461103d573360405163472511eb60e11b81526004016103e19190612f02565b60006110488361159e565b9050806004015482111561106f5760405163a9cb9e0d60e01b815260040160405180910390fd5b6006810182905560405182815283907f773694db4f98cd263e42d4f798bcf603781d4491e48e8cbe96c219c1f13b777d90602001610ff5565b60608060006110b785856116ca565b90935091506110c58561159e565b60040154841090509250925092565b60006109156116a2565b6060610915611b13565b6060806110f3611d66565b6001600160a01b0316336001600160a01b031614611126573360405163472511eb60e11b81526004016103e19190612f02565b61112f83611d96565b91509150915091565b6000610915611d66565b8361114b6110d4565b6001600160a01b0316336001600160a01b031614156112ae5783611182576040516379b348ff60e11b815260040160405180910390fd5b61118e6060603061315c565b611198908561318e565b82146111b757604051630368f86360e41b815260040160405180910390fd5b60006111c28661159e565b905060005b8581101561125957600061123486868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112199250606091506030905061315c565b611223908561318e565b61122f6060603061315c565b6120d8565b90506112508883856005015461124a919061315c565b8361190c565b506001016111c7565b5061126e8686836005015461053d919061315c565b857f402e5ac3e483073137c527378b15e69f7f4a1c75c1adc0aa36f0c456876c05a085856040516112a0929190613140565b60405180910390a250611436565b60006112b98261159e565b805490915060ff166112e1576040516301550a7360e41b8152600481018390526024016103e1565b60028101546001600160a01b03163314611310573360405163472511eb60e11b81526004016103e19190612f02565b8461132e576040516379b348ff60e11b815260040160405180910390fd5b61133a6060603061315c565b611344908661318e565b831461136357604051630368f86360e41b815260040160405180910390fd5b600061136e8761159e565b905060005b868110156113e45760006113c587878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112199250606091506030905061315c565b90506113db8983856005015461124a919061315c565b50600101611373565b506113f98787836005015461053d919061315c565b867f402e5ac3e483073137c527378b15e69f7f4a1c75c1adc0aa36f0c456876c05a0868660405161142b929190613140565b60405180910390a250505b5050505050565b600061091561160f565b816114506110d4565b6001600160a01b0316336001600160a01b031614156114d2576114728261219b565b600061147d8461159e565b6002810180546001600160a01b0319166001600160a01b0386169081179091556040519192509085907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e790600090a350505050565b60006114dd8261159e565b805490915060ff16611505576040516301550a7360e41b8152600481018390526024016103e1565b60028101546001600160a01b03163314611534573360405163472511eb60e11b81526004016103e19190612f02565b61153d8361219b565b60006115488561159e565b6002810180546001600160a01b0319166001600160a01b0387169081179091556040519192509086907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e790600090a35050505050565b6000806115ba60016000805160206131e98339815191526130d7565b8054909150819084106115e3576040516302d72d2160e01b8152600481018590526024016103e1565b8060000184815481106115f8576115f86130ab565b906000526020600020906008020192505050919050565b60006109156121c2565b6116228161219b565b61162b816121f2565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b61166b816121fb565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b6000610915612204565b60006116b78361159e565b6005810192909255504360079091015550565b60608060006116e860016000805160206131c98339815191526130d7565b60008681526020828152604080832088845290915290208054919250829161179c90829061171590613070565b80601f016020809104026020016040519081016040528092919081815260200182805461174190613070565b801561178e5780601f106117635761010080835404028352916020019161178e565b820191906000526020600020905b81548152906001019060200180831161177157829003601f168201915b5050505050600060306120d8565b94506118348180546117ad90613070565b80601f01602080910402602001604051908101604052809291908181526020018280546117d990613070565b80156118265780601f106117fb57610100808354040283529160200191611826565b820191906000526020600020905b81548152906001019060200180831161180957829003601f168201915b5050505050603060606120d8565b93505050509250929050565b6060600061185d60016000805160206131c98339815191526130d7565b60008581526020828152604080832087845290915290208054919250829161188490613070565b80601f01602080910402602001604051908101604052809291908181526020018280546118b090613070565b80156118fd5780601f106118d2576101008083540402835291602001916118fd565b820191906000526020600020905b8154815290600101906020018083116118e057829003601f168201915b50505050509250505092915050565b600061192760016000805160206131c98339815191526130d7565b600085815260208281526040808320878452825290912084519293508392610d6592860190612ab9565b60008061196d60016000805160206131e98339815191526130d7565b5492915050565b805161044a57604051638d46fe0560e01b815260040160405180910390fd5b60006119a2826040015161219b565b6119af8260200151611974565b60006119ca60016000805160206131e98339815191526130d7565b80546001808201835560008381526020908190208751600890940201805460ff19169315159390931783558681015180519495508594889493611a1293908501920190612ab9565b5060408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e090910151600790910155549392505050565b6000610915611aa560017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6130d7565b5490565b61044a611ad760017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6130d7565b829055565b611ae58161219b565b61044a611ad760017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c6130d7565b60606000611b3060016000805160206131e98339815191526130d7565b80549091508190600090815b81811015611b8157836000018181548110611b5957611b596130ab565b600091825260209091206008909102015460ff1615611b79578260010192505b600101611b3c565b506000826001600160401b03811115611b9c57611b9c6130ee565b604051908082528060200260200182016040528015611bd557816020015b611bc26129e5565b815260200190600190039081611bba5790505b5090506000805b83811015611d5a57856000018181548110611bf957611bf96130ab565b600091825260209091206008909102015460ff1615611d5257856000018181548110611c2757611c276130ab565b6000918252602091829020604080516101008101909152600890920201805460ff16151582526001810180549293919291840191611c6490613070565b80601f0160208091040260200160405190810160405280929190818152602001828054611c9090613070565b8015611cdd5780601f10611cb257610100808354040283529160200191611cdd565b820191906000526020600020905b815481529060010190602001808311611cc057829003601f168201915b505050918352505060028201546001600160a01b03166020820152600382015460408201526004820154606082015260058201546080820152600682015460a082015260079091015460c0909101528351849084908110611d4057611d406130ab565b60200260200101819052508160010191505b600101611bdc565b50909695505050505050565b6000610915611aa560017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c6130d7565b6060806000611da3612234565b9050805160001415611e11576040805160008082526020820190925290611dda565b6060815260200190600190039081611dc55790505b506040805160008082526020820190925290611e06565b6060815260200190600190039081611df15790505b509250925050915091565b8315611fad5760005b8151811015611e5757611e45828281518110611e3857611e386130ab565b6020026020010151612611565b15611e4f57611e57565b600101611e1a565b8151811415611e665750611fad565b6000611e7382600161315c565b90505b8251811015611ee457611ea1838381518110611e9457611e946130ab565b6020026020010151612634565b611eb6848381518110611e9457611e946130ab565b108015611ed35750611ed3838281518110611e3857611e386130ab565b15611edc578091505b600101611e76565b506000611f69611f63848481518110611eff57611eff6130ab565b60200260200101516101000151858581518110611f1e57611f1e6130ab565b602002602001015160800151611f34919061315c565b858581518110611f4657611f466130ab565b602002602001015160600151611f5c91906130d7565b6005612660565b87612660565b905080838381518110611f7e57611f7e6130ab565b602002602001015161010001818151611f97919061315c565b905250611fa481876130d7565b95505050611e11565b60005b81518110156120d1576000828281518110611fcd57611fcd6130ab565b6020026020010151610100015111156120c157600080612046848481518110611ff857611ff86130ab565b602002602001015160e00151858581518110612016576120166130ab565b602002602001015160800151868681518110612034576120346130ab565b60200260200101516101000151612678565b91509150612054868361285a565b9550612060858261285a565b9450838381518110612074576120746130ab565b602002602001015161010001516120a7858581518110612096576120966130ab565b602002602001015160e0015161159e565b60040160008282546120b9919061315c565b909155505050505b6120ca816131ad565b9050611fb0565b5050915091565b60608182601f0110156120fe576040516323d5783d60e11b815260040160405180910390fd5b612108828461315c565b8451101561212957604051633b99b53d60e01b815260040160405180910390fd5b6060821580156121485760405191506000825260208201604052612192565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612181578051835260209283019201612169565b5050858452601f01601f1916604052505b50949350505050565b6001600160a01b03811661044a5760405163f6b2911f60e01b815260040160405180910390fd5b6000610915611aa560017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a98472816130d7565b61044a81612964565b61044a8161299b565b6000610915611aa560017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb1136130d7565b6060600061225160016000805160206131e98339815191526130d7565b80549091508190600090815b8181101561239b5761238784600001828154811061227d5761227d6130ab565b6000918252602091829020604080516101008101909152600890920201805460ff161515825260018101805492939192918401916122ba90613070565b80601f01602080910402602001604051908101604052809291908181526020018280546122e690613070565b80156123335780601f1061230857610100808354040283529160200191612333565b820191906000526020600020905b81548152906001019060200180831161231657829003601f168201915b505050918352505060028201546001600160a01b03166020820152600382015460408201526004820154606082015260058201546080820152600682015460a082015260079091015460c0909101526129c9565b15612393578260010192505b60010161225d565b506000826001600160401b038111156123b6576123b66130ee565b60405190808252806020026020018201604052801561244157816020015b61242e6040518061012001604052806000151581526020016060815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816123d45790505b5090506000805b83811015611d5a576000866000018281548110612467576124676130ab565b6000918252602091829020604080516101008101909152600890920201805460ff161515825260018101805492939192918401916124a490613070565b80601f01602080910402602001604051908101604052809291908181526020018280546124d090613070565b801561251d5780601f106124f25761010080835404028352916020019161251d565b820191906000526020600020905b81548152906001019060200180831161250057829003601f168201915b505050918352505060028201546001600160a01b03166020820152600382015460408201526004820154606082015260058201546080820152600682015460a082015260079091015460c0909101529050612577816129c9565b15612608576040518061012001604052808260000151151581526020018260200151815260200182604001516001600160a01b0316815260200182606001518152602001826080015181526020018260a0015181526020018260c00151815260200183815260200160008152508484815181106125f6576125f66130ab565b60200260200101819052508260010192505b50600101612448565b60008160600151826101000151836080015161262d919061315c565b1092915050565b60008160c001518261010001518360800151612650919061315c565b61265a91906130d7565b92915050565b600081831161266f5782612671565b815b9392505050565b606080826001600160401b03811115612693576126936130ee565b6040519080825280602002602001820160405280156126c657816020015b60608152602001906001900390816126b15790505b509150826001600160401b038111156126e1576126e16130ee565b60405190808252806020026020018201604052801561271457816020015b60608152602001906001900390816126ff5790505b509050600061273260016000805160206131c98339815191526130d7565b90508060005b8581101561284f576000888152602083905260408120816127598a8561315c565b8152602001908152602001600020805461277290613070565b80601f016020809104026020016040519081016040528092919081815260200182805461279e90613070565b80156127eb5780601f106127c0576101008083540402835291602001916127eb565b820191906000526020600020905b8154815290600101906020018083116127ce57829003601f168201915b505050505090506127ff81600060306120d8565b868381518110612811576128116130ab565b602002602001018190525061282981603060606120d8565b85838151811061283b5761283b6130ab565b602090810291909101015250600101612738565b505050935093915050565b606060008251845161286c919061315c565b6001600160401b03811115612883576128836130ee565b6040519080825280602002602001820160405280156128b657816020015b60608152602001906001900390816128a15790505b50905060005b8451811015612904578481815181106128d7576128d76130ab565b60200260200101518282815181106128f1576128f16130ab565b60209081029190910101526001016128bc565b5060005b835181101561295c57838181518110612923576129236130ab565b602002602001015182865183612939919061315c565b81518110612949576129496130ab565b6020908102919091010152600101612908565b509392505050565b61296d8161219b565b61044a611ad760017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb1136130d7565b61044a611ad760017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a98472816130d7565b8051600090801561265a57505060808101516060909101511190565b6040518061010001604052806000151581526020016060815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b828054612a4190613070565b90600052602060002090601f016020900481019282612a635760008555612aa9565b82601f10612a7c5782800160ff19823516178555612aa9565b82800160010185558215612aa9579182015b82811115612aa9578235825591602001919060010190612a8e565b50612ab5929150612b2d565b5090565b828054612ac590613070565b90600052602060002090601f016020900481019282612ae75760008555612aa9565b82601f10612b0057805160ff1916838001178555612aa9565b82800160010185558215612aa9579182015b82811115612aa9578251825591602001919060010190612b12565b5b80821115612ab55760008155600101612b2e565b600060208284031215612b5457600080fd5b5035919050565b6000815180845260005b81811015612b8157602081850181015186830182015201612b65565b81811115612b93576000602083870101525b50601f01601f19169290920160200192915050565b60006101008251151584526020830151816020860152612bca82860182612b5b565b91505060018060a01b036040840151166040850152606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e08501528091505092915050565b6020815260006126716020830184612ba8565b80356001600160a01b0381168114612c4557600080fd5b919050565b600060208284031215612c5c57600080fd5b61267182612c2e565b60008083601f840112612c7757600080fd5b5081356001600160401b03811115612c8e57600080fd5b6020830191508360208260051b8501011115612ca957600080fd5b9250929050565b600080600060408486031215612cc557600080fd5b8335925060208401356001600160401b03811115612ce257600080fd5b612cee86828701612c65565b9497909650939450505050565b60008083601f840112612d0d57600080fd5b5081356001600160401b03811115612d2457600080fd5b602083019150836020828501011115612ca957600080fd5b600080600060408486031215612d5157600080fd5b8335925060208401356001600160401b03811115612d6e57600080fd5b612cee86828701612cfb565b600080600080600060608688031215612d9257600080fd5b85356001600160401b0380821115612da957600080fd5b612db589838a01612c65565b90975095506020880135915080821115612dce57600080fd5b50612ddb88828901612c65565b96999598509660400135949350505050565b600080600060408486031215612e0257600080fd5b83356001600160401b03811115612e1857600080fd5b612e2486828701612cfb565b9094509250612e37905060208501612c2e565b90509250925092565b60008060408385031215612e5357600080fd5b612e5c83612c2e565b9150612e6a60208401612c2e565b90509250929050565b60008060408385031215612e8657600080fd5b8235915060208301358015158114612e9d57600080fd5b809150509250929050565b60008060408385031215612ebb57600080fd5b50508035926020909101359150565b606081526000612edd6060830186612b5b565b8281036020840152612eef8186612b5b565b9150508215156040830152949350505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612f6b57603f19888603018452612f59858351612ba8565b94509285019290850190600101612f3d565b5092979650505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015612fc0578284038952612fae848351612b5b565b98850198935090840190600101612f96565b5091979650505050505050565b604081526000612fe06040830185612f78565b8281036020840152612ff28185612f78565b95945050505050565b6000806000806060858703121561301157600080fd5b843593506020850135925060408501356001600160401b0381111561303557600080fd5b61304187828801612cfb565b95989497509550505050565b6000806040838503121561306057600080fd5b82359150612e6a60208401612c2e565b600181811c9082168061308457607f821691505b602082108114156130a557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156130e9576130e96130c1565b500390565b634e487b7160e01b600052604160045260246000fd5b6020815260006126716020830184612b5b565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000613154602083018486613117565b949350505050565b6000821982111561316f5761316f6130c1565b500190565b838152604060208201526000612ff2604083018486613117565b60008160001904831182151516156131a8576131a86130c1565b500290565b60006000198214156131c1576131c16130c1565b506001019056fe6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113a26469706673582212200f70995bd25ea136763d6e10c1263bfff965c24c8bf48cc9b356cc883dc37bf564736f6c634300080a0033",
            "0x608060405234801561001057600080fd5b50613238806100206000396000f3fe608060405234801561001057600080fd5b50600436106101115760003560e01c80635a16f135116100ad578063a194732311610071578063a194732314610243578063a519f06014610264578063a5b703e51461026c578063d04681561461027f578063f87e52961461028757600080fd5b80635a16f135146101d15780635f41a0c4146101e457806363b4118f146101f75780636e9960c3146102195780638cb310031461022e57600080fd5b806305f63c8a146101165780630e18b6811461013f578063147bf6c4146101495780631864636c1461015c5780631a4a7c611461016f5780633925132114610185578063460e6efb1461019857806350545d2f146101ab57806354001d09146101be575b600080fd5b610129610124366004612b3c565b61029a565b6040516101369190612c15565b60405180910390f35b6101476103a6565b005b610147610157366004612c44565b610406565b61014761016a366004612caa565b61044d565b61017761090b565b604051908152602001610136565b610147610193366004612d36565b61091a565b6101476101a6366004612d74565b610ad6565b6101776101b9366004612de7565b610d6d565b6101476101cc366004612e3a565b610e95565b6101476101df366004612e6d565b610f6a565b6101476101f2366004612ea2565b610ffc565b61020a610205366004612ea2565b6110a2565b60405161013693929190612ec4565b6102216110ce565b6040516101369190612efc565b6102366110d8565b6040516101369190612f10565b610256610251366004612b3c565b6110e2565b604051610136929190612fc7565b610221611132565b61014761027a366004612ff5565b61113c565b610221611437565b610147610295366004613047565b611441565b6102a26129df565b6102ab82611598565b604080516101008101909152815460ff16151581526001820180549192916020840191906102d89061306a565b80601f01602080910402602001604051908101604052809291908181526020018280546103049061306a565b80156103515780601f1061032657610100808354040283529160200191610351565b820191906000526020600020905b81548152906001019060200180831161033457829003601f168201915b505050918352505060028201546001600160a01b03166020820152600382015460408201526004820154606082015260058201546080820152600682015460a082015260079091015460c09091015292915050565b6103ae611609565b6001600160a01b0316336001600160a01b0316146103ea573360405163472511eb60e11b81526004016103e19190612efc565b60405180910390fd5b6103fa6103f5611609565b611613565b610404600061165c565b565b61040e61169c565b6001600160a01b0316336001600160a01b031614610441573360405163472511eb60e11b81526004016103e19190612efc565b61044a8161165c565b50565b826104566110ce565b6001600160a01b0316336001600160a01b031614156106a357818061048e576040516379b348ff60e11b815260040160405180910390fd5b600061049986611598565b60058101549091508086866000816104b3576104b36130a5565b90506020020135106104d8576040516317df2d8d60e01b815260040160405180910390fd5b600086866104e76001876130d1565b8181106104f6576104f66130a5565b90506020020135905082600401548110156105245760405163213af80760e21b815260040160405180910390fd5b60038301546005840154146105428961053d87866130d1565b6116a6565b60005b8581101561066f576000898983818110610561576105616130a5565b90506020020135905060008211801561059c575089896105826001856130d1565b818110610591576105916130a5565b905060200201358110155b156105ba5760405163c9ee26af60e01b815260040160405180910390fd5b60019091019060006105cc83876130d1565b905060006105da8d846116c4565b50905060006105e98e8461183a565b90506105f68e8583611906565b61062e8e8460005b6040519080825280601f01601f191660200182016040528015610628576020820181803683370190505b50611906565b8d7f70cf8064c7574b284afe278226e25779f45a4c3715653674aa651b34e9a190928360405161065e91906130fe565b60405180910390a250505050610545565b81156106845760058501546003860155610698565b846003015483101561069857600385018390555b505050505050610905565b60006106ae82611598565b805490915060ff166106d6576040516301550a7360e41b8152600481018390526024016103e1565b60028101546001600160a01b03163314610705573360405163472511eb60e11b81526004016103e19190612efc565b8280610724576040516379b348ff60e11b815260040160405180910390fd5b600061072f87611598565b6005810154909150808787600081610749576107496130a5565b905060200201351061076e576040516317df2d8d60e01b815260040160405180910390fd5b6000878761077d6001876130d1565b81811061078c5761078c6130a5565b90506020020135905082600401548110156107ba5760405163213af80760e21b815260040160405180910390fd5b60038301546005840154146107d38a61053d87866130d1565b60005b858110156108d45760008a8a838181106107f2576107f26130a5565b90506020020135905060008211801561082d57508a8a6108136001856130d1565b818110610822576108226130a5565b905060200201358110155b1561084b5760405163c9ee26af60e01b815260040160405180910390fd5b600190910190600061085d83876130d1565b9050600061086b8e846116c4565b509050600061087a8f8461183a565b90506108878f8583611906565b6108938f8460006105fe565b8e7f70cf8064c7574b284afe278226e25779f45a4c3715653674aa651b34e9a19092836040516108c391906130fe565b60405180910390a2505050506107d6565b81156108e957600585015460038601556108fd565b84600301548310156108fd57600385018390555b505050505050505b50505050565b600061091561194b565b905090565b826109236110ce565b6001600160a01b0316336001600160a01b031614156109d75761097b83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061196e92505050565b600061098685611598565b9050610996600182018585612a2f565b50847f9ad13f126d3d603b0b284edba7645ca0e423840767c48809bb5f87e72197e11485856040516109c992919061313a565b60405180910390a250610905565b60006109e282611598565b805490915060ff16610a0a576040516301550a7360e41b8152600481018390526024016103e1565b60028101546001600160a01b03163314610a39573360405163472511eb60e11b81526004016103e19190612efc565b610a7884848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061196e92505050565b6000610a8386611598565b9050610a93600182018686612a2f565b50857f9ad13f126d3d603b0b284edba7645ca0e423840767c48809bb5f87e72197e1148686604051610ac692919061313a565b60405180910390a2505050505050565b610ade61169c565b6001600160a01b0316336001600160a01b031614610b11573360405163472511eb60e11b81526004016103e19190612efc565b838214610b315760405163a9854bc960e01b815260040160405180910390fd5b83610b4f57604051637b329aa360e01b815260040160405180910390fd5b60005b84811015610d65576000868683818110610b6e57610b6e6130a5565b9050602002013590506000858584818110610b8b57610b8b6130a5565b905060200201359050600083118015610bc657508787610bac6001866130d1565b818110610bbb57610bbb6130a5565b905060200201358211155b15610be4576040516357e557ed60e11b815260040160405180910390fd5b6000610bef83611598565b600381015490915082811415610c4857837fe8b22569f1f7ba3802b89b579382ccac4e223f8062d6dd73f9cd757bd46ff8aa84604051610c3191815260200190565b60405180910390a284600101945050505050610b52565b816007015486108015610c5a57508083115b15610cb757858260070154857f5482b63bdf9e3775fdd3157e4933cfbc1d6fa1ec354ed3fc9a547e5438fd3e4e8487604051610ca0929190918252602082015260400190565b60405180910390a484600101945050505050610b52565b8160050154831115610cf3576005820154604051630d7bdb4960e41b8152600481018690526024810185905260448101919091526064016103e1565b8160040154831015610d2c5760048083015460405163044816df60e51b81529182018690526024820185905260448201526064016103e1565b6003820183905560405183815284907f3adbeb5fbb94c52b64d90b31188c68a740868dde2238e03a04d581cae22cedf090602001610c31565b505050505050565b6000610d7761169c565b6001600160a01b0316336001600160a01b031614610daa573360405163472511eb60e11b81526004016103e19190612efc565b600060405180610100016040528060011515815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b038616602083015260408201819052606082018190526080820181905260a082018190524360c0909201919091529091506001610e3c8361198d565b610e4691906130d1565b9050836001600160a01b0316817f28febbb5486eda5a1e47ad578f9cb32c8a1983c86c80ab823ea5dc1fc04ede5e8888604051610e8492919061313a565b60405180910390a395945050505050565b6000610e9f611a6f565b8114610ed05780610eae611a6f565b604051631cfd276760e31b8152600481019290925260248201526044016103e1565b610ee3610ede826001613156565b611aa3565b610eec83611613565b610ef582611ad6565b6040516001600160a01b038316907ffc0d749143b04e0d92a3b49edae84a45f6bc88b75e99d9118ec4d7e87fe626c590600090a27f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610f5d9392919061316e565b60405180910390a1505050565b610f7261169c565b6001600160a01b0316336001600160a01b031614610fa5573360405163472511eb60e11b81526004016103e19190612efc565b6000610fb083611598565b805460ff1916831515908117825560405190815290915083907fe3bc5e5d3b000a1f65d146c40a38d89b1743b5729f4c6fe65f2e4b2dc620f2f2906020015b60405180910390a2505050565b61100461169c565b6001600160a01b0316336001600160a01b031614611037573360405163472511eb60e11b81526004016103e19190612efc565b600061104283611598565b905080600401548211156110695760405163a9cb9e0d60e01b815260040160405180910390fd5b6006810182905560405182815283907f773694db4f98cd263e42d4f798bcf603781d4491e48e8cbe96c219c1f13b777d90602001610fef565b60608060006110b185856116c4565b90935091506110bf85611598565b60040154841090509250925092565b600061091561169c565b6060610915611b0d565b6060806110ed611d60565b6001600160a01b0316336001600160a01b031614611120573360405163472511eb60e11b81526004016103e19190612efc565b61112983611d90565b91509150915091565b6000610915611d60565b836111456110ce565b6001600160a01b0316336001600160a01b031614156112a8578361117c576040516379b348ff60e11b815260040160405180910390fd5b61118860606030613156565b6111929085613188565b82146111b157604051630368f86360e41b815260040160405180910390fd5b60006111bc86611598565b905060005b8581101561125357600061122e86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061121392506060915060309050613156565b61121d9085613188565b61122960606030613156565b6120d2565b905061124a888385600501546112449190613156565b83611906565b506001016111c1565b506112688686836005015461053d9190613156565b857f402e5ac3e483073137c527378b15e69f7f4a1c75c1adc0aa36f0c456876c05a0858560405161129a92919061313a565b60405180910390a250611430565b60006112b382611598565b805490915060ff166112db576040516301550a7360e41b8152600481018390526024016103e1565b60028101546001600160a01b0316331461130a573360405163472511eb60e11b81526004016103e19190612efc565b84611328576040516379b348ff60e11b815260040160405180910390fd5b61133460606030613156565b61133e9086613188565b831461135d57604051630368f86360e41b815260040160405180910390fd5b600061136887611598565b905060005b868110156113de5760006113bf87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061121392506060915060309050613156565b90506113d5898385600501546112449190613156565b5060010161136d565b506113f38787836005015461053d9190613156565b867f402e5ac3e483073137c527378b15e69f7f4a1c75c1adc0aa36f0c456876c05a0868660405161142592919061313a565b60405180910390a250505b5050505050565b6000610915611609565b8161144a6110ce565b6001600160a01b0316336001600160a01b031614156114cc5761146c82612195565b600061147784611598565b6002810180546001600160a01b0319166001600160a01b0386169081179091556040519192509085907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e790600090a350505050565b60006114d782611598565b805490915060ff166114ff576040516301550a7360e41b8152600481018390526024016103e1565b60028101546001600160a01b0316331461152e573360405163472511eb60e11b81526004016103e19190612efc565b61153783612195565b600061154285611598565b6002810180546001600160a01b0319166001600160a01b0387169081179091556040519192509086907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e790600090a35050505050565b6000806115b460016000805160206131e38339815191526130d1565b8054909150819084106115dd576040516302d72d2160e01b8152600481018590526024016103e1565b8060000184815481106115f2576115f26130a5565b906000526020600020906008020192505050919050565b60006109156121bc565b61161c81612195565b611625816121ec565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b611665816121f5565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b60006109156121fe565b60006116b183611598565b6005810192909255504360079091015550565b60608060006116e260016000805160206131c38339815191526130d1565b60008681526020828152604080832088845290915290208054919250829161179690829061170f9061306a565b80601f016020809104026020016040519081016040528092919081815260200182805461173b9061306a565b80156117885780601f1061175d57610100808354040283529160200191611788565b820191906000526020600020905b81548152906001019060200180831161176b57829003601f168201915b5050505050600060306120d2565b945061182e8180546117a79061306a565b80601f01602080910402602001604051908101604052809291908181526020018280546117d39061306a565b80156118205780601f106117f557610100808354040283529160200191611820565b820191906000526020600020905b81548152906001019060200180831161180357829003601f168201915b5050505050603060606120d2565b93505050509250929050565b6060600061185760016000805160206131c38339815191526130d1565b60008581526020828152604080832087845290915290208054919250829161187e9061306a565b80601f01602080910402602001604051908101604052809291908181526020018280546118aa9061306a565b80156118f75780601f106118cc576101008083540402835291602001916118f7565b820191906000526020600020905b8154815290600101906020018083116118da57829003601f168201915b50505050509250505092915050565b600061192160016000805160206131c38339815191526130d1565b600085815260208281526040808320878452825290912084519293508392610d6592860190612ab3565b60008061196760016000805160206131e38339815191526130d1565b5492915050565b805161044a57604051638d46fe0560e01b815260040160405180910390fd5b600061199c8260400151612195565b6119a9826020015161196e565b60006119c460016000805160206131e38339815191526130d1565b80546001808201835560008381526020908190208751600890940201805460ff19169315159390931783558681015180519495508594889493611a0c93908501920190612ab3565b5060408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e090910151600790910155549392505050565b6000610915611a9f60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6130d1565b5490565b61044a611ad160017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6130d1565b829055565b611adf81612195565b61044a611ad160017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c6130d1565b60606000611b2a60016000805160206131e38339815191526130d1565b80549091508190600090815b81811015611b7b57836000018181548110611b5357611b536130a5565b600091825260209091206008909102015460ff1615611b73578260010192505b600101611b36565b506000826001600160401b03811115611b9657611b966130e8565b604051908082528060200260200182016040528015611bcf57816020015b611bbc6129df565b815260200190600190039081611bb45790505b5090506000805b83811015611d5457856000018181548110611bf357611bf36130a5565b600091825260209091206008909102015460ff1615611d4c57856000018181548110611c2157611c216130a5565b6000918252602091829020604080516101008101909152600890920201805460ff16151582526001810180549293919291840191611c5e9061306a565b80601f0160208091040260200160405190810160405280929190818152602001828054611c8a9061306a565b8015611cd75780601f10611cac57610100808354040283529160200191611cd7565b820191906000526020600020905b815481529060010190602001808311611cba57829003601f168201915b505050918352505060028201546001600160a01b03166020820152600382015460408201526004820154606082015260058201546080820152600682015460a082015260079091015460c0909101528351849084908110611d3a57611d3a6130a5565b60200260200101819052508160010191505b600101611bd6565b50909695505050505050565b6000610915611a9f60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c6130d1565b6060806000611d9d61222e565b9050805160001415611e0b576040805160008082526020820190925290611dd4565b6060815260200190600190039081611dbf5790505b506040805160008082526020820190925290611e00565b6060815260200190600190039081611deb5790505b509250925050915091565b8315611fa75760005b8151811015611e5157611e3f828281518110611e3257611e326130a5565b602002602001015161260b565b15611e4957611e51565b600101611e14565b8151811415611e605750611fa7565b6000611e6d826001613156565b90505b8251811015611ede57611e9b838381518110611e8e57611e8e6130a5565b602002602001015161262e565b611eb0848381518110611e8e57611e8e6130a5565b108015611ecd5750611ecd838281518110611e3257611e326130a5565b15611ed6578091505b600101611e70565b506000611f63611f5d848481518110611ef957611ef96130a5565b60200260200101516101000151858581518110611f1857611f186130a5565b602002602001015160800151611f2e9190613156565b858581518110611f4057611f406130a5565b602002602001015160600151611f5691906130d1565b600561265a565b8761265a565b905080838381518110611f7857611f786130a5565b602002602001015161010001818151611f919190613156565b905250611f9e81876130d1565b95505050611e0b565b60005b81518110156120cb576000828281518110611fc757611fc76130a5565b6020026020010151610100015111156120bb57600080612040848481518110611ff257611ff26130a5565b602002602001015160e00151858581518110612010576120106130a5565b60200260200101516080015186868151811061202e5761202e6130a5565b60200260200101516101000151612672565b9150915061204e8683612854565b955061205a8582612854565b945083838151811061206e5761206e6130a5565b602002602001015161010001516120a1858581518110612090576120906130a5565b602002602001015160e00151611598565b60040160008282546120b39190613156565b909155505050505b6120c4816131a7565b9050611faa565b5050915091565b60608182601f0110156120f8576040516323d5783d60e11b815260040160405180910390fd5b6121028284613156565b8451101561212357604051633b99b53d60e01b815260040160405180910390fd5b606082158015612142576040519150600082526020820160405261218c565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561217b578051835260209283019201612163565b5050858452601f01601f1916604052505b50949350505050565b6001600160a01b03811661044a5760405163f6b2911f60e01b815260040160405180910390fd5b6000610915611a9f60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a98472816130d1565b61044a8161295e565b61044a81612995565b6000610915611a9f60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb1136130d1565b6060600061224b60016000805160206131e38339815191526130d1565b80549091508190600090815b8181101561239557612381846000018281548110612277576122776130a5565b6000918252602091829020604080516101008101909152600890920201805460ff161515825260018101805492939192918401916122b49061306a565b80601f01602080910402602001604051908101604052809291908181526020018280546122e09061306a565b801561232d5780601f106123025761010080835404028352916020019161232d565b820191906000526020600020905b81548152906001019060200180831161231057829003601f168201915b505050918352505060028201546001600160a01b03166020820152600382015460408201526004820154606082015260058201546080820152600682015460a082015260079091015460c0909101526129c3565b1561238d578260010192505b600101612257565b506000826001600160401b038111156123b0576123b06130e8565b60405190808252806020026020018201604052801561243b57816020015b6124286040518061012001604052806000151581526020016060815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816123ce5790505b5090506000805b83811015611d54576000866000018281548110612461576124616130a5565b6000918252602091829020604080516101008101909152600890920201805460ff1615158252600181018054929391929184019161249e9061306a565b80601f01602080910402602001604051908101604052809291908181526020018280546124ca9061306a565b80156125175780601f106124ec57610100808354040283529160200191612517565b820191906000526020600020905b8154815290600101906020018083116124fa57829003601f168201915b505050918352505060028201546001600160a01b03166020820152600382015460408201526004820154606082015260058201546080820152600682015460a082015260079091015460c0909101529050612571816129c3565b15612602576040518061012001604052808260000151151581526020018260200151815260200182604001516001600160a01b0316815260200182606001518152602001826080015181526020018260a0015181526020018260c00151815260200183815260200160008152508484815181106125f0576125f06130a5565b60200260200101819052508260010192505b50600101612442565b6000816060015182610100015183608001516126279190613156565b1092915050565b60008160c00151826101000151836080015161264a9190613156565b61265491906130d1565b92915050565b6000818311612669578261266b565b815b9392505050565b606080826001600160401b0381111561268d5761268d6130e8565b6040519080825280602002602001820160405280156126c057816020015b60608152602001906001900390816126ab5790505b509150826001600160401b038111156126db576126db6130e8565b60405190808252806020026020018201604052801561270e57816020015b60608152602001906001900390816126f95790505b509050600061272c60016000805160206131c38339815191526130d1565b90508060005b85811015612849576000888152602083905260408120816127538a85613156565b8152602001908152602001600020805461276c9061306a565b80601f01602080910402602001604051908101604052809291908181526020018280546127989061306a565b80156127e55780601f106127ba576101008083540402835291602001916127e5565b820191906000526020600020905b8154815290600101906020018083116127c857829003601f168201915b505050505090506127f981600060306120d2565b86838151811061280b5761280b6130a5565b602002602001018190525061282381603060606120d2565b858381518110612835576128356130a5565b602090810291909101015250600101612732565b505050935093915050565b60606000825184516128669190613156565b6001600160401b0381111561287d5761287d6130e8565b6040519080825280602002602001820160405280156128b057816020015b606081526020019060019003908161289b5790505b50905060005b84518110156128fe578481815181106128d1576128d16130a5565b60200260200101518282815181106128eb576128eb6130a5565b60209081029190910101526001016128b6565b5060005b83518110156129565783818151811061291d5761291d6130a5565b6020026020010151828651836129339190613156565b81518110612943576129436130a5565b6020908102919091010152600101612902565b509392505050565b61296781612195565b61044a611ad160017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb1136130d1565b61044a611ad160017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a98472816130d1565b8051600090801561265457505060808101516060909101511190565b6040518061010001604052806000151581526020016060815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b828054612a3b9061306a565b90600052602060002090601f016020900481019282612a5d5760008555612aa3565b82601f10612a765782800160ff19823516178555612aa3565b82800160010185558215612aa3579182015b82811115612aa3578235825591602001919060010190612a88565b50612aaf929150612b27565b5090565b828054612abf9061306a565b90600052602060002090601f016020900481019282612ae15760008555612aa3565b82601f10612afa57805160ff1916838001178555612aa3565b82800160010185558215612aa3579182015b82811115612aa3578251825591602001919060010190612b0c565b5b80821115612aaf5760008155600101612b28565b600060208284031215612b4e57600080fd5b5035919050565b6000815180845260005b81811015612b7b57602081850181015186830182015201612b5f565b81811115612b8d576000602083870101525b50601f01601f19169290920160200192915050565b60006101008251151584526020830151816020860152612bc482860182612b55565b91505060018060a01b036040840151166040850152606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e08501528091505092915050565b60208152600061266b6020830184612ba2565b80356001600160a01b0381168114612c3f57600080fd5b919050565b600060208284031215612c5657600080fd5b61266b82612c28565b60008083601f840112612c7157600080fd5b5081356001600160401b03811115612c8857600080fd5b6020830191508360208260051b8501011115612ca357600080fd5b9250929050565b600080600060408486031215612cbf57600080fd5b8335925060208401356001600160401b03811115612cdc57600080fd5b612ce886828701612c5f565b9497909650939450505050565b60008083601f840112612d0757600080fd5b5081356001600160401b03811115612d1e57600080fd5b602083019150836020828501011115612ca357600080fd5b600080600060408486031215612d4b57600080fd5b8335925060208401356001600160401b03811115612d6857600080fd5b612ce886828701612cf5565b600080600080600060608688031215612d8c57600080fd5b85356001600160401b0380821115612da357600080fd5b612daf89838a01612c5f565b90975095506020880135915080821115612dc857600080fd5b50612dd588828901612c5f565b96999598509660400135949350505050565b600080600060408486031215612dfc57600080fd5b83356001600160401b03811115612e1257600080fd5b612e1e86828701612cf5565b9094509250612e31905060208501612c28565b90509250925092565b60008060408385031215612e4d57600080fd5b612e5683612c28565b9150612e6460208401612c28565b90509250929050565b60008060408385031215612e8057600080fd5b8235915060208301358015158114612e9757600080fd5b809150509250929050565b60008060408385031215612eb557600080fd5b50508035926020909101359150565b606081526000612ed76060830186612b55565b8281036020840152612ee98186612b55565b9150508215156040830152949350505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612f6557603f19888603018452612f53858351612ba2565b94509285019290850190600101612f37565b5092979650505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015612fba578284038952612fa8848351612b55565b98850198935090840190600101612f90565b5091979650505050505050565b604081526000612fda6040830185612f72565b8281036020840152612fec8185612f72565b95945050505050565b6000806000806060858703121561300b57600080fd5b843593506020850135925060408501356001600160401b0381111561302f57600080fd5b61303b87828801612cf5565b95989497509550505050565b6000806040838503121561305a57600080fd5b82359150612e6460208401612c28565b600181811c9082168061307e57607f821691505b6020821081141561309f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156130e3576130e36130bb565b500390565b634e487b7160e01b600052604160045260246000fd5b60208152600061266b6020830184612b55565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152600061314e602083018486613111565b949350505050565b60008219821115613169576131696130bb565b500190565b838152604060208201526000612fec604083018486613111565b60008160001904831182151516156131a2576131a26130bb565b500290565b60006000198214156131bb576131bb6130bb565b506001019056fe6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113a2646970667358221220b80c8ca9e345a6c49bce4ff541b5a268b2c6a1f0bd70bced87615bd82747de0864736f6c634300080a0033"
        ],
        "deployedBytecode": [
            "0x608060405234801561001057600080fd5b50600436106101115760003560e01c80635a16f135116100ad578063a194732311610071578063a194732314610243578063a519f06014610264578063a5b703e51461026c578063d04681561461027f578063f87e52961461028757600080fd5b80635a16f135146101d15780635f41a0c4146101e457806363b4118f146101f75780636e9960c3146102195780638cb310031461022e57600080fd5b806305f63c8a146101165780630e18b6811461013f578063147bf6c4146101495780631864636c1461015c5780631a4a7c611461016f5780633925132114610185578063460e6efb1461019857806350545d2f146101ab57806354001d09146101be575b600080fd5b610129610124366004612b42565b61029a565b6040516101369190612c1b565b60405180910390f35b6101476103a6565b005b610147610157366004612c4a565b610406565b61014761016a366004612cb0565b61044d565b61017761090b565b604051908152602001610136565b610147610193366004612d3c565b61091a565b6101476101a6366004612d7a565b610ad6565b6101776101b9366004612ded565b610d6d565b6101476101cc366004612e40565b610e9b565b6101476101df366004612e73565b610f70565b6101476101f2366004612ea8565b611002565b61020a610205366004612ea8565b6110a8565b60405161013693929190612eca565b6102216110d4565b6040516101369190612f02565b6102366110de565b6040516101369190612f16565b610256610251366004612b42565b6110e8565b604051610136929190612fcd565b610221611138565b61014761027a366004612ffb565b611142565b61022161143d565b61014761029536600461304d565b611447565b6102a26129e5565b6102ab8261159e565b604080516101008101909152815460ff16151581526001820180549192916020840191906102d890613070565b80601f016020809104026020016040519081016040528092919081815260200182805461030490613070565b80156103515780601f1061032657610100808354040283529160200191610351565b820191906000526020600020905b81548152906001019060200180831161033457829003601f168201915b505050918352505060028201546001600160a01b03166020820152600382015460408201526004820154606082015260058201546080820152600682015460a082015260079091015460c09091015292915050565b6103ae61160f565b6001600160a01b0316336001600160a01b0316146103ea573360405163472511eb60e11b81526004016103e19190612f02565b60405180910390fd5b6103fa6103f561160f565b611619565b6104046000611662565b565b61040e6116a2565b6001600160a01b0316336001600160a01b031614610441573360405163472511eb60e11b81526004016103e19190612f02565b61044a81611662565b50565b826104566110d4565b6001600160a01b0316336001600160a01b031614156106a357818061048e576040516379b348ff60e11b815260040160405180910390fd5b60006104998661159e565b60058101549091508086866000816104b3576104b36130ab565b90506020020135106104d8576040516317df2d8d60e01b815260040160405180910390fd5b600086866104e76001876130d7565b8181106104f6576104f66130ab565b90506020020135905082600401548110156105245760405163213af80760e21b815260040160405180910390fd5b60038301546005840154146105428961053d87866130d7565b6116ac565b60005b8581101561066f576000898983818110610561576105616130ab565b90506020020135905060008211801561059c575089896105826001856130d7565b818110610591576105916130ab565b905060200201358110155b156105ba5760405163c9ee26af60e01b815260040160405180910390fd5b60019091019060006105cc83876130d7565b905060006105da8d846116ca565b50905060006105e98e84611840565b90506105f68e858361190c565b61062e8e8460005b6040519080825280601f01601f191660200182016040528015610628576020820181803683370190505b5061190c565b8d7f70cf8064c7574b284afe278226e25779f45a4c3715653674aa651b34e9a190928360405161065e9190613104565b60405180910390a250505050610545565b81156106845760058501546003860155610698565b846003015483101561069857600385018390555b505050505050610905565b60006106ae8261159e565b805490915060ff166106d6576040516301550a7360e41b8152600481018390526024016103e1565b60028101546001600160a01b03163314610705573360405163472511eb60e11b81526004016103e19190612f02565b8280610724576040516379b348ff60e11b815260040160405180910390fd5b600061072f8761159e565b6005810154909150808787600081610749576107496130ab565b905060200201351061076e576040516317df2d8d60e01b815260040160405180910390fd5b6000878761077d6001876130d7565b81811061078c5761078c6130ab565b90506020020135905082600401548110156107ba5760405163213af80760e21b815260040160405180910390fd5b60038301546005840154146107d38a61053d87866130d7565b60005b858110156108d45760008a8a838181106107f2576107f26130ab565b90506020020135905060008211801561082d57508a8a6108136001856130d7565b818110610822576108226130ab565b905060200201358110155b1561084b5760405163c9ee26af60e01b815260040160405180910390fd5b600190910190600061085d83876130d7565b9050600061086b8e846116ca565b509050600061087a8f84611840565b90506108878f858361190c565b6108938f8460006105fe565b8e7f70cf8064c7574b284afe278226e25779f45a4c3715653674aa651b34e9a19092836040516108c39190613104565b60405180910390a2505050506107d6565b81156108e957600585015460038601556108fd565b84600301548310156108fd57600385018390555b505050505050505b50505050565b6000610915611951565b905090565b826109236110d4565b6001600160a01b0316336001600160a01b031614156109d75761097b83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061197492505050565b60006109868561159e565b9050610996600182018585612a35565b50847f9ad13f126d3d603b0b284edba7645ca0e423840767c48809bb5f87e72197e11485856040516109c9929190613140565b60405180910390a250610905565b60006109e28261159e565b805490915060ff16610a0a576040516301550a7360e41b8152600481018390526024016103e1565b60028101546001600160a01b03163314610a39573360405163472511eb60e11b81526004016103e19190612f02565b610a7884848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061197492505050565b6000610a838661159e565b9050610a93600182018686612a35565b50857f9ad13f126d3d603b0b284edba7645ca0e423840767c48809bb5f87e72197e1148686604051610ac6929190613140565b60405180910390a2505050505050565b610ade6116a2565b6001600160a01b0316336001600160a01b031614610b11573360405163472511eb60e11b81526004016103e19190612f02565b838214610b315760405163a9854bc960e01b815260040160405180910390fd5b83610b4f57604051637b329aa360e01b815260040160405180910390fd5b60005b84811015610d65576000868683818110610b6e57610b6e6130ab565b9050602002013590506000858584818110610b8b57610b8b6130ab565b905060200201359050600083118015610bc657508787610bac6001866130d7565b818110610bbb57610bbb6130ab565b905060200201358211155b15610be4576040516357e557ed60e11b815260040160405180910390fd5b6000610bef8361159e565b600381015490915082811415610c4857837fe8b22569f1f7ba3802b89b579382ccac4e223f8062d6dd73f9cd757bd46ff8aa84604051610c3191815260200190565b60405180910390a284600101945050505050610b52565b816007015486108015610c5a57508083115b15610cb757858260070154857f5482b63bdf9e3775fdd3157e4933cfbc1d6fa1ec354ed3fc9a547e5438fd3e4e8487604051610ca0929190918252602082015260400190565b60405180910390a484600101945050505050610b52565b8160050154831115610cf3576005820154604051630d7bdb4960e41b8152600481018690526024810185905260448101919091526064016103e1565b8160040154831015610d2c5760048083015460405163044816df60e51b81529182018690526024820185905260448201526064016103e1565b6003820183905560405183815284907f3adbeb5fbb94c52b64d90b31188c68a740868dde2238e03a04d581cae22cedf090602001610c31565b505050505050565b6000610d776116a2565b6001600160a01b0316336001600160a01b031614610daa573360405163472511eb60e11b81526004016103e19190612f02565b600060405180610100016040528060011515815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b038616602083015260408201819052606082018190526080820181905260a082018190524360c0909201919091529091506001610e3c83611993565b610e4691906130d7565b905081604001516001600160a01b0316817f28febbb5486eda5a1e47ad578f9cb32c8a1983c86c80ab823ea5dc1fc04ede5e8460200151604051610e8a9190613104565b60405180910390a395945050505050565b6000610ea5611a75565b8114610ed65780610eb4611a75565b604051631cfd276760e31b8152600481019290925260248201526044016103e1565b610ee9610ee482600161315c565b611aa9565b610ef283611619565b610efb82611adc565b6040516001600160a01b038316907ffc0d749143b04e0d92a3b49edae84a45f6bc88b75e99d9118ec4d7e87fe626c590600090a27f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610f6393929190613174565b60405180910390a1505050565b610f786116a2565b6001600160a01b0316336001600160a01b031614610fab573360405163472511eb60e11b81526004016103e19190612f02565b6000610fb68361159e565b805460ff1916831515908117825560405190815290915083907fe3bc5e5d3b000a1f65d146c40a38d89b1743b5729f4c6fe65f2e4b2dc620f2f2906020015b60405180910390a2505050565b61100a6116a2565b6001600160a01b0316336001600160a01b03161461103d573360405163472511eb60e11b81526004016103e19190612f02565b60006110488361159e565b9050806004015482111561106f5760405163a9cb9e0d60e01b815260040160405180910390fd5b6006810182905560405182815283907f773694db4f98cd263e42d4f798bcf603781d4491e48e8cbe96c219c1f13b777d90602001610ff5565b60608060006110b785856116ca565b90935091506110c58561159e565b60040154841090509250925092565b60006109156116a2565b6060610915611b13565b6060806110f3611d66565b6001600160a01b0316336001600160a01b031614611126573360405163472511eb60e11b81526004016103e19190612f02565b61112f83611d96565b91509150915091565b6000610915611d66565b8361114b6110d4565b6001600160a01b0316336001600160a01b031614156112ae5783611182576040516379b348ff60e11b815260040160405180910390fd5b61118e6060603061315c565b611198908561318e565b82146111b757604051630368f86360e41b815260040160405180910390fd5b60006111c28661159e565b905060005b8581101561125957600061123486868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112199250606091506030905061315c565b611223908561318e565b61122f6060603061315c565b6120d8565b90506112508883856005015461124a919061315c565b8361190c565b506001016111c7565b5061126e8686836005015461053d919061315c565b857f402e5ac3e483073137c527378b15e69f7f4a1c75c1adc0aa36f0c456876c05a085856040516112a0929190613140565b60405180910390a250611436565b60006112b98261159e565b805490915060ff166112e1576040516301550a7360e41b8152600481018390526024016103e1565b60028101546001600160a01b03163314611310573360405163472511eb60e11b81526004016103e19190612f02565b8461132e576040516379b348ff60e11b815260040160405180910390fd5b61133a6060603061315c565b611344908661318e565b831461136357604051630368f86360e41b815260040160405180910390fd5b600061136e8761159e565b905060005b868110156113e45760006113c587878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112199250606091506030905061315c565b90506113db8983856005015461124a919061315c565b50600101611373565b506113f98787836005015461053d919061315c565b867f402e5ac3e483073137c527378b15e69f7f4a1c75c1adc0aa36f0c456876c05a0868660405161142b929190613140565b60405180910390a250505b5050505050565b600061091561160f565b816114506110d4565b6001600160a01b0316336001600160a01b031614156114d2576114728261219b565b600061147d8461159e565b6002810180546001600160a01b0319166001600160a01b0386169081179091556040519192509085907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e790600090a350505050565b60006114dd8261159e565b805490915060ff16611505576040516301550a7360e41b8152600481018390526024016103e1565b60028101546001600160a01b03163314611534573360405163472511eb60e11b81526004016103e19190612f02565b61153d8361219b565b60006115488561159e565b6002810180546001600160a01b0319166001600160a01b0387169081179091556040519192509086907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e790600090a35050505050565b6000806115ba60016000805160206131e98339815191526130d7565b8054909150819084106115e3576040516302d72d2160e01b8152600481018590526024016103e1565b8060000184815481106115f8576115f86130ab565b906000526020600020906008020192505050919050565b60006109156121c2565b6116228161219b565b61162b816121f2565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b61166b816121fb565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b6000610915612204565b60006116b78361159e565b6005810192909255504360079091015550565b60608060006116e860016000805160206131c98339815191526130d7565b60008681526020828152604080832088845290915290208054919250829161179c90829061171590613070565b80601f016020809104026020016040519081016040528092919081815260200182805461174190613070565b801561178e5780601f106117635761010080835404028352916020019161178e565b820191906000526020600020905b81548152906001019060200180831161177157829003601f168201915b5050505050600060306120d8565b94506118348180546117ad90613070565b80601f01602080910402602001604051908101604052809291908181526020018280546117d990613070565b80156118265780601f106117fb57610100808354040283529160200191611826565b820191906000526020600020905b81548152906001019060200180831161180957829003601f168201915b5050505050603060606120d8565b93505050509250929050565b6060600061185d60016000805160206131c98339815191526130d7565b60008581526020828152604080832087845290915290208054919250829161188490613070565b80601f01602080910402602001604051908101604052809291908181526020018280546118b090613070565b80156118fd5780601f106118d2576101008083540402835291602001916118fd565b820191906000526020600020905b8154815290600101906020018083116118e057829003601f168201915b50505050509250505092915050565b600061192760016000805160206131c98339815191526130d7565b600085815260208281526040808320878452825290912084519293508392610d6592860190612ab9565b60008061196d60016000805160206131e98339815191526130d7565b5492915050565b805161044a57604051638d46fe0560e01b815260040160405180910390fd5b60006119a2826040015161219b565b6119af8260200151611974565b60006119ca60016000805160206131e98339815191526130d7565b80546001808201835560008381526020908190208751600890940201805460ff19169315159390931783558681015180519495508594889493611a1293908501920190612ab9565b5060408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e090910151600790910155549392505050565b6000610915611aa560017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6130d7565b5490565b61044a611ad760017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6130d7565b829055565b611ae58161219b565b61044a611ad760017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c6130d7565b60606000611b3060016000805160206131e98339815191526130d7565b80549091508190600090815b81811015611b8157836000018181548110611b5957611b596130ab565b600091825260209091206008909102015460ff1615611b79578260010192505b600101611b3c565b506000826001600160401b03811115611b9c57611b9c6130ee565b604051908082528060200260200182016040528015611bd557816020015b611bc26129e5565b815260200190600190039081611bba5790505b5090506000805b83811015611d5a57856000018181548110611bf957611bf96130ab565b600091825260209091206008909102015460ff1615611d5257856000018181548110611c2757611c276130ab565b6000918252602091829020604080516101008101909152600890920201805460ff16151582526001810180549293919291840191611c6490613070565b80601f0160208091040260200160405190810160405280929190818152602001828054611c9090613070565b8015611cdd5780601f10611cb257610100808354040283529160200191611cdd565b820191906000526020600020905b815481529060010190602001808311611cc057829003601f168201915b505050918352505060028201546001600160a01b03166020820152600382015460408201526004820154606082015260058201546080820152600682015460a082015260079091015460c0909101528351849084908110611d4057611d406130ab565b60200260200101819052508160010191505b600101611bdc565b50909695505050505050565b6000610915611aa560017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c6130d7565b6060806000611da3612234565b9050805160001415611e11576040805160008082526020820190925290611dda565b6060815260200190600190039081611dc55790505b506040805160008082526020820190925290611e06565b6060815260200190600190039081611df15790505b509250925050915091565b8315611fad5760005b8151811015611e5757611e45828281518110611e3857611e386130ab565b6020026020010151612611565b15611e4f57611e57565b600101611e1a565b8151811415611e665750611fad565b6000611e7382600161315c565b90505b8251811015611ee457611ea1838381518110611e9457611e946130ab565b6020026020010151612634565b611eb6848381518110611e9457611e946130ab565b108015611ed35750611ed3838281518110611e3857611e386130ab565b15611edc578091505b600101611e76565b506000611f69611f63848481518110611eff57611eff6130ab565b60200260200101516101000151858581518110611f1e57611f1e6130ab565b602002602001015160800151611f34919061315c565b858581518110611f4657611f466130ab565b602002602001015160600151611f5c91906130d7565b6005612660565b87612660565b905080838381518110611f7e57611f7e6130ab565b602002602001015161010001818151611f97919061315c565b905250611fa481876130d7565b95505050611e11565b60005b81518110156120d1576000828281518110611fcd57611fcd6130ab565b6020026020010151610100015111156120c157600080612046848481518110611ff857611ff86130ab565b602002602001015160e00151858581518110612016576120166130ab565b602002602001015160800151868681518110612034576120346130ab565b60200260200101516101000151612678565b91509150612054868361285a565b9550612060858261285a565b9450838381518110612074576120746130ab565b602002602001015161010001516120a7858581518110612096576120966130ab565b602002602001015160e0015161159e565b60040160008282546120b9919061315c565b909155505050505b6120ca816131ad565b9050611fb0565b5050915091565b60608182601f0110156120fe576040516323d5783d60e11b815260040160405180910390fd5b612108828461315c565b8451101561212957604051633b99b53d60e01b815260040160405180910390fd5b6060821580156121485760405191506000825260208201604052612192565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612181578051835260209283019201612169565b5050858452601f01601f1916604052505b50949350505050565b6001600160a01b03811661044a5760405163f6b2911f60e01b815260040160405180910390fd5b6000610915611aa560017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a98472816130d7565b61044a81612964565b61044a8161299b565b6000610915611aa560017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb1136130d7565b6060600061225160016000805160206131e98339815191526130d7565b80549091508190600090815b8181101561239b5761238784600001828154811061227d5761227d6130ab565b6000918252602091829020604080516101008101909152600890920201805460ff161515825260018101805492939192918401916122ba90613070565b80601f01602080910402602001604051908101604052809291908181526020018280546122e690613070565b80156123335780601f1061230857610100808354040283529160200191612333565b820191906000526020600020905b81548152906001019060200180831161231657829003601f168201915b505050918352505060028201546001600160a01b03166020820152600382015460408201526004820154606082015260058201546080820152600682015460a082015260079091015460c0909101526129c9565b15612393578260010192505b60010161225d565b506000826001600160401b038111156123b6576123b66130ee565b60405190808252806020026020018201604052801561244157816020015b61242e6040518061012001604052806000151581526020016060815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816123d45790505b5090506000805b83811015611d5a576000866000018281548110612467576124676130ab565b6000918252602091829020604080516101008101909152600890920201805460ff161515825260018101805492939192918401916124a490613070565b80601f01602080910402602001604051908101604052809291908181526020018280546124d090613070565b801561251d5780601f106124f25761010080835404028352916020019161251d565b820191906000526020600020905b81548152906001019060200180831161250057829003601f168201915b505050918352505060028201546001600160a01b03166020820152600382015460408201526004820154606082015260058201546080820152600682015460a082015260079091015460c0909101529050612577816129c9565b15612608576040518061012001604052808260000151151581526020018260200151815260200182604001516001600160a01b0316815260200182606001518152602001826080015181526020018260a0015181526020018260c00151815260200183815260200160008152508484815181106125f6576125f66130ab565b60200260200101819052508260010192505b50600101612448565b60008160600151826101000151836080015161262d919061315c565b1092915050565b60008160c001518261010001518360800151612650919061315c565b61265a91906130d7565b92915050565b600081831161266f5782612671565b815b9392505050565b606080826001600160401b03811115612693576126936130ee565b6040519080825280602002602001820160405280156126c657816020015b60608152602001906001900390816126b15790505b509150826001600160401b038111156126e1576126e16130ee565b60405190808252806020026020018201604052801561271457816020015b60608152602001906001900390816126ff5790505b509050600061273260016000805160206131c98339815191526130d7565b90508060005b8581101561284f576000888152602083905260408120816127598a8561315c565b8152602001908152602001600020805461277290613070565b80601f016020809104026020016040519081016040528092919081815260200182805461279e90613070565b80156127eb5780601f106127c0576101008083540402835291602001916127eb565b820191906000526020600020905b8154815290600101906020018083116127ce57829003601f168201915b505050505090506127ff81600060306120d8565b868381518110612811576128116130ab565b602002602001018190525061282981603060606120d8565b85838151811061283b5761283b6130ab565b602090810291909101015250600101612738565b505050935093915050565b606060008251845161286c919061315c565b6001600160401b03811115612883576128836130ee565b6040519080825280602002602001820160405280156128b657816020015b60608152602001906001900390816128a15790505b50905060005b8451811015612904578481815181106128d7576128d76130ab565b60200260200101518282815181106128f1576128f16130ab565b60209081029190910101526001016128bc565b5060005b835181101561295c57838181518110612923576129236130ab565b602002602001015182865183612939919061315c565b81518110612949576129496130ab565b6020908102919091010152600101612908565b509392505050565b61296d8161219b565b61044a611ad760017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb1136130d7565b61044a611ad760017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a98472816130d7565b8051600090801561265a57505060808101516060909101511190565b6040518061010001604052806000151581526020016060815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b828054612a4190613070565b90600052602060002090601f016020900481019282612a635760008555612aa9565b82601f10612a7c5782800160ff19823516178555612aa9565b82800160010185558215612aa9579182015b82811115612aa9578235825591602001919060010190612a8e565b50612ab5929150612b2d565b5090565b828054612ac590613070565b90600052602060002090601f016020900481019282612ae75760008555612aa9565b82601f10612b0057805160ff1916838001178555612aa9565b82800160010185558215612aa9579182015b82811115612aa9578251825591602001919060010190612b12565b5b80821115612ab55760008155600101612b2e565b600060208284031215612b5457600080fd5b5035919050565b6000815180845260005b81811015612b8157602081850181015186830182015201612b65565b81811115612b93576000602083870101525b50601f01601f19169290920160200192915050565b60006101008251151584526020830151816020860152612bca82860182612b5b565b91505060018060a01b036040840151166040850152606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e08501528091505092915050565b6020815260006126716020830184612ba8565b80356001600160a01b0381168114612c4557600080fd5b919050565b600060208284031215612c5c57600080fd5b61267182612c2e565b60008083601f840112612c7757600080fd5b5081356001600160401b03811115612c8e57600080fd5b6020830191508360208260051b8501011115612ca957600080fd5b9250929050565b600080600060408486031215612cc557600080fd5b8335925060208401356001600160401b03811115612ce257600080fd5b612cee86828701612c65565b9497909650939450505050565b60008083601f840112612d0d57600080fd5b5081356001600160401b03811115612d2457600080fd5b602083019150836020828501011115612ca957600080fd5b600080600060408486031215612d5157600080fd5b8335925060208401356001600160401b03811115612d6e57600080fd5b612cee86828701612cfb565b600080600080600060608688031215612d9257600080fd5b85356001600160401b0380821115612da957600080fd5b612db589838a01612c65565b90975095506020880135915080821115612dce57600080fd5b50612ddb88828901612c65565b96999598509660400135949350505050565b600080600060408486031215612e0257600080fd5b83356001600160401b03811115612e1857600080fd5b612e2486828701612cfb565b9094509250612e37905060208501612c2e565b90509250925092565b60008060408385031215612e5357600080fd5b612e5c83612c2e565b9150612e6a60208401612c2e565b90509250929050565b60008060408385031215612e8657600080fd5b8235915060208301358015158114612e9d57600080fd5b809150509250929050565b60008060408385031215612ebb57600080fd5b50508035926020909101359150565b606081526000612edd6060830186612b5b565b8281036020840152612eef8186612b5b565b9150508215156040830152949350505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612f6b57603f19888603018452612f59858351612ba8565b94509285019290850190600101612f3d565b5092979650505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015612fc0578284038952612fae848351612b5b565b98850198935090840190600101612f96565b5091979650505050505050565b604081526000612fe06040830185612f78565b8281036020840152612ff28185612f78565b95945050505050565b6000806000806060858703121561301157600080fd5b843593506020850135925060408501356001600160401b0381111561303557600080fd5b61304187828801612cfb565b95989497509550505050565b6000806040838503121561306057600080fd5b82359150612e6a60208401612c2e565b600181811c9082168061308457607f821691505b602082108114156130a557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156130e9576130e96130c1565b500390565b634e487b7160e01b600052604160045260246000fd5b6020815260006126716020830184612b5b565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000613154602083018486613117565b949350505050565b6000821982111561316f5761316f6130c1565b500190565b838152604060208201526000612ff2604083018486613117565b60008160001904831182151516156131a8576131a86130c1565b500290565b60006000198214156131c1576131c16130c1565b506001019056fe6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113a26469706673582212200f70995bd25ea136763d6e10c1263bfff965c24c8bf48cc9b356cc883dc37bf564736f6c634300080a0033",
            ""
        ],
        "devdoc": [
            {
                "author": "Kiln",
                "errors": {
                    "InactiveOperator(uint256)": [
                        {
                            "params": {
                                "index": "The operator index"
                            }
                        }
                    ],
                    "InvalidInitialization(uint256,uint256)": [
                        {
                            "params": {
                                "expectedVersion": "The version that was expected",
                                "version": "The version that was attempting to be initialized"
                            }
                        }
                    ],
                    "OperatorLimitTooHigh(uint256,uint256,uint256)": [
                        {
                            "params": {
                                "index": "The operator index",
                                "keyCount": "The operator key count",
                                "limit": "The new limit provided"
                            }
                        }
                    ],
                    "OperatorLimitTooLow(uint256,uint256,uint256)": [
                        {
                            "params": {
                                "fundedKeyCount": "The operator funded key count",
                                "index": "The operator index",
                                "limit": "The new limit provided"
                            }
                        }
                    ],
                    "OperatorNotFound(uint256)": [
                        {
                            "params": {
                                "index": "The provided index"
                            }
                        }
                    ],
                    "Unauthorized(address)": [
                        {
                            "params": {
                                "caller": "Addres performing the call"
                            }
                        }
                    ]
                },
                "kind": "dev",
                "methods": {
                    "acceptAdmin()": {
                        "details": "Only callable by the pending admin. Resets the pending admin if succesful."
                    },
                    "addOperator(string,address)": {
                        "details": "Only callable by the administrator",
                        "params": {
                            "_name": "The name identifying the operator",
                            "_operator": "The address representing the operator, receiving the rewards"
                        },
                        "returns": {
                            "_0": "The index of the new operator"
                        }
                    },
                    "addValidators(uint256,uint256,bytes)": {
                        "details": "Only callable by the administrator or the operator address",
                        "params": {
                            "_index": "The operator index",
                            "_keyCount": "The amount of keys provided",
                            "_publicKeysAndSignatures": "Public keys of the validator, concatenated"
                        }
                    },
                    "getAdmin()": {
                        "returns": {
                            "_0": "The admin address"
                        }
                    },
                    "getOperator(uint256)": {
                        "params": {
                            "_index": "The index of the operator"
                        },
                        "returns": {
                            "_0": "The details of the operator"
                        }
                    },
                    "getOperatorCount()": {
                        "returns": {
                            "_0": "The operator count"
                        }
                    },
                    "getPendingAdmin()": {
                        "returns": {
                            "_0": "The pending admin address"
                        }
                    },
                    "getRiver()": {
                        "returns": {
                            "_0": "The address of River"
                        }
                    },
                    "getValidator(uint256,uint256)": {
                        "params": {
                            "_operatorIndex": "The index of the operator",
                            "_validatorIndex": "The index of the validator"
                        },
                        "returns": {
                            "funded": "True if validator has been funded",
                            "publicKey": "The public key of the validator",
                            "signature": "The signature used during deposit"
                        }
                    },
                    "initOperatorsRegistryV1(address,address)": {
                        "params": {
                            "_admin": "Admin in charge of managing operators",
                            "_river": "Address of River system"
                        }
                    },
                    "listActiveOperators()": {
                        "returns": {
                            "_0": "The list of active operators and their details"
                        }
                    },
                    "pickNextValidators(uint256)": {
                        "params": {
                            "_count": "Max amount of keys requested"
                        },
                        "returns": {
                            "publicKeys": "An array of public keys",
                            "signatures": "An array of signatures linked to the public keys"
                        }
                    },
                    "proposeAdmin(address)": {
                        "details": "This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.",
                        "params": {
                            "_newAdmin": "New admin address"
                        }
                    },
                    "removeValidators(uint256,uint256[])": {
                        "details": "Only callable by the administrator or the operator addressThe indexes must be provided sorted in decreasing order and duplicate-free, otherwise the method will revertThe operator limit will be set to the lowest deleted key index if the operator's limit wasn't equal to its total key countThe operator or the admin cannot remove funded keys",
                        "params": {
                            "_index": "The operator index",
                            "_indexes": "The indexes of the keys to remove"
                        }
                    },
                    "setOperatorAddress(uint256,address)": {
                        "details": "Only callable by the administrator or the previous operator address",
                        "params": {
                            "_index": "The operator index",
                            "_newOperatorAddress": "The new address of the operator"
                        }
                    },
                    "setOperatorLimits(uint256[],uint256[],uint256)": {
                        "details": "Only callable by the administratorThe operator indexes must be in increasing order and contain no duplicateThe limit cannot exceed the total key count of the operatorThe _indexes and _newLimits must have the same length.Each limit value is applied to the operator index at the same index in the _indexes array.",
                        "params": {
                            "_newLimits": "The new staking limit of the operators",
                            "_operatorIndexes": "The operator indexes, in increasing order and duplicate free",
                            "_snapshotBlock": "The block number at which the snapshot was computed"
                        }
                    },
                    "setOperatorName(uint256,string)": {
                        "details": "Only callable by the administrator or the operator",
                        "params": {
                            "_index": "The operator index",
                            "_newName": "The new operator name"
                        }
                    },
                    "setOperatorStatus(uint256,bool)": {
                        "details": "Only callable by the administrator",
                        "params": {
                            "_index": "The operator index",
                            "_newStatus": "The new status of the operator"
                        }
                    },
                    "setOperatorStoppedValidatorCount(uint256,uint256)": {
                        "details": "Only callable by the administrator",
                        "params": {
                            "_index": "The operator index",
                            "_newStoppedValidatorCount": "The new stopped validator count of the operator"
                        }
                    }
                },
                "title": "Operators Registry (v1)",
                "version": 1
            },
            {
                "author": "Kiln",
                "errors": {
                    "InactiveOperator(uint256)": [
                        {
                            "params": {
                                "index": "The operator index"
                            }
                        }
                    ],
                    "InvalidInitialization(uint256,uint256)": [
                        {
                            "params": {
                                "expectedVersion": "The version that was expected",
                                "version": "The version that was attempting to be initialized"
                            }
                        }
                    ],
                    "OperatorLimitTooHigh(uint256,uint256,uint256)": [
                        {
                            "params": {
                                "index": "The operator index",
                                "keyCount": "The operator key count",
                                "limit": "The new limit provided"
                            }
                        }
                    ],
                    "OperatorLimitTooLow(uint256,uint256,uint256)": [
                        {
                            "params": {
                                "fundedKeyCount": "The operator funded key count",
                                "index": "The operator index",
                                "limit": "The new limit provided"
                            }
                        }
                    ],
                    "OperatorNotFound(uint256)": [
                        {
                            "params": {
                                "index": "The provided index"
                            }
                        }
                    ],
                    "Unauthorized(address)": [
                        {
                            "params": {
                                "caller": "Address performing the call"
                            }
                        }
                    ]
                },
                "kind": "dev",
                "methods": {
                    "acceptAdmin()": {
                        "details": "Only callable by the pending admin. Resets the pending admin if succesful."
                    },
                    "addOperator(string,address)": {
                        "details": "Only callable by the administrator",
                        "params": {
                            "_name": "The name identifying the operator",
                            "_operator": "The address representing the operator, receiving the rewards"
                        },
                        "returns": {
                            "_0": "The index of the new operator"
                        }
                    },
                    "addValidators(uint256,uint256,bytes)": {
                        "details": "Only callable by the administrator or the operator address",
                        "params": {
                            "_index": "The operator index",
                            "_keyCount": "The amount of keys provided",
                            "_publicKeysAndSignatures": "Public keys of the validator, concatenated"
                        }
                    },
                    "getAdmin()": {
                        "returns": {
                            "_0": "The admin address"
                        }
                    },
                    "getOperator(uint256)": {
                        "params": {
                            "_index": "The index of the operator"
                        },
                        "returns": {
                            "_0": "The details of the operator"
                        }
                    },
                    "getOperatorCount()": {
                        "returns": {
                            "_0": "The operator count"
                        }
                    },
                    "getPendingAdmin()": {
                        "returns": {
                            "_0": "The pending admin address"
                        }
                    },
                    "getRiver()": {
                        "returns": {
                            "_0": "The address of River"
                        }
                    },
                    "getValidator(uint256,uint256)": {
                        "params": {
                            "_operatorIndex": "The index of the operator",
                            "_validatorIndex": "The index of the validator"
                        },
                        "returns": {
                            "funded": "True if validator has been funded",
                            "publicKey": "The public key of the validator",
                            "signature": "The signature used during deposit"
                        }
                    },
                    "initOperatorsRegistryV1(address,address)": {
                        "params": {
                            "_admin": "Admin in charge of managing operators",
                            "_river": "Address of River system"
                        }
                    },
                    "listActiveOperators()": {
                        "returns": {
                            "_0": "The list of active operators and their details"
                        }
                    },
                    "pickNextValidators(uint256)": {
                        "params": {
                            "_count": "Max amount of keys requested"
                        },
                        "returns": {
                            "publicKeys": "An array of public keys",
                            "signatures": "An array of signatures linked to the public keys"
                        }
                    },
                    "proposeAdmin(address)": {
                        "details": "This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.",
                        "params": {
                            "_newAdmin": "New admin address"
                        }
                    },
                    "removeValidators(uint256,uint256[])": {
                        "details": "Only callable by the administrator or the operator addressThe indexes must be provided sorted in decreasing order and duplicate-free, otherwise the method will revertThe operator limit will be set to the lowest deleted key index if the operator's limit wasn't equal to its total key countThe operator or the admin cannot remove funded keysWhen removing validators, the indexes of specific unfunded keys can be changed in order to properlyremove the keys from the storage array. Beware of this specific behavior when chaining calls as thetargeted public key indexes can point to a different key after a first call was made and performedsome swaps",
                        "params": {
                            "_index": "The operator index",
                            "_indexes": "The indexes of the keys to remove"
                        }
                    },
                    "setOperatorAddress(uint256,address)": {
                        "details": "Only callable by the administrator or the previous operator address",
                        "params": {
                            "_index": "The operator index",
                            "_newOperatorAddress": "The new address of the operator"
                        }
                    },
                    "setOperatorLimits(uint256[],uint256[],uint256)": {
                        "details": "Only callable by the administratorThe operator indexes must be in increasing order and contain no duplicateThe limit cannot exceed the total key count of the operatorThe _indexes and _newLimits must have the same length.Each limit value is applied to the operator index at the same index in the _indexes array.",
                        "params": {
                            "_newLimits": "The new staking limit of the operators",
                            "_operatorIndexes": "The operator indexes, in increasing order and duplicate free",
                            "_snapshotBlock": "The block number at which the snapshot was computed"
                        }
                    },
                    "setOperatorName(uint256,string)": {
                        "details": "Only callable by the administrator or the operator",
                        "params": {
                            "_index": "The operator index",
                            "_newName": "The new operator name"
                        }
                    },
                    "setOperatorStatus(uint256,bool)": {
                        "details": "Only callable by the administrator",
                        "params": {
                            "_index": "The operator index",
                            "_newStatus": "The new status of the operator"
                        }
                    },
                    "setOperatorStoppedValidatorCount(uint256,uint256)": {
                        "details": "Only callable by the administrator",
                        "params": {
                            "_index": "The operator index",
                            "_newStoppedValidatorCount": "The new stopped validator count of the operator"
                        }
                    }
                },
                "title": "Operators Registry (v1)",
                "version": 1
            }
        ],
        "userdoc": [
            {
                "errors": {
                    "InactiveOperator(uint256)": [
                        {
                            "notice": "The calling operator is inactive"
                        }
                    ],
                    "InvalidArgument()": [
                        {
                            "notice": "The argument was invalid"
                        }
                    ],
                    "InvalidArrayLengths()": [
                        {
                            "notice": "The provided operator and limits array have different lengths"
                        }
                    ],
                    "InvalidEmptyArray()": [
                        {
                            "notice": "The provided operator and limits array are empty"
                        }
                    ],
                    "InvalidEmptyString()": [
                        {
                            "notice": "The string is empty"
                        }
                    ],
                    "InvalidFundedKeyDeletionAttempt()": [
                        {
                            "notice": "A funded key deletion has been attempted"
                        }
                    ],
                    "InvalidIndexOutOfBounds()": [
                        {
                            "notice": "The index that is removed is out of bounds"
                        }
                    ],
                    "InvalidInitialization(uint256,uint256)": [
                        {
                            "notice": "An error occured during the initialization"
                        }
                    ],
                    "InvalidKeyCount()": [
                        {
                            "notice": "The provided key count is 0"
                        }
                    ],
                    "InvalidKeysLength()": [
                        {
                            "notice": "The provided concatenated keys do not have the expected length"
                        }
                    ],
                    "InvalidUnsortedIndexes()": [
                        {
                            "notice": "The index provided are not sorted properly (descending order)"
                        }
                    ],
                    "InvalidZeroAddress()": [
                        {
                            "notice": "The address is zero"
                        }
                    ],
                    "OperatorLimitTooHigh(uint256,uint256,uint256)": [
                        {
                            "notice": "The value for the operator limit is too high"
                        }
                    ],
                    "OperatorLimitTooLow(uint256,uint256,uint256)": [
                        {
                            "notice": "The value for the limit is too low"
                        }
                    ],
                    "OperatorNotFound(uint256)": [
                        {
                            "notice": "The operator was not found"
                        }
                    ],
                    "SliceOutOfBounds()": [
                        {
                            "notice": "The slice is outside of the initial bytes bounds"
                        }
                    ],
                    "SliceOverflow()": [
                        {
                            "notice": "The length overflows an uint"
                        }
                    ],
                    "Unauthorized(address)": [
                        {
                            "notice": "The operator is unauthorized for the caller"
                        }
                    ],
                    "UnorderedOperatorList()": [
                        {
                            "notice": "The provided list of operators is not in increasing order"
                        }
                    ]
                },
                "events": {
                    "AddedOperator(uint256,string,address)": {
                        "notice": "A new operator has been added to the registry"
                    },
                    "AddedValidatorKeys(uint256,bytes)": {
                        "notice": "The operator or the admin added new validator keys and signatures"
                    },
                    "Initialize(uint256,bytes)": {
                        "notice": "Emitted when the contract is properly initialized"
                    },
                    "OperatorEditsAfterSnapshot(uint256,uint256,uint256,uint256,uint256)": {
                        "notice": "The operator edited its keys after the snapshot block"
                    },
                    "OperatorLimitUnchanged(uint256,uint256)": {
                        "notice": "The call didn't alter the limit of the operator"
                    },
                    "RemovedValidatorKey(uint256,bytes)": {
                        "notice": "The operator or the admin removed a public key and its signature from the registry"
                    },
                    "SetAdmin(address)": {
                        "notice": "The admin address changed"
                    },
                    "SetOperatorAddress(uint256,address)": {
                        "notice": "The operator address has been changed"
                    },
                    "SetOperatorLimit(uint256,uint256)": {
                        "notice": "The operator limit has been changed"
                    },
                    "SetOperatorName(uint256,string)": {
                        "notice": "The operator display name has been changed"
                    },
                    "SetOperatorStatus(uint256,bool)": {
                        "notice": "The operator status has been changed"
                    },
                    "SetOperatorStoppedValidatorCount(uint256,uint256)": {
                        "notice": "The operator stopped validator count has been changed"
                    },
                    "SetPendingAdmin(address)": {
                        "notice": "The pending admin address changed"
                    },
                    "SetRiver(address)": {
                        "notice": "The stored river address has been changed"
                    }
                },
                "kind": "user",
                "methods": {
                    "acceptAdmin()": {
                        "notice": "Accept the transfer of ownership"
                    },
                    "addOperator(string,address)": {
                        "notice": "Adds an operator to the registry"
                    },
                    "addValidators(uint256,uint256,bytes)": {
                        "notice": "Adds new keys for an operator"
                    },
                    "getAdmin()": {
                        "notice": "Retrieves the current admin address"
                    },
                    "getOperator(uint256)": {
                        "notice": "Get operator details"
                    },
                    "getOperatorCount()": {
                        "notice": "Get operator count"
                    },
                    "getPendingAdmin()": {
                        "notice": "Retrieve the current pending admin address"
                    },
                    "getRiver()": {
                        "notice": "Retrieve the River address"
                    },
                    "getValidator(uint256,uint256)": {
                        "notice": "Get the details of a validator"
                    },
                    "initOperatorsRegistryV1(address,address)": {
                        "notice": "Initializes the operators registry"
                    },
                    "listActiveOperators()": {
                        "notice": "Retrieve the active operator set"
                    },
                    "pickNextValidators(uint256)": {
                        "notice": "Retrieve validator keys based on operator statuses"
                    },
                    "proposeAdmin(address)": {
                        "notice": "Proposes a new address as admin"
                    },
                    "removeValidators(uint256,uint256[])": {
                        "notice": "Remove validator keys"
                    },
                    "setOperatorAddress(uint256,address)": {
                        "notice": "Changes the operator address of an operator"
                    },
                    "setOperatorLimits(uint256[],uint256[],uint256)": {
                        "notice": "Changes the operator staking limit"
                    },
                    "setOperatorName(uint256,string)": {
                        "notice": "Changes the operator name"
                    },
                    "setOperatorStatus(uint256,bool)": {
                        "notice": "Changes the operator status"
                    },
                    "setOperatorStoppedValidatorCount(uint256,uint256)": {
                        "notice": "Changes the operator stopped validator count"
                    }
                },
                "notice": "This contract handles the list of operators and their keys",
                "version": 1
            },
            {
                "errors": {
                    "InactiveOperator(uint256)": [
                        {
                            "notice": "The calling operator is inactive"
                        }
                    ],
                    "InvalidArgument()": [
                        {
                            "notice": "The argument was invalid"
                        }
                    ],
                    "InvalidArrayLengths()": [
                        {
                            "notice": "The provided operator and limits array have different lengths"
                        }
                    ],
                    "InvalidEmptyArray()": [
                        {
                            "notice": "The provided operator and limits array are empty"
                        }
                    ],
                    "InvalidEmptyString()": [
                        {
                            "notice": "The string is empty"
                        }
                    ],
                    "InvalidFundedKeyDeletionAttempt()": [
                        {
                            "notice": "A funded key deletion has been attempted"
                        }
                    ],
                    "InvalidIndexOutOfBounds()": [
                        {
                            "notice": "The index that is removed is out of bounds"
                        }
                    ],
                    "InvalidInitialization(uint256,uint256)": [
                        {
                            "notice": "An error occured during the initialization"
                        }
                    ],
                    "InvalidKeyCount()": [
                        {
                            "notice": "The provided key count is 0"
                        }
                    ],
                    "InvalidKeysLength()": [
                        {
                            "notice": "The provided concatenated keys do not have the expected length"
                        }
                    ],
                    "InvalidUnsortedIndexes()": [
                        {
                            "notice": "The index provided are not sorted properly (descending order)"
                        }
                    ],
                    "InvalidZeroAddress()": [
                        {
                            "notice": "The address is zero"
                        }
                    ],
                    "OperatorLimitTooHigh(uint256,uint256,uint256)": [
                        {
                            "notice": "The value for the operator limit is too high"
                        }
                    ],
                    "OperatorLimitTooLow(uint256,uint256,uint256)": [
                        {
                            "notice": "The value for the limit is too low"
                        }
                    ],
                    "OperatorNotFound(uint256)": [
                        {
                            "notice": "The operator was not found"
                        }
                    ],
                    "SliceOutOfBounds()": [
                        {
                            "notice": "The slice is outside of the initial bytes bounds"
                        }
                    ],
                    "SliceOverflow()": [
                        {
                            "notice": "The length overflows an uint"
                        }
                    ],
                    "Unauthorized(address)": [
                        {
                            "notice": "The operator is unauthorized for the caller"
                        }
                    ],
                    "UnorderedOperatorList()": [
                        {
                            "notice": "The provided list of operators is not in increasing order"
                        }
                    ]
                },
                "events": {
                    "AddedOperator(uint256,string,address)": {
                        "notice": "A new operator has been added to the registry"
                    },
                    "AddedValidatorKeys(uint256,bytes)": {
                        "notice": "The operator or the admin added new validator keys and signatures"
                    },
                    "Initialize(uint256,bytes)": {
                        "notice": "Emitted when the contract is properly initialized"
                    },
                    "OperatorEditsAfterSnapshot(uint256,uint256,uint256,uint256,uint256)": {
                        "notice": "The operator edited its keys after the snapshot block"
                    },
                    "OperatorLimitUnchanged(uint256,uint256)": {
                        "notice": "The call didn't alter the limit of the operator"
                    },
                    "RemovedValidatorKey(uint256,bytes)": {
                        "notice": "The operator or the admin removed a public key and its signature from the registry"
                    },
                    "SetAdmin(address)": {
                        "notice": "The admin address changed"
                    },
                    "SetOperatorAddress(uint256,address)": {
                        "notice": "The operator address has been changed"
                    },
                    "SetOperatorLimit(uint256,uint256)": {
                        "notice": "The operator limit has been changed"
                    },
                    "SetOperatorName(uint256,string)": {
                        "notice": "The operator display name has been changed"
                    },
                    "SetOperatorStatus(uint256,bool)": {
                        "notice": "The operator status has been changed"
                    },
                    "SetOperatorStoppedValidatorCount(uint256,uint256)": {
                        "notice": "The operator stopped validator count has been changed"
                    },
                    "SetPendingAdmin(address)": {
                        "notice": "The pending admin address changed"
                    },
                    "SetRiver(address)": {
                        "notice": "The stored river address has been changed"
                    }
                },
                "kind": "user",
                "methods": {
                    "acceptAdmin()": {
                        "notice": "Accept the transfer of ownership"
                    },
                    "addOperator(string,address)": {
                        "notice": "Adds an operator to the registry"
                    },
                    "addValidators(uint256,uint256,bytes)": {
                        "notice": "Adds new keys for an operator"
                    },
                    "getAdmin()": {
                        "notice": "Retrieves the current admin address"
                    },
                    "getOperator(uint256)": {
                        "notice": "Get operator details"
                    },
                    "getOperatorCount()": {
                        "notice": "Get operator count"
                    },
                    "getPendingAdmin()": {
                        "notice": "Retrieve the current pending admin address"
                    },
                    "getRiver()": {
                        "notice": "Retrieve the River address"
                    },
                    "getValidator(uint256,uint256)": {
                        "notice": "Get the details of a validator"
                    },
                    "initOperatorsRegistryV1(address,address)": {
                        "notice": "Initializes the operators registry"
                    },
                    "listActiveOperators()": {
                        "notice": "Retrieve the active operator set"
                    },
                    "pickNextValidators(uint256)": {
                        "notice": "Retrieve validator keys based on operator statuses"
                    },
                    "proposeAdmin(address)": {
                        "notice": "Proposes a new address as admin"
                    },
                    "removeValidators(uint256,uint256[])": {
                        "notice": "Remove validator keys"
                    },
                    "setOperatorAddress(uint256,address)": {
                        "notice": "Changes the operator address of an operator"
                    },
                    "setOperatorLimits(uint256[],uint256[],uint256)": {
                        "notice": "Changes the operator staking limit"
                    },
                    "setOperatorName(uint256,string)": {
                        "notice": "Changes the operator name"
                    },
                    "setOperatorStatus(uint256,bool)": {
                        "notice": "Changes the operator status"
                    },
                    "setOperatorStoppedValidatorCount(uint256,uint256)": {
                        "notice": "Changes the operator stopped validator count"
                    }
                },
                "notice": "This contract handles the list of operators and their keys",
                "version": 1
            }
        ],
        "storageLayout": [
            {
                "storage": [],
                "types": null
            },
            {
                "storage": [],
                "types": null
            }
        ]
    }
}