{
  "address": "0x9Fdb764198C6Cd626B12c9B062A4D096436A9639",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedVersion",
          "type": "uint256"
        }
      ],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_riverAddress",
          "type": "address"
        }
      ],
      "name": "initELFeeRecipientV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pullELFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x39afa91f9b43b7a7e5c482526beed0f048bcde342405c94ad8ae9307c5afd068",
  "receipt": {
    "to": null,
    "from": "0x92D7d6DADe15fcF369534cEb8CD1A27f97185ab3",
    "contractAddress": "0x9Fdb764198C6Cd626B12c9B062A4D096436A9639",
    "transactionIndex": 29,
    "gasUsed": "222710",
    "logsBloom": "0x
    "blockHash": "0x9b56cb3697356faceb6c8b5a91c290db807933728805bd7b9b8f2c7428907e71",
    "transactionHash": "0x39afa91f9b43b7a7e5c482526beed0f048bcde342405c94ad8ae9307c5afd068",
    "logs": [],
    "blockNumber": 7491656,
    "cumulativeGasUsed": "6239564",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e0747c9f458a392de0f02a251cd18ac6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_riverAddress\",\"type\":\"address\"}],\"name\":\"initELFeeRecipientV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullELFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kiln\",\"kind\":\"dev\",\"methods\":{\"initELFeeRecipientV1(address)\":{\"params\":{\"_riverAddress\":\"Address of River\"}},\"pullELFees()\":{\"details\":\"Only callable by the River contract\"}},\"title\":\"Execution Layer Fee Recipient\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initELFeeRecipientV1(address)\":{\"notice\":\"Initialize the fee recipient with the required arguments\"},\"pullELFees()\":{\"notice\":\"Pulls all the ETH to the River contract\"}},\"notice\":\"This contract receives all the execution layer fees from the proposed blocks + bribes\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/ELFeeRecipient.1.sol\":\"ELFeeRecipientV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/ELFeeRecipient.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./libraries/LibOwnable.sol\\\";\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\nimport \\\"./interfaces/IELFeeRecipient.1.sol\\\";\\n\\nimport \\\"./state/shared/RiverAddress.sol\\\";\\n\\n/// @title Execution Layer Fee Recipient\\n/// @author Kiln\\n/// @notice This contract receives all the execution layer fees from the proposed blocks + bribes\\ncontract ELFeeRecipientV1 is Initializable, IELFeeRecipientV1 {\\n    /// @notice Initialize the fee recipient with the required arguments\\n    /// @param _riverAddress Address of River\\n    function initELFeeRecipientV1(address _riverAddress) external init(0) {\\n        RiverAddress.set(_riverAddress);\\n    }\\n\\n    /// @notice Pulls all the ETH to the River contract\\n    /// @dev Only callable by the River contract\\n    function pullELFees() external {\\n        address river = RiverAddress.get();\\n        if (msg.sender != river) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n\\n        IRiverV1(payable(river)).sendELFees{value: address(this).balance}();\\n    }\\n\\n    /// @notice Ether receiver\\n    receive() external payable {\\n        this;\\n    }\\n\\n    /// @notice Invalid fallback detector\\n    fallback() external payable {\\n        revert InvalidCall();\\n    }\\n}\\n\",\"keccak256\":\"0xafe20282d3fa2968e7032ebae661178feba9516adc94c449d451962a11339630\",\"license\":\"BUSL-1.1\"},\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\ncontract Initializable {\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    modifier init(uint256 version) {\\n        if (version != Version.get()) {\\n            revert InvalidInitialization(version, Version.get());\\n        }\\n        Version.set(version + 1); // prevents reentrency on the called method\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc93555f4bd660f91e565f20753e0d3a01e783e673bc0209d0d1e33c7b6941053\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IELFeeRecipient.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IELFeeRecipientV1 {\\n    error InvalidCall();\\n\\n    function initELFeeRecipientV1(address _riverAddress) external;\\n    function pullELFees() external;\\n    receive() external payable;\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x00544d3913dc7a63655d7be8fca84986a766dfd4f85174ce5728658d52243003\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRiver.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./components/IConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"./components/IOracleManager.1.sol\\\";\\nimport \\\"./components/ISharesManager.1.sol\\\";\\nimport \\\"./components/IUserDepositManager.1.sol\\\";\\n\\ninterface IRiverV1 is IConsensusLayerDepositManagerV1, IUserDepositManagerV1, ISharesManagerV1, IOracleManagerV1 {\\n    error ZeroMintedShares();\\n\\n    event PulledELFees(uint256 amount);\\n\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _operatorRegistryAddress,\\n        address _treasuryAddress,\\n        uint256 _globalFee,\\n        uint256 _operatorRewardsShare\\n    )\\n        external;\\n\\n    function setGlobalFee(uint256 newFee) external;\\n    function getGlobalFee() external view returns (uint256);\\n    function setOperatorRewardsShare(uint256 newOperatorRewardsShare) external;\\n    function getOperatorRewardsShare() external view returns (uint256);\\n    function setAllowlist(address _newAllowlist) external;\\n    function getAllowlist() external view returns (address);\\n    function setTreasury(address _newTreasury) external;\\n    function getTreasury() external view returns (address);\\n    function transferOwnership(address _newAdmin) external;\\n    function acceptOwnership() external;\\n    function getAdministrator() external view returns (address);\\n    function getPendingAdministrator() external view returns (address);\\n    function setELFeeRecipient(address _newELFeeRecipient) external;\\n    function getELFeeRecipient() external view returns (address);\\n    function sendELFees() external payable;\\n}\\n\",\"keccak256\":\"0xf2c1e3e2b8b2148adbd71f76336096a789f682504f77a4ae079de11f84360386\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IConsensusLayerDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IConsensusLayerDepositManagerV1 {\\n    event FundedValidatorKey(bytes publicKey);\\n\\n    error NotEnoughFunds();\\n    error InconsistentPublicKeys();\\n    error InconsistentSignatures();\\n    error NoAvailableValidatorKeys();\\n    error InvalidPublicKeyCount();\\n    error InvalidSignatureCount();\\n    error InvalidWithdrawalCredentials();\\n\\n    function getWithdrawalCredentials() external view returns (bytes32);\\n    function depositToConsensusLayer(uint256 _maxCount) external;\\n    function getDepositedValidatorCount() external view returns (uint256 depositedValidatorCount);\\n}\\n\",\"keccak256\":\"0xb6bc772223ac779517d63ca0923546c8ffb8559b0fd7839909297b67f95f0160\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IOracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IOracleManagerV1 {\\n    event BeaconDataUpdate(uint256 validatorCount, uint256 validatorBalanceSum, bytes32 roundId);\\n\\n    error InvalidValidatorCountReport(uint256 _providedValidatorCount, uint256 _depositedValidatorCount);\\n\\n    function setBeaconData(uint256 _validatorCount, uint256 _validatorBalanceSum, bytes32 _roundId) external;\\n    function getOracle() external view returns (address oracle);\\n    function setOracle(address _oracleAddress) external;\\n    function getBeaconValidatorBalanceSum() external view returns (uint256 beaconValidatorBalanceSum);\\n    function getBeaconValidatorCount() external view returns (uint256 beaconValidatorCount);\\n}\\n\",\"keccak256\":\"0x48302c21becf34c3eddb16f5782759427d683b92eb325b07d107dfcabfe04fa5\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/ISharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISharesManagerV1 is IERC20 {\\n    error BalanceTooLow();\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n    error NullTransfer();\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function totalUnderlyingSupply() external view returns (uint256);\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n    function balanceOfUnderlying(address _owner) external view returns (uint256 balance);\\n    function underlyingBalanceFromShares(uint256 shares) external view returns (uint256);\\n    function sharesFromUnderlyingBalance(uint256 underlyingBalance) external view returns (uint256);\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0x038d83b91a4d9ef2945720eec488d66a3f085b0d04e5cc7fd5d62ebcc52b6591\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IUserDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IUserDepositManagerV1 {\\n    event UserDeposit(address indexed depositor, address indexed recipient, uint256 amount);\\n\\n    error EmptyDeposit();\\n    error EmptyDonation();\\n\\n    function getPendingEth() external view returns (uint256);\\n    function deposit() external payable;\\n    function depositAndTransfer(address _recipient) external payable;\\n    receive() external payable;\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x693b99f64b5c183783aa8cebbe9df7f339ec4dc5cf74f86f27435d768387ce47\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    error Unauthorized(address caller);\\n    error InvalidCall();\\n    error InvalidArgument();\\n    error InvalidZeroAddress();\\n}\\n\",\"keccak256\":\"0xb212763b0c7e4f4addfb85d863c616469be04e2d43e2431e9ef6da5d47f07436\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\nimport \\\"../state/shared/PendingAdministratorAddress.sol\\\";\\n\\nlibrary LibOwnable {\\n    function _setAdmin(address newAdmin) internal {\\n        AdministratorAddress.set(newAdmin);\\n    }\\n\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n\\n    function _setPendingAdmin(address newAdmin) internal {\\n        PendingAdministratorAddress.set(newAdmin);\\n    }\\n\\n    function _getPendingAdmin() internal view returns (address) {\\n        return PendingAdministratorAddress.get();\\n    }\\n}\\n\",\"keccak256\":\"0x41156e3a841b426dd1d3a8b7a82cb88065974a3c812bb47481b3acce56798247\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x52ccf1daa33de9c72831e0d7458928c37ca7b5f8d8f732114095edeb81339920\",\"license\":\"MIT\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary AdministratorAddress {\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x6c103a106ff958994c38f055a316144416df36aeb299ba660e7b8af063931b72\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/PendingAdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary PendingAdministratorAddress {\\n    bytes32 public constant PENDING_ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.pendingAdministratorAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x5888a98f160df2cc8d51e0352c57ae0491678b9e18c0be0cac5e5f9527aff650\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/RiverAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\n\\nlibrary RiverAddress {\\n    bytes32 internal constant RIVER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.riverAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(RIVER_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        if (newValue == address(0)) {\\n            revert Errors.InvalidZeroAddress();\\n        }\\n        UnstructuredStorage.setStorageAddress(RIVER_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xb272b15074b5e22cdb00283b4ede4f0466b6c836bb348cdbe0361a5fd41dbf9a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Version {\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(VERSION_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf90d1ecf583061aa70dc464ec1fde21da6e9309601bcbba38f47d26257a1c656\",\"license\":\"BUSL-1.1\"},\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610311806100206000396000f3fe60806040526004361061002d5760003560e01c80635404dd791461004d5780637b4b81821461006f57610034565b3661003457005b60405163574b16a760e11b815260040160405180910390fd5b34801561005957600080fd5b5061006d610068366004610266565b610084565b005b34801561007b57600080fd5b5061006d6100e4565b600061008e610172565b81146100c4578061009d610172565b604051631cfd276760e31b8152600481019290925260248201526044015b60405180910390fd5b6100d76100d28260016102ac565b6101ab565b6100e0826101e1565b5050565b60006100ee610236565b9050336001600160a01b0382161461011b5760405163472511eb60e11b81523360048201526024016100bb565b806001600160a01b031663efd60347476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561015657600080fd5b505af115801561016a573d6000803e3d6000fd5b505050505050565b60006101a66101a260017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6102c4565b5490565b905090565b6101de6101d960017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6102c4565b829055565b50565b6001600160a01b0381166102085760405163f6b2911f60e01b815260040160405180910390fd5b6101de6101d960017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c6102c4565b60006101a66101a260017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c6102c4565b60006020828403121561027857600080fd5b81356001600160a01b038116811461028f57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156102bf576102bf610296565b500190565b6000828210156102d6576102d6610296565b50039056fea26469706673582212208f5ff426bf645e78dfcb5e7480f5494cd7489c2884979c8f35728717c4d4ecd164736f6c634300080a0033",
  "deployedBytecode": "0x60806040526004361061002d5760003560e01c80635404dd791461004d5780637b4b81821461006f57610034565b3661003457005b60405163574b16a760e11b815260040160405180910390fd5b34801561005957600080fd5b5061006d610068366004610266565b610084565b005b34801561007b57600080fd5b5061006d6100e4565b600061008e610172565b81146100c4578061009d610172565b604051631cfd276760e31b8152600481019290925260248201526044015b60405180910390fd5b6100d76100d28260016102ac565b6101ab565b6100e0826101e1565b5050565b60006100ee610236565b9050336001600160a01b0382161461011b5760405163472511eb60e11b81523360048201526024016100bb565b806001600160a01b031663efd60347476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561015657600080fd5b505af115801561016a573d6000803e3d6000fd5b505050505050565b60006101a66101a260017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6102c4565b5490565b905090565b6101de6101d960017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6102c4565b829055565b50565b6001600160a01b0381166102085760405163f6b2911f60e01b815260040160405180910390fd5b6101de6101d960017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c6102c4565b60006101a66101a260017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c6102c4565b60006020828403121561027857600080fd5b81356001600160a01b038116811461028f57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156102bf576102bf610296565b500190565b6000828210156102d6576102d6610296565b50039056fea26469706673582212208f5ff426bf645e78dfcb5e7480f5494cd7489c2884979c8f35728717c4d4ecd164736f6c634300080a0033",
  "devdoc": {
    "author": "Kiln",
    "kind": "dev",
    "methods": {
      "initELFeeRecipientV1(address)": {
        "params": {
          "_riverAddress": "Address of River"
        }
      },
      "pullELFees()": {
        "details": "Only callable by the River contract"
      }
    },
    "title": "Execution Layer Fee Recipient",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initELFeeRecipientV1(address)": {
        "notice": "Initialize the fee recipient with the required arguments"
      },
      "pullELFees()": {
        "notice": "Pulls all the ETH to the River contract"
      }
    },
    "notice": "This contract receives all the execution layer fees from the proposed blocks + bribes",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}