{
  "language": "Solidity",
  "sources": {
    "contracts/src/migration/TLC_globalUnlockScheduleMigration.sol": {
      "content": "//SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.20;\n\nimport \"../state/tlc/VestingSchedules.2.sol\";\nimport \"../state/tlc/IgnoreGlobalUnlockSchedule.sol\";\n\nstruct VestingScheduleMigration {\n    // number of consecutive schedules to migrate with the same parameters\n    uint8 scheduleCount;\n    // The new lock duration\n    uint32 newLockDuration;\n    // if != 0, the new start value\n    uint64 newStart;\n    // if != 0, the new end value\n    uint64 newEnd;\n    // set cliff to 0 if true\n    bool setCliff;\n    // if true set vesting duration to 86400\n    bool setDuration;\n    // if true set vesting period duration to 86400\n    bool setPeriodDuration;\n    // if true schedule will not be subject to global unlock schedule\n    bool ignoreGlobalUnlock;\n}\n\nuint256 constant OCTOBER_31_2026 = 1793404800;\n\ncontract TlcMigration {\n    error CliffTooLong(uint256 i);\n    error WrongUnlockDate(uint256 i);\n    error WrongEnd(uint256 i);\n\n    function migrate() external {\n        VestingScheduleMigration[] memory migrations = new VestingScheduleMigration[](60);\n        // 0 -> 6\n        migrations[0] = VestingScheduleMigration({\n            scheduleCount: 7,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 140140800, //108604800, // 75772800\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 7\n        migrations[1] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 134697600, //103161600, // 70329600\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 8\n        migrations[2] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 129859200, //98323200, // 65491200\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 9 -> 12\n        migrations[3] = VestingScheduleMigration({\n            scheduleCount: 4,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 136771200, //105235200, // 72403200\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 13\n        migrations[4] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 131414400, //99878400, // 67046400\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 14\n        migrations[5] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 120873600, //89337600, // 56505600\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 15\n        migrations[6] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 122601600, //91065600, // 58233600\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 16\n        migrations[7] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 122342400, //90806400, // 57974400\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 17\n        migrations[8] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 118108800, //86572800, // 53740800\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: true\n        });\n        // 18\n        migrations[9] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 140140800, //108604800, // 75772800\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 19\n        migrations[10] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 113842800, //82306800, // 49474800\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 20\n        migrations[11] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 140140800, //108604800, // 75772800\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 21\n        migrations[12] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 113842800, //82306800, // 49474800\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 22\n        migrations[13] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 140140800, //108604800, // 75772800\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 23\n        migrations[14] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 113842800, //82306800, // 49474800\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 24 -> 26\n        migrations[15] = VestingScheduleMigration({\n            scheduleCount: 3,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 140140800, //108604800, // 75772800\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 27\n        migrations[16] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 134697600, //103161600, // 70329600\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 28 -> 29\n        migrations[17] = VestingScheduleMigration({\n            scheduleCount: 2,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 114739200, //83203200, // 50371200\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 30\n        migrations[18] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 115084800, //83548800, // 50716800\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: true\n        });\n        // 31\n        migrations[19] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 115171200, //83635200, // 50803200\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: true\n        });\n        // 32\n        migrations[20] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 115257600, //83721600, // 50889600\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: true\n        });\n        // 33\n        migrations[21] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 115084800, //83548800, // 50716800\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: true\n        });\n        // 34 -> 35\n        migrations[22] = VestingScheduleMigration({\n            scheduleCount: 2,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 115257600, //83721600, // 50889600\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: true\n        });\n        // 36 -> 60\n        migrations[23] = VestingScheduleMigration({\n            scheduleCount: 25,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 107229600, //75693600, // 42861600\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 61\n        migrations[24] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 105321600, //73785600, // 40953600\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 62\n        migrations[25] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 113097600, //81561600, // 48729600\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 63\n        migrations[26] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 106012800, //74476800, // 41644800\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: true\n        });\n        // 64\n        migrations[27] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 111369600, //79833600, // 47001600\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: true\n        });\n        // 65\n        migrations[28] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 109382400, //77846400, // 45014400\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: true\n        });\n        // 66\n        migrations[29] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 102556800, //71020800, // 38188800\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: true\n        });\n        // 67 -> 69\n        migrations[30] = VestingScheduleMigration({\n            scheduleCount: 3,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 107229600, //75693600, // 42861600\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 70\n        migrations[31] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 95299200, //63763200, // 33004800\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 71\n        migrations[32] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 96508800, //64972800, // 34214400\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 72\n        migrations[33] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 96249600, //64713600, // 33955200\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 73\n        migrations[34] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 101347200, //69811200, // 39052800\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: true\n        });\n        // 74\n        migrations[35] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 101433600, //69897600, // 41731200\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 75\n        migrations[36] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 100224000, //68688000, // 40521600\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 76\n        migrations[37] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 99014400, //67478400, // 39312900\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 77\n        migrations[38] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 96595200, //65059200, // 36892800\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 78 -> 79\n        migrations[39] = VestingScheduleMigration({\n            scheduleCount: 2,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 95990400, //64454400, // 36288000\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 80\n        migrations[40] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 90892800, //59356800, // 33523200\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 81 -> 82\n        migrations[41] = VestingScheduleMigration({\n            scheduleCount: 2,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 90460800, //58924800, // 33091200\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: true\n        });\n        // 83\n        migrations[42] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 89337600, //57801600, // 38016000\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: true\n        });\n        // 84\n        migrations[43] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 88646400, //57110400, // 37324800\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 85\n        migrations[44] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 85622400, //54086400, // 34300800\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 86\n        migrations[45] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 88732800, //57196800, // 39571200\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 87\n        migrations[46] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 87177600, //55641600, // 38016000\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 88\n        migrations[47] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 84499200, //52963200, // 35337600\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 89\n        migrations[48] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 87177600, //55641600, // 38016000\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 90 -> 91\n        migrations[49] = VestingScheduleMigration({\n            scheduleCount: 2,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 114652800, //83116800, // 65491200\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 92\n        migrations[50] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 85708800, //54172800, // 36547200\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 93\n        migrations[51] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 87177600, //55641600, // 38016000\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 94\n        migrations[52] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 105667200, //74131200, // 56505600\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 95\n        migrations[53] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 81475200, //49939200, // 35424000\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: true\n        });\n        // 96\n        migrations[54] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 80870400, //49334400, // 34819200\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 97 -> 98\n        migrations[55] = VestingScheduleMigration({\n            scheduleCount: 2,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 79488000, //47952000, // 36547200\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 99\n        migrations[56] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 74822400, //43286400, // 33696000\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 100\n        migrations[57] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 73612800, //42076800, // 32486400\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 101\n        migrations[58] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 78451200, //46915200, // 37324800\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: false\n        });\n        // 102\n        migrations[59] = VestingScheduleMigration({\n            scheduleCount: 1,\n            newStart: 0,\n            newEnd: 0,\n            newLockDuration: 68515200, //36979200, // 32918400\n            setCliff: false,\n            setDuration: false,\n            setPeriodDuration: false,\n            ignoreGlobalUnlock: true\n        });\n\n        // All schedules covered\n\n        uint256 index = 0;\n        for (uint256 i = 0; i < migrations.length; i++) {\n            VestingScheduleMigration memory migration = migrations[i];\n            for (uint256 j = 0; j < migration.scheduleCount; j++) {\n                VestingSchedulesV2.VestingSchedule storage sch = VestingSchedulesV2.get(index);\n\n                bool isRevoked = false;\n                if (sch.start + sch.duration != sch.end) {\n                    isRevoked = true;\n                }\n                // Modifications\n                sch.lockDuration = migration.newLockDuration;\n                if (migration.newStart != 0) {\n                    sch.start = migration.newStart;\n                }\n                if (migration.newEnd != 0) {\n                    sch.end = migration.newEnd;\n                }\n                if (migration.setCliff) {\n                    sch.cliffDuration = 0;\n                }\n                if (migration.setDuration) {\n                    sch.duration = 86400;\n                }\n                if (migration.setPeriodDuration) {\n                    sch.periodDuration = 86400;\n                }\n                if (migration.ignoreGlobalUnlock) {\n                    IgnoreGlobalUnlockSchedule.set(index, true);\n                }\n\n                // Post effects checks\n                // check cliff is not longer than duration\n                if (sch.cliffDuration > sch.duration) {\n                    revert CliffTooLong(index);\n                }\n                // sanity checks on non revoked schedules\n                if (!isRevoked && (sch.end != sch.start + sch.duration)) {\n                    revert WrongEnd(index);\n                }\n                // check all the schedules are locked until unix : 1793404800\n                if (sch.start + sch.lockDuration != OCTOBER_31_2026) {\n                    revert WrongUnlockDate(index);\n                }\n\n                index += 1;\n            }\n        }\n    }\n}\n"
    },
    "contracts/src/state/tlc/IgnoreGlobalUnlockSchedule.sol": {
      "content": "//SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.20;\n\n/// @title Global unlock schedule activation storage\n/// @notice Utility to manage the global unlock schedule activation mapping in storage\n/// @notice The global unlock schedule releases 1/24th of the total scheduled amount every month after the local lock end\nlibrary IgnoreGlobalUnlockSchedule {\n    /// @notice Storage slot of the global unlock schedule activation mapping\n    bytes32 internal constant GLOBAL_UNLOCK_ACTIVATION_SLOT =\n        bytes32(uint256(keccak256(\"tlc.state.globalUnlockScheduleActivation\")) - 1);\n\n    /// @notice Structure stored in storage slot\n    struct Slot {\n        /// @custom:attribute Mapping keeping track of activation per schedule\n        mapping(uint256 => bool) value;\n    }\n\n    /// @notice Retrieve the global unlock schedule activation value of a schedule, true if the global lock should be ignored\n    /// @param _scheduleId The schedule id\n    /// @return The global unlock activation value\n    function get(uint256 _scheduleId) internal view returns (bool) {\n        bytes32 slot = GLOBAL_UNLOCK_ACTIVATION_SLOT;\n\n        Slot storage r;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r.slot := slot\n        }\n\n        return r.value[_scheduleId];\n    }\n\n    /// @notice Sets the global unlock schedule activation value of a schedule\n    /// @param _scheduleId The id of the schedule to modify\n    /// @param _ignoreGlobalUnlock The value to set, true if the global lock should be ignored\n    function set(uint256 _scheduleId, bool _ignoreGlobalUnlock) internal {\n        bytes32 slot = GLOBAL_UNLOCK_ACTIVATION_SLOT;\n\n        Slot storage r;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r.slot := slot\n        }\n\n        r.value[_scheduleId] = _ignoreGlobalUnlock;\n    }\n}\n"
    },
    "contracts/src/state/tlc/VestingSchedules.1.sol": {
      "content": "//SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.20;\n\n/// @title VestingSchedulesV1 Storage\n/// @notice Utility to manage VestingSchedulesV1 in storage\nlibrary VestingSchedulesV1 {\n    /// @notice Storage slot of the Vesting Schedules\n    bytes32 internal constant VESTING_SCHEDULES_SLOT =\n        bytes32(uint256(keccak256(\"erc20VestableVotes.state.schedules\")) - 1);\n\n    struct VestingSchedule {\n        // start time of the vesting period\n        uint64 start;\n        // date at which the vesting is ended\n        // initially it is equal to start+duration then to revoke date in case of revoke\n        uint64 end;\n        // duration before which first tokens gets ownable\n        uint32 cliffDuration;\n        // duration before tokens gets unlocked. can exceed the duration of the vesting chedule\n        uint32 lockDuration;\n        // duration of the entire vesting (sum of all vesting period durations)\n        uint32 duration;\n        // duration of a single period of vesting\n        uint32 periodDuration;\n        // amount of tokens granted by the vesting schedule\n        uint256 amount;\n        // creator of the token vesting\n        address creator;\n        // beneficiary of tokens after they are releaseVestingScheduled\n        address beneficiary;\n        // whether the schedule can be revoked\n        bool revocable;\n    }\n\n    /// @notice The structure at the storage slot\n    struct SlotVestingSchedule {\n        /// @custom:attribute Array containing all the vesting schedules\n        VestingSchedule[] value;\n    }\n\n    /// @notice The VestingSchedule was not found\n    /// @param index vesting schedule index\n    error VestingScheduleNotFound(uint256 index);\n\n    /// @notice Retrieve the vesting schedule in storage\n    /// @param _index index of the vesting schedule\n    /// @return the vesting schedule\n    function get(uint256 _index) internal view returns (VestingSchedule storage) {\n        bytes32 slot = VESTING_SCHEDULES_SLOT;\n\n        SlotVestingSchedule storage r;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r.slot := slot\n        }\n\n        if (r.value.length <= _index) {\n            revert VestingScheduleNotFound(_index);\n        }\n\n        return r.value[_index];\n    }\n\n    /// @notice Get vesting schedule count in storage\n    /// @return The count of vesting schedule in storage\n    function getCount() internal view returns (uint256) {\n        bytes32 slot = VESTING_SCHEDULES_SLOT;\n\n        SlotVestingSchedule storage r;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r.slot := slot\n        }\n\n        return r.value.length;\n    }\n\n    /// @notice Add a new vesting schedule in storage\n    /// @param _newSchedule new vesting schedule to create\n    /// @return The size of the vesting schedule array after the operation\n    function push(VestingSchedule memory _newSchedule) internal returns (uint256) {\n        bytes32 slot = VESTING_SCHEDULES_SLOT;\n\n        SlotVestingSchedule storage r;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r.slot := slot\n        }\n\n        r.value.push(_newSchedule);\n\n        return r.value.length;\n    }\n}\n"
    },
    "contracts/src/state/tlc/VestingSchedules.2.sol": {
      "content": "//SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.20;\n\nimport \"./VestingSchedules.1.sol\";\n\n/// @title VestingSchedulesV2 Storage\n/// @notice Utility to manage VestingSchedulesV2 in storage\nlibrary VestingSchedulesV2 {\n    /// @notice Storage slot of the Vesting Schedules (note the slot is different from v1)\n    bytes32 internal constant VESTING_SCHEDULES_SLOT =\n        bytes32(uint256(keccak256(\"erc20VestableVotes.state.v2.schedules\")) - 1);\n\n    struct VestingSchedule {\n        // start time of the vesting period\n        uint64 start;\n        // date at which the vesting is ended\n        // initially it is equal to start+duration then to revoke date in case of revoke\n        uint64 end;\n        // duration before which first tokens gets ownable\n        uint32 cliffDuration;\n        // duration before tokens gets unlocked. can exceed the duration of the vesting chedule\n        uint32 lockDuration;\n        // duration of the entire vesting (sum of all vesting period durations)\n        uint32 duration;\n        // duration of a single period of vesting\n        uint32 periodDuration;\n        // amount of tokens granted by the vesting schedule\n        uint256 amount;\n        // creator of the token vesting\n        address creator;\n        // beneficiary of tokens after they are releaseVestingScheduled\n        address beneficiary;\n        // whether the schedule can be revoked\n        bool revocable;\n        // amount of released tokens\n        uint256 releasedAmount;\n    }\n\n    /// @notice The structure at the storage slot\n    struct SlotVestingSchedule {\n        /// @custom:attribute Array containing all the vesting schedules\n        VestingSchedule[] value;\n    }\n\n    /// @notice The VestingSchedule was not found\n    /// @param index vesting schedule index\n    error VestingScheduleNotFound(uint256 index);\n\n    /// @notice Retrieve the vesting schedule in storage\n    /// @param _index index of the vesting schedule\n    /// @return the vesting schedule\n    function get(uint256 _index) internal view returns (VestingSchedule storage) {\n        bytes32 slot = VESTING_SCHEDULES_SLOT;\n\n        SlotVestingSchedule storage r;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r.slot := slot\n        }\n\n        if (r.value.length <= _index) {\n            revert VestingScheduleNotFound(_index);\n        }\n\n        return r.value[_index];\n    }\n\n    /// @notice Get vesting schedule count in storage\n    /// @return The count of vesting schedule in storage\n    function getCount() internal view returns (uint256) {\n        bytes32 slot = VESTING_SCHEDULES_SLOT;\n\n        SlotVestingSchedule storage r;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r.slot := slot\n        }\n\n        return r.value.length;\n    }\n\n    /// @notice Add a new vesting schedule in storage\n    /// @param _newSchedule new vesting schedule to create\n    /// @return The size of the vesting schedule array after the operation\n    function push(VestingSchedule memory _newSchedule) internal returns (uint256) {\n        bytes32 slot = VESTING_SCHEDULES_SLOT;\n\n        SlotVestingSchedule storage r;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r.slot := slot\n        }\n\n        r.value.push(_newSchedule);\n\n        return r.value.length;\n    }\n\n    /// @notice Migrate a VestingSchedule from v1 to v2\n    /// @notice Takes a VestingSchedule in v1 format in stores it in v2 format\n    /// @param _index of the schedule in v1 to be migrated\n    /// @param _releasedAmount The released amount to keep in storage\n    /// @return The index of the created schedule in v2 format\n    function migrateVestingScheduleFromV1(uint256 _index, uint256 _releasedAmount) internal returns (uint256) {\n        VestingSchedulesV1.VestingSchedule memory scheduleV1 = VestingSchedulesV1.get(_index);\n        VestingSchedulesV2.VestingSchedule memory scheduleV2 = VestingSchedulesV2.VestingSchedule({\n            start: scheduleV1.start,\n            end: scheduleV1.end,\n            lockDuration: scheduleV1.lockDuration,\n            cliffDuration: scheduleV1.cliffDuration,\n            duration: scheduleV1.duration,\n            periodDuration: scheduleV1.periodDuration,\n            amount: scheduleV1.amount,\n            creator: scheduleV1.creator,\n            beneficiary: scheduleV1.beneficiary,\n            revocable: scheduleV1.revocable,\n            releasedAmount: _releasedAmount\n        });\n\n        return push(scheduleV2) - 1;\n    }\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}