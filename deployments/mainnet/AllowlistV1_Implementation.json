{
  "address": "0x8892dAf1FcD24B2e8A3c6194d297Aaab04E493f2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "Denied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAlloweeCount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedVersion",
          "type": "uint256"
        }
      ],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MismatchedAlloweeAndStatusCount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "cdata",
          "type": "bytes"
        }
      ],
      "name": "Initialize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "SetAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "allower",
          "type": "address"
        }
      ],
      "name": "SetAllower",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "permissions",
          "type": "uint256[]"
        }
      ],
      "name": "SetAllowlistPermissions",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingAdmin",
          "type": "address"
        }
      ],
      "name": "SetPendingAdmin",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_permissions",
          "type": "uint256[]"
        }
      ],
      "name": "allow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllower",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getPermissions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mask",
          "type": "uint256"
        }
      ],
      "name": "hasPermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_allower",
          "type": "address"
        }
      ],
      "name": "initAllowlistV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mask",
          "type": "uint256"
        }
      ],
      "name": "isAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isDenied",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mask",
          "type": "uint256"
        }
      ],
      "name": "onlyAllowed",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "proposeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAllowerAddress",
          "type": "address"
        }
      ],
      "name": "setAllower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x575999b05d73513eec9accc711c165c9454cce98a5b0106118a80c393cfd567c",
  "receipt": {
    "to": null,
    "from": "0xBFa8549887E6ddef8Cdf83Cda1Ad24856496fd00",
    "contractAddress": "0x8892dAf1FcD24B2e8A3c6194d297Aaab04E493f2",
    "transactionIndex": 106,
    "gasUsed": "709242",
    "logsBloom": "0x
    "blockHash": "0xc604f0d56333ca3c203653cfde6fecd9314bd3b6f266b8b3e153cec061ee421c",
    "transactionHash": "0x575999b05d73513eec9accc711c165c9454cce98a5b0106118a80c393cfd567c",
    "logs": [],
    "blockNumber": 15676396,
    "cumulativeGasUsed": "8523073",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d46223a1947b2b7fbc79fc0dfd1c596b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"Denied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAlloweeCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchedAlloweeAndStatusCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"cdata\",\"type\":\"bytes\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"allower\",\"type\":\"address\"}],\"name\":\"SetAllower\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"permissions\",\"type\":\"uint256[]\"}],\"name\":\"SetAllowlistPermissions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"SetPendingAdmin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_permissions\",\"type\":\"uint256[]\"}],\"name\":\"allow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPermissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allower\",\"type\":\"address\"}],\"name\":\"initAllowlistV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isDenied\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"onlyAllowed\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"proposeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAllowerAddress\",\"type\":\"address\"}],\"name\":\"setAllower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kiln\",\"errors\":{\"Denied(address)\":[{\"params\":{\"_account\":\"The denied account\"}}],\"InvalidInitialization(uint256,uint256)\":[{\"params\":{\"expectedVersion\":\"The version that was expected\",\"version\":\"The version that was attempting to be initialized\"}}],\"Unauthorized(address)\":[{\"params\":{\"caller\":\"Address performing the call\"}}]},\"kind\":\"dev\",\"methods\":{\"acceptAdmin()\":{\"details\":\"Only callable by the pending admin. Resets the pending admin if succesful.\"},\"allow(address[],uint256[])\":{\"details\":\"The permission value is overridden and not updated\",\"params\":{\"_accounts\":\"Accounts with statuses to edit\",\"_permissions\":\"Allowlist permissions for each account, in the same order as _accounts\"}},\"getAdmin()\":{\"returns\":{\"_0\":\"The admin address\"}},\"getAllower()\":{\"returns\":{\"_0\":\"The address of the allower\"}},\"getPendingAdmin()\":{\"returns\":{\"_0\":\"The pending admin address\"}},\"getPermissions(address)\":{\"params\":{\"_account\":\"Recipient to verify\"},\"returns\":{\"_0\":\"The raw permissions value of the account\"}},\"hasPermission(address,uint256)\":{\"params\":{\"_account\":\"Recipient to verify\",\"_mask\":\"Combination of permissions to verify\"},\"returns\":{\"_0\":\"True if mask is respected\"}},\"initAllowlistV1(address,address)\":{\"params\":{\"_admin\":\"Address of the Allowlist administrator\",\"_allower\":\"Address of the allower\"}},\"isAllowed(address,uint256)\":{\"params\":{\"_account\":\"Recipient to verify\",\"_mask\":\"Combination of permissions to verify\"},\"returns\":{\"_0\":\"True if mask is respected and user is allowed\"}},\"isDenied(address)\":{\"params\":{\"_account\":\"Recipient to verify\"},\"returns\":{\"_0\":\"True if user is denied access\"}},\"onlyAllowed(address,uint256)\":{\"params\":{\"_account\":\"Recipient to verify\",\"_mask\":\"Combination of permissions to verify\"}},\"proposeAdmin(address)\":{\"details\":\"This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.\",\"params\":{\"_newAdmin\":\"New admin address\"}},\"setAllower(address)\":{\"params\":{\"_newAllowerAddress\":\"New address allowed to edit the allowlist\"}}},\"title\":\"Allowlist (v1)\",\"version\":1},\"userdoc\":{\"errors\":{\"Denied(address)\":[{\"notice\":\"The account is denied access\"}],\"InvalidAlloweeCount()\":[{\"notice\":\"The provided accounts list is empty\"}],\"InvalidInitialization(uint256,uint256)\":[{\"notice\":\"An error occured during the initialization\"}],\"InvalidZeroAddress()\":[{\"notice\":\"The address is zero\"}],\"MismatchedAlloweeAndStatusCount()\":[{\"notice\":\"The provided accounts and permissions list have different lengths\"}],\"Unauthorized(address)\":[{\"notice\":\"The operator is unauthorized for the caller\"}]},\"events\":{\"Initialize(uint256,bytes)\":{\"notice\":\"Emitted when the contract is properly initialized\"},\"SetAdmin(address)\":{\"notice\":\"The admin address changed\"},\"SetAllower(address)\":{\"notice\":\"The stored allower address has been changed\"},\"SetAllowlistPermissions(address[],uint256[])\":{\"notice\":\"The permissions of several accounts have changed\"},\"SetPendingAdmin(address)\":{\"notice\":\"The pending admin address changed\"}},\"kind\":\"user\",\"methods\":{\"acceptAdmin()\":{\"notice\":\"Accept the transfer of ownership\"},\"allow(address[],uint256[])\":{\"notice\":\"Sets the allowlisting status for one or more accounts\"},\"getAdmin()\":{\"notice\":\"Retrieves the current admin address\"},\"getAllower()\":{\"notice\":\"Retrieves the allower address\"},\"getPendingAdmin()\":{\"notice\":\"Retrieve the current pending admin address\"},\"getPermissions(address)\":{\"notice\":\"This method retrieves the raw permission value\"},\"hasPermission(address,uint256)\":{\"notice\":\"This method returns true if the user has the expected permission         ignoring any deny list membership\"},\"initAllowlistV1(address,address)\":{\"notice\":\"Initializes the allowlist\"},\"isAllowed(address,uint256)\":{\"notice\":\"This method returns true if the user has the expected permission and         is not in the deny list\"},\"isDenied(address)\":{\"notice\":\"This method returns true if the user is in the deny list\"},\"onlyAllowed(address,uint256)\":{\"notice\":\"This method should be used as a modifier and is expected to revert         if the user hasn't got the required permission or if the user is         in the deny list.\"},\"proposeAdmin(address)\":{\"notice\":\"Proposes a new address as admin\"},\"setAllower(address)\":{\"notice\":\"Changes the allower address\"}},\"notice\":\"This contract handles the list of allowed recipients.All accounts have an uint256 value associated with their addresses whereeach bit represents a right in the system. The DENY_MASK defined the maskused to identify if the denied bit is on, preventing users from interactingwith the system\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/Allowlist.1.sol\":\"AllowlistV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/Administrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IAdministrable.sol\\\";\\n\\nimport \\\"./libraries/LibAdministrable.sol\\\";\\nimport \\\"./libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrable\\n/// @author Kiln\\n/// @notice This contract handles the administration of the contracts\\nabstract contract Administrable is IAdministrable {\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() {\\n        if (msg.sender != LibAdministrable._getAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyPendingAdmin() {\\n        if (msg.sender != LibAdministrable._getPendingAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getAdmin() external view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getPendingAdmin() external view returns (address) {\\n        return LibAdministrable._getPendingAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function proposeAdmin(address _newAdmin) external onlyAdmin {\\n        _setPendingAdmin(_newAdmin);\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function acceptAdmin() external onlyPendingAdmin {\\n        _setAdmin(LibAdministrable._getPendingAdmin());\\n        _setPendingAdmin(address(0));\\n    }\\n\\n    /// @notice Internal utility to set the admin address\\n    /// @param _admin Address to set as admin\\n    function _setAdmin(address _admin) internal {\\n        LibSanitize._notZeroAddress(_admin);\\n        LibAdministrable._setAdmin(_admin);\\n        emit SetAdmin(_admin);\\n    }\\n\\n    /// @notice Internal utility to set the pending admin address\\n    /// @param _pendingAdmin Address to set as pending admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        LibAdministrable._setPendingAdmin(_pendingAdmin);\\n        emit SetPendingAdmin(_pendingAdmin);\\n    }\\n\\n    /// @notice Internal utility to retrieve the address of the current admin\\n    /// @return The address of admin\\n    function _getAdmin() internal view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n}\\n\",\"keccak256\":\"0xc9ce727028bc42bf4ea4247dfde9b57a5c36e1820aba5219207aa95c4f035372\",\"license\":\"BUSL-1.1\"},\"contracts/src/Allowlist.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IAllowlist.1.sol\\\";\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./Administrable.sol\\\";\\n\\nimport \\\"./state/allowlist/AllowerAddress.sol\\\";\\nimport \\\"./state/allowlist/Allowlist.sol\\\";\\n\\n/// @title Allowlist (v1)\\n/// @author Kiln\\n/// @notice This contract handles the list of allowed recipients.\\n/// @notice All accounts have an uint256 value associated with their addresses where\\n/// @notice each bit represents a right in the system. The DENY_MASK defined the mask\\n/// @notice used to identify if the denied bit is on, preventing users from interacting\\n/// @notice with the system\\ncontract AllowlistV1 is IAllowlistV1, Initializable, Administrable {\\n    /// @notice Mask used for denied accounts\\n    uint256 internal constant DENY_MASK = 0x1 << 255;\\n\\n    /// @inheritdoc IAllowlistV1\\n    function initAllowlistV1(address _admin, address _allower) external init(0) {\\n        _setAdmin(_admin);\\n        AllowerAddress.set(_allower);\\n        emit SetAllower(_allower);\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function getAllower() external view returns (address) {\\n        return AllowerAddress.get();\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function isAllowed(address _account, uint256 _mask) external view returns (bool) {\\n        uint256 userPermissions = Allowlist.get(_account);\\n        if (userPermissions & DENY_MASK == DENY_MASK) {\\n            return false;\\n        }\\n        return userPermissions & _mask == _mask;\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function isDenied(address _account) external view returns (bool) {\\n        return Allowlist.get(_account) & DENY_MASK == DENY_MASK;\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function hasPermission(address _account, uint256 _mask) external view returns (bool) {\\n        return Allowlist.get(_account) & _mask == _mask;\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function getPermissions(address _account) external view returns (uint256) {\\n        return Allowlist.get(_account);\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function onlyAllowed(address _account, uint256 _mask) external view {\\n        uint256 userPermissions = Allowlist.get(_account);\\n        if (userPermissions & DENY_MASK == DENY_MASK) {\\n            revert Denied(_account);\\n        }\\n        if (userPermissions & _mask != _mask) {\\n            revert LibErrors.Unauthorized(_account);\\n        }\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function setAllower(address _newAllowerAddress) external onlyAdmin {\\n        AllowerAddress.set(_newAllowerAddress);\\n        emit SetAllower(_newAllowerAddress);\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function allow(address[] calldata _accounts, uint256[] calldata _permissions) external {\\n        if (msg.sender != AllowerAddress.get() && msg.sender != _getAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n\\n        if (_accounts.length == 0) {\\n            revert InvalidAlloweeCount();\\n        }\\n\\n        if (_accounts.length != _permissions.length) {\\n            revert MismatchedAlloweeAndStatusCount();\\n        }\\n\\n        for (uint256 i = 0; i < _accounts.length;) {\\n            LibSanitize._notZeroAddress(_accounts[i]);\\n            Allowlist.set(_accounts[i], _permissions[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit SetAllowlistPermissions(_accounts, _permissions);\\n    }\\n}\\n\",\"keccak256\":\"0x259b2b435aa016d1104a1e7b06a7514da8d2bc9839d5d06d59d80e20fe61d2c0\",\"license\":\"BUSL-1.1\"},\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\n/// @title Initializable\\n/// @author Kiln\\n/// @notice This contract ensures that initializers are called only once per version\\ncontract Initializable {\\n    /// @notice An error occured during the initialization\\n    /// @param version The version that was attempting to be initialized\\n    /// @param expectedVersion The version that was expected\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    /// @notice Emitted when the contract is properly initialized\\n    /// @param version New version of the contracts\\n    /// @param cdata Complete calldata that was used during the initialization\\n    event Initialize(uint256 version, bytes cdata);\\n\\n    /// @notice Use this modifier on initializers along with a hard-coded version number\\n    /// @param _version Version to initialize\\n    modifier init(uint256 _version) {\\n        if (_version != Version.get()) {\\n            revert InvalidInitialization(_version, Version.get());\\n        }\\n        Version.set(_version + 1); // prevents reentrency on the called method\\n        _;\\n        emit Initialize(_version, msg.data);\\n    }\\n}\\n\",\"keccak256\":\"0xc85d24988a02608db50067c5319e3b42eec8e45726045489bdb8ea1f33e1ce67\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Administrable Interface\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the ownership of the contracts\\ninterface IAdministrable {\\n    /// @notice The pending admin address changed\\n    /// @param pendingAdmin New pending admin address\\n    event SetPendingAdmin(address indexed pendingAdmin);\\n\\n    /// @notice The admin address changed\\n    /// @param admin New admin address\\n    event SetAdmin(address indexed admin);\\n\\n    /// @notice Retrieves the current admin address\\n    /// @return The admin address\\n    function getAdmin() external view returns (address);\\n\\n    /// @notice Retrieve the current pending admin address\\n    /// @return The pending admin address\\n    function getPendingAdmin() external view returns (address);\\n\\n    /// @notice Proposes a new address as admin\\n    /// @dev This security prevents setting an invalid address as an admin. The pending\\n    /// @dev admin has to claim its ownership of the contract, and prove that the new\\n    /// @dev address is able to perform regular transactions.\\n    /// @param _newAdmin New admin address\\n    function proposeAdmin(address _newAdmin) external;\\n\\n    /// @notice Accept the transfer of ownership\\n    /// @dev Only callable by the pending admin. Resets the pending admin if succesful.\\n    function acceptAdmin() external;\\n}\\n\",\"keccak256\":\"0xe45ef81bf9326bac437dcf901eeb80628d5c87d51dcbcf3addb80e834ba7bfea\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAllowlist.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Allowlist Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the list of allowed recipients.\\ninterface IAllowlistV1 {\\n    /// @notice The permissions of several accounts have changed\\n    /// @param accounts List of accounts\\n    /// @param permissions New permissions for each account at the same index\\n    event SetAllowlistPermissions(address[] indexed accounts, uint256[] permissions);\\n\\n    /// @notice The stored allower address has been changed\\n    /// @param allower The new allower address\\n    event SetAllower(address indexed allower);\\n\\n    /// @notice The provided accounts list is empty\\n    error InvalidAlloweeCount();\\n\\n    /// @notice The account is denied access\\n    /// @param _account The denied account\\n    error Denied(address _account);\\n\\n    /// @notice The provided accounts and permissions list have different lengths\\n    error MismatchedAlloweeAndStatusCount();\\n\\n    /// @notice Initializes the allowlist\\n    /// @param _admin Address of the Allowlist administrator\\n    /// @param _allower Address of the allower\\n    function initAllowlistV1(address _admin, address _allower) external;\\n\\n    /// @notice Retrieves the allower address\\n    /// @return The address of the allower\\n    function getAllower() external view returns (address);\\n\\n    /// @notice This method returns true if the user has the expected permission and\\n    ///         is not in the deny list\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    /// @return True if mask is respected and user is allowed\\n    function isAllowed(address _account, uint256 _mask) external view returns (bool);\\n\\n    /// @notice This method returns true if the user is in the deny list\\n    /// @param _account Recipient to verify\\n    /// @return True if user is denied access\\n    function isDenied(address _account) external view returns (bool);\\n\\n    /// @notice This method returns true if the user has the expected permission\\n    ///         ignoring any deny list membership\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    /// @return True if mask is respected\\n    function hasPermission(address _account, uint256 _mask) external view returns (bool);\\n\\n    /// @notice This method retrieves the raw permission value\\n    /// @param _account Recipient to verify\\n    /// @return The raw permissions value of the account\\n    function getPermissions(address _account) external view returns (uint256);\\n\\n    /// @notice This method should be used as a modifier and is expected to revert\\n    ///         if the user hasn't got the required permission or if the user is\\n    ///         in the deny list.\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    function onlyAllowed(address _account, uint256 _mask) external view;\\n\\n    /// @notice Changes the allower address\\n    /// @param _newAllowerAddress New address allowed to edit the allowlist\\n    function setAllower(address _newAllowerAddress) external;\\n\\n    /// @notice Sets the allowlisting status for one or more accounts\\n    /// @dev The permission value is overridden and not updated\\n    /// @param _accounts Accounts with statuses to edit\\n    /// @param _permissions Allowlist permissions for each account, in the same order as _accounts\\n    function allow(address[] calldata _accounts, uint256[] calldata _permissions) external;\\n}\\n\",\"keccak256\":\"0x5adc1d16239b5d210b1779325b85b80435b4e5c0d8d578c6f72c01e98dcf224f\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\nimport \\\"../state/shared/PendingAdministratorAddress.sol\\\";\\n\\n/// @title Lib Administrable\\n/// @author Kiln\\n/// @notice This library handles the admin and pending admin storage vars\\nlibrary LibAdministrable {\\n    /// @notice Retrieve the system admin\\n    /// @return The address of the system admin\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n\\n    /// @notice Retrieve the pending system admin\\n    /// @return The adress of the pending system admin\\n    function _getPendingAdmin() internal view returns (address) {\\n        return PendingAdministratorAddress.get();\\n    }\\n\\n    /// @notice Sets the system admin\\n    /// @param _admin New system admin\\n    function _setAdmin(address _admin) internal {\\n        AdministratorAddress.set(_admin);\\n    }\\n\\n    /// @notice Sets the pending system admin\\n    /// @param _pendingAdmin New pending system admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        PendingAdministratorAddress.set(_pendingAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0xbe4cec02aff69406624f3ab71a19948997aaf74f63e171137f2f3b85bdb7bc3a\",\"license\":\"MIT\"},\"contracts/src/libraries/LibBasisPoints.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Lib Basis Points\\n/// @notice Holds the basis points max value\\nlibrary LibBasisPoints {\\n    /// @notice The max value for basis points (represents 100%)\\n    uint256 internal constant BASIS_POINTS_MAX = 10_000;\\n}\\n\",\"keccak256\":\"0x97228a01dcd48f033555e3a44f9be37fb474a1b027f703f28097d539808f1c6c\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibErrors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Errors\\n/// @notice Library of common errors\\nlibrary LibErrors {\\n    /// @notice The operator is unauthorized for the caller\\n    /// @param caller Address performing the call\\n    error Unauthorized(address caller);\\n\\n    /// @notice The call was invalid\\n    error InvalidCall();\\n\\n    /// @notice The argument was invalid\\n    error InvalidArgument();\\n\\n    /// @notice The address is zero\\n    error InvalidZeroAddress();\\n\\n    /// @notice The string is empty\\n    error InvalidEmptyString();\\n\\n    /// @notice The fee is invalid\\n    error InvalidFee();\\n}\\n\",\"keccak256\":\"0x7bdbd4ada124723fa08e2088405ba0bf4453beb23d84f4af09e894e06e751f33\",\"license\":\"MIT\"},\"contracts/src/libraries/LibSanitize.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./LibErrors.sol\\\";\\nimport \\\"./LibBasisPoints.sol\\\";\\n\\n/// @title Lib Sanitize\\n/// @notice Utilities to sanitize input values\\nlibrary LibSanitize {\\n    /// @notice Reverts if address is 0\\n    /// @param _address Address to check\\n    function _notZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert LibErrors.InvalidZeroAddress();\\n        }\\n    }\\n\\n    /// @notice Reverts if string is empty\\n    /// @param _string String to check\\n    function _notEmptyString(string memory _string) internal pure {\\n        if (bytes(_string).length == 0) {\\n            revert LibErrors.InvalidEmptyString();\\n        }\\n    }\\n\\n    /// @notice Reverts if fee is invalid\\n    /// @param _fee Fee to check\\n    function _validFee(uint256 _fee) internal pure {\\n        if (_fee > LibBasisPoints.BASIS_POINTS_MAX) {\\n            revert LibErrors.InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8aeeb866c4657a96c8b4c006340c7996d15a6f0044b730c276bc3ba8d5bcd48\",\"license\":\"MIT\"},\"contracts/src/libraries/LibUnstructuredStorage.sol\":{\"content\":\"// SPDX-License-Identifier:    MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @title Lib Unstructured Storage\\n/// @notice Utilities to work with unstructured storage\\nlibrary LibUnstructuredStorage {\\n    /// @notice Retrieve a bool value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bool value\\n    function getStorageBool(bytes32 _position) internal view returns (bool data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an address value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The address value\\n    function getStorageAddress(bytes32 _position) internal view returns (address data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve a bytes32 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bytes32 value\\n    function getStorageBytes32(bytes32 _position) internal view returns (bytes32 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an uint256 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The uint256 value\\n    function getStorageUint256(bytes32 _position) internal view returns (uint256 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Sets a bool value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bool value to set\\n    function setStorageBool(bytes32 _position, bool _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an address value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The address value to set\\n    function setStorageAddress(bytes32 _position, address _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets a bytes32 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bytes32 value to set\\n    function setStorageBytes32(bytes32 _position, bytes32 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an uint256 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The uint256 value to set\\n    function setStorageUint256(bytes32 _position, uint256 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8e1a2f0dc18e023e12747355b3c95258d4de698f2bb6196222a1dc92940caa3\",\"license\":\"MIT\"},\"contracts/src/state/allowlist/AllowerAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Allower Address Storage\\n/// @notice Utility to manage the Allower Address in storage\\nlibrary AllowerAddress {\\n    /// @notice Storage slot of the Allower Address\\n    bytes32 internal constant ALLOWER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowerAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Allower Address\\n    /// @return The Allower Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ALLOWER_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Allower Address\\n    /// @param _newValue New Allower Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ALLOWER_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x63cdb0d2b7fd015cbf16a6e6f52a2bb97513ab0d97a56aca24fd4c753a9ec6f6\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/allowlist/Allowlist.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Allowlist Storage\\n/// @notice Utility to manage the Allowlist mapping in storage\\nlibrary Allowlist {\\n    /// @notice Storage slot of the Allowlist mapping\\n    bytes32 internal constant ALLOWLIST_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowlist\\\")) - 1);\\n\\n    /// @notice Structure stored in storage slot\\n    struct Slot {\\n        /// @custom:attribute Mapping keeping track of permissions per account\\n        mapping(address => uint256) value;\\n    }\\n\\n    /// @notice Retrieve the Allowlist value of an account\\n    /// @param _account The account to verify\\n    /// @return The Allowlist value\\n    function get(address _account) internal view returns (uint256) {\\n        bytes32 slot = ALLOWLIST_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_account];\\n    }\\n\\n    /// @notice Sets the Allowlist value of an account\\n    /// @param _account The account value to set\\n    /// @param _status The value to set\\n    function set(address _account, uint256 _status) internal {\\n        bytes32 slot = ALLOWLIST_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_account] = _status;\\n    }\\n}\\n\",\"keccak256\":\"0xbbd7ff8156eefb7023efdc141b72f729a675b64c771b991aa2a1c4c37a6671a5\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrator Address Storage\\n/// @notice Utility to manage the Administrator Address in storage\\nlibrary AdministratorAddress {\\n    /// @notice Storage slot of the Administrator Address\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Administrator Address\\n    /// @return The Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Administrator Address\\n    /// @param _newValue New Administrator Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x4f702b4454858199ca8fd15ef1cee63d9dc3d4d8f2ff7a2f859a4e151e46e8ec\",\"license\":\"MIT\"},\"contracts/src/state/shared/PendingAdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Pending Administrator Address Storage\\n/// @notice Utility to manage the Pending Administrator Address in storage\\nlibrary PendingAdministratorAddress {\\n    /// @notice Storage slot of the Pending Administrator Address\\n    bytes32 public constant PENDING_ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.pendingAdministratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Pending Administrator Address\\n    /// @return The Pending Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Pending Administrator Address\\n    /// @param _newValue New Pending Administrator Address\\n    function set(address _newValue) internal {\\n        LibUnstructuredStorage.setStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x2164cafa435d1e1650037164e2b094ca3af00cc68e05b59140406aa59b1949f2\",\"license\":\"MIT\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Version Storage\\n/// @notice Utility to manage the Version in storage\\nlibrary Version {\\n    /// @notice Storage slot of the Version\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    /// @notice Retrieve the Version\\n    /// @return The Version\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    /// @notice Sets the Version\\n    /// @param _newValue New Version\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(VERSION_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x82f1cc4bbb1f16c1cdbac93596334805eb1a2e0e40ccbd0ab0f78e22d3f83864\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610bde806100206000396000f3fe608060405234801561001057600080fd5b50600436106100bf5760003560e01c80636e8cac111161007c5780636e8cac11146101465780636e9960c3146101595780638d944fd914610161578063d046815614610184578063e580d9941461018c578063e838dfbb1461019f578063f8350ed0146101b257600080fd5b806307a40008146100c45780630e18b681146100e2578063147bf6c4146100ec578063160a7925146100ff5780634679a9e1146101205780635a40910214610133575b600080fd5b6100cc6101c5565b6040516100d99190610934565b60405180910390f35b6100ea6101d4565b005b6100ea6100fa366004610964565b610234565b61011261010d366004610964565b61027b565b6040519081526020016100d9565b6100ea61012e366004610964565b61028c565b6100ea610141366004610986565b610307565b6100ea6101543660046109b0565b610366565b6100cc61043b565b61017461016f366004610986565b610445565b60405190151581526020016100d9565b6100cc61045b565b6100ea61019a366004610a2f565b610465565b6101746101ad366004610964565b6105e7565b6101746101c0366004610986565b610600565b60006101cf610631565b905090565b6101dc610665565b6001600160a01b0316336001600160a01b031614610218573360405163472511eb60e11b815260040161020f9190610934565b60405180910390fd5b610228610223610665565b61066f565b61023260006106b8565b565b61023c6106f8565b6001600160a01b0316336001600160a01b03161461026f573360405163472511eb60e11b815260040161020f9190610934565b610278816106b8565b50565b600061028682610702565b92915050565b6102946106f8565b6001600160a01b0316336001600160a01b0316146102c7573360405163472511eb60e11b815260040161020f9190610934565b6102d081610750565b6040516001600160a01b038216907fb96ab8443049f385aba7fbc2899e3fcdfba4d80ac8458847f40b7d426bae2dcf90600090a250565b600061031283610702565b9050600160ff1b808216141561033d578260405163e7d05e2760e01b815260040161020f9190610934565b8182821614610361578260405163472511eb60e11b815260040161020f9190610934565b505050565b600061037061078c565b81146103a1578061037f61078c565b604051631cfd276760e31b81526004810192909252602482015260440161020f565b6103b46103af826001610ab1565b6107bc565b6103bd8361066f565b6103c682610750565b6040516001600160a01b038316907fb96ab8443049f385aba7fbc2899e3fcdfba4d80ac8458847f40b7d426bae2dcf90600090a27f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a718160003660405161042e93929190610ac9565b60405180910390a1505050565b60006101cf6106f8565b6000818261045285610702565b16149392505050565b60006101cf610665565b61046d610631565b6001600160a01b0316336001600160a01b0316141580156104a7575061049161043b565b6001600160a01b0316336001600160a01b031614155b156104c7573360405163472511eb60e11b815260040161020f9190610934565b826104e557604051631ac3cbdf60e21b815260040160405180910390fd5b8281146105055760405163b7c599df60e01b815260040160405180910390fd5b60005b8381101561058f5761053f85858381811061052557610525610aff565b905060200201602081019061053a9190610964565b6107ea565b61058785858381811061055457610554610aff565b90506020020160208101906105699190610964565b84848481811061057b5761057b610aff565b90506020020135610811565b600101610508565b5083836040516105a0929190610b15565b60405180910390207f649636a73c855dfe2014a555a98949d77640be8f4eb6702749d5f83c9aa6fcd083836040516105d9929190610b55565b60405180910390a250505050565b6000600160ff1b806105f884610702565b161492915050565b60008061060c84610702565b9050600160ff1b8082161415610626576000915050610286565b821690911492915050565b60006101cf61066160017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b80610b91565b5490565b60006101cf61085d565b610678816107ea565b6106818161088d565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b6106c181610896565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b60006101cf61089f565b60008061073060017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a4135610b91565b6001600160a01b0390931660009081526020939093525050604090205490565b610759816107ea565b61027861078760017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b80610b91565b829055565b60006101cf61066160017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd610b91565b61027861078760017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd610b91565b6001600160a01b0381166102785760405163f6b2911f60e01b815260040160405180910390fd5b600061083e60017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a4135610b91565b6001600160a01b03909316600090815260209390935250604090912055565b60006101cf61066160017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281610b91565b610278816108cf565b61027881610906565b60006101cf61066160017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113610b91565b6108d8816107ea565b61027861078760017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113610b91565b61027861078760017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281610b91565b6001600160a01b0391909116815260200190565b80356001600160a01b038116811461095f57600080fd5b919050565b60006020828403121561097657600080fd5b61097f82610948565b9392505050565b6000806040838503121561099957600080fd5b6109a283610948565b946020939093013593505050565b600080604083850312156109c357600080fd5b6109cc83610948565b91506109da60208401610948565b90509250929050565b60008083601f8401126109f557600080fd5b50813567ffffffffffffffff811115610a0d57600080fd5b6020830191508360208260051b8501011115610a2857600080fd5b9250929050565b60008060008060408587031215610a4557600080fd5b843567ffffffffffffffff80821115610a5d57600080fd5b610a69888389016109e3565b90965094506020870135915080821115610a8257600080fd5b50610a8f878288016109e3565b95989497509550505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610ac457610ac4610a9b565b500190565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b634e487b7160e01b600052603260045260246000fd5b60008184825b85811015610b4a576001600160a01b03610b3483610948565b1683526020928301929190910190600101610b1b565b509095945050505050565b6020808252810182905260006001600160fb1b03831115610b7557600080fd5b8260051b80856040850137600092016040019182525092915050565b600082821015610ba357610ba3610a9b565b50039056fea264697066735822122000891fc5c76c3b124ce8b9943c242cf2e890c454cd026017b36b8e96a6bb4fe564736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100bf5760003560e01c80636e8cac111161007c5780636e8cac11146101465780636e9960c3146101595780638d944fd914610161578063d046815614610184578063e580d9941461018c578063e838dfbb1461019f578063f8350ed0146101b257600080fd5b806307a40008146100c45780630e18b681146100e2578063147bf6c4146100ec578063160a7925146100ff5780634679a9e1146101205780635a40910214610133575b600080fd5b6100cc6101c5565b6040516100d99190610934565b60405180910390f35b6100ea6101d4565b005b6100ea6100fa366004610964565b610234565b61011261010d366004610964565b61027b565b6040519081526020016100d9565b6100ea61012e366004610964565b61028c565b6100ea610141366004610986565b610307565b6100ea6101543660046109b0565b610366565b6100cc61043b565b61017461016f366004610986565b610445565b60405190151581526020016100d9565b6100cc61045b565b6100ea61019a366004610a2f565b610465565b6101746101ad366004610964565b6105e7565b6101746101c0366004610986565b610600565b60006101cf610631565b905090565b6101dc610665565b6001600160a01b0316336001600160a01b031614610218573360405163472511eb60e11b815260040161020f9190610934565b60405180910390fd5b610228610223610665565b61066f565b61023260006106b8565b565b61023c6106f8565b6001600160a01b0316336001600160a01b03161461026f573360405163472511eb60e11b815260040161020f9190610934565b610278816106b8565b50565b600061028682610702565b92915050565b6102946106f8565b6001600160a01b0316336001600160a01b0316146102c7573360405163472511eb60e11b815260040161020f9190610934565b6102d081610750565b6040516001600160a01b038216907fb96ab8443049f385aba7fbc2899e3fcdfba4d80ac8458847f40b7d426bae2dcf90600090a250565b600061031283610702565b9050600160ff1b808216141561033d578260405163e7d05e2760e01b815260040161020f9190610934565b8182821614610361578260405163472511eb60e11b815260040161020f9190610934565b505050565b600061037061078c565b81146103a1578061037f61078c565b604051631cfd276760e31b81526004810192909252602482015260440161020f565b6103b46103af826001610ab1565b6107bc565b6103bd8361066f565b6103c682610750565b6040516001600160a01b038316907fb96ab8443049f385aba7fbc2899e3fcdfba4d80ac8458847f40b7d426bae2dcf90600090a27f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a718160003660405161042e93929190610ac9565b60405180910390a1505050565b60006101cf6106f8565b6000818261045285610702565b16149392505050565b60006101cf610665565b61046d610631565b6001600160a01b0316336001600160a01b0316141580156104a7575061049161043b565b6001600160a01b0316336001600160a01b031614155b156104c7573360405163472511eb60e11b815260040161020f9190610934565b826104e557604051631ac3cbdf60e21b815260040160405180910390fd5b8281146105055760405163b7c599df60e01b815260040160405180910390fd5b60005b8381101561058f5761053f85858381811061052557610525610aff565b905060200201602081019061053a9190610964565b6107ea565b61058785858381811061055457610554610aff565b90506020020160208101906105699190610964565b84848481811061057b5761057b610aff565b90506020020135610811565b600101610508565b5083836040516105a0929190610b15565b60405180910390207f649636a73c855dfe2014a555a98949d77640be8f4eb6702749d5f83c9aa6fcd083836040516105d9929190610b55565b60405180910390a250505050565b6000600160ff1b806105f884610702565b161492915050565b60008061060c84610702565b9050600160ff1b8082161415610626576000915050610286565b821690911492915050565b60006101cf61066160017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b80610b91565b5490565b60006101cf61085d565b610678816107ea565b6106818161088d565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b6106c181610896565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b60006101cf61089f565b60008061073060017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a4135610b91565b6001600160a01b0390931660009081526020939093525050604090205490565b610759816107ea565b61027861078760017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b80610b91565b829055565b60006101cf61066160017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd610b91565b61027861078760017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd610b91565b6001600160a01b0381166102785760405163f6b2911f60e01b815260040160405180910390fd5b600061083e60017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a4135610b91565b6001600160a01b03909316600090815260209390935250604090912055565b60006101cf61066160017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281610b91565b610278816108cf565b61027881610906565b60006101cf61066160017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113610b91565b6108d8816107ea565b61027861078760017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113610b91565b61027861078760017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281610b91565b6001600160a01b0391909116815260200190565b80356001600160a01b038116811461095f57600080fd5b919050565b60006020828403121561097657600080fd5b61097f82610948565b9392505050565b6000806040838503121561099957600080fd5b6109a283610948565b946020939093013593505050565b600080604083850312156109c357600080fd5b6109cc83610948565b91506109da60208401610948565b90509250929050565b60008083601f8401126109f557600080fd5b50813567ffffffffffffffff811115610a0d57600080fd5b6020830191508360208260051b8501011115610a2857600080fd5b9250929050565b60008060008060408587031215610a4557600080fd5b843567ffffffffffffffff80821115610a5d57600080fd5b610a69888389016109e3565b90965094506020870135915080821115610a8257600080fd5b50610a8f878288016109e3565b95989497509550505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610ac457610ac4610a9b565b500190565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b634e487b7160e01b600052603260045260246000fd5b60008184825b85811015610b4a576001600160a01b03610b3483610948565b1683526020928301929190910190600101610b1b565b509095945050505050565b6020808252810182905260006001600160fb1b03831115610b7557600080fd5b8260051b80856040850137600092016040019182525092915050565b600082821015610ba357610ba3610a9b565b50039056fea264697066735822122000891fc5c76c3b124ce8b9943c242cf2e890c454cd026017b36b8e96a6bb4fe564736f6c634300080a0033",
  "devdoc": {
    "author": "Kiln",
    "errors": {
      "Denied(address)": [
        {
          "params": {
            "_account": "The denied account"
          }
        }
      ],
      "InvalidInitialization(uint256,uint256)": [
        {
          "params": {
            "expectedVersion": "The version that was expected",
            "version": "The version that was attempting to be initialized"
          }
        }
      ],
      "Unauthorized(address)": [
        {
          "params": {
            "caller": "Address performing the call"
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "acceptAdmin()": {
        "details": "Only callable by the pending admin. Resets the pending admin if succesful."
      },
      "allow(address[],uint256[])": {
        "details": "The permission value is overridden and not updated",
        "params": {
          "_accounts": "Accounts with statuses to edit",
          "_permissions": "Allowlist permissions for each account, in the same order as _accounts"
        }
      },
      "getAdmin()": {
        "returns": {
          "_0": "The admin address"
        }
      },
      "getAllower()": {
        "returns": {
          "_0": "The address of the allower"
        }
      },
      "getPendingAdmin()": {
        "returns": {
          "_0": "The pending admin address"
        }
      },
      "getPermissions(address)": {
        "params": {
          "_account": "Recipient to verify"
        },
        "returns": {
          "_0": "The raw permissions value of the account"
        }
      },
      "hasPermission(address,uint256)": {
        "params": {
          "_account": "Recipient to verify",
          "_mask": "Combination of permissions to verify"
        },
        "returns": {
          "_0": "True if mask is respected"
        }
      },
      "initAllowlistV1(address,address)": {
        "params": {
          "_admin": "Address of the Allowlist administrator",
          "_allower": "Address of the allower"
        }
      },
      "isAllowed(address,uint256)": {
        "params": {
          "_account": "Recipient to verify",
          "_mask": "Combination of permissions to verify"
        },
        "returns": {
          "_0": "True if mask is respected and user is allowed"
        }
      },
      "isDenied(address)": {
        "params": {
          "_account": "Recipient to verify"
        },
        "returns": {
          "_0": "True if user is denied access"
        }
      },
      "onlyAllowed(address,uint256)": {
        "params": {
          "_account": "Recipient to verify",
          "_mask": "Combination of permissions to verify"
        }
      },
      "proposeAdmin(address)": {
        "details": "This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.",
        "params": {
          "_newAdmin": "New admin address"
        }
      },
      "setAllower(address)": {
        "params": {
          "_newAllowerAddress": "New address allowed to edit the allowlist"
        }
      }
    },
    "title": "Allowlist (v1)",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "Denied(address)": [
        {
          "notice": "The account is denied access"
        }
      ],
      "InvalidAlloweeCount()": [
        {
          "notice": "The provided accounts list is empty"
        }
      ],
      "InvalidInitialization(uint256,uint256)": [
        {
          "notice": "An error occured during the initialization"
        }
      ],
      "InvalidZeroAddress()": [
        {
          "notice": "The address is zero"
        }
      ],
      "MismatchedAlloweeAndStatusCount()": [
        {
          "notice": "The provided accounts and permissions list have different lengths"
        }
      ],
      "Unauthorized(address)": [
        {
          "notice": "The operator is unauthorized for the caller"
        }
      ]
    },
    "events": {
      "Initialize(uint256,bytes)": {
        "notice": "Emitted when the contract is properly initialized"
      },
      "SetAdmin(address)": {
        "notice": "The admin address changed"
      },
      "SetAllower(address)": {
        "notice": "The stored allower address has been changed"
      },
      "SetAllowlistPermissions(address[],uint256[])": {
        "notice": "The permissions of several accounts have changed"
      },
      "SetPendingAdmin(address)": {
        "notice": "The pending admin address changed"
      }
    },
    "kind": "user",
    "methods": {
      "acceptAdmin()": {
        "notice": "Accept the transfer of ownership"
      },
      "allow(address[],uint256[])": {
        "notice": "Sets the allowlisting status for one or more accounts"
      },
      "getAdmin()": {
        "notice": "Retrieves the current admin address"
      },
      "getAllower()": {
        "notice": "Retrieves the allower address"
      },
      "getPendingAdmin()": {
        "notice": "Retrieve the current pending admin address"
      },
      "getPermissions(address)": {
        "notice": "This method retrieves the raw permission value"
      },
      "hasPermission(address,uint256)": {
        "notice": "This method returns true if the user has the expected permission         ignoring any deny list membership"
      },
      "initAllowlistV1(address,address)": {
        "notice": "Initializes the allowlist"
      },
      "isAllowed(address,uint256)": {
        "notice": "This method returns true if the user has the expected permission and         is not in the deny list"
      },
      "isDenied(address)": {
        "notice": "This method returns true if the user is in the deny list"
      },
      "onlyAllowed(address,uint256)": {
        "notice": "This method should be used as a modifier and is expected to revert         if the user hasn't got the required permission or if the user is         in the deny list."
      },
      "proposeAdmin(address)": {
        "notice": "Proposes a new address as admin"
      },
      "setAllower(address)": {
        "notice": "Changes the allower address"
      }
    },
    "notice": "This contract handles the list of allowed recipients.All accounts have an uint256 value associated with their addresses whereeach bit represents a right in the system. The DENY_MASK defined the maskused to identify if the denied bit is on, preventing users from interactingwith the system",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}