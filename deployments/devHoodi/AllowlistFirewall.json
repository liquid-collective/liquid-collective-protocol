{
  "address": "0xdb14Bbd9dA5EfE668C18e5456FF872c9D1436C61",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_destination",
          "type": "address"
        },
        {
          "internalType": "bytes4[]",
          "name": "_executorCallableSelectors",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "SetAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "SetDestination",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "SetExecutor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "SetExecutorPermissions",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingAdmin",
          "type": "address"
        }
      ],
      "name": "SetPendingAdmin",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "acceptAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_functionSelector",
          "type": "bytes4"
        },
        {
          "internalType": "bool",
          "name": "_executorCanCall",
          "type": "bool"
        }
      ],
      "name": "allowExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "executorCanCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "proposeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newExecutor",
          "type": "address"
        }
      ],
      "name": "setExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbd7ffa221605b497e97f05cb6f0bcd363ee525a029e57626cb86bbb1a43e87a0",
  "receipt": {
    "to": null,
    "from": "0x341C40B94bF2afBFa42573cB78f16Ee15a056238",
    "contractAddress": "0xdb14Bbd9dA5EfE668C18e5456FF872c9D1436C61",
    "transactionIndex": 9,
    "gasUsed": "464761",
    "logsBloom": "0x00000000000000000000000000000000008000000000000020000004000000000000000000004000000000000000000000000000000000000000000000000000000100000000000000000000000000000000080000000100000000000004000000000000000000000000000000000000000000000001000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000040000000000000000000040000000000000000080000004000000800020000000800000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x67ab1f1f4279fec1457bf406084af269f4cc61f707b054850355886bb42911bd",
    "transactionHash": "0xbd7ffa221605b497e97f05cb6f0bcd363ee525a029e57626cb86bbb1a43e87a0",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 587022,
        "transactionHash": "0xbd7ffa221605b497e97f05cb6f0bcd363ee525a029e57626cb86bbb1a43e87a0",
        "address": "0xdb14Bbd9dA5EfE668C18e5456FF872c9D1436C61",
        "topics": [
          "0x5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a1",
          "0x0000000000000000000000004b58e6b3d16c3203d4aa5c9ad86692230fbcb5f6"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x67ab1f1f4279fec1457bf406084af269f4cc61f707b054850355886bb42911bd"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 587022,
        "transactionHash": "0xbd7ffa221605b497e97f05cb6f0bcd363ee525a029e57626cb86bbb1a43e87a0",
        "address": "0xdb14Bbd9dA5EfE668C18e5456FF872c9D1436C61",
        "topics": [
          "0x34d4f6a542f13533b1eaa27e7ae8691368028d05b7075ad7a6c34df851a67a43",
          "0x0000000000000000000000004b58e6b3d16c3203d4aa5c9ad86692230fbcb5f6"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x67ab1f1f4279fec1457bf406084af269f4cc61f707b054850355886bb42911bd"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 587022,
        "transactionHash": "0xbd7ffa221605b497e97f05cb6f0bcd363ee525a029e57626cb86bbb1a43e87a0",
        "address": "0xdb14Bbd9dA5EfE668C18e5456FF872c9D1436C61",
        "topics": [
          "0x44bcfad6adf95e4168c90f181d665d8b22f3f7708a74828c51854ef849f70857",
          "0x0000000000000000000000007c0c0ab9032413ffb1982c937a62b6997eae8304"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x67ab1f1f4279fec1457bf406084af269f4cc61f707b054850355886bb42911bd"
      }
    ],
    "blockNumber": 587022,
    "cumulativeGasUsed": "1826730",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4B58E6B3D16c3203d4aa5C9Ad86692230FbCb5F6",
    "0x4B58E6B3D16c3203d4aa5C9Ad86692230FbCb5F6",
    "0x7C0C0ab9032413ffB1982c937A62B6997Eae8304",
    []
  ],
  "numDeployments": 1,
  "solcInputHash": "762834da2cfe67e977958281c99d1a0e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"_executorCallableSelectors\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"SetDestination\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"SetExecutor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetExecutorPermissions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"SetPendingAdmin\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"_executorCanCall\",\"type\":\"bool\"}],\"name\":\"allowExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"executorCanCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"proposeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newExecutor\",\"type\":\"address\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Figment\",\"errors\":{\"Unauthorized(address)\":[{\"params\":{\"caller\":\"Address performing the call\"}}]},\"events\":{\"SetAdmin(address)\":{\"params\":{\"admin\":\"New admin address\"}},\"SetDestination(address)\":{\"params\":{\"destination\":\"The new destination address\"}},\"SetExecutor(address)\":{\"params\":{\"executor\":\"The new executor address\"}},\"SetExecutorPermissions(bytes4,bool)\":{\"params\":{\"selector\":\"The 4 bytes method selector\",\"status\":\"True if executor is allowed\"}},\"SetPendingAdmin(address)\":{\"params\":{\"pendingAdmin\":\"New pending admin address\"}}},\"kind\":\"dev\",\"methods\":{\"acceptAdmin()\":{\"details\":\"Only callable by the pending admin. Resets the pending admin if succesful.\"},\"allowExecutor(bytes4,bool)\":{\"params\":{\"_executorCanCall\":\"True if selector is callable by the executor\",\"_functionSelector\":\"Method signature on which the permission is changed\"}},\"constructor\":{\"params\":{\"_admin\":\"Address of the administrator, that is able to perform all calls via the Firewall\",\"_executor\":\"Address of the executor, that is able to perform only a subset of calls via the Firewall\",\"_executorCallableSelectors\":\"Initial list of allowed selectors for the executor\"}},\"getAdmin()\":{\"returns\":{\"_0\":\"The admin address\"}},\"getPendingAdmin()\":{\"returns\":{\"_0\":\"The pending admin address\"}},\"proposeAdmin(address)\":{\"details\":\"This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.\",\"params\":{\"_newAdmin\":\"New admin address\"}},\"setExecutor(address)\":{\"params\":{\"_newExecutor\":\"New address for the executor\"}},\"version()\":{\"returns\":{\"_0\":\"Version of the contract\"}}},\"stateVariables\":{\"destination\":{\"return\":\"The destination address\",\"returns\":{\"_0\":\"The destination address\"}},\"executor\":{\"return\":\"The executor address\",\"returns\":{\"_0\":\"The executor address\"}},\"executorCanCall\":{\"params\":{\"_selector\":\"The selector to verify\"},\"return\":\"True if executor is allowed to call\",\"returns\":{\"_0\":\"True if executor is allowed to call\"}}},\"title\":\"Firewall\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidZeroAddress()\":[{\"notice\":\"The address is zero\"}],\"Unauthorized(address)\":[{\"notice\":\"The operator is unauthorized for the caller\"}]},\"events\":{\"SetAdmin(address)\":{\"notice\":\"The admin address changed\"},\"SetDestination(address)\":{\"notice\":\"The stored destination address has been changed\"},\"SetExecutor(address)\":{\"notice\":\"The stored executor address has been changed\"},\"SetExecutorPermissions(bytes4,bool)\":{\"notice\":\"The storage permission for a selector has been changed\"},\"SetPendingAdmin(address)\":{\"notice\":\"The pending admin address changed\"}},\"kind\":\"user\",\"methods\":{\"acceptAdmin()\":{\"notice\":\"Accept the transfer of ownership\"},\"allowExecutor(bytes4,bool)\":{\"notice\":\"Sets the permission for a function selector\"},\"destination()\":{\"notice\":\"Retrieve the destination address\"},\"executor()\":{\"notice\":\"Retrieve the executor address\"},\"executorCanCall(bytes4)\":{\"notice\":\"Returns true if the executor is allowed to perform a call on the given selector\"},\"getAdmin()\":{\"notice\":\"Retrieves the current admin address\"},\"getPendingAdmin()\":{\"notice\":\"Retrieve the current pending admin address\"},\"proposeAdmin(address)\":{\"notice\":\"Proposes a new address as admin\"},\"setExecutor(address)\":{\"notice\":\"Sets the executor address\"},\"version()\":{\"notice\":\"Retrieves the version of the contract\"}},\"notice\":\"This contract accepts calls to admin-level functions of an underlying contract, and         ensures the caller holds an appropriate role for calling that function. There are two roles:          - An Admin can call anything          - An Executor can call specific functions. The list of function is customisable.         Random callers cannot call anything through this contract, even if the underlying function         is unpermissioned in the underlying contract.         Calls to non-admin functions should be called at the underlying contract directly.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/Firewall.sol\":\"Firewall\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/src/Administrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"./interfaces/IAdministrable.sol\\\";\\n\\nimport \\\"./libraries/LibAdministrable.sol\\\";\\nimport \\\"./libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrable\\n/// @author Alluvial Finance Inc.\\n/// @notice This contract handles the administration of the contracts\\nabstract contract Administrable is IAdministrable {\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() {\\n        if (msg.sender != LibAdministrable._getAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyPendingAdmin() {\\n        if (msg.sender != LibAdministrable._getPendingAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getAdmin() external view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getPendingAdmin() external view returns (address) {\\n        return LibAdministrable._getPendingAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function proposeAdmin(address _newAdmin) external onlyAdmin {\\n        _setPendingAdmin(_newAdmin);\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function acceptAdmin() external onlyPendingAdmin {\\n        _setAdmin(LibAdministrable._getPendingAdmin());\\n        _setPendingAdmin(address(0));\\n    }\\n\\n    /// @notice Internal utility to set the admin address\\n    /// @param _admin Address to set as admin\\n    function _setAdmin(address _admin) internal {\\n        LibAdministrable._setAdmin(_admin);\\n        emit SetAdmin(_admin);\\n    }\\n\\n    /// @notice Internal utility to set the pending admin address\\n    /// @param _pendingAdmin Address to set as pending admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        LibAdministrable._setPendingAdmin(_pendingAdmin);\\n        emit SetPendingAdmin(_pendingAdmin);\\n    }\\n\\n    /// @notice Internal utility to retrieve the address of the current admin\\n    /// @return The address of admin\\n    function _getAdmin() internal view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n}\\n\",\"keccak256\":\"0xe844d17bbc5f95455be27819600a504f83891e7f9fde030fb88c4a4cbb272f76\",\"license\":\"BUSL-1.1\"},\"contracts/src/Firewall.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"./interfaces/IFirewall.sol\\\";\\nimport \\\"./interfaces/IProtocolVersion.sol\\\";\\n\\nimport \\\"./Administrable.sol\\\";\\n\\n/// @title Firewall\\n/// @author Figment\\n/// @notice This contract accepts calls to admin-level functions of an underlying contract, and\\n///         ensures the caller holds an appropriate role for calling that function. There are two roles:\\n///          - An Admin can call anything\\n///          - An Executor can call specific functions. The list of function is customisable.\\n///         Random callers cannot call anything through this contract, even if the underlying function\\n///         is unpermissioned in the underlying contract.\\n///         Calls to non-admin functions should be called at the underlying contract directly.\\ncontract Firewall is IFirewall, IProtocolVersion, Administrable {\\n    /// @inheritdoc IFirewall\\n    address public executor;\\n\\n    /// @inheritdoc IFirewall\\n    address public immutable destination;\\n\\n    /// @inheritdoc IFirewall\\n    mapping(bytes4 => bool) public executorCanCall;\\n\\n    /// @param _admin Address of the administrator, that is able to perform all calls via the Firewall\\n    /// @param _executor Address of the executor, that is able to perform only a subset of calls via the Firewall\\n    /// @param _executorCallableSelectors Initial list of allowed selectors for the executor\\n    constructor(address _admin, address _executor, address _destination, bytes4[] memory _executorCallableSelectors) {\\n        LibSanitize._notZeroAddress(_executor);\\n        LibSanitize._notZeroAddress(_destination);\\n        _setAdmin(_admin);\\n        executor = _executor;\\n        destination = _destination;\\n\\n        emit SetExecutor(_executor);\\n        emit SetDestination(_destination);\\n\\n        for (uint256 i; i < _executorCallableSelectors.length;) {\\n            executorCanCall[_executorCallableSelectors[i]] = true;\\n            emit SetExecutorPermissions(_executorCallableSelectors[i], true);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdminOrExecutor() {\\n        if (_getAdmin() != msg.sender && msg.sender != executor) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IFirewall\\n    function setExecutor(address _newExecutor) external onlyAdminOrExecutor {\\n        LibSanitize._notZeroAddress(_newExecutor);\\n        executor = _newExecutor;\\n        emit SetExecutor(_newExecutor);\\n    }\\n\\n    /// @inheritdoc IFirewall\\n    function allowExecutor(bytes4 _functionSelector, bool _executorCanCall) external onlyAdmin {\\n        executorCanCall[_functionSelector] = _executorCanCall;\\n        emit SetExecutorPermissions(_functionSelector, _executorCanCall);\\n    }\\n\\n    /// @inheritdoc IFirewall\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /// @inheritdoc IFirewall\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /// @notice Performs call checks to verify that the caller is able to perform the call\\n    function _checkCallerRole() internal view {\\n        if (msg.sender == _getAdmin() || (executorCanCall[msg.sig] && msg.sender == executor)) {\\n            return;\\n        }\\n        revert LibErrors.Unauthorized(msg.sender);\\n    }\\n\\n    /// @notice Forwards the current call parameters to the destination address\\n    /// @param _destination Address on which the forwarded call is performed\\n    /// @param _value Message value to attach to the call\\n    function _forward(address _destination, uint256 _value) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the destination.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := call(gas(), _destination, _value, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // call returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /// @notice Internal utility to perform authorization checks and forward a call\\n    function _fallback() internal virtual {\\n        _checkCallerRole();\\n        _forward(destination, msg.value);\\n    }\\n\\n    /// @inheritdoc IProtocolVersion\\n    function version() external pure returns (string memory) {\\n        return \\\"1.2.1\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x833cc7db52bc20dabfde42a10ac21e6be73eda9ee0910d9e9aa7cfc485fac764\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Administrable Interface\\n/// @author Alluvial Finance Inc.\\n/// @notice This interface exposes methods to handle the ownership of the contracts\\ninterface IAdministrable {\\n    /// @notice The pending admin address changed\\n    /// @param pendingAdmin New pending admin address\\n    event SetPendingAdmin(address indexed pendingAdmin);\\n\\n    /// @notice The admin address changed\\n    /// @param admin New admin address\\n    event SetAdmin(address indexed admin);\\n\\n    /// @notice Retrieves the current admin address\\n    /// @return The admin address\\n    function getAdmin() external view returns (address);\\n\\n    /// @notice Retrieve the current pending admin address\\n    /// @return The pending admin address\\n    function getPendingAdmin() external view returns (address);\\n\\n    /// @notice Proposes a new address as admin\\n    /// @dev This security prevents setting an invalid address as an admin. The pending\\n    /// @dev admin has to claim its ownership of the contract, and prove that the new\\n    /// @dev address is able to perform regular transactions.\\n    /// @param _newAdmin New admin address\\n    function proposeAdmin(address _newAdmin) external;\\n\\n    /// @notice Accept the transfer of ownership\\n    /// @dev Only callable by the pending admin. Resets the pending admin if succesful.\\n    function acceptAdmin() external;\\n}\\n\",\"keccak256\":\"0xa125890056d930c3f1bfe09ea58b81fa01a1d1526092d0bcce9d38cd35aeec58\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IFirewall.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Firewall\\n/// @author Figment\\n/// @notice This interface exposes methods to accept calls to admin-level functions of an underlying contract.\\ninterface IFirewall {\\n    /// @notice The stored executor address has been changed\\n    /// @param executor The new executor address\\n    event SetExecutor(address indexed executor);\\n\\n    /// @notice The stored destination address has been changed\\n    /// @param destination The new destination address\\n    event SetDestination(address indexed destination);\\n\\n    /// @notice The storage permission for a selector has been changed\\n    /// @param selector The 4 bytes method selector\\n    /// @param status True if executor is allowed\\n    event SetExecutorPermissions(bytes4 selector, bool status);\\n\\n    /// @notice Retrieve the executor address\\n    /// @return The executor address\\n    function executor() external view returns (address);\\n\\n    /// @notice Retrieve the destination address\\n    /// @return The destination address\\n    function destination() external view returns (address);\\n\\n    /// @notice Returns true if the executor is allowed to perform a call on the given selector\\n    /// @param _selector The selector to verify\\n    /// @return True if executor is allowed to call\\n    function executorCanCall(bytes4 _selector) external view returns (bool);\\n\\n    /// @notice Sets the executor address\\n    /// @param _newExecutor New address for the executor\\n    function setExecutor(address _newExecutor) external;\\n\\n    /// @notice Sets the permission for a function selector\\n    /// @param _functionSelector Method signature on which the permission is changed\\n    /// @param _executorCanCall True if selector is callable by the executor\\n    function allowExecutor(bytes4 _functionSelector, bool _executorCanCall) external;\\n\\n    /// @notice Fallback method. All its parameters are forwarded to the destination if caller is authorized\\n    fallback() external payable;\\n\\n    /// @notice Receive fallback method. All its parameters are forwarded to the destination if caller is authorized\\n    receive() external payable;\\n}\\n\",\"keccak256\":\"0x16209ff82d17fcc38052b0d49a89db9c4fe3c51b1ede45baa850af8198da19df\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IProtocolVersion.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\ninterface IProtocolVersion {\\n    /// @notice Retrieves the version of the contract\\n    /// @return Version of the contract\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0x2fc810a5c001d641d4b19c28631dac46201e3780e91dfeb5dc836f92f1aee8b3\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\nimport \\\"../state/shared/PendingAdministratorAddress.sol\\\";\\n\\n/// @title Lib Administrable\\n/// @author Alluvial Finance Inc.\\n/// @notice This library handles the admin and pending admin storage vars\\nlibrary LibAdministrable {\\n    /// @notice Retrieve the system admin\\n    /// @return The address of the system admin\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n\\n    /// @notice Retrieve the pending system admin\\n    /// @return The adress of the pending system admin\\n    function _getPendingAdmin() internal view returns (address) {\\n        return PendingAdministratorAddress.get();\\n    }\\n\\n    /// @notice Sets the system admin\\n    /// @param _admin New system admin\\n    function _setAdmin(address _admin) internal {\\n        AdministratorAddress.set(_admin);\\n    }\\n\\n    /// @notice Sets the pending system admin\\n    /// @param _pendingAdmin New pending system admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        PendingAdministratorAddress.set(_pendingAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0x09f683441ee60515cb51439c3e98d94e0ee356381e82ce6b12ee7d4ab41f7448\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibBasisPoints.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Lib Basis Points\\n/// @notice Holds the basis points max value\\nlibrary LibBasisPoints {\\n    /// @notice The max value for basis points (represents 100%)\\n    uint256 internal constant BASIS_POINTS_MAX = 10_000;\\n}\\n\",\"keccak256\":\"0x87e0393c2317b33ae449221747b42f7237362adf9b7a0902433d57574473303a\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibErrors.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title Lib Errors\\n/// @notice Library of common errors\\nlibrary LibErrors {\\n    /// @notice The operator is unauthorized for the caller\\n    /// @param caller Address performing the call\\n    error Unauthorized(address caller);\\n\\n    /// @notice The call was invalid\\n    error InvalidCall();\\n\\n    /// @notice The argument was invalid\\n    error InvalidArgument();\\n\\n    /// @notice The address is zero\\n    error InvalidZeroAddress();\\n\\n    /// @notice The string is empty\\n    error InvalidEmptyString();\\n\\n    /// @notice The fee is invalid\\n    error InvalidFee();\\n}\\n\",\"keccak256\":\"0xc6f936719c01ce7ee4ba9ef66e8af75ca8a09b216efd38c0d66d87d08b05bc95\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibSanitize.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"./LibErrors.sol\\\";\\nimport \\\"./LibBasisPoints.sol\\\";\\n\\n/// @title Lib Sanitize\\n/// @notice Utilities to sanitize input values\\nlibrary LibSanitize {\\n    /// @notice Reverts if address is 0\\n    /// @param _address Address to check\\n    function _notZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert LibErrors.InvalidZeroAddress();\\n        }\\n    }\\n\\n    /// @notice Reverts if string is empty\\n    /// @param _string String to check\\n    function _notEmptyString(string memory _string) internal pure {\\n        if (bytes(_string).length == 0) {\\n            revert LibErrors.InvalidEmptyString();\\n        }\\n    }\\n\\n    /// @notice Reverts if fee is invalid\\n    /// @param _fee Fee to check\\n    function _validFee(uint256 _fee) internal pure {\\n        if (_fee > LibBasisPoints.BASIS_POINTS_MAX) {\\n            revert LibErrors.InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce078083ab565058f68cd7be35ffeb0d88ab990a769c905094520a46edbccfee\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibUnstructuredStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.20;\\n\\n/// @title Lib Unstructured Storage\\n/// @notice Utilities to work with unstructured storage\\nlibrary LibUnstructuredStorage {\\n    /// @notice Retrieve a bool value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bool value\\n    function getStorageBool(bytes32 _position) internal view returns (bool data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an address value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The address value\\n    function getStorageAddress(bytes32 _position) internal view returns (address data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve a bytes32 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bytes32 value\\n    function getStorageBytes32(bytes32 _position) internal view returns (bytes32 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an uint256 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The uint256 value\\n    function getStorageUint256(bytes32 _position) internal view returns (uint256 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Sets a bool value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bool value to set\\n    function setStorageBool(bytes32 _position, bool _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an address value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The address value to set\\n    function setStorageAddress(bytes32 _position, address _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets a bytes32 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bytes32 value to set\\n    function setStorageBytes32(bytes32 _position, bytes32 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an uint256 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The uint256 value to set\\n    function setStorageUint256(bytes32 _position, uint256 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe48b249b789acdd6f9e1b80f6b1dc3fc69d5593c8b836fad803b7d9fd10dd841\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrator Address Storage\\n/// @notice Utility to manage the Administrator Address in storage\\nlibrary AdministratorAddress {\\n    /// @notice Storage slot of the Administrator Address\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Administrator Address\\n    /// @return The Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Administrator Address\\n    /// @param _newValue New Administrator Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x9a8ea493ee319ecf7bb3955c0fcb7108c89193084b642f441f2858316d2dc7ae\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/PendingAdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Pending Administrator Address Storage\\n/// @notice Utility to manage the Pending Administrator Address in storage\\nlibrary PendingAdministratorAddress {\\n    /// @notice Storage slot of the Pending Administrator Address\\n    bytes32 public constant PENDING_ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.pendingAdministratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Pending Administrator Address\\n    /// @return The Pending Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Pending Administrator Address\\n    /// @param _newValue New Pending Administrator Address\\n    function set(address _newValue) internal {\\n        LibUnstructuredStorage.setStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xeb7b867d4df38b08393f42a7fd5d93dbb1ade1f9d30d47551f63ffc77816685b\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x604060a08152346102455761093f8038038061001a81610260565b9283398101906080818303126102455761003381610285565b91602090610042828401610285565b9061004e868501610285565b60608501516001600160401b0395919291868211610245570181601f8201121561024557805195861161024a578560051b90858061008d818501610260565b80998152019282010192831161024557908589969594939201905b82821061021a575050506100bb826102c3565b6100c4816102c3565b6100cd866102c3565b7fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb1128690556000956001600160a01b0392839182167f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a18980a287546001600160a01b0319169116908117875560808290527f34d4f6a542f13533b1eaa27e7ae8691368028d05b7075ad7a6c34df851a67a438780a2167f44bcfad6adf95e4168c90f181d665d8b22f3f7708a74828c51854ef849f708578580a2835b83518110156101fc576001600160e01b031990816101a68287610299565b511686527fe1d1d2578e62581ba0a25d03a939b23a37d567cee7e6113f5d4a6a2f446ad5a9846001938486528189208560ff198254161790556101e98489610299565b511681519081528486820152a101610188565b825161065990816102e6823960805181818161042e01526105110152f35b90809293949596505163ffffffff60e01b8116810361024557815288959493929185019085016100a8565b600080fd5b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b0381118382101761024a57604052565b51906001600160a01b038216820361024557565b80518210156102ad5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0316156102d357565b60405163f6b2911f60e01b8152600490fdfe60806040526004361015610018575b366104fc576104fc565b60003560e01c806302aaa9cc146100b85780630e18b681146100b3578063147bf6c4146100ae5780631c3c0ea8146100a957806354fd4d50146100a45780636e9960c31461009f578063b269681d1461009a578063c34c08e514610095578063d0468156146100905763f0e70dab0361000e576104bc565b610486565b61045d565b610418565b6103e2565b610346565b6102b9565b610250565b61018d565b6100d9565b600435906001600160e01b0319821682036100d457565b600080fd5b346100d45760403660031901126100d4576100f26100bd565b602435908115158092036100d457600080516020610604833981519152546001600160a01b03163303610175577fe1d1d2578e62581ba0a25d03a939b23a37d567cee7e6113f5d4a6a2f446ad5a99160409163ffffffff60e01b16908160005260016020528260002060ff1981541660ff831617905582519182526020820152a1005b60405163472511eb60e11b8152336004820152602490fd5b346100d45760008060031936011261022b576000805160206105e48339815191528054906001600160a01b0382163381900361017557826101ce85946105c1565b600080516020610604833981519152557f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a18380a255807f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f48180a280f35b80fd5b60209060031901126100d4576004356001600160a01b03811681036100d45790565b346100d45761025e3661022e565b600080516020610604833981519152546001600160a01b0391908216330361017557806000805160206105e483398151915255167f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f4600080a2005b346100d4576102c73661022e565b600080516020610604833981519152546001600160a01b039190821633141580610338575b610175576102f9816105c1565b600080546001600160a01b031916929091169182178155907f34d4f6a542f13533b1eaa27e7ae8691368028d05b7075ad7a6c34df851a67a438280a280f35b5081600054163314156102ec565b346100d45760008060031936011261022b576040805181810181811067ffffffffffffffff8211176103ce5782526005815260209064312e322e3160d81b8282015282519382859384528251928382860152825b8481106103b857505050828201840152601f01601f19168101030190f35b818101830151888201880152879550820161039a565b634e487b7160e01b84526041600452602484fd5b346100d45760003660031901126100d457600080516020610604833981519152546040516001600160a01b039091168152602090f35b346100d45760003660031901126100d4576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346100d45760003660031901126100d4576000546040516001600160a01b039091168152602090f35b346100d45760003660031901126100d4576000805160206105e4833981519152546040516001600160a01b039091168152602090f35b346100d45760203660031901126100d4576001600160e01b03196104de6100bd565b166000526001602052602060ff604060002054166040519015158152f35b610504610543565b60003681803780803681347f00000000000000000000000000000000000000000000000000000000000000005af13d82803e1561053f573d90f35b3d90fd5b60008051602061060483398151915254336001600160a01b0391821614908115610587575b506105855760405163472511eb60e11b8152336004820152602490fd5b565b600080356001600160e01b03191681526001602052604090205460ff169150816105b3575b5038610568565b9050600054163314386105ac565b6001600160a01b0316156105d157565b60405163f6b2911f60e01b8152600490fdfe6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847280b5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb112a2646970667358221220ece97d7bae30a8374fe9cfc5816013a8421da191d104cd4e83cb5089ed31576b64736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361015610018575b366104fc576104fc565b60003560e01c806302aaa9cc146100b85780630e18b681146100b3578063147bf6c4146100ae5780631c3c0ea8146100a957806354fd4d50146100a45780636e9960c31461009f578063b269681d1461009a578063c34c08e514610095578063d0468156146100905763f0e70dab0361000e576104bc565b610486565b61045d565b610418565b6103e2565b610346565b6102b9565b610250565b61018d565b6100d9565b600435906001600160e01b0319821682036100d457565b600080fd5b346100d45760403660031901126100d4576100f26100bd565b602435908115158092036100d457600080516020610604833981519152546001600160a01b03163303610175577fe1d1d2578e62581ba0a25d03a939b23a37d567cee7e6113f5d4a6a2f446ad5a99160409163ffffffff60e01b16908160005260016020528260002060ff1981541660ff831617905582519182526020820152a1005b60405163472511eb60e11b8152336004820152602490fd5b346100d45760008060031936011261022b576000805160206105e48339815191528054906001600160a01b0382163381900361017557826101ce85946105c1565b600080516020610604833981519152557f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a18380a255807f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f48180a280f35b80fd5b60209060031901126100d4576004356001600160a01b03811681036100d45790565b346100d45761025e3661022e565b600080516020610604833981519152546001600160a01b0391908216330361017557806000805160206105e483398151915255167f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f4600080a2005b346100d4576102c73661022e565b600080516020610604833981519152546001600160a01b039190821633141580610338575b610175576102f9816105c1565b600080546001600160a01b031916929091169182178155907f34d4f6a542f13533b1eaa27e7ae8691368028d05b7075ad7a6c34df851a67a438280a280f35b5081600054163314156102ec565b346100d45760008060031936011261022b576040805181810181811067ffffffffffffffff8211176103ce5782526005815260209064312e322e3160d81b8282015282519382859384528251928382860152825b8481106103b857505050828201840152601f01601f19168101030190f35b818101830151888201880152879550820161039a565b634e487b7160e01b84526041600452602484fd5b346100d45760003660031901126100d457600080516020610604833981519152546040516001600160a01b039091168152602090f35b346100d45760003660031901126100d4576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346100d45760003660031901126100d4576000546040516001600160a01b039091168152602090f35b346100d45760003660031901126100d4576000805160206105e4833981519152546040516001600160a01b039091168152602090f35b346100d45760203660031901126100d4576001600160e01b03196104de6100bd565b166000526001602052602060ff604060002054166040519015158152f35b610504610543565b60003681803780803681347f00000000000000000000000000000000000000000000000000000000000000005af13d82803e1561053f573d90f35b3d90fd5b60008051602061060483398151915254336001600160a01b0391821614908115610587575b506105855760405163472511eb60e11b8152336004820152602490fd5b565b600080356001600160e01b03191681526001602052604090205460ff169150816105b3575b5038610568565b9050600054163314386105ac565b6001600160a01b0316156105d157565b60405163f6b2911f60e01b8152600490fdfe6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847280b5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb112a2646970667358221220ece97d7bae30a8374fe9cfc5816013a8421da191d104cd4e83cb5089ed31576b64736f6c63430008140033",
  "devdoc": {
    "author": "Figment",
    "errors": {
      "Unauthorized(address)": [
        {
          "params": {
            "caller": "Address performing the call"
          }
        }
      ]
    },
    "events": {
      "SetAdmin(address)": {
        "params": {
          "admin": "New admin address"
        }
      },
      "SetDestination(address)": {
        "params": {
          "destination": "The new destination address"
        }
      },
      "SetExecutor(address)": {
        "params": {
          "executor": "The new executor address"
        }
      },
      "SetExecutorPermissions(bytes4,bool)": {
        "params": {
          "selector": "The 4 bytes method selector",
          "status": "True if executor is allowed"
        }
      },
      "SetPendingAdmin(address)": {
        "params": {
          "pendingAdmin": "New pending admin address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "acceptAdmin()": {
        "details": "Only callable by the pending admin. Resets the pending admin if succesful."
      },
      "allowExecutor(bytes4,bool)": {
        "params": {
          "_executorCanCall": "True if selector is callable by the executor",
          "_functionSelector": "Method signature on which the permission is changed"
        }
      },
      "constructor": {
        "params": {
          "_admin": "Address of the administrator, that is able to perform all calls via the Firewall",
          "_executor": "Address of the executor, that is able to perform only a subset of calls via the Firewall",
          "_executorCallableSelectors": "Initial list of allowed selectors for the executor"
        }
      },
      "getAdmin()": {
        "returns": {
          "_0": "The admin address"
        }
      },
      "getPendingAdmin()": {
        "returns": {
          "_0": "The pending admin address"
        }
      },
      "proposeAdmin(address)": {
        "details": "This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.",
        "params": {
          "_newAdmin": "New admin address"
        }
      },
      "setExecutor(address)": {
        "params": {
          "_newExecutor": "New address for the executor"
        }
      },
      "version()": {
        "returns": {
          "_0": "Version of the contract"
        }
      }
    },
    "stateVariables": {
      "destination": {
        "return": "The destination address",
        "returns": {
          "_0": "The destination address"
        }
      },
      "executor": {
        "return": "The executor address",
        "returns": {
          "_0": "The executor address"
        }
      },
      "executorCanCall": {
        "params": {
          "_selector": "The selector to verify"
        },
        "return": "True if executor is allowed to call",
        "returns": {
          "_0": "True if executor is allowed to call"
        }
      }
    },
    "title": "Firewall",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidZeroAddress()": [
        {
          "notice": "The address is zero"
        }
      ],
      "Unauthorized(address)": [
        {
          "notice": "The operator is unauthorized for the caller"
        }
      ]
    },
    "events": {
      "SetAdmin(address)": {
        "notice": "The admin address changed"
      },
      "SetDestination(address)": {
        "notice": "The stored destination address has been changed"
      },
      "SetExecutor(address)": {
        "notice": "The stored executor address has been changed"
      },
      "SetExecutorPermissions(bytes4,bool)": {
        "notice": "The storage permission for a selector has been changed"
      },
      "SetPendingAdmin(address)": {
        "notice": "The pending admin address changed"
      }
    },
    "kind": "user",
    "methods": {
      "acceptAdmin()": {
        "notice": "Accept the transfer of ownership"
      },
      "allowExecutor(bytes4,bool)": {
        "notice": "Sets the permission for a function selector"
      },
      "destination()": {
        "notice": "Retrieve the destination address"
      },
      "executor()": {
        "notice": "Retrieve the executor address"
      },
      "executorCanCall(bytes4)": {
        "notice": "Returns true if the executor is allowed to perform a call on the given selector"
      },
      "getAdmin()": {
        "notice": "Retrieves the current admin address"
      },
      "getPendingAdmin()": {
        "notice": "Retrieve the current pending admin address"
      },
      "proposeAdmin(address)": {
        "notice": "Proposes a new address as admin"
      },
      "setExecutor(address)": {
        "notice": "Sets the executor address"
      },
      "version()": {
        "notice": "Retrieves the version of the contract"
      }
    },
    "notice": "This contract accepts calls to admin-level functions of an underlying contract, and         ensures the caller holds an appropriate role for calling that function. There are two roles:          - An Admin can call anything          - An Executor can call specific functions. The list of function is customisable.         Random callers cannot call anything through this contract, even if the underlying function         is unpermissioned in the underlying contract.         Calls to non-admin functions should be called at the underlying contract directly.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 943,
        "contract": "contracts/src/Firewall.sol:Firewall",
        "label": "executor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 951,
        "contract": "contracts/src/Firewall.sol:Firewall",
        "label": "executorCanCall",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes4,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}