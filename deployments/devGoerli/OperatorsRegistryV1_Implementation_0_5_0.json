{
  "address": "0xB7157EA88ec61423D1E7F71d77091e92E4cF4E44",
  "abi": [
    {
      "inputs": [],
      "name": "FundedKeyEventMigrationComplete",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "InactiveOperator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArrayLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEmptyArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEmptyStoppedValidatorCountsArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEmptyString",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFundedKeyDeletionAttempt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedVersion",
          "type": "uint256"
        }
      ],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidKeyCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidKeysLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStoppedValidatorCountsSum",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidUnsortedIndexes",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "keyCount",
          "type": "uint256"
        }
      ],
      "name": "OperatorLimitTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundedKeyCount",
          "type": "uint256"
        }
      ],
      "name": "OperatorLimitTooLow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "OperatorNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "OperatorNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SliceOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SliceOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StoppedValidatorCountsTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnorderedOperatorList",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operatorAddress",
          "type": "address"
        }
      ],
      "name": "AddedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "publicKeysAndSignatures",
          "type": "bytes"
        }
      ],
      "name": "AddedValidatorKeys",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "publicKeys",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "deferred",
          "type": "bool"
        }
      ],
      "name": "FundedValidatorKeys",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "cdata",
          "type": "bytes"
        }
      ],
      "name": "Initialize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "latestKeysEditBlockNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "snapshotBlock",
          "type": "uint256"
        }
      ],
      "name": "OperatorEditsAfterSnapshot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "OperatorLimitUnchanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "name": "RemovedValidatorKey",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "RequestedValidatorExits",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "SetAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOperatorAddress",
          "type": "address"
        }
      ],
      "name": "SetOperatorAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        }
      ],
      "name": "SetOperatorLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "SetOperatorName",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "SetOperatorStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStoppedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "SetOperatorStoppedValidatorCount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingAdmin",
          "type": "address"
        }
      ],
      "name": "SetPendingAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "river",
          "type": "address"
        }
      ],
      "name": "SetRiver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousTotalRequestedValidatorExits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalRequestedValidatorExits",
          "type": "uint256"
        }
      ],
      "name": "SetTotalRequestedValidatorExits",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "oldRequestedExits",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newRequestedExits",
          "type": "uint32"
        }
      ],
      "name": "UpdatedRequestedValidatorExitsUponStopped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32[]",
          "name": "stoppedValidatorCounts",
          "type": "uint32[]"
        }
      ],
      "name": "UpdatedStoppedValidators",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_keyCount",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_publicKeysAndSignatures",
          "type": "bytes"
        }
      ],
      "name": "addValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToEmit",
          "type": "uint256"
        }
      ],
      "name": "forceFundedValidatorKeysEventEmission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getOperator",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "limit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "funded",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "requestedExits",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "keys",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "latestKeysEditBlockNumber",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "internalType": "struct OperatorsV2.Operator",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "getOperatorStoppedValidatorCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStoppedValidatorCountPerOperator",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalRequestedValidatorExitsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalStoppedValidatorCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_operatorIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorIndex",
          "type": "uint256"
        }
      ],
      "name": "getValidator",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "funded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_river",
          "type": "address"
        }
      ],
      "name": "initOperatorsRegistryV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initOperatorsRegistryV1_1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listActiveOperators",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "limit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "funded",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "requestedExits",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "keys",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "latestKeysEditBlockNumber",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "internalType": "struct OperatorsV2.Operator[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "pickNextValidatorsToDeposit",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "publicKeys",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "pickNextValidatorsToExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "proposeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "removeValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "stoppedValidatorCounts",
          "type": "uint32[]"
        }
      ],
      "name": "reportStoppedValidatorCounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newOperatorAddress",
          "type": "address"
        }
      ],
      "name": "setOperatorAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_operatorIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_newLimits",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256",
          "name": "_snapshotBlock",
          "type": "uint256"
        }
      ],
      "name": "setOperatorLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_newName",
          "type": "string"
        }
      ],
      "name": "setOperatorName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_newStatus",
          "type": "bool"
        }
      ],
      "name": "setOperatorStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4152e52cea78f545a2a749d9545e7b6a829aaab53719a629d97881d9d1ceab4f",
  "receipt": {
    "to": null,
    "from": "0xb327fA3b591cF8E27BA72AcBA7dF3f599009E49d",
    "contractAddress": "0xB7157EA88ec61423D1E7F71d77091e92E4cF4E44",
    "transactionIndex": 60,
    "gasUsed": "4189837",
    "logsBloom": "0x
    "blockHash": "0x52adf1357852b7296362110d1a8fd216d5ceed0b147dffd0bf8968d538fba970",
    "transactionHash": "0x4152e52cea78f545a2a749d9545e7b6a829aaab53719a629d97881d9d1ceab4f",
    "logs": [
      {
        "transactionIndex": 60,
        "blockNumber": 8699417,
        "transactionHash": "0x4152e52cea78f545a2a749d9545e7b6a829aaab53719a629d97881d9d1ceab4f",
        "address": "0xB7157EA88ec61423D1E7F71d77091e92E4cF4E44",
        "topics": [
          "0x1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a71"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 41,
        "blockHash": "0x52adf1357852b7296362110d1a8fd216d5ceed0b147dffd0bf8968d538fba970"
      }
    ],
    "blockNumber": 8699417,
    "cumulativeGasUsed": "8522007",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0a2910002f1f7235235bf4c9129dadf0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FundedKeyEventMigrationComplete\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"InactiveOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEmptyStoppedValidatorCountsArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEmptyString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFundedKeyDeletionAttempt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidKeyCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidKeysLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStoppedValidatorCountsSum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUnsortedIndexes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keyCount\",\"type\":\"uint256\"}],\"name\":\"OperatorLimitTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundedKeyCount\",\"type\":\"uint256\"}],\"name\":\"OperatorLimitTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OperatorNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OperatorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StoppedValidatorCountsTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnorderedOperatorList\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"}],\"name\":\"AddedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKeysAndSignatures\",\"type\":\"bytes\"}],\"name\":\"AddedValidatorKeys\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"publicKeys\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"deferred\",\"type\":\"bool\"}],\"name\":\"FundedValidatorKeys\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"cdata\",\"type\":\"bytes\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"latestKeysEditBlockNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"OperatorEditsAfterSnapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"OperatorLimitUnchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"RemovedValidatorKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"RequestedValidatorExits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperatorAddress\",\"type\":\"address\"}],\"name\":\"SetOperatorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"SetOperatorLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"SetOperatorName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetOperatorStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStoppedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"SetOperatorStoppedValidatorCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"SetPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"river\",\"type\":\"address\"}],\"name\":\"SetRiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTotalRequestedValidatorExits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalRequestedValidatorExits\",\"type\":\"uint256\"}],\"name\":\"SetTotalRequestedValidatorExits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"oldRequestedExits\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newRequestedExits\",\"type\":\"uint32\"}],\"name\":\"UpdatedRequestedValidatorExitsUponStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"stoppedValidatorCounts\",\"type\":\"uint32[]\"}],\"name\":\"UpdatedStoppedValidators\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_keyCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_publicKeysAndSignatures\",\"type\":\"bytes\"}],\"name\":\"addValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToEmit\",\"type\":\"uint256\"}],\"name\":\"forceFundedValidatorKeysEventEmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getOperator\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"funded\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"requestedExits\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"keys\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"latestKeysEditBlockNumber\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"internalType\":\"struct OperatorsV2.Operator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getOperatorStoppedValidatorCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStoppedValidatorCountPerOperator\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRequestedValidatorExitsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStoppedValidatorCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorIndex\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"funded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_river\",\"type\":\"address\"}],\"name\":\"initOperatorsRegistryV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initOperatorsRegistryV1_1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listActiveOperators\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"funded\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"requestedExits\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"keys\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"latestKeysEditBlockNumber\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"internalType\":\"struct OperatorsV2.Operator[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"pickNextValidatorsToDeposit\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"publicKeys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"pickNextValidatorsToExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"proposeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"removeValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"stoppedValidatorCounts\",\"type\":\"uint32[]\"}],\"name\":\"reportStoppedValidatorCounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOperatorAddress\",\"type\":\"address\"}],\"name\":\"setOperatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_operatorIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_newLimits\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"_snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"setOperatorLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"}],\"name\":\"setOperatorName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"setOperatorStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kiln\",\"errors\":{\"InactiveOperator(uint256)\":[{\"params\":{\"index\":\"The operator index\"}}],\"InvalidInitialization(uint256,uint256)\":[{\"params\":{\"expectedVersion\":\"The version that was expected\",\"version\":\"The version that was attempting to be initialized\"}}],\"OperatorLimitTooHigh(uint256,uint256,uint256)\":[{\"params\":{\"index\":\"The operator index\",\"keyCount\":\"The operator key count\",\"limit\":\"The new limit provided\"}}],\"OperatorLimitTooLow(uint256,uint256,uint256)\":[{\"params\":{\"fundedKeyCount\":\"The operator funded key count\",\"index\":\"The operator index\",\"limit\":\"The new limit provided\"}}],\"OperatorNotFound(uint256)\":[{\"params\":{\"index\":\"The provided index\"}},{\"params\":{\"index\":\"The provided index\"}}],\"Unauthorized(address)\":[{\"params\":{\"caller\":\"Address performing the call\"}}]},\"kind\":\"dev\",\"methods\":{\"acceptAdmin()\":{\"details\":\"Only callable by the pending admin. Resets the pending admin if succesful.\"},\"addOperator(string,address)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_name\":\"The name identifying the operator\",\"_operator\":\"The address representing the operator, receiving the rewards\"},\"returns\":{\"_0\":\"The index of the new operator\"}},\"addValidators(uint256,uint32,bytes)\":{\"details\":\"Only callable by the administrator or the operator address\",\"params\":{\"_index\":\"The operator index\",\"_keyCount\":\"The amount of keys provided\",\"_publicKeysAndSignatures\":\"Public keys of the validator, concatenated\"}},\"forceFundedValidatorKeysEventEmission(uint256)\":{\"params\":{\"amountToEmit\":\"The amount of events to emit at maximum in this call\"}},\"getAdmin()\":{\"returns\":{\"_0\":\"The admin address\"}},\"getOperator(uint256)\":{\"params\":{\"_index\":\"The index of the operator\"},\"returns\":{\"_0\":\"The details of the operator\"}},\"getOperatorCount()\":{\"returns\":{\"_0\":\"The operator count\"}},\"getOperatorStoppedValidatorCount(uint256)\":{\"params\":{\"_idx\":\"The index of the operator\"},\"returns\":{\"_0\":\"The stopped validator count of the operator\"}},\"getPendingAdmin()\":{\"returns\":{\"_0\":\"The pending admin address\"}},\"getRiver()\":{\"returns\":{\"_0\":\"The address of River\"}},\"getStoppedValidatorCountPerOperator()\":{\"returns\":{\"_0\":\"The stopped validator array\"}},\"getTotalRequestedValidatorExitsCount()\":{\"returns\":{\"_0\":\"The total requested exit count\"}},\"getTotalStoppedValidatorCount()\":{\"returns\":{\"_0\":\"The total stopped validator count\"}},\"getValidator(uint256,uint256)\":{\"params\":{\"_operatorIndex\":\"The index of the operator\",\"_validatorIndex\":\"The index of the validator\"},\"returns\":{\"funded\":\"True if validator has been funded\",\"publicKey\":\"The public key of the validator\",\"signature\":\"The signature used during deposit\"}},\"initOperatorsRegistryV1(address,address)\":{\"params\":{\"_admin\":\"Admin in charge of managing operators\",\"_river\":\"Address of River system\"}},\"listActiveOperators()\":{\"returns\":{\"_0\":\"The list of active operators and their details\"}},\"pickNextValidatorsToDeposit(uint256)\":{\"params\":{\"_count\":\"Max amount of keys requested\"},\"returns\":{\"publicKeys\":\"An array of public keys\",\"signatures\":\"An array of signatures linked to the public keys\"}},\"pickNextValidatorsToExit(uint256)\":{\"params\":{\"_count\":\"Max amount of exits to request\"}},\"proposeAdmin(address)\":{\"details\":\"This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.\",\"params\":{\"_newAdmin\":\"New admin address\"}},\"removeValidators(uint256,uint256[])\":{\"details\":\"Only callable by the administrator or the operator addressThe indexes must be provided sorted in decreasing order and duplicate-free, otherwise the method will revertThe operator limit will be set to the lowest deleted key index if the operator's limit wasn't equal to its total key countThe operator or the admin cannot remove funded keysWhen removing validators, the indexes of specific unfunded keys can be changed in order to properlyremove the keys from the storage array. Beware of this specific behavior when chaining calls as thetargeted public key indexes can point to a different key after a first call was made and performedsome swaps\",\"params\":{\"_index\":\"The operator index\",\"_indexes\":\"The indexes of the keys to remove\"}},\"reportStoppedValidatorCounts(uint32[])\":{\"params\":{\"stoppedValidatorCounts\":\"The new stopped validators array\"}},\"setOperatorAddress(uint256,address)\":{\"details\":\"Only callable by the administrator or the previous operator address\",\"params\":{\"_index\":\"The operator index\",\"_newOperatorAddress\":\"The new address of the operator\"}},\"setOperatorLimits(uint256[],uint32[],uint256)\":{\"details\":\"Only callable by the administratorThe operator indexes must be in increasing order and contain no duplicateThe limit cannot exceed the total key count of the operatorThe _indexes and _newLimits must have the same length.Each limit value is applied to the operator index at the same index in the _indexes array.\",\"params\":{\"_newLimits\":\"The new staking limit of the operators\",\"_operatorIndexes\":\"The operator indexes, in increasing order and duplicate free\",\"_snapshotBlock\":\"The block number at which the snapshot was computed\"}},\"setOperatorName(uint256,string)\":{\"details\":\"Only callable by the administrator or the operator\",\"params\":{\"_index\":\"The operator index\",\"_newName\":\"The new operator name\"}},\"setOperatorStatus(uint256,bool)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_index\":\"The operator index\",\"_newStatus\":\"The new status of the operator\"}}},\"title\":\"Operators Registry (v1)\",\"version\":1},\"userdoc\":{\"errors\":{\"FundedKeyEventMigrationComplete()\":[{\"notice\":\"Emitted when the event rebroadcasting is done and we attempt to broadcast new events\"}],\"InactiveOperator(uint256)\":[{\"notice\":\"The calling operator is inactive\"}],\"InvalidArrayLengths()\":[{\"notice\":\"The provided operator and limits array have different lengths\"}],\"InvalidEmptyArray()\":[{\"notice\":\"The provided operator and limits array are empty\"}],\"InvalidEmptyStoppedValidatorCountsArray()\":[{\"notice\":\"Thrown when an invalid empty stopped validator array is provided\"}],\"InvalidEmptyString()\":[{\"notice\":\"The string is empty\"}],\"InvalidFundedKeyDeletionAttempt()\":[{\"notice\":\"A funded key deletion has been attempted\"}],\"InvalidIndexOutOfBounds()\":[{\"notice\":\"The index that is removed is out of bounds\"}],\"InvalidInitialization(uint256,uint256)\":[{\"notice\":\"An error occured during the initialization\"}],\"InvalidKeyCount()\":[{\"notice\":\"The provided key count is 0\"}],\"InvalidKeysLength()\":[{\"notice\":\"The provided concatenated keys do not have the expected length\"}],\"InvalidStoppedValidatorCountsSum()\":[{\"notice\":\"Thrown when the sum of stopped validators is invalid\"}],\"InvalidUnsortedIndexes()\":[{\"notice\":\"The index provided are not sorted properly (descending order)\"}],\"InvalidZeroAddress()\":[{\"notice\":\"The address is zero\"}],\"OperatorLimitTooHigh(uint256,uint256,uint256)\":[{\"notice\":\"The value for the operator limit is too high\"}],\"OperatorLimitTooLow(uint256,uint256,uint256)\":[{\"notice\":\"The value for the limit is too low\"}],\"OperatorNotFound(uint256)\":[{\"notice\":\"The operator was not found\"},{\"notice\":\"The operator was not found\"}],\"SliceOutOfBounds()\":[{\"notice\":\"The slice is outside of the initial bytes bounds\"}],\"SliceOverflow()\":[{\"notice\":\"The length overflows an uint\"}],\"StoppedValidatorCountsTooHigh()\":[{\"notice\":\"Thrown when the number of elements in the array is too high compared to operator count\"}],\"Unauthorized(address)\":[{\"notice\":\"The operator is unauthorized for the caller\"}],\"UnorderedOperatorList()\":[{\"notice\":\"The provided list of operators is not in increasing order\"}]},\"events\":{\"AddedOperator(uint256,string,address)\":{\"notice\":\"A new operator has been added to the registry\"},\"AddedValidatorKeys(uint256,bytes)\":{\"notice\":\"The operator or the admin added new validator keys and signatures\"},\"FundedValidatorKeys(uint256,bytes[],bool)\":{\"notice\":\"A validator key got funded on the deposit contractThis event was introduced during a contract upgrade, in order to cover all possible public keys, this eventwill be replayed for past funded keys in order to have a complete coverage of all the funded public keys.In this particuliar scenario, the deferred value will be set to true, to indicate that we are not going to havethe expected additional events and side effects in the same transaction (deposit to official DepositContract etc ...) becausethe event was synthetically crafted.\"},\"Initialize(uint256,bytes)\":{\"notice\":\"Emitted when the contract is properly initialized\"},\"OperatorEditsAfterSnapshot(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"The operator edited its keys after the snapshot block\"},\"OperatorLimitUnchanged(uint256,uint256)\":{\"notice\":\"The call didn't alter the limit of the operator\"},\"RemovedValidatorKey(uint256,bytes)\":{\"notice\":\"The operator or the admin removed a public key and its signature from the registry\"},\"RequestedValidatorExits(uint256,uint256)\":{\"notice\":\"The requested exit count has been updated\"},\"SetAdmin(address)\":{\"notice\":\"The admin address changed\"},\"SetOperatorAddress(uint256,address)\":{\"notice\":\"The operator address has been changed\"},\"SetOperatorLimit(uint256,uint256)\":{\"notice\":\"The operator limit has been changed\"},\"SetOperatorName(uint256,string)\":{\"notice\":\"The operator display name has been changed\"},\"SetOperatorStatus(uint256,bool)\":{\"notice\":\"The operator status has been changed\"},\"SetOperatorStoppedValidatorCount(uint256,uint256)\":{\"notice\":\"The operator stopped validator count has been changed\"},\"SetPendingAdmin(address)\":{\"notice\":\"The pending admin address changed\"},\"SetRiver(address)\":{\"notice\":\"The stored river address has been changed\"},\"SetTotalRequestedValidatorExits(uint256,uint256)\":{\"notice\":\"The total requested exit has been updated\"},\"UpdatedRequestedValidatorExitsUponStopped(uint256,uint32,uint32)\":{\"notice\":\"The requested exit count has been update to fill the gap with the reported stopped count\"},\"UpdatedStoppedValidators(uint32[])\":{\"notice\":\"The stopped validator array has been changedA validator is considered stopped if exiting, exited or slashedThis event is emitted when the oracle reports new stopped validators counts\"}},\"kind\":\"user\",\"methods\":{\"acceptAdmin()\":{\"notice\":\"Accept the transfer of ownership\"},\"addOperator(string,address)\":{\"notice\":\"Adds an operator to the registry\"},\"addValidators(uint256,uint32,bytes)\":{\"notice\":\"Adds new keys for an operator\"},\"forceFundedValidatorKeysEventEmission(uint256)\":{\"notice\":\"Utility to force the broadcasting of events. Will keep its progress in storage to prevent being DoSed by the number of keys\"},\"getAdmin()\":{\"notice\":\"Retrieves the current admin address\"},\"getOperator(uint256)\":{\"notice\":\"Get operator details\"},\"getOperatorCount()\":{\"notice\":\"Get operator count\"},\"getOperatorStoppedValidatorCount(uint256)\":{\"notice\":\"Retrieve the stopped validator count for an operator index\"},\"getPendingAdmin()\":{\"notice\":\"Retrieve the current pending admin address\"},\"getRiver()\":{\"notice\":\"Retrieve the River address\"},\"getStoppedValidatorCountPerOperator()\":{\"notice\":\"Retrieve the raw stopped validators array from storage\"},\"getTotalRequestedValidatorExitsCount()\":{\"notice\":\"Retrieve the total requested exit count\"},\"getTotalStoppedValidatorCount()\":{\"notice\":\"Retrieve the total stopped validator count\"},\"getValidator(uint256,uint256)\":{\"notice\":\"Get the details of a validator\"},\"initOperatorsRegistryV1(address,address)\":{\"notice\":\"Initializes the operators registry\"},\"initOperatorsRegistryV1_1()\":{\"notice\":\"Initializes the operators registry for V1_1\"},\"listActiveOperators()\":{\"notice\":\"Retrieve the active operator set\"},\"pickNextValidatorsToDeposit(uint256)\":{\"notice\":\"Retrieve validator keys based on operator statuses\"},\"pickNextValidatorsToExit(uint256)\":{\"notice\":\"Emits events for operators to exit validators\"},\"proposeAdmin(address)\":{\"notice\":\"Proposes a new address as admin\"},\"removeValidators(uint256,uint256[])\":{\"notice\":\"Remove validator keys\"},\"reportStoppedValidatorCounts(uint32[])\":{\"notice\":\"Allows river to override the stopped validators arrayThis actions happens during the Oracle report processing\"},\"setOperatorAddress(uint256,address)\":{\"notice\":\"Changes the operator address of an operator\"},\"setOperatorLimits(uint256[],uint32[],uint256)\":{\"notice\":\"Changes the operator staking limit\"},\"setOperatorName(uint256,string)\":{\"notice\":\"Changes the operator name\"},\"setOperatorStatus(uint256,bool)\":{\"notice\":\"Changes the operator status\"}},\"notice\":\"This contract handles the list of operators and their keys\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/OperatorsRegistry.1.sol\":\"OperatorsRegistryV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/Administrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IAdministrable.sol\\\";\\n\\nimport \\\"./libraries/LibAdministrable.sol\\\";\\nimport \\\"./libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrable\\n/// @author Kiln\\n/// @notice This contract handles the administration of the contracts\\nabstract contract Administrable is IAdministrable {\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() {\\n        if (msg.sender != LibAdministrable._getAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyPendingAdmin() {\\n        if (msg.sender != LibAdministrable._getPendingAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getAdmin() external view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getPendingAdmin() external view returns (address) {\\n        return LibAdministrable._getPendingAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function proposeAdmin(address _newAdmin) external onlyAdmin {\\n        _setPendingAdmin(_newAdmin);\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function acceptAdmin() external onlyPendingAdmin {\\n        _setAdmin(LibAdministrable._getPendingAdmin());\\n        _setPendingAdmin(address(0));\\n    }\\n\\n    /// @notice Internal utility to set the admin address\\n    /// @param _admin Address to set as admin\\n    function _setAdmin(address _admin) internal {\\n        LibSanitize._notZeroAddress(_admin);\\n        LibAdministrable._setAdmin(_admin);\\n        emit SetAdmin(_admin);\\n    }\\n\\n    /// @notice Internal utility to set the pending admin address\\n    /// @param _pendingAdmin Address to set as pending admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        LibAdministrable._setPendingAdmin(_pendingAdmin);\\n        emit SetPendingAdmin(_pendingAdmin);\\n    }\\n\\n    /// @notice Internal utility to retrieve the address of the current admin\\n    /// @return The address of admin\\n    function _getAdmin() internal view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n}\\n\",\"keccak256\":\"0xc9ce727028bc42bf4ea4247dfde9b57a5c36e1820aba5219207aa95c4f035372\",\"license\":\"BUSL-1.1\"},\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\n/// @title Initializable\\n/// @author Kiln\\n/// @notice This contract ensures that initializers are called only once per version\\ncontract Initializable {\\n    /// @notice Disable initialization on implementations\\n    constructor() {\\n        Version.set(type(uint256).max);\\n        emit Initialize(type(uint256).max, msg.data);\\n    }\\n\\n    /// @notice An error occured during the initialization\\n    /// @param version The version that was attempting to be initialized\\n    /// @param expectedVersion The version that was expected\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    /// @notice Emitted when the contract is properly initialized\\n    /// @param version New version of the contracts\\n    /// @param cdata Complete calldata that was used during the initialization\\n    event Initialize(uint256 version, bytes cdata);\\n\\n    /// @notice Use this modifier on initializers along with a hard-coded version number\\n    /// @param _version Version to initialize\\n    modifier init(uint256 _version) {\\n        if (_version != Version.get()) {\\n            revert InvalidInitialization(_version, Version.get());\\n        }\\n        Version.set(_version + 1); // prevents reentrency on the called method\\n        _;\\n        emit Initialize(_version, msg.data);\\n    }\\n}\\n\",\"keccak256\":\"0x2d85476c54b86308bc9687a7d072fddd2506f84f72a6892f7e0187214094ef79\",\"license\":\"BUSL-1.1\"},\"contracts/src/OperatorsRegistry.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IOperatorRegistry.1.sol\\\";\\n\\nimport \\\"./libraries/LibUint256.sol\\\";\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./Administrable.sol\\\";\\n\\nimport \\\"./state/operatorsRegistry/Operators.1.sol\\\";\\nimport \\\"./state/operatorsRegistry/Operators.2.sol\\\";\\nimport \\\"./state/operatorsRegistry/ValidatorKeys.sol\\\";\\nimport \\\"./state/operatorsRegistry/TotalRequestedExits.sol\\\";\\nimport \\\"./state/shared/RiverAddress.sol\\\";\\n\\nimport \\\"./state/migration/OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex.sol\\\";\\nimport \\\"./state/migration/OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.sol\\\";\\n\\n/// @title Operators Registry (v1)\\n/// @author Kiln\\n/// @notice This contract handles the list of operators and their keys\\ncontract OperatorsRegistryV1 is IOperatorsRegistryV1, Initializable, Administrable {\\n    /// @notice Maximum validators given to an operator per selection loop round\\n    uint256 internal constant MAX_VALIDATOR_ATTRIBUTION_PER_ROUND = 5;\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function initOperatorsRegistryV1(address _admin, address _river) external init(0) {\\n        _setAdmin(_admin);\\n        RiverAddress.set(_river);\\n        emit SetRiver(_river);\\n    }\\n\\n    /// @notice Internal migration utility to migrate all operators to OperatorsV2 format\\n    function _migrateOperators_V1_1() internal {\\n        uint256 opCount = OperatorsV1.getCount();\\n\\n        for (uint256 idx = 0; idx < opCount;) {\\n            OperatorsV1.Operator memory oldOperatorValue = OperatorsV1.get(idx);\\n\\n            OperatorsV2.push(\\n                OperatorsV2.Operator({\\n                    limit: uint32(oldOperatorValue.limit),\\n                    funded: uint32(oldOperatorValue.funded),\\n                    requestedExits: 0,\\n                    keys: uint32(oldOperatorValue.keys),\\n                    latestKeysEditBlockNumber: uint64(oldOperatorValue.latestKeysEditBlockNumber),\\n                    active: oldOperatorValue.active,\\n                    name: oldOperatorValue.name,\\n                    operator: oldOperatorValue.operator\\n                })\\n            );\\n\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n    }\\n\\n    /// MIGRATION: FUNDED VALIDATOR KEY EVENT REBROADCASTING\\n    /// As the event for funded keys was moved from River to this contract because we needed to be able to bind\\n    /// operator indexes to public keys, we need to rebroadcast the past funded validator keys with the new event\\n    /// to keep retro-compatibility\\n\\n    /// Emitted when the event rebroadcasting is done and we attempt to broadcast new events\\n    error FundedKeyEventMigrationComplete();\\n\\n    /// Utility to force the broadcasting of events. Will keep its progress in storage to prevent being DoSed by the number of keys\\n    /// @param amountToEmit The amount of events to emit at maximum in this call\\n    function forceFundedValidatorKeysEventEmission(uint256 amountToEmit) external {\\n        uint256 operatorIndex = OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.get();\\n        if (operatorIndex == type(uint256).max || OperatorsV2.getCount() == 0) {\\n            revert FundedKeyEventMigrationComplete();\\n        }\\n        uint256 keyIndex = OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex.get();\\n        while (amountToEmit > 0 && operatorIndex != type(uint256).max) {\\n            OperatorsV2.Operator memory operator = OperatorsV2.get(operatorIndex);\\n\\n            (bytes[] memory publicKeys,) =\\n                ValidatorKeys.getKeys(operatorIndex, keyIndex, LibUint256.min(amountToEmit, operator.funded - keyIndex));\\n            emit FundedValidatorKeys(operatorIndex, publicKeys, true);\\n            if (keyIndex + publicKeys.length == operator.funded) {\\n                keyIndex = 0;\\n                if (operatorIndex == OperatorsV2.getCount() - 1) {\\n                    operatorIndex = type(uint256).max;\\n                } else {\\n                    ++operatorIndex;\\n                }\\n            } else {\\n                keyIndex += publicKeys.length;\\n            }\\n            amountToEmit -= publicKeys.length;\\n        }\\n        OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.set(operatorIndex);\\n        OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex.set(keyIndex);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function initOperatorsRegistryV1_1() external init(1) {\\n        _migrateOperators_V1_1();\\n    }\\n\\n    /// @notice Prevent unauthorized calls\\n    modifier onlyRiver() virtual {\\n        if (msg.sender != RiverAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents anyone except the admin or the given operator to make the call. Also checks if operator is active\\n    /// @notice The admin is able to call this method on behalf of any operator, even if inactive\\n    /// @param _index The index identifying the operator\\n    modifier onlyOperatorOrAdmin(uint256 _index) {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n            return;\\n        }\\n        OperatorsV2.Operator storage operator = OperatorsV2.get(_index);\\n        if (!operator.active) {\\n            revert InactiveOperator(_index);\\n        }\\n        if (msg.sender != operator.operator) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getRiver() external view returns (address) {\\n        return RiverAddress.get();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getOperator(uint256 _index) external view returns (OperatorsV2.Operator memory) {\\n        return OperatorsV2.get(_index);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getOperatorStoppedValidatorCount(uint256 _idx) external view returns (uint32) {\\n        return _getStoppedValidatorsCount(_idx);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getTotalStoppedValidatorCount() external view returns (uint32) {\\n        uint32[] storage stoppedValidatorCounts = OperatorsV2.getStoppedValidators();\\n        if (stoppedValidatorCounts.length == 0) {\\n            return 0;\\n        }\\n        return stoppedValidatorCounts[0];\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getTotalRequestedValidatorExitsCount() external view returns (uint256) {\\n        return TotalRequestedExits.get();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getOperatorCount() external view returns (uint256) {\\n        return OperatorsV2.getCount();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getStoppedValidatorCountPerOperator() external view returns (uint32[] memory) {\\n        uint32[] memory completeList = OperatorsV2.getStoppedValidators();\\n        uint256 listLength = completeList.length;\\n\\n        if (listLength > 0) {\\n            assembly {\\n                // no need to use free memory pointer as we reuse the same memory range\\n\\n                // erase previous word storing length\\n                mstore(completeList, 0)\\n\\n                // move memory pointer up by a word\\n                completeList := add(completeList, 0x20)\\n\\n                // store updated length at new memory pointer location\\n                mstore(completeList, sub(listLength, 1))\\n            }\\n        }\\n\\n        return completeList;\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getValidator(uint256 _operatorIndex, uint256 _validatorIndex)\\n        external\\n        view\\n        returns (bytes memory publicKey, bytes memory signature, bool funded)\\n    {\\n        (publicKey, signature) = ValidatorKeys.get(_operatorIndex, _validatorIndex);\\n        funded = _validatorIndex < OperatorsV2.get(_operatorIndex).funded;\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function listActiveOperators() external view returns (OperatorsV2.Operator[] memory) {\\n        return OperatorsV2.getAllActive();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function reportStoppedValidatorCounts(uint32[] calldata stoppedValidatorCounts) external onlyRiver {\\n        _setStoppedValidatorCounts(stoppedValidatorCounts);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function addOperator(string calldata _name, address _operator) external onlyAdmin returns (uint256) {\\n        OperatorsV2.Operator memory newOperator = OperatorsV2.Operator({\\n            active: true,\\n            operator: _operator,\\n            name: _name,\\n            limit: 0,\\n            funded: 0,\\n            keys: 0,\\n            requestedExits: 0,\\n            latestKeysEditBlockNumber: uint64(block.number)\\n        });\\n\\n        uint256 operatorIndex = OperatorsV2.push(newOperator) - 1;\\n\\n        emit AddedOperator(operatorIndex, _name, _operator);\\n        return operatorIndex;\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorAddress(uint256 _index, address _newOperatorAddress) external onlyOperatorOrAdmin(_index) {\\n        LibSanitize._notZeroAddress(_newOperatorAddress);\\n        OperatorsV2.Operator storage operator = OperatorsV2.get(_index);\\n\\n        operator.operator = _newOperatorAddress;\\n\\n        emit SetOperatorAddress(_index, _newOperatorAddress);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorName(uint256 _index, string calldata _newName) external onlyOperatorOrAdmin(_index) {\\n        LibSanitize._notEmptyString(_newName);\\n        OperatorsV2.Operator storage operator = OperatorsV2.get(_index);\\n        operator.name = _newName;\\n\\n        emit SetOperatorName(_index, _newName);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorStatus(uint256 _index, bool _newStatus) external onlyAdmin {\\n        OperatorsV2.Operator storage operator = OperatorsV2.get(_index);\\n        operator.active = _newStatus;\\n\\n        emit SetOperatorStatus(_index, _newStatus);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorLimits(\\n        uint256[] calldata _operatorIndexes,\\n        uint32[] calldata _newLimits,\\n        uint256 _snapshotBlock\\n    ) external onlyAdmin {\\n        if (_operatorIndexes.length != _newLimits.length) {\\n            revert InvalidArrayLengths();\\n        }\\n        if (_operatorIndexes.length == 0) {\\n            revert InvalidEmptyArray();\\n        }\\n        for (uint256 idx = 0; idx < _operatorIndexes.length;) {\\n            uint256 operatorIndex = _operatorIndexes[idx];\\n            uint32 newLimit = _newLimits[idx];\\n\\n            // prevents duplicates\\n            if (idx > 0 && !(operatorIndex > _operatorIndexes[idx - 1])) {\\n                revert UnorderedOperatorList();\\n            }\\n\\n            OperatorsV2.Operator storage operator = OperatorsV2.get(operatorIndex);\\n\\n            uint32 currentLimit = operator.limit;\\n            if (newLimit == currentLimit) {\\n                emit OperatorLimitUnchanged(operatorIndex, newLimit);\\n                unchecked {\\n                    ++idx;\\n                }\\n                continue;\\n            }\\n\\n            // we enter this condition if the operator edited its keys after the off-chain key audit was made\\n            // we will skip any limit update on that operator unless it was a decrease in the initial limit\\n            if (_snapshotBlock < operator.latestKeysEditBlockNumber && newLimit > currentLimit) {\\n                emit OperatorEditsAfterSnapshot(\\n                    operatorIndex, currentLimit, newLimit, operator.latestKeysEditBlockNumber, _snapshotBlock\\n                );\\n                unchecked {\\n                    ++idx;\\n                }\\n                continue;\\n            }\\n\\n            // otherwise, we check for limit invariants that shouldn't happen if the off-chain key audit\\n            // was made properly, and if everything is respected, we update the limit\\n\\n            if (newLimit > operator.keys) {\\n                revert OperatorLimitTooHigh(operatorIndex, newLimit, operator.keys);\\n            }\\n\\n            if (newLimit < operator.funded) {\\n                revert OperatorLimitTooLow(operatorIndex, newLimit, operator.funded);\\n            }\\n\\n            operator.limit = newLimit;\\n            emit SetOperatorLimit(operatorIndex, newLimit);\\n\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function addValidators(uint256 _index, uint32 _keyCount, bytes calldata _publicKeysAndSignatures)\\n        external\\n        onlyOperatorOrAdmin(_index)\\n    {\\n        if (_keyCount == 0) {\\n            revert InvalidKeyCount();\\n        }\\n\\n        if (\\n            _publicKeysAndSignatures.length\\n                != _keyCount * (ValidatorKeys.PUBLIC_KEY_LENGTH + ValidatorKeys.SIGNATURE_LENGTH)\\n        ) {\\n            revert InvalidKeysLength();\\n        }\\n\\n        OperatorsV2.Operator storage operator = OperatorsV2.get(_index);\\n\\n        for (uint256 idx = 0; idx < _keyCount;) {\\n            bytes memory publicKeyAndSignature = LibBytes.slice(\\n                _publicKeysAndSignatures,\\n                idx * (ValidatorKeys.PUBLIC_KEY_LENGTH + ValidatorKeys.SIGNATURE_LENGTH),\\n                ValidatorKeys.PUBLIC_KEY_LENGTH + ValidatorKeys.SIGNATURE_LENGTH\\n            );\\n            ValidatorKeys.set(_index, operator.keys + idx, publicKeyAndSignature);\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        OperatorsV2.setKeys(_index, operator.keys + _keyCount);\\n\\n        emit AddedValidatorKeys(_index, _publicKeysAndSignatures);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function removeValidators(uint256 _index, uint256[] calldata _indexes) external onlyOperatorOrAdmin(_index) {\\n        uint256 indexesLength = _indexes.length;\\n        if (indexesLength == 0) {\\n            revert InvalidKeyCount();\\n        }\\n\\n        OperatorsV2.Operator storage operator = OperatorsV2.get(_index);\\n\\n        uint32 totalKeys = operator.keys;\\n\\n        if (!(_indexes[0] < totalKeys)) {\\n            revert InvalidIndexOutOfBounds();\\n        }\\n\\n        uint256 lastIndex = _indexes[indexesLength - 1];\\n\\n        if (lastIndex < operator.funded) {\\n            revert InvalidFundedKeyDeletionAttempt();\\n        }\\n\\n        bool limitEqualsKeyCount = operator.keys == operator.limit;\\n        OperatorsV2.setKeys(_index, totalKeys - uint32(indexesLength));\\n\\n        uint256 idx;\\n        for (; idx < indexesLength;) {\\n            uint256 keyIndex = _indexes[idx];\\n\\n            if (idx > 0 && !(keyIndex < _indexes[idx - 1])) {\\n                revert InvalidUnsortedIndexes();\\n            }\\n\\n            unchecked {\\n                ++idx;\\n            }\\n\\n            uint256 lastKeyIndex = totalKeys - idx;\\n\\n            (bytes memory removedPublicKey,) = ValidatorKeys.get(_index, keyIndex);\\n            (bytes memory lastPublicKeyAndSignature) = ValidatorKeys.getRaw(_index, lastKeyIndex);\\n            ValidatorKeys.set(_index, keyIndex, lastPublicKeyAndSignature);\\n            ValidatorKeys.set(_index, lastKeyIndex, new bytes(0));\\n\\n            emit RemovedValidatorKey(_index, removedPublicKey);\\n        }\\n\\n        if (limitEqualsKeyCount) {\\n            operator.limit = operator.keys;\\n        } else if (lastIndex < operator.limit) {\\n            operator.limit = uint32(lastIndex);\\n        }\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function pickNextValidatorsToDeposit(uint256 _count)\\n        external\\n        onlyRiver\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        return _pickNextValidatorsToDepositFromActiveOperators(_count);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function pickNextValidatorsToExit(uint256 _count) external onlyRiver {\\n        return _pickNextValidatorsToExitFromActiveOperators(_count);\\n    }\\n\\n    /// @notice Internal utiltiy to set the stopped validator array after sanity checks\\n    /// @param stoppedValidatorCounts The stopped validators counts for every operator + the total count in index 0\\n    function _setStoppedValidatorCounts(uint32[] calldata stoppedValidatorCounts) internal {\\n        uint256 stoppedValidatorCountsLength = stoppedValidatorCounts.length;\\n        if (stoppedValidatorCountsLength == 0) {\\n            revert InvalidEmptyStoppedValidatorCountsArray();\\n        }\\n        uint32 total = stoppedValidatorCounts[0];\\n        uint32 count = 0;\\n        if (stoppedValidatorCountsLength - 1 > OperatorsV2.getCount()) {\\n            revert StoppedValidatorCountsTooHigh();\\n        }\\n        for (uint256 idx = 1; idx < stoppedValidatorCountsLength;) {\\n            count += stoppedValidatorCounts[idx];\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        if (total != count) {\\n            revert InvalidStoppedValidatorCountsSum();\\n        }\\n        OperatorsV2.setRawStoppedValidators(stoppedValidatorCounts);\\n        emit UpdatedStoppedValidators(stoppedValidatorCounts);\\n    }\\n\\n    /// @notice Internal utility to concatenate bytes arrays together\\n    /// @param _arr1 First array\\n    /// @param _arr2 Second array\\n    /// @return The result of the concatenation of _arr1 + _arr2\\n    function _concatenateByteArrays(bytes[] memory _arr1, bytes[] memory _arr2)\\n        internal\\n        pure\\n        returns (bytes[] memory)\\n    {\\n        bytes[] memory res = new bytes[](_arr1.length + _arr2.length);\\n        for (uint256 idx = 0; idx < _arr1.length;) {\\n            res[idx] = _arr1[idx];\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        for (uint256 idx = 0; idx < _arr2.length;) {\\n            res[idx + _arr1.length] = _arr2[idx];\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        return res;\\n    }\\n\\n    /// @notice Internal utility to verify if an operator has fundable keys during the selection process\\n    /// @param _operator The Operator structure in memory\\n    /// @return True if at least one fundable key is available\\n    function _hasFundableKeys(OperatorsV2.CachedOperator memory _operator) internal pure returns (bool) {\\n        return (_operator.funded + _operator.picked) < _operator.limit;\\n    }\\n\\n    /// @notice Internal utility to retrieve the actual stopped validator count of an operator from the reported array\\n    /// @param operatorIndex The operator index\\n    /// @return The count of stopped validators\\n    function _getStoppedValidatorsCount(uint256 operatorIndex) internal view returns (uint32) {\\n        return _getStoppedValidatorsCountFromRawArray(OperatorsV2.getStoppedValidators(), operatorIndex);\\n    }\\n\\n    /// @notice Internal utility to retrieve the stopped validator count from the raw storage array pointer\\n    /// @param stoppedValidatorCounts The storage pointer\\n    /// @param operatorIndex The index of the operator to lookup\\n    function _getStoppedValidatorsCountFromRawArray(uint32[] storage stoppedValidatorCounts, uint256 operatorIndex)\\n        internal\\n        view\\n        returns (uint32)\\n    {\\n        if (operatorIndex + 1 >= stoppedValidatorCounts.length) {\\n            return 0;\\n        }\\n        return stoppedValidatorCounts[operatorIndex + 1];\\n    }\\n\\n    /// @notice Internal utility to get the count of active validators during the deposit selection process\\n    /// @param _operator The Operator structure in memory\\n    /// @return The count of active validators for the operator\\n    function _getActiveValidatorCountForDeposits(OperatorsV2.CachedOperator memory _operator)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (_operator.funded + _operator.picked) - _getStoppedValidatorsCount(_operator.index);\\n    }\\n\\n    /// @notice Internal utility to retrieve _count or lower fundable keys\\n    /// @dev The selection process starts by retrieving the full list of active operators with at least one fundable key.\\n    /// @dev\\n    /// @dev An operator is considered to have at least one fundable key when their staking limit is higher than their funded key count.\\n    /// @dev\\n    /// @dev    isFundable = operator.active && operator.limit > operator.funded\\n    /// @dev\\n    /// @dev The internal utility will loop on all operators and select the operator with the lowest active validator count.\\n    /// @dev The active validator count is computed by subtracting the stopped validator count to the funded validator count.\\n    /// @dev\\n    /// @dev    activeValidatorCount = operator.funded - operator.stopped\\n    /// @dev\\n    /// @dev During the selection process, we keep in memory all previously selected operators and the number of given validators inside a field\\n    /// @dev called picked that only exists on the CachedOperator structure in memory.\\n    /// @dev\\n    /// @dev    isFundable = operator.active && operator.limit > (operator.funded + operator.picked)\\n    /// @dev    activeValidatorCount = (operator.funded + operator.picked) - operator.stopped\\n    /// @dev\\n    /// @dev When we reach the requested key count or when all available keys are used, we perform a final loop on all the operators and extract keys\\n    /// @dev if any operator has a positive picked count. We then update the storage counters and return the arrays with the public keys and signatures.\\n    /// @param _count Amount of keys required. Contract is expected to send _count or lower.\\n    /// @return publicKeys An array of fundable public keys\\n    /// @return signatures An array of signatures linked to the public keys\\n    function _pickNextValidatorsToDepositFromActiveOperators(uint256 _count)\\n        internal\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        (OperatorsV2.CachedOperator[] memory operators, uint256 fundableOperatorCount) = OperatorsV2.getAllFundable();\\n\\n        if (fundableOperatorCount == 0) {\\n            return (new bytes[](0), new bytes[](0));\\n        }\\n\\n        while (_count > 0) {\\n            // loop on operators to find the first that has fundable keys, taking into account previous loop round attributions\\n            uint256 selectedOperatorIndex = 0;\\n            for (; selectedOperatorIndex < fundableOperatorCount;) {\\n                if (_hasFundableKeys(operators[selectedOperatorIndex])) {\\n                    break;\\n                }\\n                unchecked {\\n                    ++selectedOperatorIndex;\\n                }\\n            }\\n\\n            // if we reach the end, we have allocated all keys\\n            if (selectedOperatorIndex == fundableOperatorCount) {\\n                break;\\n            }\\n\\n            // we start from the next operator and we try to find one that has fundable keys but a lower (funded + picked) - stopped value\\n            for (uint256 idx = selectedOperatorIndex + 1; idx < fundableOperatorCount;) {\\n                if (\\n                    _getActiveValidatorCountForDeposits(operators[idx])\\n                        < _getActiveValidatorCountForDeposits(operators[selectedOperatorIndex])\\n                        && _hasFundableKeys(operators[idx])\\n                ) {\\n                    selectedOperatorIndex = idx;\\n                }\\n                unchecked {\\n                    ++idx;\\n                }\\n            }\\n\\n            // we take the smallest value between limit - (funded + picked), _requestedAmount and MAX_VALIDATOR_ATTRIBUTION_PER_ROUND\\n            uint256 pickedKeyCount = LibUint256.min(\\n                LibUint256.min(\\n                    operators[selectedOperatorIndex].limit\\n                        - (operators[selectedOperatorIndex].funded + operators[selectedOperatorIndex].picked),\\n                    MAX_VALIDATOR_ATTRIBUTION_PER_ROUND\\n                ),\\n                _count\\n            );\\n\\n            // we update the cached picked amount\\n            operators[selectedOperatorIndex].picked += uint32(pickedKeyCount);\\n\\n            // we update the requested amount count\\n            _count -= pickedKeyCount;\\n        }\\n\\n        // we loop on all operators\\n        for (uint256 idx = 0; idx < fundableOperatorCount; ++idx) {\\n            // if we picked keys on any operator, we extract the keys from storage and concatenate them in the result\\n            // we then update the funded value\\n            if (operators[idx].picked > 0) {\\n                (bytes[] memory _publicKeys, bytes[] memory _signatures) =\\n                    ValidatorKeys.getKeys(operators[idx].index, operators[idx].funded, operators[idx].picked);\\n                emit FundedValidatorKeys(operators[idx].index, _publicKeys, false);\\n                publicKeys = _concatenateByteArrays(publicKeys, _publicKeys);\\n                signatures = _concatenateByteArrays(signatures, _signatures);\\n                (OperatorsV2.get(operators[idx].index)).funded += operators[idx].picked;\\n            }\\n        }\\n    }\\n\\n    /// @notice Internal utility to get the count of active validators during the exit selection process\\n    /// @param _operator The Operator structure in memory\\n    /// @return The count of active validators for the operator\\n    function _getActiveValidatorCountForExitRequests(OperatorsV2.CachedOperator memory _operator)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        return _operator.funded - (_operator.requestedExits + _operator.picked);\\n    }\\n\\n    /// @notice Internal utility to pick the next validator counts to exit for every operator\\n    /// @param _count The count of validators to request exits for\\n    function _pickNextValidatorsToExitFromActiveOperators(uint256 _count) internal {\\n        (OperatorsV2.CachedOperator[] memory operators, uint256 exitableOperatorCount) = OperatorsV2.getAllExitable();\\n        uint32[] storage stoppedValidators = OperatorsV2.getStoppedValidators();\\n\\n        if (exitableOperatorCount == 0) {\\n            return;\\n        }\\n\\n        uint256 totalRequestedExitsValue = TotalRequestedExits.get();\\n        uint256 totalRequestedExitsCopy = totalRequestedExitsValue;\\n\\n        for (uint256 idx = 0; idx < exitableOperatorCount;) {\\n            uint32 currentRequestedExits = operators[idx].requestedExits;\\n            uint32 currentStoppedCount = _getStoppedValidatorsCountFromRawArray(stoppedValidators, idx);\\n\\n            if (currentRequestedExits < currentStoppedCount) {\\n                emit UpdatedRequestedValidatorExitsUponStopped(\\n                    operators[idx].index, currentRequestedExits, currentStoppedCount\\n                );\\n                operators[idx].picked += currentStoppedCount - currentRequestedExits;\\n                totalRequestedExitsValue += currentStoppedCount - currentRequestedExits;\\n            }\\n\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        // we loop to find the highest count of active validators, the number of operators that have this amount and the second highest amount\\n        while (_count > 0) {\\n            uint32 highestActiveCount = 0;\\n            uint32 secondHighestActiveCount = 0;\\n            uint32 siblings = 0;\\n\\n            for (uint256 idx = 0; idx < exitableOperatorCount;) {\\n                uint32 activeCount = _getActiveValidatorCountForExitRequests(operators[idx]);\\n\\n                if (activeCount == highestActiveCount) {\\n                    ++siblings;\\n                } else if (activeCount > highestActiveCount) {\\n                    secondHighestActiveCount = highestActiveCount;\\n                    highestActiveCount = activeCount;\\n                    siblings = 1;\\n                } else if (activeCount > secondHighestActiveCount) {\\n                    secondHighestActiveCount = activeCount;\\n                }\\n\\n                unchecked {\\n                    ++idx;\\n                }\\n            }\\n\\n            // we exited all validators\\n            if (highestActiveCount == 0 && siblings == exitableOperatorCount) {\\n                break;\\n            }\\n            // The optimal amount is how much we should dispatch to all the operators with the highest count for them to get the same amount\\n            // of active validators as the second highest count. We then take the minimum between this value and the total we need to exit\\n            uint32 optimalTotalDispatchCount =\\n                uint32(LibUint256.min((highestActiveCount - secondHighestActiveCount) * siblings, _count));\\n\\n            // We lookup the operators again to assign the exit requests\\n            uint256 rest = optimalTotalDispatchCount % siblings;\\n            for (uint256 idx = 0; idx < exitableOperatorCount;) {\\n                if (_getActiveValidatorCountForExitRequests(operators[idx]) == highestActiveCount) {\\n                    uint32 additionalRequestedExits = (optimalTotalDispatchCount / siblings) + (rest > 0 ? 1 : 0);\\n                    operators[idx].picked += additionalRequestedExits;\\n                    totalRequestedExitsValue += additionalRequestedExits;\\n                    if (rest > 0) {\\n                        --rest;\\n                    }\\n                }\\n                unchecked {\\n                    ++idx;\\n                }\\n            }\\n\\n            _count -= optimalTotalDispatchCount;\\n        }\\n\\n        // We loop over the operators and apply the change, also emit the exit request event\\n        for (uint256 idx = 0; idx < exitableOperatorCount;) {\\n            if (operators[idx].picked > 0) {\\n                uint32 requestedExits = OperatorsV2.get(operators[idx].index).requestedExits;\\n                OperatorsV2.get(operators[idx].index).requestedExits = requestedExits + operators[idx].picked;\\n                emit RequestedValidatorExits(operators[idx].index, requestedExits + operators[idx].picked);\\n            }\\n\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        if (totalRequestedExitsValue != totalRequestedExitsCopy) {\\n            TotalRequestedExits.set(totalRequestedExitsValue);\\n            emit SetTotalRequestedValidatorExits(totalRequestedExitsCopy, totalRequestedExitsValue);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fdce0ba3605f813d0ded6b4b596ae70ec988694b45e5a6c19ff852919508524\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Administrable Interface\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the ownership of the contracts\\ninterface IAdministrable {\\n    /// @notice The pending admin address changed\\n    /// @param pendingAdmin New pending admin address\\n    event SetPendingAdmin(address indexed pendingAdmin);\\n\\n    /// @notice The admin address changed\\n    /// @param admin New admin address\\n    event SetAdmin(address indexed admin);\\n\\n    /// @notice Retrieves the current admin address\\n    /// @return The admin address\\n    function getAdmin() external view returns (address);\\n\\n    /// @notice Retrieve the current pending admin address\\n    /// @return The pending admin address\\n    function getPendingAdmin() external view returns (address);\\n\\n    /// @notice Proposes a new address as admin\\n    /// @dev This security prevents setting an invalid address as an admin. The pending\\n    /// @dev admin has to claim its ownership of the contract, and prove that the new\\n    /// @dev address is able to perform regular transactions.\\n    /// @param _newAdmin New admin address\\n    function proposeAdmin(address _newAdmin) external;\\n\\n    /// @notice Accept the transfer of ownership\\n    /// @dev Only callable by the pending admin. Resets the pending admin if succesful.\\n    function acceptAdmin() external;\\n}\\n\",\"keccak256\":\"0xe45ef81bf9326bac437dcf901eeb80628d5c87d51dcbcf3addb80e834ba7bfea\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IOperatorRegistry.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/operatorsRegistry/Operators.2.sol\\\";\\n\\n/// @title Operators Registry Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the list of operators and their keys\\ninterface IOperatorsRegistryV1 {\\n    /// @notice A new operator has been added to the registry\\n    /// @param index The operator index\\n    /// @param name The operator display name\\n    /// @param operatorAddress The operator address\\n    event AddedOperator(uint256 indexed index, string name, address indexed operatorAddress);\\n\\n    /// @notice The operator status has been changed\\n    /// @param index The operator index\\n    /// @param active True if the operator is active\\n    event SetOperatorStatus(uint256 indexed index, bool active);\\n\\n    /// @notice The operator limit has been changed\\n    /// @param index The operator index\\n    /// @param newLimit The new operator staking limit\\n    event SetOperatorLimit(uint256 indexed index, uint256 newLimit);\\n\\n    /// @notice The operator stopped validator count has been changed\\n    /// @param index The operator index\\n    /// @param newStoppedValidatorCount The new stopped validator count\\n    event SetOperatorStoppedValidatorCount(uint256 indexed index, uint256 newStoppedValidatorCount);\\n\\n    /// @notice The operator address has been changed\\n    /// @param index The operator index\\n    /// @param newOperatorAddress The new operator address\\n    event SetOperatorAddress(uint256 indexed index, address indexed newOperatorAddress);\\n\\n    /// @notice The operator display name has been changed\\n    /// @param index The operator index\\n    /// @param newName The new display name\\n    event SetOperatorName(uint256 indexed index, string newName);\\n\\n    /// @notice The operator or the admin added new validator keys and signatures\\n    /// @dev The public keys and signatures are concatenated\\n    /// @dev A public key is 48 bytes long\\n    /// @dev A signature is 96 bytes long\\n    /// @dev [P1, S1, P2, S2, ..., PN, SN] where N is the bytes length divided by (96 + 48)\\n    /// @param index The operator index\\n    /// @param publicKeysAndSignatures The concatenated public keys and signatures\\n    event AddedValidatorKeys(uint256 indexed index, bytes publicKeysAndSignatures);\\n\\n    /// @notice The operator or the admin removed a public key and its signature from the registry\\n    /// @param index The operator index\\n    /// @param publicKey The BLS public key that has been removed\\n    event RemovedValidatorKey(uint256 indexed index, bytes publicKey);\\n\\n    /// @notice The stored river address has been changed\\n    /// @param river The new river address\\n    event SetRiver(address indexed river);\\n\\n    /// @notice The operator edited its keys after the snapshot block\\n    /// @dev This means that we cannot assume that its key set is checked by the snapshot\\n    /// @dev This happens only if the limit was meant to be increased\\n    /// @param index The operator index\\n    /// @param currentLimit The current operator limit\\n    /// @param newLimit The new operator limit that was attempted to be set\\n    /// @param latestKeysEditBlockNumber The last block number at which the operator changed its keys\\n    /// @param snapshotBlock The block number of the snapshot\\n    event OperatorEditsAfterSnapshot(\\n        uint256 indexed index,\\n        uint256 currentLimit,\\n        uint256 newLimit,\\n        uint256 indexed latestKeysEditBlockNumber,\\n        uint256 indexed snapshotBlock\\n    );\\n\\n    /// @notice The call didn't alter the limit of the operator\\n    /// @param index The operator index\\n    /// @param limit The limit of the operator\\n    event OperatorLimitUnchanged(uint256 indexed index, uint256 limit);\\n\\n    /// @notice The stopped validator array has been changed\\n    /// @notice A validator is considered stopped if exiting, exited or slashed\\n    /// @notice This event is emitted when the oracle reports new stopped validators counts\\n    /// @param stoppedValidatorCounts The new stopped validator counts\\n    event UpdatedStoppedValidators(uint32[] stoppedValidatorCounts);\\n\\n    /// @notice The requested exit count has been updated\\n    /// @param index The operator index\\n    /// @param count The count of requested exits\\n    event RequestedValidatorExits(uint256 indexed index, uint256 count);\\n\\n    /// @notice A validator key got funded on the deposit contract\\n    /// @notice This event was introduced during a contract upgrade, in order to cover all possible public keys, this event\\n    /// @notice will be replayed for past funded keys in order to have a complete coverage of all the funded public keys.\\n    /// @notice In this particuliar scenario, the deferred value will be set to true, to indicate that we are not going to have\\n    /// @notice the expected additional events and side effects in the same transaction (deposit to official DepositContract etc ...) because\\n    /// @notice the event was synthetically crafted.\\n    /// @param index The operator index\\n    /// @param publicKeys BLS Public key that got funded\\n    /// @param deferred True if event has been replayed in the context of a migration\\n    event FundedValidatorKeys(uint256 indexed index, bytes[] publicKeys, bool deferred);\\n\\n    /// @notice The requested exit count has been update to fill the gap with the reported stopped count\\n    /// @param index The operator index\\n    /// @param oldRequestedExits The old requested exit count\\n    /// @param newRequestedExits The new requested exit count\\n    event UpdatedRequestedValidatorExitsUponStopped(\\n        uint256 indexed index, uint32 oldRequestedExits, uint32 newRequestedExits\\n    );\\n\\n    /// @notice The total requested exit has been updated\\n    /// @param previousTotalRequestedValidatorExits The old total requested exit value\\n    /// @param newTotalRequestedValidatorExits The new total requested exit value\\n    event SetTotalRequestedValidatorExits(\\n        uint256 previousTotalRequestedValidatorExits, uint256 newTotalRequestedValidatorExits\\n    );\\n\\n    /// @notice The calling operator is inactive\\n    /// @param index The operator index\\n    error InactiveOperator(uint256 index);\\n\\n    /// @notice A funded key deletion has been attempted\\n    error InvalidFundedKeyDeletionAttempt();\\n\\n    /// @notice The index provided are not sorted properly (descending order)\\n    error InvalidUnsortedIndexes();\\n\\n    /// @notice The provided operator and limits array have different lengths\\n    error InvalidArrayLengths();\\n\\n    /// @notice The provided operator and limits array are empty\\n    error InvalidEmptyArray();\\n\\n    /// @notice The provided key count is 0\\n    error InvalidKeyCount();\\n\\n    /// @notice The provided concatenated keys do not have the expected length\\n    error InvalidKeysLength();\\n\\n    /// @notice The index that is removed is out of bounds\\n    error InvalidIndexOutOfBounds();\\n\\n    /// @notice The value for the operator limit is too high\\n    /// @param index The operator index\\n    /// @param limit The new limit provided\\n    /// @param keyCount The operator key count\\n    error OperatorLimitTooHigh(uint256 index, uint256 limit, uint256 keyCount);\\n\\n    /// @notice The value for the limit is too low\\n    /// @param index The operator index\\n    /// @param limit The new limit provided\\n    /// @param fundedKeyCount The operator funded key count\\n    error OperatorLimitTooLow(uint256 index, uint256 limit, uint256 fundedKeyCount);\\n\\n    /// @notice The provided list of operators is not in increasing order\\n    error UnorderedOperatorList();\\n\\n    /// @notice Thrown when an invalid empty stopped validator array is provided\\n    error InvalidEmptyStoppedValidatorCountsArray();\\n\\n    /// @notice Thrown when the sum of stopped validators is invalid\\n    error InvalidStoppedValidatorCountsSum();\\n\\n    /// @notice Thrown when the number of elements in the array is too high compared to operator count\\n    error StoppedValidatorCountsTooHigh();\\n\\n    /// @notice Initializes the operators registry\\n    /// @param _admin Admin in charge of managing operators\\n    /// @param _river Address of River system\\n    function initOperatorsRegistryV1(address _admin, address _river) external;\\n\\n    /// @notice Initializes the operators registry for V1_1\\n    function initOperatorsRegistryV1_1() external;\\n\\n    /// @notice Retrieve the River address\\n    /// @return The address of River\\n    function getRiver() external view returns (address);\\n\\n    /// @notice Get operator details\\n    /// @param _index The index of the operator\\n    /// @return The details of the operator\\n    function getOperator(uint256 _index) external view returns (OperatorsV2.Operator memory);\\n\\n    /// @notice Get operator count\\n    /// @return The operator count\\n    function getOperatorCount() external view returns (uint256);\\n\\n    /// @notice Retrieve the stopped validator count for an operator index\\n    /// @param _idx The index of the operator\\n    /// @return The stopped validator count of the operator\\n    function getOperatorStoppedValidatorCount(uint256 _idx) external view returns (uint32);\\n\\n    /// @notice Retrieve the total stopped validator count\\n    /// @return The total stopped validator count\\n    function getTotalStoppedValidatorCount() external view returns (uint32);\\n\\n    /// @notice Retrieve the total requested exit count\\n    /// @return The total requested exit count\\n    function getTotalRequestedValidatorExitsCount() external view returns (uint256);\\n\\n    /// @notice Retrieve the raw stopped validators array from storage\\n    /// @return The stopped validator array\\n    function getStoppedValidatorCountPerOperator() external view returns (uint32[] memory);\\n\\n    /// @notice Get the details of a validator\\n    /// @param _operatorIndex The index of the operator\\n    /// @param _validatorIndex The index of the validator\\n    /// @return publicKey The public key of the validator\\n    /// @return signature The signature used during deposit\\n    /// @return funded True if validator has been funded\\n    function getValidator(uint256 _operatorIndex, uint256 _validatorIndex)\\n        external\\n        view\\n        returns (bytes memory publicKey, bytes memory signature, bool funded);\\n\\n    /// @notice Retrieve the active operator set\\n    /// @return The list of active operators and their details\\n    function listActiveOperators() external view returns (OperatorsV2.Operator[] memory);\\n\\n    /// @notice Allows river to override the stopped validators array\\n    /// @notice This actions happens during the Oracle report processing\\n    /// @param stoppedValidatorCounts The new stopped validators array\\n    function reportStoppedValidatorCounts(uint32[] calldata stoppedValidatorCounts) external;\\n\\n    /// @notice Adds an operator to the registry\\n    /// @dev Only callable by the administrator\\n    /// @param _name The name identifying the operator\\n    /// @param _operator The address representing the operator, receiving the rewards\\n    /// @return The index of the new operator\\n    function addOperator(string calldata _name, address _operator) external returns (uint256);\\n\\n    /// @notice Changes the operator address of an operator\\n    /// @dev Only callable by the administrator or the previous operator address\\n    /// @param _index The operator index\\n    /// @param _newOperatorAddress The new address of the operator\\n    function setOperatorAddress(uint256 _index, address _newOperatorAddress) external;\\n\\n    /// @notice Changes the operator name\\n    /// @dev Only callable by the administrator or the operator\\n    /// @param _index The operator index\\n    /// @param _newName The new operator name\\n    function setOperatorName(uint256 _index, string calldata _newName) external;\\n\\n    /// @notice Changes the operator status\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStatus The new status of the operator\\n    function setOperatorStatus(uint256 _index, bool _newStatus) external;\\n\\n    /// @notice Changes the operator staking limit\\n    /// @dev Only callable by the administrator\\n    /// @dev The operator indexes must be in increasing order and contain no duplicate\\n    /// @dev The limit cannot exceed the total key count of the operator\\n    /// @dev The _indexes and _newLimits must have the same length.\\n    /// @dev Each limit value is applied to the operator index at the same index in the _indexes array.\\n    /// @param _operatorIndexes The operator indexes, in increasing order and duplicate free\\n    /// @param _newLimits The new staking limit of the operators\\n    /// @param _snapshotBlock The block number at which the snapshot was computed\\n    function setOperatorLimits(\\n        uint256[] calldata _operatorIndexes,\\n        uint32[] calldata _newLimits,\\n        uint256 _snapshotBlock\\n    ) external;\\n\\n    /// @notice Adds new keys for an operator\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @param _index The operator index\\n    /// @param _keyCount The amount of keys provided\\n    /// @param _publicKeysAndSignatures Public keys of the validator, concatenated\\n    function addValidators(uint256 _index, uint32 _keyCount, bytes calldata _publicKeysAndSignatures) external;\\n\\n    /// @notice Remove validator keys\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @dev The indexes must be provided sorted in decreasing order and duplicate-free, otherwise the method will revert\\n    /// @dev The operator limit will be set to the lowest deleted key index if the operator's limit wasn't equal to its total key count\\n    /// @dev The operator or the admin cannot remove funded keys\\n    /// @dev When removing validators, the indexes of specific unfunded keys can be changed in order to properly\\n    /// @dev remove the keys from the storage array. Beware of this specific behavior when chaining calls as the\\n    /// @dev targeted public key indexes can point to a different key after a first call was made and performed\\n    /// @dev some swaps\\n    /// @param _index The operator index\\n    /// @param _indexes The indexes of the keys to remove\\n    function removeValidators(uint256 _index, uint256[] calldata _indexes) external;\\n\\n    /// @notice Retrieve validator keys based on operator statuses\\n    /// @param _count Max amount of keys requested\\n    /// @return publicKeys An array of public keys\\n    /// @return signatures An array of signatures linked to the public keys\\n    function pickNextValidatorsToDeposit(uint256 _count)\\n        external\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n\\n    /// @notice Emits events for operators to exit validators\\n    /// @param _count Max amount of exits to request\\n    function pickNextValidatorsToExit(uint256 _count) external;\\n}\\n\",\"keccak256\":\"0xef6aea12e86f459d0d38fb5bebc61c34e5ccfe25eac7631ae2629803a9086e30\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\nimport \\\"../state/shared/PendingAdministratorAddress.sol\\\";\\n\\n/// @title Lib Administrable\\n/// @author Kiln\\n/// @notice This library handles the admin and pending admin storage vars\\nlibrary LibAdministrable {\\n    /// @notice Retrieve the system admin\\n    /// @return The address of the system admin\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n\\n    /// @notice Retrieve the pending system admin\\n    /// @return The adress of the pending system admin\\n    function _getPendingAdmin() internal view returns (address) {\\n        return PendingAdministratorAddress.get();\\n    }\\n\\n    /// @notice Sets the system admin\\n    /// @param _admin New system admin\\n    function _setAdmin(address _admin) internal {\\n        AdministratorAddress.set(_admin);\\n    }\\n\\n    /// @notice Sets the pending system admin\\n    /// @param _pendingAdmin New pending system admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        PendingAdministratorAddress.set(_pendingAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0xbe4cec02aff69406624f3ab71a19948997aaf74f63e171137f2f3b85bdb7bc3a\",\"license\":\"MIT\"},\"contracts/src/libraries/LibBasisPoints.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Lib Basis Points\\n/// @notice Holds the basis points max value\\nlibrary LibBasisPoints {\\n    /// @notice The max value for basis points (represents 100%)\\n    uint256 internal constant BASIS_POINTS_MAX = 10_000;\\n}\\n\",\"keccak256\":\"0x97228a01dcd48f033555e3a44f9be37fb474a1b027f703f28097d539808f1c6c\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibBytes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Bytes\\n/// @notice This library helps manipulating bytes\\nlibrary LibBytes {\\n    /// @notice The length overflows an uint\\n    error SliceOverflow();\\n\\n    /// @notice The slice is outside of the initial bytes bounds\\n    error SliceOutOfBounds();\\n\\n    /// @notice Slices the provided bytes\\n    /// @param _bytes Bytes to slice\\n    /// @param _start The starting index of the slice\\n    /// @param _length The length of the slice\\n    /// @return The slice of _bytes starting at _start of length _length\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\n        unchecked {\\n            if (_length + 31 < _length) {\\n                revert SliceOverflow();\\n            }\\n        }\\n        if (_bytes.length < _start + _length) {\\n            revert SliceOutOfBounds();\\n        }\\n\\n        bytes memory tempBytes;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } { mstore(mc, mload(cc)) }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xbcc2d6e851fd5e66e5661856fa089fadd69150c75e07978d89faf6ea8d867234\",\"license\":\"MIT\"},\"contracts/src/libraries/LibErrors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Errors\\n/// @notice Library of common errors\\nlibrary LibErrors {\\n    /// @notice The operator is unauthorized for the caller\\n    /// @param caller Address performing the call\\n    error Unauthorized(address caller);\\n\\n    /// @notice The call was invalid\\n    error InvalidCall();\\n\\n    /// @notice The argument was invalid\\n    error InvalidArgument();\\n\\n    /// @notice The address is zero\\n    error InvalidZeroAddress();\\n\\n    /// @notice The string is empty\\n    error InvalidEmptyString();\\n\\n    /// @notice The fee is invalid\\n    error InvalidFee();\\n}\\n\",\"keccak256\":\"0x7bdbd4ada124723fa08e2088405ba0bf4453beb23d84f4af09e894e06e751f33\",\"license\":\"MIT\"},\"contracts/src/libraries/LibSanitize.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./LibErrors.sol\\\";\\nimport \\\"./LibBasisPoints.sol\\\";\\n\\n/// @title Lib Sanitize\\n/// @notice Utilities to sanitize input values\\nlibrary LibSanitize {\\n    /// @notice Reverts if address is 0\\n    /// @param _address Address to check\\n    function _notZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert LibErrors.InvalidZeroAddress();\\n        }\\n    }\\n\\n    /// @notice Reverts if string is empty\\n    /// @param _string String to check\\n    function _notEmptyString(string memory _string) internal pure {\\n        if (bytes(_string).length == 0) {\\n            revert LibErrors.InvalidEmptyString();\\n        }\\n    }\\n\\n    /// @notice Reverts if fee is invalid\\n    /// @param _fee Fee to check\\n    function _validFee(uint256 _fee) internal pure {\\n        if (_fee > LibBasisPoints.BASIS_POINTS_MAX) {\\n            revert LibErrors.InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8aeeb866c4657a96c8b4c006340c7996d15a6f0044b730c276bc3ba8d5bcd48\",\"license\":\"MIT\"},\"contracts/src/libraries/LibUint256.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Uint256\\n/// @notice Utilities to perform uint operations\\nlibrary LibUint256 {\\n    /// @notice Converts a value to little endian (64 bits)\\n    /// @param _value The value to convert\\n    /// @return result The converted value\\n    function toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n        result = 0;\\n        uint256 tempValue = _value;\\n        result = tempValue & 0xFF;\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        assert(0 == tempValue); // fully converted\\n        result <<= (24 * 8);\\n    }\\n\\n    /// @notice Returns the minimum value\\n    /// @param _a First value\\n    /// @param _b Second value\\n    /// @return Smallest value between _a and _b\\n    function min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a > _b ? _b : _a);\\n    }\\n\\n    /// @notice Returns the max value\\n    /// @param _a First value\\n    /// @param _b Second value\\n    /// @return Highest value between _a and _b\\n    function max(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a < _b ? _b : _a);\\n    }\\n\\n    /// @notice Performs a ceiled division\\n    /// @param _a Numerator\\n    /// @param _b Denominator\\n    /// @return ceil(_a / _b)\\n    function ceil(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a / _b) + (_a % _b > 0 ? 1 : 0);\\n    }\\n}\\n\",\"keccak256\":\"0xdf3adb82d2cb4392cc687c910fb1874e148d29fdf2f3a187213d349a0f95e399\",\"license\":\"MIT\"},\"contracts/src/libraries/LibUnstructuredStorage.sol\":{\"content\":\"// SPDX-License-Identifier:    MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @title Lib Unstructured Storage\\n/// @notice Utilities to work with unstructured storage\\nlibrary LibUnstructuredStorage {\\n    /// @notice Retrieve a bool value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bool value\\n    function getStorageBool(bytes32 _position) internal view returns (bool data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an address value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The address value\\n    function getStorageAddress(bytes32 _position) internal view returns (address data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve a bytes32 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bytes32 value\\n    function getStorageBytes32(bytes32 _position) internal view returns (bytes32 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an uint256 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The uint256 value\\n    function getStorageUint256(bytes32 _position) internal view returns (uint256 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Sets a bool value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bool value to set\\n    function setStorageBool(bytes32 _position, bool _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an address value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The address value to set\\n    function setStorageAddress(bytes32 _position, address _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets a bytes32 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bytes32 value to set\\n    function setStorageBytes32(bytes32 _position, bytes32 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an uint256 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The uint256 value to set\\n    function setStorageUint256(bytes32 _position, uint256 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8e1a2f0dc18e023e12747355b3c95258d4de698f2bb6196222a1dc92940caa3\",\"license\":\"MIT\"},\"contracts/src/state/migration/OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\nlibrary OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex {\\n    bytes32 internal constant KEY_INDEX_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.migration.operatorsRegistry.fundedKeyEventRebroadcasting.keyIndex\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(KEY_INDEX_SLOT);\\n    }\\n\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(KEY_INDEX_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x5dd8e4abae6ae2170de75b21539ba48f8ddc039dc02be8855e1ced50b32cfffb\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/migration/OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\nlibrary OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex {\\n    bytes32 internal constant OPERATOR_INDEX_SLOT = bytes32(\\n        uint256(keccak256(\\\"river.state.migration.operatorsRegistry.fundedKeyEventRebroadcasting.operatorIndex\\\")) - 1\\n    );\\n\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(OPERATOR_INDEX_SLOT);\\n    }\\n\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(OPERATOR_INDEX_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x7f1474e3a9f55131d23c47970f469be0778772d45fba5a25d7c02b122466389b\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/operatorsRegistry/Operators.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Operators Storage\\n/// @notice Utility to manage the Operators in storage\\nlibrary OperatorsV1 {\\n    /// @notice Storage slot of the Operators\\n    bytes32 internal constant OPERATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.operators\\\")) - 1);\\n\\n    /// @notice The Operator structure in storage\\n    struct Operator {\\n        /// @custom:attribute True if the operator is active and allowed to operate on River\\n        bool active;\\n        /// @custom:attribute Display name of the operator\\n        string name;\\n        /// @custom:attribute Address of the operator\\n        address operator;\\n        /// @dev The following values respect this invariant:\\n        /// @dev     keys >= limit >= funded >= stopped\\n\\n        /// @custom:attribute Staking limit of the operator\\n        uint256 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint256 funded;\\n        /// @custom:attribute The total count of keys of the operator\\n        uint256 keys;\\n        /// @custom:attribute The count of stopped validators. Stopped validators are validators\\n        ///                   that exited the consensus layer (voluntary or slashed)\\n        uint256 stopped;\\n        uint256 latestKeysEditBlockNumber;\\n    }\\n\\n    /// @notice The Operator structure when loaded in memory\\n    struct CachedOperator {\\n        /// @custom:attribute True if the operator is active and allowed to operate on River\\n        bool active;\\n        /// @custom:attribute Display name of the operator\\n        string name;\\n        /// @custom:attribute Address of the operator\\n        address operator;\\n        /// @custom:attribute Staking limit of the operator\\n        uint256 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint256 funded;\\n        /// @custom:attribute The total count of keys of the operator\\n        uint256 keys;\\n        /// @custom:attribute The count of stopped validators\\n        uint256 stopped;\\n        /// @custom:attribute The count of stopped validators. Stopped validators are validators\\n        ///                   that exited the consensus layer (voluntary or slashed)\\n        uint256 index;\\n        /// @custom:attribute The amount of picked keys, buffer used before changing funded in storage\\n        uint256 picked;\\n    }\\n\\n    /// @notice The structure at the storage slot\\n    struct SlotOperator {\\n        /// @custom:attribute Array containing all the operators\\n        Operator[] value;\\n    }\\n\\n    /// @notice The operator was not found\\n    /// @param index The provided index\\n    error OperatorNotFound(uint256 index);\\n\\n    /// @notice Retrieve the operator in storage\\n    /// @param _index The index of the operator\\n    /// @return The Operator structure\\n    function get(uint256 _index) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (r.value.length <= _index) {\\n            revert OperatorNotFound(_index);\\n        }\\n\\n        return r.value[_index];\\n    }\\n\\n    /// @notice Retrieve the operator count in storage\\n    /// @return The count of operators in storage\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Retrieve all the active operators\\n    /// @return The list of active operator structures\\n    function getAllActive() internal view returns (Operator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        Operator[] memory activeOperators = new Operator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                activeOperators[activeIdx] = r.value[idx];\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    /// @notice Retrieve all the active and fundable operators\\n    /// @return The list of active and fundable operators\\n    function getAllFundable() internal view returns (CachedOperator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (_hasFundableKeys(r.value[idx])) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        CachedOperator[] memory activeOperators = new CachedOperator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            Operator memory op = r.value[idx];\\n            if (_hasFundableKeys(op)) {\\n                activeOperators[activeIdx] = CachedOperator({\\n                    active: op.active,\\n                    name: op.name,\\n                    operator: op.operator,\\n                    limit: op.limit,\\n                    funded: op.funded,\\n                    keys: op.keys,\\n                    stopped: op.stopped,\\n                    index: idx,\\n                    picked: 0\\n                });\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    /// @notice Add a new operator in storage\\n    /// @param _newOperator Value of the new operator\\n    /// @return The size of the operator array after the operation\\n    function push(Operator memory _newOperator) internal returns (uint256) {\\n        LibSanitize._notZeroAddress(_newOperator.operator);\\n        LibSanitize._notEmptyString(_newOperator.name);\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_newOperator);\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Atomic operation to set the key count and update the latestKeysEditBlockNumber field at the same time\\n    /// @param _index The operator index\\n    /// @param _newKeys The new value for the key count\\n    function setKeys(uint256 _index, uint256 _newKeys) internal {\\n        Operator storage op = get(_index);\\n\\n        op.keys = _newKeys;\\n        op.latestKeysEditBlockNumber = block.number;\\n    }\\n\\n    /// @notice Checks if an operator is active and has fundable keys\\n    /// @param _operator The operator details\\n    /// @return True if active and fundable\\n    function _hasFundableKeys(OperatorsV1.Operator memory _operator) internal pure returns (bool) {\\n        return (_operator.active && _operator.limit > _operator.funded);\\n    }\\n}\\n\",\"keccak256\":\"0x356785d0220d93fac1ae34f7770823d97049ec1ac1ec1c054c2ab6126af0f0a0\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/operatorsRegistry/Operators.2.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Operators Storage\\n/// @notice Utility to manage the Operators in storage\\nlibrary OperatorsV2 {\\n    /// @notice Storage slot of the Operators\\n    bytes32 internal constant OPERATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.v2.operators\\\")) - 1);\\n\\n    /// @notice The Operator structure in storage\\n    struct Operator {\\n        /// @dev The following values respect this invariant:\\n        /// @dev     keys >= limit >= funded >= RequestedExits\\n\\n        /// @custom:attribute Staking limit of the operator\\n        uint32 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint32 funded;\\n        /// @custom:attribute The count of exit requests made to this operator\\n        uint32 requestedExits;\\n        /// @custom:attribute The total count of keys of the operator\\n        uint32 keys;\\n        /// @custom attribute The block at which the last edit happened in the operator details\\n        uint64 latestKeysEditBlockNumber;\\n        /// @custom:attribute True if the operator is active and allowed to operate on River\\n        bool active;\\n        /// @custom:attribute Display name of the operator\\n        string name;\\n        /// @custom:attribute Address of the operator\\n        address operator;\\n    }\\n\\n    /// @notice The Operator structure when loaded in memory\\n    struct CachedOperator {\\n        /// @custom:attribute Staking limit of the operator\\n        uint32 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint32 funded;\\n        /// @custom:attribute The count of exit requests made to this operator\\n        uint32 requestedExits;\\n        /// @custom:attribute The original index of the operator\\n        uint32 index;\\n        /// @custom:attribute The amount of picked keys, buffer used before changing funded in storage\\n        uint32 picked;\\n    }\\n\\n    /// @notice The structure at the storage slot\\n    struct SlotOperator {\\n        /// @custom:attribute Array containing all the operators\\n        Operator[] value;\\n    }\\n\\n    /// @notice The operator was not found\\n    /// @param index The provided index\\n    error OperatorNotFound(uint256 index);\\n\\n    /// @notice Retrieve the operator in storage\\n    /// @param _index The index of the operator\\n    /// @return The Operator structure\\n    function get(uint256 _index) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (r.value.length <= _index) {\\n            revert OperatorNotFound(_index);\\n        }\\n\\n        return r.value[_index];\\n    }\\n\\n    /// @notice Retrieve the operator count in storage\\n    /// @return The count of operators in storage\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Retrieve all the active operators\\n    /// @return The list of active operator structures\\n    function getAllActive() internal view returns (Operator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        Operator[] memory activeOperators = new Operator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                activeOperators[activeIdx] = r.value[idx];\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    /// @notice Retrieve the stopped validator count for an operator by its index\\n    /// @param stoppedValidatorCounts The storage pointer to the raw array containing the stopped validator counts\\n    /// @param index The index of the operator to lookup\\n    /// @return The amount of stopped validators for the given operator index\\n    function _getStoppedValidatorCountAtIndex(uint32[] storage stoppedValidatorCounts, uint256 index)\\n        internal\\n        view\\n        returns (uint32)\\n    {\\n        if (index + 1 >= stoppedValidatorCounts.length) {\\n            return 0;\\n        }\\n        return stoppedValidatorCounts[index + 1];\\n    }\\n\\n    /// @notice Retrieve all the active and fundable operators\\n    /// @dev This method will return a memory array of length equal to the number of operator, but only\\n    /// @dev populated up to the fundable operator count, also returned by the method\\n    /// @return The list of active and fundable operators\\n    /// @return The count of active and fundable operators\\n    function getAllFundable() internal view returns (CachedOperator[] memory, uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 fundableCount = 0;\\n        uint256 operatorCount = r.value.length;\\n        CachedOperator[] memory fundableOperators = new CachedOperator[](operatorCount);\\n\\n        uint32[] storage stoppedValidatorCounts = getStoppedValidators();\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (\\n                _hasFundableKeys(r.value[idx])\\n                    && _getStoppedValidatorCountAtIndex(stoppedValidatorCounts, idx) >= r.value[idx].requestedExits\\n            ) {\\n                Operator storage op = r.value[idx];\\n                fundableOperators[fundableCount] = CachedOperator({\\n                    limit: op.limit,\\n                    funded: op.funded,\\n                    requestedExits: op.requestedExits,\\n                    index: uint32(idx),\\n                    picked: 0\\n                });\\n                unchecked {\\n                    ++fundableCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return (fundableOperators, fundableCount);\\n    }\\n\\n    /// @notice Retrieve all the active and exitable operators\\n    /// @dev This method will return a memory array of length equal to the number of operator, but only\\n    /// @dev populated up to the exitable operator count, also returned by the method\\n    /// @return The list of active and exitable operators\\n    /// @return The count of active and exitable operators\\n    function getAllExitable() internal view returns (CachedOperator[] memory, uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 exitableCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        CachedOperator[] memory exitableOperators = new CachedOperator[](operatorCount);\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (_hasExitableKeys(r.value[idx])) {\\n                Operator storage op = r.value[idx];\\n                exitableOperators[exitableCount] = CachedOperator({\\n                    limit: op.limit,\\n                    funded: op.funded,\\n                    requestedExits: op.requestedExits,\\n                    index: uint32(idx),\\n                    picked: 0\\n                });\\n                unchecked {\\n                    ++exitableCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return (exitableOperators, exitableCount);\\n    }\\n\\n    /// @notice Add a new operator in storage\\n    /// @param _newOperator Value of the new operator\\n    /// @return The size of the operator array after the operation\\n    function push(Operator memory _newOperator) internal returns (uint256) {\\n        LibSanitize._notZeroAddress(_newOperator.operator);\\n        LibSanitize._notEmptyString(_newOperator.name);\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_newOperator);\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Atomic operation to set the key count and update the latestKeysEditBlockNumber field at the same time\\n    /// @param _index The operator index\\n    /// @param _newKeys The new value for the key count\\n    function setKeys(uint256 _index, uint32 _newKeys) internal {\\n        Operator storage op = get(_index);\\n\\n        op.keys = _newKeys;\\n        op.latestKeysEditBlockNumber = uint64(block.number);\\n    }\\n\\n    /// @notice Checks if an operator is active and has fundable keys\\n    /// @param _operator The operator details\\n    /// @return True if active and fundable\\n    function _hasFundableKeys(OperatorsV2.Operator memory _operator) internal pure returns (bool) {\\n        return (_operator.active && _operator.limit > _operator.funded);\\n    }\\n\\n    /// @notice Checks if an operator is active and has exitable keys\\n    /// @param _operator The operator details\\n    /// @return True if active and exitable\\n    function _hasExitableKeys(OperatorsV2.Operator memory _operator) internal pure returns (bool) {\\n        return (_operator.active && _operator.funded > _operator.requestedExits);\\n    }\\n\\n    /// @notice Storage slot of the Stopped Validators\\n    bytes32 internal constant STOPPED_VALIDATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.stoppedValidators\\\")) - 1);\\n\\n    struct SlotStoppedValidators {\\n        uint32[] value;\\n    }\\n\\n    /// @notice Retrieve the storage pointer of the Stopped Validators array\\n    /// @return The Stopped Validators storage pointer\\n    function getStoppedValidators() internal view returns (uint32[] storage) {\\n        bytes32 slot = STOPPED_VALIDATORS_SLOT;\\n\\n        SlotStoppedValidators storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Sets the entire stopped validators array\\n    /// @param value The new stopped validators array\\n    function setRawStoppedValidators(uint32[] memory value) internal {\\n        bytes32 slot = STOPPED_VALIDATORS_SLOT;\\n\\n        SlotStoppedValidators storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = value;\\n    }\\n}\\n\",\"keccak256\":\"0xbc4b731918c997d20276a382f184be007a9222c93c30d671f4c330b660690e16\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/operatorsRegistry/TotalRequestedExits.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title TotalRequestedExits Storage\\n/// @notice Utility to manage the TotalRequestedExits in storage\\nlibrary TotalRequestedExits {\\n    /// @notice Storage slot of the TotalRequestedExits\\n    bytes32 internal constant TOTAL_REQUESTED_EXITS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.TotalRequestedExits\\\")) - 1);\\n\\n    /// @notice Retrieve the TotalRequestedExits\\n    /// @return The TotalRequestedExits\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(TOTAL_REQUESTED_EXITS_SLOT);\\n    }\\n\\n    /// @notice Sets the TotalRequestedExits\\n    /// @param _newValue New TotalRequestedExits\\n    function set(uint256 _newValue) internal {\\n        return LibUnstructuredStorage.setStorageUint256(TOTAL_REQUESTED_EXITS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xb0367a6df64bb7c6b3ddef2893509f176694916807d69c9e57d87ee438b5cb30\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/operatorsRegistry/ValidatorKeys.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibBytes.sol\\\";\\n\\n/// @title Validator Keys Storage\\n/// @notice Utility to manage the validator keys in storage\\nlibrary ValidatorKeys {\\n    /// @notice Storage slot of the Validator Keys\\n    bytes32 internal constant VALIDATOR_KEYS_SLOT = bytes32(uint256(keccak256(\\\"river.state.validatorKeys\\\")) - 1);\\n\\n    /// @notice Length in bytes of a BLS Public Key used for validator deposits\\n    uint256 internal constant PUBLIC_KEY_LENGTH = 48;\\n\\n    /// @notice Length in bytes of a BLS Signature used for validator deposits\\n    uint256 internal constant SIGNATURE_LENGTH = 96;\\n\\n    /// @notice The provided public key is not matching the expected length\\n    error InvalidPublicKey();\\n\\n    /// @notice The provided signature is not matching the expected length\\n    error InvalidSignature();\\n\\n    /// @notice Structure of the Validator Keys in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from operator index to key index to key value\\n        mapping(uint256 => mapping(uint256 => bytes)) value;\\n    }\\n\\n    /// @notice Retrieve the Validator Key of an operator at a specific index\\n    /// @param _operatorIndex The operator index\\n    /// @param _idx the Validator Key index\\n    /// @return publicKey The Validator Key public key\\n    /// @return signature The Validator Key signature\\n    function get(uint256 _operatorIndex, uint256 _idx)\\n        internal\\n        view\\n        returns (bytes memory publicKey, bytes memory signature)\\n    {\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        bytes storage entry = r.value[_operatorIndex][_idx];\\n\\n        publicKey = LibBytes.slice(entry, 0, PUBLIC_KEY_LENGTH);\\n        signature = LibBytes.slice(entry, PUBLIC_KEY_LENGTH, SIGNATURE_LENGTH);\\n    }\\n\\n    /// @notice Retrieve the raw concatenated Validator Keys\\n    /// @param _operatorIndex The operator index\\n    /// @param _idx The Validator Key index\\n    /// @return The concatenated public key and signature\\n    function getRaw(uint256 _operatorIndex, uint256 _idx) internal view returns (bytes memory) {\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_operatorIndex][_idx];\\n    }\\n\\n    /// @notice Retrieve multiple keys of an operator starting at an index\\n    /// @param _operatorIndex The operator index\\n    /// @param _startIdx The starting index to retrieve the keys from\\n    /// @param _amount The amount of keys to retrieve\\n    /// @return publicKeys The public keys retrieved\\n    /// @return signatures The signatures associated with the public keys\\n    function getKeys(uint256 _operatorIndex, uint256 _startIdx, uint256 _amount)\\n        internal\\n        view\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        publicKeys = new bytes[](_amount);\\n        signatures = new bytes[](_amount);\\n\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n        uint256 idx;\\n        for (; idx < _amount;) {\\n            bytes memory rawCredentials = r.value[_operatorIndex][idx + _startIdx];\\n            publicKeys[idx] = LibBytes.slice(rawCredentials, 0, PUBLIC_KEY_LENGTH);\\n            signatures[idx] = LibBytes.slice(rawCredentials, PUBLIC_KEY_LENGTH, SIGNATURE_LENGTH);\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n    }\\n\\n    /// @notice Set the concatenated Validator Keys at an index for an operator\\n    /// @param _operatorIndex The operator index\\n    /// @param _idx The key index to write on\\n    /// @param _publicKeyAndSignature The concatenated Validator Keys\\n    function set(uint256 _operatorIndex, uint256 _idx, bytes memory _publicKeyAndSignature) internal {\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_operatorIndex][_idx] = _publicKeyAndSignature;\\n    }\\n}\\n\",\"keccak256\":\"0xe4f987cefb7458d463f2a20044d9dc651e3a13d88c64cef8de74e927339ed216\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrator Address Storage\\n/// @notice Utility to manage the Administrator Address in storage\\nlibrary AdministratorAddress {\\n    /// @notice Storage slot of the Administrator Address\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Administrator Address\\n    /// @return The Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Administrator Address\\n    /// @param _newValue New Administrator Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x4f702b4454858199ca8fd15ef1cee63d9dc3d4d8f2ff7a2f859a4e151e46e8ec\",\"license\":\"MIT\"},\"contracts/src/state/shared/PendingAdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Pending Administrator Address Storage\\n/// @notice Utility to manage the Pending Administrator Address in storage\\nlibrary PendingAdministratorAddress {\\n    /// @notice Storage slot of the Pending Administrator Address\\n    bytes32 public constant PENDING_ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.pendingAdministratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Pending Administrator Address\\n    /// @return The Pending Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Pending Administrator Address\\n    /// @param _newValue New Pending Administrator Address\\n    function set(address _newValue) internal {\\n        LibUnstructuredStorage.setStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x2164cafa435d1e1650037164e2b094ca3af00cc68e05b59140406aa59b1949f2\",\"license\":\"MIT\"},\"contracts/src/state/shared/RiverAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title River Address Storage\\n/// @notice Utility to manage the River Address in storage\\nlibrary RiverAddress {\\n    /// @notice Storage slot of the River Address\\n    bytes32 internal constant RIVER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.riverAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the River Address\\n    /// @return The River Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(RIVER_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the River Address\\n    /// @param _newValue New River Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(RIVER_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xffc846d2e04891e3b0625a9e710fa2a18b4e1af43609f0d76d6c3b7bf5c51384\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Version Storage\\n/// @notice Utility to manage the Version in storage\\nlibrary Version {\\n    /// @notice Storage slot of the Version\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    /// @notice Retrieve the Version\\n    /// @return The Version\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    /// @notice Sets the Version\\n    /// @param _newValue New Version\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(VERSION_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x82f1cc4bbb1f16c1cdbac93596334805eb1a2e0e40ccbd0ab0f78e22d3f83864\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200002a6000196200007060201b62001c311760201c565b7f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a716000196000366040516200006293929190620000bd565b60405180910390a162000119565b620000b6620000a160017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd620000f3565b60001b82620000b960201b62001c641760201c565b50565b9055565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b6000828210156200011457634e487b7160e01b600052601160045260246000fd5b500390565b614a4980620001296000396000f3fe608060405234801561001057600080fd5b506004361061016e5760003560e01c80635a16f135116100ce5780638cb31003116100875780638cb3100314610317578063a519f0601461032c578063a625817e14610334578063b53b937b1461033c578063d046815614610344578063eb47adc61461034c578063f87e52961461035f57600080fd5b80635a16f1351461027f57806361685d9f1461029257806363b4118f146102ba5780636e9960c3146102dc57806370b23845146102f157806376821e5a1461030457600080fd5b8063240ed0241161012b578063240ed024146101ea578063277c9d45146101fd578063354454c51461021e578063392513211461023157806350545d2f1461024457806354001d09146102575780635876220f1461026a57600080fd5b806305f63c8a146101735780630e18b6811461019c578063147bf6c4146101a65780631864636c146101b95780631a4a7c61146101cc578063217aad3c146101e2575b600080fd5b6101866101813660046140fc565b610372565b60405161019391906141fa565b60405180910390f35b6101a46104a3565b005b6101a46101b4366004614229565b610503565b6101a46101c736600461428f565b61054a565b6101d4610a9f565b604051908152602001610193565b6101a4610aae565b6101a46101f83660046140fc565b610b43565b61021061020b3660046140fc565b610b87565b60405161019392919061432f565b6101a461022c36600461435d565b610bd7565b6101a461023f366004614411565b610eef565b6101d461025236600461444f565b6110b2565b6101a46102653660046144a2565b6111dc565b61027261128a565b60405161019391906144d5565b6101a461028d366004614513565b611335565b6102a56102a03660046140fc565b6113d2565b60405163ffffffff9091168152602001610193565b6102cd6102c8366004614548565b6113e3565b6040516101939392919061456a565b6102e461141b565b60405161019391906145a2565b6101a46102ff3660046145ca565b611425565b6101a4610312366004614623565b61177d565b61031f6117c6565b6040516101939190614664565b6102e46117d0565b6101d46117da565b6102a56117e4565b6102e461183f565b6101a461035a3660046140fc565b611849565b6101a461036d3660046146c6565b611ad3565b61037a613ed8565b61038382611c68565b6040805161010081018252825463ffffffff8082168352600160201b820481166020840152600160401b8204811693830193909352600160601b81049092166060820152600160801b82046001600160401b03166080820152600160c01b90910460ff16151560a082015260018201805491929160c084019190610406906146e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610432906146e9565b801561047f5780601f106104545761010080835404028352916020019161047f565b820191906000526020600020905b81548152906001019060200180831161046257829003601f168201915b5050509183525050600291909101546001600160a01b031660209091015292915050565b6104ab611cd9565b6001600160a01b0316336001600160a01b0316146104e7573360405163472511eb60e11b81526004016104de91906145a2565b60405180910390fd5b6104f76104f2611cd9565b611ce3565b6105016000611d2c565b565b61050b611d6c565b6001600160a01b0316336001600160a01b03161461053e573360405163472511eb60e11b81526004016104de91906145a2565b61054781611d2c565b50565b8261055361141b565b6001600160a01b0316336001600160a01b031614156107e857818061058b576040516379b348ff60e11b815260040160405180910390fd5b600061059686611c68565b8054909150600160601b900463ffffffff168086866000816105ba576105ba61471e565b90506020020135106105df576040516317df2d8d60e01b815260040160405180910390fd5b600086866105ee60018761474a565b8181106105fd576105fd61471e565b85546020909102929092013592505063ffffffff600160201b9091041681101561063a5760405163213af80760e21b815260040160405180910390fd5b8254600160601b810463ffffffff9081169116146106618961065c8786614761565b611d76565b60005b858110156107945760008989838181106106805761068061471e565b9050602002013590506000821180156106bb575089896106a160018561474a565b8181106106b0576106b061471e565b905060200201358110155b156106d95760405163c9ee26af60e01b815260040160405180910390fd5b60019091019060006106f18363ffffffff881661474a565b905060006106ff8d84611dd1565b509050600061070e8e84611f47565b905061071b8e8583612013565b6107538e8460005b6040519080825280601f01601f19166020018201604052801561074d576020820181803683370190505b50612013565b8d7f70cf8064c7574b284afe278226e25779f45a4c3715653674aa651b34e9a1909283604051610783919061479c565b60405180910390a250505050610664565b81156107ba578454600160601b810463ffffffff1663ffffffff199091161785556107dd565b845463ffffffff168310156107dd57845463ffffffff191663ffffffff84161785555b505050505050610a99565b60006107f382611c68565b8054909150600160c01b900460ff16610822576040516301550a7360e41b8152600481018390526024016104de565b60028101546001600160a01b03163314610851573360405163472511eb60e11b81526004016104de91906145a2565b8280610870576040516379b348ff60e11b815260040160405180910390fd5b600061087b87611c68565b8054909150600160601b900463ffffffff1680878760008161089f5761089f61471e565b90506020020135106108c4576040516317df2d8d60e01b815260040160405180910390fd5b600087876108d360018761474a565b8181106108e2576108e261471e565b85546020909102929092013592505063ffffffff600160201b9091041681101561091f5760405163213af80760e21b815260040160405180910390fd5b8254600160601b810463ffffffff9081169116146109418a61065c8786614761565b60005b85811015610a485760008a8a838181106109605761096061471e565b90506020020135905060008211801561099b57508a8a61098160018561474a565b8181106109905761099061471e565b905060200201358110155b156109b95760405163c9ee26af60e01b815260040160405180910390fd5b60019091019060006109d18363ffffffff881661474a565b905060006109df8e84611dd1565b50905060006109ee8f84611f47565b90506109fb8f8583612013565b610a078f846000610723565b8e7f70cf8064c7574b284afe278226e25779f45a4c3715653674aa651b34e9a1909283604051610a37919061479c565b60405180910390a250505050610944565b8115610a6e578454600160601b810463ffffffff1663ffffffff19909116178555610a91565b845463ffffffff16831015610a9157845463ffffffff191663ffffffff84161785555b505050505050505b50505050565b6000610aa9612058565b905090565b6001610ab861207b565b8114610ae95780610ac761207b565b604051631cfd276760e31b8152600481019290925260248201526044016104de565b610afc610af78260016147af565b611c31565b610b046120af565b7f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610b38939291906147f0565b60405180910390a150565b610b4b612278565b6001600160a01b0316336001600160a01b031614610b7e573360405163472511eb60e11b81526004016104de91906145a2565b610547816122a8565b606080610b92612278565b6001600160a01b0316336001600160a01b031614610bc5573360405163472511eb60e11b81526004016104de91906145a2565b610bce8361279c565b91509150915091565b610bdf611d6c565b6001600160a01b0316336001600160a01b031614610c12573360405163472511eb60e11b81526004016104de91906145a2565b838214610c325760405163a9854bc960e01b815260040160405180910390fd5b83610c5057604051637b329aa360e01b815260040160405180910390fd5b60005b84811015610ee7576000868683818110610c6f57610c6f61471e565b9050602002013590506000858584818110610c8c57610c8c61471e565b9050602002016020810190610ca1919061480a565b9050600083118015610cd557508787610cbb60018661474a565b818110610cca57610cca61471e565b905060200201358211155b15610cf3576040516357e557ed60e11b815260040160405180910390fd5b6000610cfe83611c68565b805490915063ffffffff908116908316811415610d605760405163ffffffff8416815284907fe8b22569f1f7ba3802b89b579382ccac4e223f8062d6dd73f9cd757bd46ff8aa906020015b60405180910390a284600101945050505050610c53565b8154600160801b90046001600160401b031686108015610d8b57508063ffffffff168363ffffffff16115b15610df65781546040805163ffffffff8085168252861660208201528892600160801b90046001600160401b03169187917f5482b63bdf9e3775fdd3157e4933cfbc1d6fa1ec354ed3fc9a547e5438fd3e4e910160405180910390a484600101945050505050610c53565b815463ffffffff600160601b90910481169084161115610e4b578154604051630d7bdb4960e41b81526004810186905263ffffffff8086166024830152600160601b90920490911660448201526064016104de565b815463ffffffff600160201b90910481169084161015610ea057815460405163044816df60e51b81526004810186905263ffffffff8086166024830152600160201b90920490911660448201526064016104de565b815463ffffffff191663ffffffff8416908117835560405190815284907f3adbeb5fbb94c52b64d90b31188c68a740868dde2238e03a04d581cae22cedf090602001610d49565b505050505050565b82610ef861141b565b6001600160a01b0316336001600160a01b03161415610fac57610f5083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612b6e92505050565b6000610f5b85611c68565b9050610f6b600182018585613f1b565b50847f9ad13f126d3d603b0b284edba7645ca0e423840767c48809bb5f87e72197e1148585604051610f9e929190614825565b60405180910390a250610a99565b6000610fb782611c68565b8054909150600160c01b900460ff16610fe6576040516301550a7360e41b8152600481018390526024016104de565b60028101546001600160a01b03163314611015573360405163472511eb60e11b81526004016104de91906145a2565b61105484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612b6e92505050565b600061105f86611c68565b905061106f600182018686613f1b565b50857f9ad13f126d3d603b0b284edba7645ca0e423840767c48809bb5f87e72197e11486866040516110a2929190614825565b60405180910390a2505050505050565b60006110bc611d6c565b6001600160a01b0316336001600160a01b0316146110ef573360405163472511eb60e11b81526004016104de91906145a2565b604080516101008101825260008082526020808301829052828401829052606083018290526001600160401b0343166080840152600160a08401528351601f8801829004820281018201909452868452909260c0830191889088908190840183828082843760009201829052509385525050506001600160a01b038616602090920191909152909150600161118383612b8d565b61118d919061474a565b9050836001600160a01b0316817f28febbb5486eda5a1e47ad578f9cb32c8a1983c86c80ab823ea5dc1fc04ede5e88886040516111cb929190614825565b60405180910390a395945050505050565b60006111e661207b565b81146111f55780610ac761207b565b611203610af78260016147af565b61120c83611ce3565b61121582612ce2565b6040516001600160a01b038316907ffc0d749143b04e0d92a3b49edae84a45f6bc88b75e99d9118ec4d7e87fe626c590600090a27f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a718160003660405161127d939291906147f0565b60405180910390a1505050565b60606000611296612d19565b80548060200260200160405190810160405280929190818152602001828054801561130c57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116112cf5790505b50508351939450508215915061132f905057600082526020820191506001810382525b50919050565b61133d611d6c565b6001600160a01b0316336001600160a01b031614611370573360405163472511eb60e11b81526004016104de91906145a2565b600061137b83611c68565b805460ff60c01b1916600160c01b84151590810291909117825560405190815290915083907fe3bc5e5d3b000a1f65d146c40a38d89b1743b5729f4c6fe65f2e4b2dc620f2f29060200160405180910390a2505050565b60006113dd82612d47565b92915050565b60608060006113f28585611dd1565b909350915061140085611c68565b54929591945050600160201b90910463ffffffff1690911090565b6000610aa9611d6c565b8361142e61141b565b6001600160a01b0316336001600160a01b031614156115bc5763ffffffff841661146b576040516379b348ff60e11b815260040160405180910390fd5b611477606060306147af565b6114879063ffffffff8616614841565b82146114a657604051630368f86360e41b815260040160405180910390fd5b60006114b186611c68565b905060005b8563ffffffff1681101561155b57600061152986868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061150e925060609150603090506147af565b6115189085614841565b611524606060306147af565b612d5a565b835490915061155290899061154c908590600160601b900463ffffffff166147af565b83612013565b506001016114b6565b50805461157c90879061065c908890600160601b900463ffffffff16614860565b857f402e5ac3e483073137c527378b15e69f7f4a1c75c1adc0aa36f0c456876c05a085856040516115ae929190614825565b60405180910390a250611776565b60006115c782611c68565b8054909150600160c01b900460ff166115f6576040516301550a7360e41b8152600481018390526024016104de565b60028101546001600160a01b03163314611625573360405163472511eb60e11b81526004016104de91906145a2565b63ffffffff8516611649576040516379b348ff60e11b815260040160405180910390fd5b611655606060306147af565b6116659063ffffffff8716614841565b831461168457604051630368f86360e41b815260040160405180910390fd5b600061168f87611c68565b905060005b8663ffffffff168110156117185760006116ec87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061150e925060609150603090506147af565b835490915061170f908a9061154c908590600160601b900463ffffffff166147af565b50600101611694565b50805461173990889061065c908990600160601b900463ffffffff16614860565b867f402e5ac3e483073137c527378b15e69f7f4a1c75c1adc0aa36f0c456876c05a0868660405161176b929190614825565b60405180910390a250505b5050505050565b611785612278565b6001600160a01b0316336001600160a01b0316146117b8573360405163472511eb60e11b81526004016104de91906145a2565b6117c28282612e1d565b5050565b6060610aa9612f8b565b6000610aa9612278565b6000610aa9613216565b6000806117ef612d19565b805490915061180057600091505090565b806000815481106118135761181361471e565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1691505090565b6000610aa9611cd9565b6000611853613246565b905060001981148061186a5750611868612058565b155b1561188857604051630871a03f60e01b815260040160405180910390fd5b6000611892613276565b90505b6000831180156118a757506000198214155b15611abc5760006118b783611c68565b6040805161010081018252825463ffffffff8082168352600160201b820481166020840152600160401b8204811693830193909352600160601b81049092166060820152600160801b82046001600160401b03166080820152600160c01b90910460ff16151560a082015260018201805491929160c08401919061193a906146e9565b80601f0160208091040260200160405190810160405280929190818152602001828054611966906146e9565b80156119b35780601f10611988576101008083540402835291602001916119b3565b820191906000526020600020905b81548152906001019060200180831161199657829003601f168201915b5050509183525050600291909101546001600160a01b0316602091820152810151909150600090611a0390859085906119fe9089906119f990849063ffffffff1661474a565b6132a6565b6132be565b509050837f0786596b8e43634ef53d523fd318795a1182175b0b0a658bc4aac58ecfcc5411826001604051611a39929190614888565b60405180910390a2816020015163ffffffff16815184611a5991906147af565b1415611a9857600092506001611a6d612058565b611a77919061474a565b841415611a88576000199350611aa7565b611a91846148ac565b9350611aa7565b8051611aa490846147af565b92505b8051611ab3908661474a565b94505050611895565b611ac5826134a0565b611ace816134ce565b505050565b81611adc61141b565b6001600160a01b0316336001600160a01b03161415611b5e57611afe826134fc565b6000611b0984611c68565b6002810180546001600160a01b0319166001600160a01b0386169081179091556040519192509085907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e790600090a350505050565b6000611b6982611c68565b8054909150600160c01b900460ff16611b98576040516301550a7360e41b8152600481018390526024016104de565b60028101546001600160a01b03163314611bc7573360405163472511eb60e11b81526004016104de91906145a2565b611bd0836134fc565b6000611bdb85611c68565b6002810180546001600160a01b0319166001600160a01b0387169081179091556040519192509086907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e790600090a35050505050565b610547611c5f60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd61474a565b829055565b9055565b600080611c8460016000805160206149d483398151915261474a565b805490915081908410611cad576040516302d72d2160e01b8152600481018590526024016104de565b806000018481548110611cc257611cc261471e565b906000526020600020906003020192505050919050565b6000610aa9613523565b611cec816134fc565b611cf581613553565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b611d358161355c565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b6000610aa9613565565b6000611d8183611c68565b80546bffffffffffffffffffffffff60601b1916600160601b63ffffffff949094169390930267ffffffffffffffff60801b191692909217600160801b436001600160401b031602179091555050565b6060806000611def60016000805160206149f483398151915261474a565b600086815260208281526040808320888452909152902080549192508291611ea3908290611e1c906146e9565b80601f0160208091040260200160405190810160405280929190818152602001828054611e48906146e9565b8015611e955780601f10611e6a57610100808354040283529160200191611e95565b820191906000526020600020905b815481529060010190602001808311611e7857829003601f168201915b505050505060006030612d5a565b9450611f3b818054611eb4906146e9565b80601f0160208091040260200160405190810160405280929190818152602001828054611ee0906146e9565b8015611f2d5780601f10611f0257610100808354040283529160200191611f2d565b820191906000526020600020905b815481529060010190602001808311611f1057829003601f168201915b505050505060306060612d5a565b93505050509250929050565b60606000611f6460016000805160206149f483398151915261474a565b600085815260208281526040808320878452909152902080549192508291611f8b906146e9565b80601f0160208091040260200160405190810160405280929190818152602001828054611fb7906146e9565b80156120045780601f10611fd957610100808354040283529160200191612004565b820191906000526020600020905b815481529060010190602001808311611fe757829003601f168201915b50505050509250505092915050565b600061202e60016000805160206149f483398151915261474a565b600085815260208281526040808320878452825290912084519293508392610ee792860190613f9f565b60008061207460016000805160206149d483398151915261474a565b5492915050565b6000610aa96120ab60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd61474a565b5490565b60006120b9613595565b905060005b818110156117c25760006120d1826135c3565b604080516101008101909152815460ff16151581526001820180549192916020840191906120fe906146e9565b80601f016020809104026020016040519081016040528092919081815260200182805461212a906146e9565b80156121775780601f1061214c57610100808354040283529160200191612177565b820191906000526020600020905b81548152906001019060200180831161215a57829003601f168201915b505050505081526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050905061226e604051806101000160405280836060015163ffffffff168152602001836080015163ffffffff168152602001600063ffffffff1681526020018360a0015163ffffffff1681526020018360e001516001600160401b031681526020018360000151151581526020018360200151815260200183604001516001600160a01b0316815250612b8d565b50506001016120be565b6000610aa96120ab60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c61474a565b6000806122b3613646565b9150915060006122c1612d19565b9050816122ce5750505050565b60006122d8613216565b90508060005b848110156123fd5760008682815181106122fa576122fa61471e565b6020026020010151604001519050600061231486846138ce565b90508063ffffffff168263ffffffff1610156123f35787838151811061233c5761233c61471e565b60200260200101516060015163ffffffff167f281aaa50816d3a5bf2911e3c0854a3f2ebe4880698575d799ff5becfd74d7778838360405161239192919063ffffffff92831681529116602082015260400190565b60405180910390a26123a38282614761565b8884815181106123b5576123b561471e565b60200260200101516080018181516123cd9190614860565b63ffffffff169052506123e08282614761565b6123f09063ffffffff16866147af565b94505b50506001016122de565b505b85156125e0576000806000805b878110156124a05760006124388a838151811061242b5761242b61471e565b6020026020010151613935565b90508463ffffffff168163ffffffff16141561245e57612457836148c7565b9250612497565b8463ffffffff168163ffffffff16111561247f579392506001915083612497565b8363ffffffff168163ffffffff161115612497578093505b5060010161240c565b5063ffffffff83161580156124ba5750868163ffffffff16145b156124c7575050506125e0565b60006124ed826124d78587614761565b6124e191906148eb565b63ffffffff168b6132a6565b905060006124fb838361492d565b63ffffffff16905060005b898110156125c3578563ffffffff1661252a8c838151811061242b5761242b61471e565b63ffffffff1614156125bb576000808311612546576000612549565b60015b60ff166125568686614950565b6125609190614860565b9050808c83815181106125755761257561471e565b602002602001015160800181815161258d9190614860565b63ffffffff9081169091526125a5915082168a6147af565b985082156125b9576125b683614973565b92505b505b600101612506565b506125d463ffffffff83168c61474a565b9a5050505050506123ff565b60005b8481101561274a5760008682815181106125ff576125ff61471e565b60200260200101516080015163ffffffff16111561274257600061264587838151811061262e5761262e61471e565b60200260200101516060015163ffffffff16611c68565b60000160089054906101000a900463ffffffff16905086828151811061266d5761266d61471e565b602002602001015160800151816126849190614860565b61269988848151811061262e5761262e61471e565b60000160086101000a81548163ffffffff021916908363ffffffff1602179055508682815181106126cc576126cc61471e565b60200260200101516060015163ffffffff167f0377278faa3eeab09525915d783771e1b00fec4797719afc368b56f6856279258884815181106127115761271161471e565b602002602001015160800151836127289190614860565b60405163ffffffff909116815260200160405180910390a2505b6001016125e3565b50808214610ee75761275b8261395a565b60408051828152602081018490527fb5e027491564f379aef806ebcf101764f2f9942321b10d116b9cad3c653ce027910160405180910390a1505050505050565b6060806000806127aa613988565b91509150806000141561281a5760408051600080825260208201909252906127e2565b60608152602001906001900390816127cd5790505b50604080516000808252602082019092529061280e565b60608152602001906001900390816127f95790505b50935093505050915091565b84156129bd5760005b8181101561285f5761284d8382815181106128405761284061471e565b6020026020010151613c6b565b156128575761285f565b600101612823565b8181141561286d57506129bd565b600061287a8260016147af565b90505b828110156128ea576128a784838151811061289a5761289a61471e565b6020026020010151613c97565b6128bc85838151811061289a5761289a61471e565b1080156128d957506128d98482815181106128405761284061471e565b156128e2578091505b60010161287d565b50600061297461296e8584815181106129055761290561471e565b6020026020010151608001518685815181106129235761292361471e565b6020026020010151602001516129399190614860565b86858151811061294b5761294b61471e565b6020026020010151600001516129619190614761565b63ffffffff1660056132a6565b886132a6565b9050808483815181106129895761298961471e565b60200260200101516080018181516129a19190614860565b63ffffffff169052506129b4818861474a565b9650505061281a565b60005b81811015612b665760008382815181106129dc576129dc61471e565b60200260200101516080015163ffffffff161115612b5657600080612a6b858481518110612a0c57612a0c61471e565b60200260200101516060015163ffffffff16868581518110612a3057612a3061471e565b60200260200101516020015163ffffffff16878681518110612a5457612a5461471e565b60200260200101516080015163ffffffff166132be565b91509150848381518110612a8157612a8161471e565b60200260200101516060015163ffffffff167f0786596b8e43634ef53d523fd318795a1182175b0b0a658bc4aac58ecfcc5411836000604051612ac5929190614888565b60405180910390a2612ad78783613cd6565b9650612ae38682613cd6565b9550848381518110612af757612af761471e565b602002602001015160800151612b1886858151811061262e5761262e61471e565b8054600490612b35908490600160201b900463ffffffff16614860565b92506101000a81548163ffffffff021916908363ffffffff16021790555050505b612b5f816148ac565b90506129c0565b505050915091565b805161054757604051638d46fe0560e01b815260040160405180910390fd5b6000612b9c8260e001516134fc565b612ba98260c00151612b6e565b6000612bc460016000805160206149d483398151915261474a565b8054600181810183556000838152602090819020875160039094020180548289015160408a015160608b015160808c015160a08d01511515600160c01b0260ff60c01b196001600160401b03909216600160801b029190911668ffffffffffffffffff60801b1963ffffffff938416600160601b0263ffffffff60601b19958516600160401b029590951667ffffffffffffffff60401b19968516600160201b0267ffffffffffffffff1990981694909b169390931795909517939093169790971717959095161793909317835560c087015180519495508594889493612cb093908501920190613f9f565b5060e09190910151600290910180546001600160a01b0319166001600160a01b03909216919091179055549392505050565b612ceb816134fc565b610547611c5f60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c61474a565b6000806113dd60017fca4f80ba17934f16b2ab62d95f37e3941e8ecf8da46337200d0a2c44b7d6be3861474a565b60006113dd612d54612d19565b836138ce565b60608182601f011015612d80576040516323d5783d60e11b815260040160405180910390fd5b612d8a82846147af565b84511015612dab57604051633b99b53d60e01b815260040160405180910390fd5b606082158015612dca5760405191506000825260208201604052612e14565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612e03578051835260209283019201612deb565b5050858452601f01601f1916604052505b50949350505050565b8080612e3c576040516397791ee160e01b815260040160405180910390fd5b600083836000818110612e5157612e5161471e565b9050602002016020810190612e66919061480a565b90506000612e72612058565b612e7d60018561474a565b1115612e9c57604051634eb7083160e01b815260040160405180910390fd5b60015b83811015612ee257858582818110612eb957612eb961471e565b9050602002016020810190612ece919061480a565b612ed89083614860565b9150600101612e9f565b508063ffffffff168263ffffffff1614612f0f57604051636be992a360e11b815260040160405180910390fd5b612f4b858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613de092505050565b7fb795d99e37bbcdcebb613387f4e924b750cbae0af45b48ba52bfe1137c10e9928585604051612f7c92919061498a565b60405180910390a15050505050565b60606000612fa860016000805160206149d483398151915261474a565b80549091508190600090815b8181101561300057836000018181548110612fd157612fd161471e565b6000918252602090912060039091020154600160c01b900460ff1615612ff8578260010192505b600101612fb4565b506000826001600160401b0381111561301b5761301b614786565b60405190808252806020026020018201604052801561305457816020015b613041613ed8565b8152602001906001900390816130395790505b5090506000805b8381101561320a578560000181815481106130785761307861471e565b6000918252602090912060039091020154600160c01b900460ff1615613202578560000181815481106130ad576130ad61471e565b600091825260209182902060408051610100810182526003909302909101805463ffffffff8082168552600160201b8204811695850195909552600160401b8104851692840192909252600160601b820490931660608301526001600160401b03600160801b820416608083015260ff600160c01b90910416151560a082015260018201805491929160c084019190613145906146e9565b80601f0160208091040260200160405190810160405280929190818152602001828054613171906146e9565b80156131be5780601f10613193576101008083540402835291602001916131be565b820191906000526020600020905b8154815290600101906020018083116131a157829003601f168201915b5050509183525050600291909101546001600160a01b031660209091015283518490849081106131f0576131f061471e565b60200260200101819052508160010191505b60010161305b565b50909695505050505050565b6000610aa96120ab60017f458205a0e48c2fdefa87d205cbceb76fd2ca8726a9abe39442360dd73d28c99f61474a565b6000610aa96120ab60017ffd9ec671ae9f85315a7ebfb0534d94239eaacef5a704bcb705c041ce1249135761474a565b6000610aa96120ab60017fbd3f712f2cd882f839e84eb12fdaf64f8227409d140027dbdcd5e2ee4d57fa2061474a565b60008183116132b557826132b7565b815b9392505050565b606080826001600160401b038111156132d9576132d9614786565b60405190808252806020026020018201604052801561330c57816020015b60608152602001906001900390816132f75790505b509150826001600160401b0381111561332757613327614786565b60405190808252806020026020018201604052801561335a57816020015b60608152602001906001900390816133455790505b509050600061337860016000805160206149f483398151915261474a565b90508060005b858110156134955760008881526020839052604081208161339f8a856147af565b815260200190815260200160002080546133b8906146e9565b80601f01602080910402602001604051908101604052809291908181526020018280546133e4906146e9565b80156134315780601f1061340657610100808354040283529160200191613431565b820191906000526020600020905b81548152906001019060200180831161341457829003601f168201915b505050505090506134458160006030612d5a565b8683815181106134575761345761471e565b602002602001018190525061346f8160306060612d5a565b8583815181106134815761348161471e565b60209081029190910101525060010161337e565b505050935093915050565b610547611c5f60017ffd9ec671ae9f85315a7ebfb0534d94239eaacef5a704bcb705c041ce1249135761474a565b610547611c5f60017fbd3f712f2cd882f839e84eb12fdaf64f8227409d140027dbdcd5e2ee4d57fa2061474a565b6001600160a01b0381166105475760405163f6b2911f60e01b815260040160405180910390fd5b6000610aa96120ab60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a984728161474a565b61054781613e24565b61054781613e5b565b6000610aa96120ab60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb11361474a565b60008061207460017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe1011361474a565b6000806135f160017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe1011361474a565b80549091508190841061361a576040516302d72d2160e01b8152600481018590526024016104de565b80600001848154811061362f5761362f61471e565b906000526020600020906008020192505050919050565b606060008061366460016000805160206149d483398151915261474a565b8054909150819060009081816001600160401b0381111561368757613687614786565b6040519080825280602002602001820160405280156136c057816020015b6136ad614013565b8152602001906001900390816136a55790505b50905060005b828110156138c15761381a8560000182815481106136e6576136e661471e565b600091825260209182902060408051610100810182526003909302909101805463ffffffff8082168552600160201b8204811695850195909552600160401b8104851692840192909252600160601b820490931660608301526001600160401b03600160801b820416608083015260ff600160c01b90910416151560a082015260018201805491929160c08401919061377e906146e9565b80601f01602080910402602001604051908101604052809291908181526020018280546137aa906146e9565b80156137f75780601f106137cc576101008083540402835291602001916137f7565b820191906000526020600020905b8154815290600101906020018083116137da57829003601f168201915b5050509183525050600291909101546001600160a01b0316602090910152613e89565b156138b95760008560000182815481106138365761383661471e565b600091825260208083206040805160a0810182526003909402909101805463ffffffff8082168652600160201b8204811694860194909452600160401b9004831691840191909152908516606083015260808201929092528451919250908490879081106138a6576138a661471e565b6020026020010181905250846001019450505b6001016136c6565b5096919550909350505050565b81546000906138de8360016147af565b106138eb575060006113dd565b826138f78360016147af565b815481106139075761390761471e565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16905092915050565b60008160800151826040015161394b9190614860565b82602001516113dd9190614761565b610547611c5f60017f458205a0e48c2fdefa87d205cbceb76fd2ca8726a9abe39442360dd73d28c99f61474a565b60606000806139a660016000805160206149d483398151915261474a565b8054909150819060009081816001600160401b038111156139c9576139c9614786565b604051908082528060200260200182016040528015613a0257816020015b6139ef614013565b8152602001906001900390816139e75790505b5090506000613a0f612d19565b905060005b83811015613c5c57613b68866000018281548110613a3457613a3461471e565b600091825260209182902060408051610100810182526003909302909101805463ffffffff8082168552600160201b8204811695850195909552600160401b8104851692840192909252600160601b820490931660608301526001600160401b03600160801b820416608083015260ff600160c01b90910416151560a082015260018201805491929160c084019190613acc906146e9565b80601f0160208091040260200160405190810160405280929190818152602001828054613af8906146e9565b8015613b455780601f10613b1a57610100808354040283529160200191613b45565b820191906000526020600020905b815481529060010190602001808311613b2857829003601f168201915b5050509183525050600291909101546001600160a01b0316602090910152613eb4565b8015613bb55750856000018181548110613b8457613b8461471e565b6000918252602090912060039091020154600160401b900463ffffffff16613bac83836138ce565b63ffffffff1610155b15613c54576000866000018281548110613bd157613bd161471e565b600091825260208083206040805160a0810182526003909402909101805463ffffffff8082168652600160201b8204811694860194909452600160401b900483169184019190915290851660608301526080820192909252855191925090859088908110613c4157613c4161471e565b6020026020010181905250856001019550505b600101613a14565b50909792965091945050505050565b80516080820151602083015160009263ffffffff1691613c8a91614860565b63ffffffff161092915050565b6000613cac826060015163ffffffff16612d47565b82608001518360200151613cc09190614860565b613cca9190614761565b63ffffffff1692915050565b6060600082518451613ce891906147af565b6001600160401b03811115613cff57613cff614786565b604051908082528060200260200182016040528015613d3257816020015b6060815260200190600190039081613d1d5790505b50905060005b8451811015613d8057848181518110613d5357613d5361471e565b6020026020010151828281518110613d6d57613d6d61471e565b6020908102919091010152600101613d38565b5060005b8351811015613dd857838181518110613d9f57613d9f61471e565b602002602001015182865183613db591906147af565b81518110613dc557613dc561471e565b6020908102919091010152600101613d84565b509392505050565b6000613e0d60017fca4f80ba17934f16b2ab62d95f37e3941e8ecf8da46337200d0a2c44b7d6be3861474a565b82519091508190610a999082906020860190614041565b613e2d816134fc565b610547611c5f60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb11361474a565b610547611c5f60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a984728161474a565b60008160a0015180156113dd5750816040015163ffffffff16826020015163ffffffff161192915050565b60008160a0015180156113dd5750506020810151905163ffffffff91821691161190565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082015260e081019190915290565b828054613f27906146e9565b90600052602060002090601f016020900481019282613f495760008555613f8f565b82601f10613f625782800160ff19823516178555613f8f565b82800160010185558215613f8f579182015b82811115613f8f578235825591602001919060010190613f74565b50613f9b9291506140e7565b5090565b828054613fab906146e9565b90600052602060002090601f016020900481019282613fcd5760008555613f8f565b82601f10613fe657805160ff1916838001178555613f8f565b82800160010185558215613f8f579182015b82811115613f8f578251825591602001919060010190613ff8565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b82805482825590600052602060002090600701600890048101928215613f8f5791602002820160005b838211156140ae57835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030261406a565b80156140de5782816101000a81549063ffffffff02191690556004016020816003010492830192600103026140ae565b5050613f9b9291505b5b80821115613f9b57600081556001016140e8565b60006020828403121561410e57600080fd5b5035919050565b6000815180845260005b8181101561413b5760208185018101518683018201520161411f565b8181111561414d576000602083870101525b50601f01601f19169290920160200192915050565b600061010063ffffffff8084511685528060208501511660208601528060408501511660408601528060608501511660608601525060808301516141b160808601826001600160401b03169052565b5060a08301516141c560a086018215159052565b5060c08301518160c08601526141dd82860182614115565b91505060e0830151613dd860e08601826001600160a01b03169052565b6020815260006132b76020830184614162565b80356001600160a01b038116811461422457600080fd5b919050565b60006020828403121561423b57600080fd5b6132b78261420d565b60008083601f84011261425657600080fd5b5081356001600160401b0381111561426d57600080fd5b6020830191508360208260051b850101111561428857600080fd5b9250929050565b6000806000604084860312156142a457600080fd5b8335925060208401356001600160401b038111156142c157600080fd5b6142cd86828701614244565b9497909650939450505050565b600081518084526020808501808196508360051b8101915082860160005b85811015614322578284038952614310848351614115565b988501989350908401906001016142f8565b5091979650505050505050565b60408152600061434260408301856142da565b828103602084015261435481856142da565b95945050505050565b60008060008060006060868803121561437557600080fd5b85356001600160401b038082111561438c57600080fd5b61439889838a01614244565b909750955060208801359150808211156143b157600080fd5b506143be88828901614244565b96999598509660400135949350505050565b60008083601f8401126143e257600080fd5b5081356001600160401b038111156143f957600080fd5b60208301915083602082850101111561428857600080fd5b60008060006040848603121561442657600080fd5b8335925060208401356001600160401b0381111561444357600080fd5b6142cd868287016143d0565b60008060006040848603121561446457600080fd5b83356001600160401b0381111561447a57600080fd5b614486868287016143d0565b909450925061449990506020850161420d565b90509250925092565b600080604083850312156144b557600080fd5b6144be8361420d565b91506144cc6020840161420d565b90509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561320a57835163ffffffff16835292840192918401916001016144f1565b6000806040838503121561452657600080fd5b823591506020830135801515811461453d57600080fd5b809150509250929050565b6000806040838503121561455b57600080fd5b50508035926020909101359150565b60608152600061457d6060830186614115565b828103602084015261458f8186614115565b9150508215156040830152949350505050565b6001600160a01b0391909116815260200190565b803563ffffffff8116811461422457600080fd5b600080600080606085870312156145e057600080fd5b843593506145f0602086016145b6565b925060408501356001600160401b0381111561460b57600080fd5b614617878288016143d0565b95989497509550505050565b6000806020838503121561463657600080fd5b82356001600160401b0381111561464c57600080fd5b61465885828601614244565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156146b957603f198886030184526146a7858351614162565b9450928501929085019060010161468b565b5092979650505050505050565b600080604083850312156146d957600080fd5b823591506144cc6020840161420d565b600181811c908216806146fd57607f821691505b6020821081141561132f57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561475c5761475c614734565b500390565b600063ffffffff8381169083168181101561477e5761477e614734565b039392505050565b634e487b7160e01b600052604160045260246000fd5b6020815260006132b76020830184614115565b600082198211156147c2576147c2614734565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8381526040602082015260006143546040830184866147c7565b60006020828403121561481c57600080fd5b6132b7826145b6565b6020815260006148396020830184866147c7565b949350505050565b600081600019048311821515161561485b5761485b614734565b500290565b600063ffffffff80831681851680830382111561487f5761487f614734565b01949350505050565b60408152600061489b60408301856142da565b905082151560208301529392505050565b60006000198214156148c0576148c0614734565b5060010190565b600063ffffffff808316818114156148e1576148e1614734565b6001019392505050565b600063ffffffff8083168185168183048111821515161561490e5761490e614734565b02949350505050565b634e487b7160e01b600052601260045260246000fd5b600063ffffffff8084168061494457614944614917565b92169190910692915050565b600063ffffffff8084168061496757614967614917565b92169190910492915050565b60008161498257614982614734565b506000190190565b60208082528181018390526000908460408401835b868110156149c85763ffffffff6149b5846145b6565b168252918301919083019060010161499f565b50969550505050505056fed952c686c15834d48f07b553712c51f877261827559f149880caa855efa22f7d6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574a2646970667358221220b14ee98c4e2dc473bdba515ae367f37ce756e21a168f58d77ef7473d494f55c264736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016e5760003560e01c80635a16f135116100ce5780638cb31003116100875780638cb3100314610317578063a519f0601461032c578063a625817e14610334578063b53b937b1461033c578063d046815614610344578063eb47adc61461034c578063f87e52961461035f57600080fd5b80635a16f1351461027f57806361685d9f1461029257806363b4118f146102ba5780636e9960c3146102dc57806370b23845146102f157806376821e5a1461030457600080fd5b8063240ed0241161012b578063240ed024146101ea578063277c9d45146101fd578063354454c51461021e578063392513211461023157806350545d2f1461024457806354001d09146102575780635876220f1461026a57600080fd5b806305f63c8a146101735780630e18b6811461019c578063147bf6c4146101a65780631864636c146101b95780631a4a7c61146101cc578063217aad3c146101e2575b600080fd5b6101866101813660046140fc565b610372565b60405161019391906141fa565b60405180910390f35b6101a46104a3565b005b6101a46101b4366004614229565b610503565b6101a46101c736600461428f565b61054a565b6101d4610a9f565b604051908152602001610193565b6101a4610aae565b6101a46101f83660046140fc565b610b43565b61021061020b3660046140fc565b610b87565b60405161019392919061432f565b6101a461022c36600461435d565b610bd7565b6101a461023f366004614411565b610eef565b6101d461025236600461444f565b6110b2565b6101a46102653660046144a2565b6111dc565b61027261128a565b60405161019391906144d5565b6101a461028d366004614513565b611335565b6102a56102a03660046140fc565b6113d2565b60405163ffffffff9091168152602001610193565b6102cd6102c8366004614548565b6113e3565b6040516101939392919061456a565b6102e461141b565b60405161019391906145a2565b6101a46102ff3660046145ca565b611425565b6101a4610312366004614623565b61177d565b61031f6117c6565b6040516101939190614664565b6102e46117d0565b6101d46117da565b6102a56117e4565b6102e461183f565b6101a461035a3660046140fc565b611849565b6101a461036d3660046146c6565b611ad3565b61037a613ed8565b61038382611c68565b6040805161010081018252825463ffffffff8082168352600160201b820481166020840152600160401b8204811693830193909352600160601b81049092166060820152600160801b82046001600160401b03166080820152600160c01b90910460ff16151560a082015260018201805491929160c084019190610406906146e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610432906146e9565b801561047f5780601f106104545761010080835404028352916020019161047f565b820191906000526020600020905b81548152906001019060200180831161046257829003601f168201915b5050509183525050600291909101546001600160a01b031660209091015292915050565b6104ab611cd9565b6001600160a01b0316336001600160a01b0316146104e7573360405163472511eb60e11b81526004016104de91906145a2565b60405180910390fd5b6104f76104f2611cd9565b611ce3565b6105016000611d2c565b565b61050b611d6c565b6001600160a01b0316336001600160a01b03161461053e573360405163472511eb60e11b81526004016104de91906145a2565b61054781611d2c565b50565b8261055361141b565b6001600160a01b0316336001600160a01b031614156107e857818061058b576040516379b348ff60e11b815260040160405180910390fd5b600061059686611c68565b8054909150600160601b900463ffffffff168086866000816105ba576105ba61471e565b90506020020135106105df576040516317df2d8d60e01b815260040160405180910390fd5b600086866105ee60018761474a565b8181106105fd576105fd61471e565b85546020909102929092013592505063ffffffff600160201b9091041681101561063a5760405163213af80760e21b815260040160405180910390fd5b8254600160601b810463ffffffff9081169116146106618961065c8786614761565b611d76565b60005b858110156107945760008989838181106106805761068061471e565b9050602002013590506000821180156106bb575089896106a160018561474a565b8181106106b0576106b061471e565b905060200201358110155b156106d95760405163c9ee26af60e01b815260040160405180910390fd5b60019091019060006106f18363ffffffff881661474a565b905060006106ff8d84611dd1565b509050600061070e8e84611f47565b905061071b8e8583612013565b6107538e8460005b6040519080825280601f01601f19166020018201604052801561074d576020820181803683370190505b50612013565b8d7f70cf8064c7574b284afe278226e25779f45a4c3715653674aa651b34e9a1909283604051610783919061479c565b60405180910390a250505050610664565b81156107ba578454600160601b810463ffffffff1663ffffffff199091161785556107dd565b845463ffffffff168310156107dd57845463ffffffff191663ffffffff84161785555b505050505050610a99565b60006107f382611c68565b8054909150600160c01b900460ff16610822576040516301550a7360e41b8152600481018390526024016104de565b60028101546001600160a01b03163314610851573360405163472511eb60e11b81526004016104de91906145a2565b8280610870576040516379b348ff60e11b815260040160405180910390fd5b600061087b87611c68565b8054909150600160601b900463ffffffff1680878760008161089f5761089f61471e565b90506020020135106108c4576040516317df2d8d60e01b815260040160405180910390fd5b600087876108d360018761474a565b8181106108e2576108e261471e565b85546020909102929092013592505063ffffffff600160201b9091041681101561091f5760405163213af80760e21b815260040160405180910390fd5b8254600160601b810463ffffffff9081169116146109418a61065c8786614761565b60005b85811015610a485760008a8a838181106109605761096061471e565b90506020020135905060008211801561099b57508a8a61098160018561474a565b8181106109905761099061471e565b905060200201358110155b156109b95760405163c9ee26af60e01b815260040160405180910390fd5b60019091019060006109d18363ffffffff881661474a565b905060006109df8e84611dd1565b50905060006109ee8f84611f47565b90506109fb8f8583612013565b610a078f846000610723565b8e7f70cf8064c7574b284afe278226e25779f45a4c3715653674aa651b34e9a1909283604051610a37919061479c565b60405180910390a250505050610944565b8115610a6e578454600160601b810463ffffffff1663ffffffff19909116178555610a91565b845463ffffffff16831015610a9157845463ffffffff191663ffffffff84161785555b505050505050505b50505050565b6000610aa9612058565b905090565b6001610ab861207b565b8114610ae95780610ac761207b565b604051631cfd276760e31b8152600481019290925260248201526044016104de565b610afc610af78260016147af565b611c31565b610b046120af565b7f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610b38939291906147f0565b60405180910390a150565b610b4b612278565b6001600160a01b0316336001600160a01b031614610b7e573360405163472511eb60e11b81526004016104de91906145a2565b610547816122a8565b606080610b92612278565b6001600160a01b0316336001600160a01b031614610bc5573360405163472511eb60e11b81526004016104de91906145a2565b610bce8361279c565b91509150915091565b610bdf611d6c565b6001600160a01b0316336001600160a01b031614610c12573360405163472511eb60e11b81526004016104de91906145a2565b838214610c325760405163a9854bc960e01b815260040160405180910390fd5b83610c5057604051637b329aa360e01b815260040160405180910390fd5b60005b84811015610ee7576000868683818110610c6f57610c6f61471e565b9050602002013590506000858584818110610c8c57610c8c61471e565b9050602002016020810190610ca1919061480a565b9050600083118015610cd557508787610cbb60018661474a565b818110610cca57610cca61471e565b905060200201358211155b15610cf3576040516357e557ed60e11b815260040160405180910390fd5b6000610cfe83611c68565b805490915063ffffffff908116908316811415610d605760405163ffffffff8416815284907fe8b22569f1f7ba3802b89b579382ccac4e223f8062d6dd73f9cd757bd46ff8aa906020015b60405180910390a284600101945050505050610c53565b8154600160801b90046001600160401b031686108015610d8b57508063ffffffff168363ffffffff16115b15610df65781546040805163ffffffff8085168252861660208201528892600160801b90046001600160401b03169187917f5482b63bdf9e3775fdd3157e4933cfbc1d6fa1ec354ed3fc9a547e5438fd3e4e910160405180910390a484600101945050505050610c53565b815463ffffffff600160601b90910481169084161115610e4b578154604051630d7bdb4960e41b81526004810186905263ffffffff8086166024830152600160601b90920490911660448201526064016104de565b815463ffffffff600160201b90910481169084161015610ea057815460405163044816df60e51b81526004810186905263ffffffff8086166024830152600160201b90920490911660448201526064016104de565b815463ffffffff191663ffffffff8416908117835560405190815284907f3adbeb5fbb94c52b64d90b31188c68a740868dde2238e03a04d581cae22cedf090602001610d49565b505050505050565b82610ef861141b565b6001600160a01b0316336001600160a01b03161415610fac57610f5083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612b6e92505050565b6000610f5b85611c68565b9050610f6b600182018585613f1b565b50847f9ad13f126d3d603b0b284edba7645ca0e423840767c48809bb5f87e72197e1148585604051610f9e929190614825565b60405180910390a250610a99565b6000610fb782611c68565b8054909150600160c01b900460ff16610fe6576040516301550a7360e41b8152600481018390526024016104de565b60028101546001600160a01b03163314611015573360405163472511eb60e11b81526004016104de91906145a2565b61105484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612b6e92505050565b600061105f86611c68565b905061106f600182018686613f1b565b50857f9ad13f126d3d603b0b284edba7645ca0e423840767c48809bb5f87e72197e11486866040516110a2929190614825565b60405180910390a2505050505050565b60006110bc611d6c565b6001600160a01b0316336001600160a01b0316146110ef573360405163472511eb60e11b81526004016104de91906145a2565b604080516101008101825260008082526020808301829052828401829052606083018290526001600160401b0343166080840152600160a08401528351601f8801829004820281018201909452868452909260c0830191889088908190840183828082843760009201829052509385525050506001600160a01b038616602090920191909152909150600161118383612b8d565b61118d919061474a565b9050836001600160a01b0316817f28febbb5486eda5a1e47ad578f9cb32c8a1983c86c80ab823ea5dc1fc04ede5e88886040516111cb929190614825565b60405180910390a395945050505050565b60006111e661207b565b81146111f55780610ac761207b565b611203610af78260016147af565b61120c83611ce3565b61121582612ce2565b6040516001600160a01b038316907ffc0d749143b04e0d92a3b49edae84a45f6bc88b75e99d9118ec4d7e87fe626c590600090a27f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a718160003660405161127d939291906147f0565b60405180910390a1505050565b60606000611296612d19565b80548060200260200160405190810160405280929190818152602001828054801561130c57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116112cf5790505b50508351939450508215915061132f905057600082526020820191506001810382525b50919050565b61133d611d6c565b6001600160a01b0316336001600160a01b031614611370573360405163472511eb60e11b81526004016104de91906145a2565b600061137b83611c68565b805460ff60c01b1916600160c01b84151590810291909117825560405190815290915083907fe3bc5e5d3b000a1f65d146c40a38d89b1743b5729f4c6fe65f2e4b2dc620f2f29060200160405180910390a2505050565b60006113dd82612d47565b92915050565b60608060006113f28585611dd1565b909350915061140085611c68565b54929591945050600160201b90910463ffffffff1690911090565b6000610aa9611d6c565b8361142e61141b565b6001600160a01b0316336001600160a01b031614156115bc5763ffffffff841661146b576040516379b348ff60e11b815260040160405180910390fd5b611477606060306147af565b6114879063ffffffff8616614841565b82146114a657604051630368f86360e41b815260040160405180910390fd5b60006114b186611c68565b905060005b8563ffffffff1681101561155b57600061152986868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061150e925060609150603090506147af565b6115189085614841565b611524606060306147af565b612d5a565b835490915061155290899061154c908590600160601b900463ffffffff166147af565b83612013565b506001016114b6565b50805461157c90879061065c908890600160601b900463ffffffff16614860565b857f402e5ac3e483073137c527378b15e69f7f4a1c75c1adc0aa36f0c456876c05a085856040516115ae929190614825565b60405180910390a250611776565b60006115c782611c68565b8054909150600160c01b900460ff166115f6576040516301550a7360e41b8152600481018390526024016104de565b60028101546001600160a01b03163314611625573360405163472511eb60e11b81526004016104de91906145a2565b63ffffffff8516611649576040516379b348ff60e11b815260040160405180910390fd5b611655606060306147af565b6116659063ffffffff8716614841565b831461168457604051630368f86360e41b815260040160405180910390fd5b600061168f87611c68565b905060005b8663ffffffff168110156117185760006116ec87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061150e925060609150603090506147af565b835490915061170f908a9061154c908590600160601b900463ffffffff166147af565b50600101611694565b50805461173990889061065c908990600160601b900463ffffffff16614860565b867f402e5ac3e483073137c527378b15e69f7f4a1c75c1adc0aa36f0c456876c05a0868660405161176b929190614825565b60405180910390a250505b5050505050565b611785612278565b6001600160a01b0316336001600160a01b0316146117b8573360405163472511eb60e11b81526004016104de91906145a2565b6117c28282612e1d565b5050565b6060610aa9612f8b565b6000610aa9612278565b6000610aa9613216565b6000806117ef612d19565b805490915061180057600091505090565b806000815481106118135761181361471e565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1691505090565b6000610aa9611cd9565b6000611853613246565b905060001981148061186a5750611868612058565b155b1561188857604051630871a03f60e01b815260040160405180910390fd5b6000611892613276565b90505b6000831180156118a757506000198214155b15611abc5760006118b783611c68565b6040805161010081018252825463ffffffff8082168352600160201b820481166020840152600160401b8204811693830193909352600160601b81049092166060820152600160801b82046001600160401b03166080820152600160c01b90910460ff16151560a082015260018201805491929160c08401919061193a906146e9565b80601f0160208091040260200160405190810160405280929190818152602001828054611966906146e9565b80156119b35780601f10611988576101008083540402835291602001916119b3565b820191906000526020600020905b81548152906001019060200180831161199657829003601f168201915b5050509183525050600291909101546001600160a01b0316602091820152810151909150600090611a0390859085906119fe9089906119f990849063ffffffff1661474a565b6132a6565b6132be565b509050837f0786596b8e43634ef53d523fd318795a1182175b0b0a658bc4aac58ecfcc5411826001604051611a39929190614888565b60405180910390a2816020015163ffffffff16815184611a5991906147af565b1415611a9857600092506001611a6d612058565b611a77919061474a565b841415611a88576000199350611aa7565b611a91846148ac565b9350611aa7565b8051611aa490846147af565b92505b8051611ab3908661474a565b94505050611895565b611ac5826134a0565b611ace816134ce565b505050565b81611adc61141b565b6001600160a01b0316336001600160a01b03161415611b5e57611afe826134fc565b6000611b0984611c68565b6002810180546001600160a01b0319166001600160a01b0386169081179091556040519192509085907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e790600090a350505050565b6000611b6982611c68565b8054909150600160c01b900460ff16611b98576040516301550a7360e41b8152600481018390526024016104de565b60028101546001600160a01b03163314611bc7573360405163472511eb60e11b81526004016104de91906145a2565b611bd0836134fc565b6000611bdb85611c68565b6002810180546001600160a01b0319166001600160a01b0387169081179091556040519192509086907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e790600090a35050505050565b610547611c5f60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd61474a565b829055565b9055565b600080611c8460016000805160206149d483398151915261474a565b805490915081908410611cad576040516302d72d2160e01b8152600481018590526024016104de565b806000018481548110611cc257611cc261471e565b906000526020600020906003020192505050919050565b6000610aa9613523565b611cec816134fc565b611cf581613553565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b611d358161355c565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b6000610aa9613565565b6000611d8183611c68565b80546bffffffffffffffffffffffff60601b1916600160601b63ffffffff949094169390930267ffffffffffffffff60801b191692909217600160801b436001600160401b031602179091555050565b6060806000611def60016000805160206149f483398151915261474a565b600086815260208281526040808320888452909152902080549192508291611ea3908290611e1c906146e9565b80601f0160208091040260200160405190810160405280929190818152602001828054611e48906146e9565b8015611e955780601f10611e6a57610100808354040283529160200191611e95565b820191906000526020600020905b815481529060010190602001808311611e7857829003601f168201915b505050505060006030612d5a565b9450611f3b818054611eb4906146e9565b80601f0160208091040260200160405190810160405280929190818152602001828054611ee0906146e9565b8015611f2d5780601f10611f0257610100808354040283529160200191611f2d565b820191906000526020600020905b815481529060010190602001808311611f1057829003601f168201915b505050505060306060612d5a565b93505050509250929050565b60606000611f6460016000805160206149f483398151915261474a565b600085815260208281526040808320878452909152902080549192508291611f8b906146e9565b80601f0160208091040260200160405190810160405280929190818152602001828054611fb7906146e9565b80156120045780601f10611fd957610100808354040283529160200191612004565b820191906000526020600020905b815481529060010190602001808311611fe757829003601f168201915b50505050509250505092915050565b600061202e60016000805160206149f483398151915261474a565b600085815260208281526040808320878452825290912084519293508392610ee792860190613f9f565b60008061207460016000805160206149d483398151915261474a565b5492915050565b6000610aa96120ab60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd61474a565b5490565b60006120b9613595565b905060005b818110156117c25760006120d1826135c3565b604080516101008101909152815460ff16151581526001820180549192916020840191906120fe906146e9565b80601f016020809104026020016040519081016040528092919081815260200182805461212a906146e9565b80156121775780601f1061214c57610100808354040283529160200191612177565b820191906000526020600020905b81548152906001019060200180831161215a57829003601f168201915b505050505081526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050905061226e604051806101000160405280836060015163ffffffff168152602001836080015163ffffffff168152602001600063ffffffff1681526020018360a0015163ffffffff1681526020018360e001516001600160401b031681526020018360000151151581526020018360200151815260200183604001516001600160a01b0316815250612b8d565b50506001016120be565b6000610aa96120ab60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c61474a565b6000806122b3613646565b9150915060006122c1612d19565b9050816122ce5750505050565b60006122d8613216565b90508060005b848110156123fd5760008682815181106122fa576122fa61471e565b6020026020010151604001519050600061231486846138ce565b90508063ffffffff168263ffffffff1610156123f35787838151811061233c5761233c61471e565b60200260200101516060015163ffffffff167f281aaa50816d3a5bf2911e3c0854a3f2ebe4880698575d799ff5becfd74d7778838360405161239192919063ffffffff92831681529116602082015260400190565b60405180910390a26123a38282614761565b8884815181106123b5576123b561471e565b60200260200101516080018181516123cd9190614860565b63ffffffff169052506123e08282614761565b6123f09063ffffffff16866147af565b94505b50506001016122de565b505b85156125e0576000806000805b878110156124a05760006124388a838151811061242b5761242b61471e565b6020026020010151613935565b90508463ffffffff168163ffffffff16141561245e57612457836148c7565b9250612497565b8463ffffffff168163ffffffff16111561247f579392506001915083612497565b8363ffffffff168163ffffffff161115612497578093505b5060010161240c565b5063ffffffff83161580156124ba5750868163ffffffff16145b156124c7575050506125e0565b60006124ed826124d78587614761565b6124e191906148eb565b63ffffffff168b6132a6565b905060006124fb838361492d565b63ffffffff16905060005b898110156125c3578563ffffffff1661252a8c838151811061242b5761242b61471e565b63ffffffff1614156125bb576000808311612546576000612549565b60015b60ff166125568686614950565b6125609190614860565b9050808c83815181106125755761257561471e565b602002602001015160800181815161258d9190614860565b63ffffffff9081169091526125a5915082168a6147af565b985082156125b9576125b683614973565b92505b505b600101612506565b506125d463ffffffff83168c61474a565b9a5050505050506123ff565b60005b8481101561274a5760008682815181106125ff576125ff61471e565b60200260200101516080015163ffffffff16111561274257600061264587838151811061262e5761262e61471e565b60200260200101516060015163ffffffff16611c68565b60000160089054906101000a900463ffffffff16905086828151811061266d5761266d61471e565b602002602001015160800151816126849190614860565b61269988848151811061262e5761262e61471e565b60000160086101000a81548163ffffffff021916908363ffffffff1602179055508682815181106126cc576126cc61471e565b60200260200101516060015163ffffffff167f0377278faa3eeab09525915d783771e1b00fec4797719afc368b56f6856279258884815181106127115761271161471e565b602002602001015160800151836127289190614860565b60405163ffffffff909116815260200160405180910390a2505b6001016125e3565b50808214610ee75761275b8261395a565b60408051828152602081018490527fb5e027491564f379aef806ebcf101764f2f9942321b10d116b9cad3c653ce027910160405180910390a1505050505050565b6060806000806127aa613988565b91509150806000141561281a5760408051600080825260208201909252906127e2565b60608152602001906001900390816127cd5790505b50604080516000808252602082019092529061280e565b60608152602001906001900390816127f95790505b50935093505050915091565b84156129bd5760005b8181101561285f5761284d8382815181106128405761284061471e565b6020026020010151613c6b565b156128575761285f565b600101612823565b8181141561286d57506129bd565b600061287a8260016147af565b90505b828110156128ea576128a784838151811061289a5761289a61471e565b6020026020010151613c97565b6128bc85838151811061289a5761289a61471e565b1080156128d957506128d98482815181106128405761284061471e565b156128e2578091505b60010161287d565b50600061297461296e8584815181106129055761290561471e565b6020026020010151608001518685815181106129235761292361471e565b6020026020010151602001516129399190614860565b86858151811061294b5761294b61471e565b6020026020010151600001516129619190614761565b63ffffffff1660056132a6565b886132a6565b9050808483815181106129895761298961471e565b60200260200101516080018181516129a19190614860565b63ffffffff169052506129b4818861474a565b9650505061281a565b60005b81811015612b665760008382815181106129dc576129dc61471e565b60200260200101516080015163ffffffff161115612b5657600080612a6b858481518110612a0c57612a0c61471e565b60200260200101516060015163ffffffff16868581518110612a3057612a3061471e565b60200260200101516020015163ffffffff16878681518110612a5457612a5461471e565b60200260200101516080015163ffffffff166132be565b91509150848381518110612a8157612a8161471e565b60200260200101516060015163ffffffff167f0786596b8e43634ef53d523fd318795a1182175b0b0a658bc4aac58ecfcc5411836000604051612ac5929190614888565b60405180910390a2612ad78783613cd6565b9650612ae38682613cd6565b9550848381518110612af757612af761471e565b602002602001015160800151612b1886858151811061262e5761262e61471e565b8054600490612b35908490600160201b900463ffffffff16614860565b92506101000a81548163ffffffff021916908363ffffffff16021790555050505b612b5f816148ac565b90506129c0565b505050915091565b805161054757604051638d46fe0560e01b815260040160405180910390fd5b6000612b9c8260e001516134fc565b612ba98260c00151612b6e565b6000612bc460016000805160206149d483398151915261474a565b8054600181810183556000838152602090819020875160039094020180548289015160408a015160608b015160808c015160a08d01511515600160c01b0260ff60c01b196001600160401b03909216600160801b029190911668ffffffffffffffffff60801b1963ffffffff938416600160601b0263ffffffff60601b19958516600160401b029590951667ffffffffffffffff60401b19968516600160201b0267ffffffffffffffff1990981694909b169390931795909517939093169790971717959095161793909317835560c087015180519495508594889493612cb093908501920190613f9f565b5060e09190910151600290910180546001600160a01b0319166001600160a01b03909216919091179055549392505050565b612ceb816134fc565b610547611c5f60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c61474a565b6000806113dd60017fca4f80ba17934f16b2ab62d95f37e3941e8ecf8da46337200d0a2c44b7d6be3861474a565b60006113dd612d54612d19565b836138ce565b60608182601f011015612d80576040516323d5783d60e11b815260040160405180910390fd5b612d8a82846147af565b84511015612dab57604051633b99b53d60e01b815260040160405180910390fd5b606082158015612dca5760405191506000825260208201604052612e14565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612e03578051835260209283019201612deb565b5050858452601f01601f1916604052505b50949350505050565b8080612e3c576040516397791ee160e01b815260040160405180910390fd5b600083836000818110612e5157612e5161471e565b9050602002016020810190612e66919061480a565b90506000612e72612058565b612e7d60018561474a565b1115612e9c57604051634eb7083160e01b815260040160405180910390fd5b60015b83811015612ee257858582818110612eb957612eb961471e565b9050602002016020810190612ece919061480a565b612ed89083614860565b9150600101612e9f565b508063ffffffff168263ffffffff1614612f0f57604051636be992a360e11b815260040160405180910390fd5b612f4b858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613de092505050565b7fb795d99e37bbcdcebb613387f4e924b750cbae0af45b48ba52bfe1137c10e9928585604051612f7c92919061498a565b60405180910390a15050505050565b60606000612fa860016000805160206149d483398151915261474a565b80549091508190600090815b8181101561300057836000018181548110612fd157612fd161471e565b6000918252602090912060039091020154600160c01b900460ff1615612ff8578260010192505b600101612fb4565b506000826001600160401b0381111561301b5761301b614786565b60405190808252806020026020018201604052801561305457816020015b613041613ed8565b8152602001906001900390816130395790505b5090506000805b8381101561320a578560000181815481106130785761307861471e565b6000918252602090912060039091020154600160c01b900460ff1615613202578560000181815481106130ad576130ad61471e565b600091825260209182902060408051610100810182526003909302909101805463ffffffff8082168552600160201b8204811695850195909552600160401b8104851692840192909252600160601b820490931660608301526001600160401b03600160801b820416608083015260ff600160c01b90910416151560a082015260018201805491929160c084019190613145906146e9565b80601f0160208091040260200160405190810160405280929190818152602001828054613171906146e9565b80156131be5780601f10613193576101008083540402835291602001916131be565b820191906000526020600020905b8154815290600101906020018083116131a157829003601f168201915b5050509183525050600291909101546001600160a01b031660209091015283518490849081106131f0576131f061471e565b60200260200101819052508160010191505b60010161305b565b50909695505050505050565b6000610aa96120ab60017f458205a0e48c2fdefa87d205cbceb76fd2ca8726a9abe39442360dd73d28c99f61474a565b6000610aa96120ab60017ffd9ec671ae9f85315a7ebfb0534d94239eaacef5a704bcb705c041ce1249135761474a565b6000610aa96120ab60017fbd3f712f2cd882f839e84eb12fdaf64f8227409d140027dbdcd5e2ee4d57fa2061474a565b60008183116132b557826132b7565b815b9392505050565b606080826001600160401b038111156132d9576132d9614786565b60405190808252806020026020018201604052801561330c57816020015b60608152602001906001900390816132f75790505b509150826001600160401b0381111561332757613327614786565b60405190808252806020026020018201604052801561335a57816020015b60608152602001906001900390816133455790505b509050600061337860016000805160206149f483398151915261474a565b90508060005b858110156134955760008881526020839052604081208161339f8a856147af565b815260200190815260200160002080546133b8906146e9565b80601f01602080910402602001604051908101604052809291908181526020018280546133e4906146e9565b80156134315780601f1061340657610100808354040283529160200191613431565b820191906000526020600020905b81548152906001019060200180831161341457829003601f168201915b505050505090506134458160006030612d5a565b8683815181106134575761345761471e565b602002602001018190525061346f8160306060612d5a565b8583815181106134815761348161471e565b60209081029190910101525060010161337e565b505050935093915050565b610547611c5f60017ffd9ec671ae9f85315a7ebfb0534d94239eaacef5a704bcb705c041ce1249135761474a565b610547611c5f60017fbd3f712f2cd882f839e84eb12fdaf64f8227409d140027dbdcd5e2ee4d57fa2061474a565b6001600160a01b0381166105475760405163f6b2911f60e01b815260040160405180910390fd5b6000610aa96120ab60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a984728161474a565b61054781613e24565b61054781613e5b565b6000610aa96120ab60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb11361474a565b60008061207460017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe1011361474a565b6000806135f160017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe1011361474a565b80549091508190841061361a576040516302d72d2160e01b8152600481018590526024016104de565b80600001848154811061362f5761362f61471e565b906000526020600020906008020192505050919050565b606060008061366460016000805160206149d483398151915261474a565b8054909150819060009081816001600160401b0381111561368757613687614786565b6040519080825280602002602001820160405280156136c057816020015b6136ad614013565b8152602001906001900390816136a55790505b50905060005b828110156138c15761381a8560000182815481106136e6576136e661471e565b600091825260209182902060408051610100810182526003909302909101805463ffffffff8082168552600160201b8204811695850195909552600160401b8104851692840192909252600160601b820490931660608301526001600160401b03600160801b820416608083015260ff600160c01b90910416151560a082015260018201805491929160c08401919061377e906146e9565b80601f01602080910402602001604051908101604052809291908181526020018280546137aa906146e9565b80156137f75780601f106137cc576101008083540402835291602001916137f7565b820191906000526020600020905b8154815290600101906020018083116137da57829003601f168201915b5050509183525050600291909101546001600160a01b0316602090910152613e89565b156138b95760008560000182815481106138365761383661471e565b600091825260208083206040805160a0810182526003909402909101805463ffffffff8082168652600160201b8204811694860194909452600160401b9004831691840191909152908516606083015260808201929092528451919250908490879081106138a6576138a661471e565b6020026020010181905250846001019450505b6001016136c6565b5096919550909350505050565b81546000906138de8360016147af565b106138eb575060006113dd565b826138f78360016147af565b815481106139075761390761471e565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16905092915050565b60008160800151826040015161394b9190614860565b82602001516113dd9190614761565b610547611c5f60017f458205a0e48c2fdefa87d205cbceb76fd2ca8726a9abe39442360dd73d28c99f61474a565b60606000806139a660016000805160206149d483398151915261474a565b8054909150819060009081816001600160401b038111156139c9576139c9614786565b604051908082528060200260200182016040528015613a0257816020015b6139ef614013565b8152602001906001900390816139e75790505b5090506000613a0f612d19565b905060005b83811015613c5c57613b68866000018281548110613a3457613a3461471e565b600091825260209182902060408051610100810182526003909302909101805463ffffffff8082168552600160201b8204811695850195909552600160401b8104851692840192909252600160601b820490931660608301526001600160401b03600160801b820416608083015260ff600160c01b90910416151560a082015260018201805491929160c084019190613acc906146e9565b80601f0160208091040260200160405190810160405280929190818152602001828054613af8906146e9565b8015613b455780601f10613b1a57610100808354040283529160200191613b45565b820191906000526020600020905b815481529060010190602001808311613b2857829003601f168201915b5050509183525050600291909101546001600160a01b0316602090910152613eb4565b8015613bb55750856000018181548110613b8457613b8461471e565b6000918252602090912060039091020154600160401b900463ffffffff16613bac83836138ce565b63ffffffff1610155b15613c54576000866000018281548110613bd157613bd161471e565b600091825260208083206040805160a0810182526003909402909101805463ffffffff8082168652600160201b8204811694860194909452600160401b900483169184019190915290851660608301526080820192909252855191925090859088908110613c4157613c4161471e565b6020026020010181905250856001019550505b600101613a14565b50909792965091945050505050565b80516080820151602083015160009263ffffffff1691613c8a91614860565b63ffffffff161092915050565b6000613cac826060015163ffffffff16612d47565b82608001518360200151613cc09190614860565b613cca9190614761565b63ffffffff1692915050565b6060600082518451613ce891906147af565b6001600160401b03811115613cff57613cff614786565b604051908082528060200260200182016040528015613d3257816020015b6060815260200190600190039081613d1d5790505b50905060005b8451811015613d8057848181518110613d5357613d5361471e565b6020026020010151828281518110613d6d57613d6d61471e565b6020908102919091010152600101613d38565b5060005b8351811015613dd857838181518110613d9f57613d9f61471e565b602002602001015182865183613db591906147af565b81518110613dc557613dc561471e565b6020908102919091010152600101613d84565b509392505050565b6000613e0d60017fca4f80ba17934f16b2ab62d95f37e3941e8ecf8da46337200d0a2c44b7d6be3861474a565b82519091508190610a999082906020860190614041565b613e2d816134fc565b610547611c5f60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb11361474a565b610547611c5f60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a984728161474a565b60008160a0015180156113dd5750816040015163ffffffff16826020015163ffffffff161192915050565b60008160a0015180156113dd5750506020810151905163ffffffff91821691161190565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082015260e081019190915290565b828054613f27906146e9565b90600052602060002090601f016020900481019282613f495760008555613f8f565b82601f10613f625782800160ff19823516178555613f8f565b82800160010185558215613f8f579182015b82811115613f8f578235825591602001919060010190613f74565b50613f9b9291506140e7565b5090565b828054613fab906146e9565b90600052602060002090601f016020900481019282613fcd5760008555613f8f565b82601f10613fe657805160ff1916838001178555613f8f565b82800160010185558215613f8f579182015b82811115613f8f578251825591602001919060010190613ff8565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b82805482825590600052602060002090600701600890048101928215613f8f5791602002820160005b838211156140ae57835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030261406a565b80156140de5782816101000a81549063ffffffff02191690556004016020816003010492830192600103026140ae565b5050613f9b9291505b5b80821115613f9b57600081556001016140e8565b60006020828403121561410e57600080fd5b5035919050565b6000815180845260005b8181101561413b5760208185018101518683018201520161411f565b8181111561414d576000602083870101525b50601f01601f19169290920160200192915050565b600061010063ffffffff8084511685528060208501511660208601528060408501511660408601528060608501511660608601525060808301516141b160808601826001600160401b03169052565b5060a08301516141c560a086018215159052565b5060c08301518160c08601526141dd82860182614115565b91505060e0830151613dd860e08601826001600160a01b03169052565b6020815260006132b76020830184614162565b80356001600160a01b038116811461422457600080fd5b919050565b60006020828403121561423b57600080fd5b6132b78261420d565b60008083601f84011261425657600080fd5b5081356001600160401b0381111561426d57600080fd5b6020830191508360208260051b850101111561428857600080fd5b9250929050565b6000806000604084860312156142a457600080fd5b8335925060208401356001600160401b038111156142c157600080fd5b6142cd86828701614244565b9497909650939450505050565b600081518084526020808501808196508360051b8101915082860160005b85811015614322578284038952614310848351614115565b988501989350908401906001016142f8565b5091979650505050505050565b60408152600061434260408301856142da565b828103602084015261435481856142da565b95945050505050565b60008060008060006060868803121561437557600080fd5b85356001600160401b038082111561438c57600080fd5b61439889838a01614244565b909750955060208801359150808211156143b157600080fd5b506143be88828901614244565b96999598509660400135949350505050565b60008083601f8401126143e257600080fd5b5081356001600160401b038111156143f957600080fd5b60208301915083602082850101111561428857600080fd5b60008060006040848603121561442657600080fd5b8335925060208401356001600160401b0381111561444357600080fd5b6142cd868287016143d0565b60008060006040848603121561446457600080fd5b83356001600160401b0381111561447a57600080fd5b614486868287016143d0565b909450925061449990506020850161420d565b90509250925092565b600080604083850312156144b557600080fd5b6144be8361420d565b91506144cc6020840161420d565b90509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561320a57835163ffffffff16835292840192918401916001016144f1565b6000806040838503121561452657600080fd5b823591506020830135801515811461453d57600080fd5b809150509250929050565b6000806040838503121561455b57600080fd5b50508035926020909101359150565b60608152600061457d6060830186614115565b828103602084015261458f8186614115565b9150508215156040830152949350505050565b6001600160a01b0391909116815260200190565b803563ffffffff8116811461422457600080fd5b600080600080606085870312156145e057600080fd5b843593506145f0602086016145b6565b925060408501356001600160401b0381111561460b57600080fd5b614617878288016143d0565b95989497509550505050565b6000806020838503121561463657600080fd5b82356001600160401b0381111561464c57600080fd5b61465885828601614244565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156146b957603f198886030184526146a7858351614162565b9450928501929085019060010161468b565b5092979650505050505050565b600080604083850312156146d957600080fd5b823591506144cc6020840161420d565b600181811c908216806146fd57607f821691505b6020821081141561132f57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561475c5761475c614734565b500390565b600063ffffffff8381169083168181101561477e5761477e614734565b039392505050565b634e487b7160e01b600052604160045260246000fd5b6020815260006132b76020830184614115565b600082198211156147c2576147c2614734565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8381526040602082015260006143546040830184866147c7565b60006020828403121561481c57600080fd5b6132b7826145b6565b6020815260006148396020830184866147c7565b949350505050565b600081600019048311821515161561485b5761485b614734565b500290565b600063ffffffff80831681851680830382111561487f5761487f614734565b01949350505050565b60408152600061489b60408301856142da565b905082151560208301529392505050565b60006000198214156148c0576148c0614734565b5060010190565b600063ffffffff808316818114156148e1576148e1614734565b6001019392505050565b600063ffffffff8083168185168183048111821515161561490e5761490e614734565b02949350505050565b634e487b7160e01b600052601260045260246000fd5b600063ffffffff8084168061494457614944614917565b92169190910692915050565b600063ffffffff8084168061496757614967614917565b92169190910492915050565b60008161498257614982614734565b506000190190565b60208082528181018390526000908460408401835b868110156149c85763ffffffff6149b5846145b6565b168252918301919083019060010161499f565b50969550505050505056fed952c686c15834d48f07b553712c51f877261827559f149880caa855efa22f7d6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574a2646970667358221220b14ee98c4e2dc473bdba515ae367f37ce756e21a168f58d77ef7473d494f55c264736f6c634300080a0033",
  "devdoc": {
    "author": "Kiln",
    "errors": {
      "InactiveOperator(uint256)": [
        {
          "params": {
            "index": "The operator index"
          }
        }
      ],
      "InvalidInitialization(uint256,uint256)": [
        {
          "params": {
            "expectedVersion": "The version that was expected",
            "version": "The version that was attempting to be initialized"
          }
        }
      ],
      "OperatorLimitTooHigh(uint256,uint256,uint256)": [
        {
          "params": {
            "index": "The operator index",
            "keyCount": "The operator key count",
            "limit": "The new limit provided"
          }
        }
      ],
      "OperatorLimitTooLow(uint256,uint256,uint256)": [
        {
          "params": {
            "fundedKeyCount": "The operator funded key count",
            "index": "The operator index",
            "limit": "The new limit provided"
          }
        }
      ],
      "OperatorNotFound(uint256)": [
        {
          "params": {
            "index": "The provided index"
          }
        },
        {
          "params": {
            "index": "The provided index"
          }
        }
      ],
      "Unauthorized(address)": [
        {
          "params": {
            "caller": "Address performing the call"
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "acceptAdmin()": {
        "details": "Only callable by the pending admin. Resets the pending admin if succesful."
      },
      "addOperator(string,address)": {
        "details": "Only callable by the administrator",
        "params": {
          "_name": "The name identifying the operator",
          "_operator": "The address representing the operator, receiving the rewards"
        },
        "returns": {
          "_0": "The index of the new operator"
        }
      },
      "addValidators(uint256,uint32,bytes)": {
        "details": "Only callable by the administrator or the operator address",
        "params": {
          "_index": "The operator index",
          "_keyCount": "The amount of keys provided",
          "_publicKeysAndSignatures": "Public keys of the validator, concatenated"
        }
      },
      "forceFundedValidatorKeysEventEmission(uint256)": {
        "params": {
          "amountToEmit": "The amount of events to emit at maximum in this call"
        }
      },
      "getAdmin()": {
        "returns": {
          "_0": "The admin address"
        }
      },
      "getOperator(uint256)": {
        "params": {
          "_index": "The index of the operator"
        },
        "returns": {
          "_0": "The details of the operator"
        }
      },
      "getOperatorCount()": {
        "returns": {
          "_0": "The operator count"
        }
      },
      "getOperatorStoppedValidatorCount(uint256)": {
        "params": {
          "_idx": "The index of the operator"
        },
        "returns": {
          "_0": "The stopped validator count of the operator"
        }
      },
      "getPendingAdmin()": {
        "returns": {
          "_0": "The pending admin address"
        }
      },
      "getRiver()": {
        "returns": {
          "_0": "The address of River"
        }
      },
      "getStoppedValidatorCountPerOperator()": {
        "returns": {
          "_0": "The stopped validator array"
        }
      },
      "getTotalRequestedValidatorExitsCount()": {
        "returns": {
          "_0": "The total requested exit count"
        }
      },
      "getTotalStoppedValidatorCount()": {
        "returns": {
          "_0": "The total stopped validator count"
        }
      },
      "getValidator(uint256,uint256)": {
        "params": {
          "_operatorIndex": "The index of the operator",
          "_validatorIndex": "The index of the validator"
        },
        "returns": {
          "funded": "True if validator has been funded",
          "publicKey": "The public key of the validator",
          "signature": "The signature used during deposit"
        }
      },
      "initOperatorsRegistryV1(address,address)": {
        "params": {
          "_admin": "Admin in charge of managing operators",
          "_river": "Address of River system"
        }
      },
      "listActiveOperators()": {
        "returns": {
          "_0": "The list of active operators and their details"
        }
      },
      "pickNextValidatorsToDeposit(uint256)": {
        "params": {
          "_count": "Max amount of keys requested"
        },
        "returns": {
          "publicKeys": "An array of public keys",
          "signatures": "An array of signatures linked to the public keys"
        }
      },
      "pickNextValidatorsToExit(uint256)": {
        "params": {
          "_count": "Max amount of exits to request"
        }
      },
      "proposeAdmin(address)": {
        "details": "This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.",
        "params": {
          "_newAdmin": "New admin address"
        }
      },
      "removeValidators(uint256,uint256[])": {
        "details": "Only callable by the administrator or the operator addressThe indexes must be provided sorted in decreasing order and duplicate-free, otherwise the method will revertThe operator limit will be set to the lowest deleted key index if the operator's limit wasn't equal to its total key countThe operator or the admin cannot remove funded keysWhen removing validators, the indexes of specific unfunded keys can be changed in order to properlyremove the keys from the storage array. Beware of this specific behavior when chaining calls as thetargeted public key indexes can point to a different key after a first call was made and performedsome swaps",
        "params": {
          "_index": "The operator index",
          "_indexes": "The indexes of the keys to remove"
        }
      },
      "reportStoppedValidatorCounts(uint32[])": {
        "params": {
          "stoppedValidatorCounts": "The new stopped validators array"
        }
      },
      "setOperatorAddress(uint256,address)": {
        "details": "Only callable by the administrator or the previous operator address",
        "params": {
          "_index": "The operator index",
          "_newOperatorAddress": "The new address of the operator"
        }
      },
      "setOperatorLimits(uint256[],uint32[],uint256)": {
        "details": "Only callable by the administratorThe operator indexes must be in increasing order and contain no duplicateThe limit cannot exceed the total key count of the operatorThe _indexes and _newLimits must have the same length.Each limit value is applied to the operator index at the same index in the _indexes array.",
        "params": {
          "_newLimits": "The new staking limit of the operators",
          "_operatorIndexes": "The operator indexes, in increasing order and duplicate free",
          "_snapshotBlock": "The block number at which the snapshot was computed"
        }
      },
      "setOperatorName(uint256,string)": {
        "details": "Only callable by the administrator or the operator",
        "params": {
          "_index": "The operator index",
          "_newName": "The new operator name"
        }
      },
      "setOperatorStatus(uint256,bool)": {
        "details": "Only callable by the administrator",
        "params": {
          "_index": "The operator index",
          "_newStatus": "The new status of the operator"
        }
      }
    },
    "title": "Operators Registry (v1)",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "FundedKeyEventMigrationComplete()": [
        {
          "notice": "Emitted when the event rebroadcasting is done and we attempt to broadcast new events"
        }
      ],
      "InactiveOperator(uint256)": [
        {
          "notice": "The calling operator is inactive"
        }
      ],
      "InvalidArrayLengths()": [
        {
          "notice": "The provided operator and limits array have different lengths"
        }
      ],
      "InvalidEmptyArray()": [
        {
          "notice": "The provided operator and limits array are empty"
        }
      ],
      "InvalidEmptyStoppedValidatorCountsArray()": [
        {
          "notice": "Thrown when an invalid empty stopped validator array is provided"
        }
      ],
      "InvalidEmptyString()": [
        {
          "notice": "The string is empty"
        }
      ],
      "InvalidFundedKeyDeletionAttempt()": [
        {
          "notice": "A funded key deletion has been attempted"
        }
      ],
      "InvalidIndexOutOfBounds()": [
        {
          "notice": "The index that is removed is out of bounds"
        }
      ],
      "InvalidInitialization(uint256,uint256)": [
        {
          "notice": "An error occured during the initialization"
        }
      ],
      "InvalidKeyCount()": [
        {
          "notice": "The provided key count is 0"
        }
      ],
      "InvalidKeysLength()": [
        {
          "notice": "The provided concatenated keys do not have the expected length"
        }
      ],
      "InvalidStoppedValidatorCountsSum()": [
        {
          "notice": "Thrown when the sum of stopped validators is invalid"
        }
      ],
      "InvalidUnsortedIndexes()": [
        {
          "notice": "The index provided are not sorted properly (descending order)"
        }
      ],
      "InvalidZeroAddress()": [
        {
          "notice": "The address is zero"
        }
      ],
      "OperatorLimitTooHigh(uint256,uint256,uint256)": [
        {
          "notice": "The value for the operator limit is too high"
        }
      ],
      "OperatorLimitTooLow(uint256,uint256,uint256)": [
        {
          "notice": "The value for the limit is too low"
        }
      ],
      "OperatorNotFound(uint256)": [
        {
          "notice": "The operator was not found"
        },
        {
          "notice": "The operator was not found"
        }
      ],
      "SliceOutOfBounds()": [
        {
          "notice": "The slice is outside of the initial bytes bounds"
        }
      ],
      "SliceOverflow()": [
        {
          "notice": "The length overflows an uint"
        }
      ],
      "StoppedValidatorCountsTooHigh()": [
        {
          "notice": "Thrown when the number of elements in the array is too high compared to operator count"
        }
      ],
      "Unauthorized(address)": [
        {
          "notice": "The operator is unauthorized for the caller"
        }
      ],
      "UnorderedOperatorList()": [
        {
          "notice": "The provided list of operators is not in increasing order"
        }
      ]
    },
    "events": {
      "AddedOperator(uint256,string,address)": {
        "notice": "A new operator has been added to the registry"
      },
      "AddedValidatorKeys(uint256,bytes)": {
        "notice": "The operator or the admin added new validator keys and signatures"
      },
      "FundedValidatorKeys(uint256,bytes[],bool)": {
        "notice": "A validator key got funded on the deposit contractThis event was introduced during a contract upgrade, in order to cover all possible public keys, this eventwill be replayed for past funded keys in order to have a complete coverage of all the funded public keys.In this particuliar scenario, the deferred value will be set to true, to indicate that we are not going to havethe expected additional events and side effects in the same transaction (deposit to official DepositContract etc ...) becausethe event was synthetically crafted."
      },
      "Initialize(uint256,bytes)": {
        "notice": "Emitted when the contract is properly initialized"
      },
      "OperatorEditsAfterSnapshot(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "The operator edited its keys after the snapshot block"
      },
      "OperatorLimitUnchanged(uint256,uint256)": {
        "notice": "The call didn't alter the limit of the operator"
      },
      "RemovedValidatorKey(uint256,bytes)": {
        "notice": "The operator or the admin removed a public key and its signature from the registry"
      },
      "RequestedValidatorExits(uint256,uint256)": {
        "notice": "The requested exit count has been updated"
      },
      "SetAdmin(address)": {
        "notice": "The admin address changed"
      },
      "SetOperatorAddress(uint256,address)": {
        "notice": "The operator address has been changed"
      },
      "SetOperatorLimit(uint256,uint256)": {
        "notice": "The operator limit has been changed"
      },
      "SetOperatorName(uint256,string)": {
        "notice": "The operator display name has been changed"
      },
      "SetOperatorStatus(uint256,bool)": {
        "notice": "The operator status has been changed"
      },
      "SetOperatorStoppedValidatorCount(uint256,uint256)": {
        "notice": "The operator stopped validator count has been changed"
      },
      "SetPendingAdmin(address)": {
        "notice": "The pending admin address changed"
      },
      "SetRiver(address)": {
        "notice": "The stored river address has been changed"
      },
      "SetTotalRequestedValidatorExits(uint256,uint256)": {
        "notice": "The total requested exit has been updated"
      },
      "UpdatedRequestedValidatorExitsUponStopped(uint256,uint32,uint32)": {
        "notice": "The requested exit count has been update to fill the gap with the reported stopped count"
      },
      "UpdatedStoppedValidators(uint32[])": {
        "notice": "The stopped validator array has been changedA validator is considered stopped if exiting, exited or slashedThis event is emitted when the oracle reports new stopped validators counts"
      }
    },
    "kind": "user",
    "methods": {
      "acceptAdmin()": {
        "notice": "Accept the transfer of ownership"
      },
      "addOperator(string,address)": {
        "notice": "Adds an operator to the registry"
      },
      "addValidators(uint256,uint32,bytes)": {
        "notice": "Adds new keys for an operator"
      },
      "forceFundedValidatorKeysEventEmission(uint256)": {
        "notice": "Utility to force the broadcasting of events. Will keep its progress in storage to prevent being DoSed by the number of keys"
      },
      "getAdmin()": {
        "notice": "Retrieves the current admin address"
      },
      "getOperator(uint256)": {
        "notice": "Get operator details"
      },
      "getOperatorCount()": {
        "notice": "Get operator count"
      },
      "getOperatorStoppedValidatorCount(uint256)": {
        "notice": "Retrieve the stopped validator count for an operator index"
      },
      "getPendingAdmin()": {
        "notice": "Retrieve the current pending admin address"
      },
      "getRiver()": {
        "notice": "Retrieve the River address"
      },
      "getStoppedValidatorCountPerOperator()": {
        "notice": "Retrieve the raw stopped validators array from storage"
      },
      "getTotalRequestedValidatorExitsCount()": {
        "notice": "Retrieve the total requested exit count"
      },
      "getTotalStoppedValidatorCount()": {
        "notice": "Retrieve the total stopped validator count"
      },
      "getValidator(uint256,uint256)": {
        "notice": "Get the details of a validator"
      },
      "initOperatorsRegistryV1(address,address)": {
        "notice": "Initializes the operators registry"
      },
      "initOperatorsRegistryV1_1()": {
        "notice": "Initializes the operators registry for V1_1"
      },
      "listActiveOperators()": {
        "notice": "Retrieve the active operator set"
      },
      "pickNextValidatorsToDeposit(uint256)": {
        "notice": "Retrieve validator keys based on operator statuses"
      },
      "pickNextValidatorsToExit(uint256)": {
        "notice": "Emits events for operators to exit validators"
      },
      "proposeAdmin(address)": {
        "notice": "Proposes a new address as admin"
      },
      "removeValidators(uint256,uint256[])": {
        "notice": "Remove validator keys"
      },
      "reportStoppedValidatorCounts(uint32[])": {
        "notice": "Allows river to override the stopped validators arrayThis actions happens during the Oracle report processing"
      },
      "setOperatorAddress(uint256,address)": {
        "notice": "Changes the operator address of an operator"
      },
      "setOperatorLimits(uint256[],uint32[],uint256)": {
        "notice": "Changes the operator staking limit"
      },
      "setOperatorName(uint256,string)": {
        "notice": "Changes the operator name"
      },
      "setOperatorStatus(uint256,bool)": {
        "notice": "Changes the operator status"
      }
    },
    "notice": "This contract handles the list of operators and their keys",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}