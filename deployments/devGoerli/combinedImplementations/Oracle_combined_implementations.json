{
    "address": "0x995CDF6c584EcD474D547a1B95b39Fc130f0b184",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newAddress",
                    "type": "address"
                }
            ],
            "name": "AddressAlreadyInUse",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "epochId",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "member",
                    "type": "address"
                }
            ],
            "name": "AlreadyReported",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "providedEpochId",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "minExpectedEpochId",
                    "type": "uint256"
                }
            ],
            "name": "EpochTooOld",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidArgument",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidCall",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "epoch",
                    "type": "uint256"
                }
            ],
            "name": "InvalidEpoch",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "version",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "expectedVersion",
                    "type": "uint256"
                }
            ],
            "name": "InvalidInitialization",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidZeroAddress",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "length",
                    "type": "uint256"
                }
            ],
            "name": "ReportIndexOutOfBounds",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "caller",
                    "type": "address"
                }
            ],
            "name": "Unauthorized",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "member",
                    "type": "address"
                }
            ],
            "name": "AddMember",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [],
            "name": "ClearedReporting",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "version",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "bytes",
                    "name": "cdata",
                    "type": "bytes"
                }
            ],
            "name": "Initialize",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "member",
                    "type": "address"
                }
            ],
            "name": "RemoveMember",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "member",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "variant",
                    "type": "bytes32"
                },
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "epoch",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "validatorsBalance",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "validatorsSkimmedBalance",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "validatorsExitedBalance",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "validatorsExitingBalance",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint32",
                            "name": "validatorsCount",
                            "type": "uint32"
                        },
                        {
                            "internalType": "uint32[]",
                            "name": "stoppedValidatorCountPerOperator",
                            "type": "uint32[]"
                        },
                        {
                            "internalType": "bool",
                            "name": "rebalanceDepositToRedeemMode",
                            "type": "bool"
                        },
                        {
                            "internalType": "bool",
                            "name": "slashingContainmentMode",
                            "type": "bool"
                        }
                    ],
                    "indexed": false,
                    "internalType": "struct IOracleManagerV1.ConsensusLayerReport",
                    "name": "report",
                    "type": "tuple"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "voteCount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "quorum",
                    "type": "uint256"
                }
            ],
            "name": "ReportedConsensusLayerData",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "SetAdmin",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "annualAprUpperBound",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "relativeLowerBound",
                    "type": "uint256"
                }
            ],
            "name": "SetBounds",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "lastReportedEpoch",
                    "type": "uint256"
                }
            ],
            "name": "SetLastReportedEpoch",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "oldAddress",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newAddress",
                    "type": "address"
                }
            ],
            "name": "SetMember",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "pendingAdmin",
                    "type": "address"
                }
            ],
            "name": "SetPendingAdmin",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "newQuorum",
                    "type": "uint256"
                }
            ],
            "name": "SetQuorum",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_river",
                    "type": "address"
                }
            ],
            "name": "SetRiver",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint64",
                    "name": "epochsPerFrame",
                    "type": "uint64"
                },
                {
                    "indexed": false,
                    "internalType": "uint64",
                    "name": "slotsPerEpoch",
                    "type": "uint64"
                },
                {
                    "indexed": false,
                    "internalType": "uint64",
                    "name": "secondsPerSlot",
                    "type": "uint64"
                },
                {
                    "indexed": false,
                    "internalType": "uint64",
                    "name": "genesisTime",
                    "type": "uint64"
                }
            ],
            "name": "SetSpec",
            "type": "event"
        },
        {
            "inputs": [],
            "name": "acceptAdmin",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_newOracleMember",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_newQuorum",
                    "type": "uint256"
                }
            ],
            "name": "addMember",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getAdmin",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getGlobalReportStatus",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getLastReportedEpochId",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_oracleMember",
                    "type": "address"
                }
            ],
            "name": "getMemberReportStatus",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOracleMembers",
            "outputs": [
                {
                    "internalType": "address[]",
                    "name": "",
                    "type": "address[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPendingAdmin",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getQuorum",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_idx",
                    "type": "uint256"
                }
            ],
            "name": "getReportVariantDetails",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "bytes32",
                            "name": "variant",
                            "type": "bytes32"
                        },
                        {
                            "internalType": "uint256",
                            "name": "votes",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct ReportsVariants.ReportVariantDetails",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getReportVariantsCount",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getRiver",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_riverAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_administratorAddress",
                    "type": "address"
                },
                {
                    "internalType": "uint64",
                    "name": "_epochsPerFrame",
                    "type": "uint64"
                },
                {
                    "internalType": "uint64",
                    "name": "_slotsPerEpoch",
                    "type": "uint64"
                },
                {
                    "internalType": "uint64",
                    "name": "_secondsPerSlot",
                    "type": "uint64"
                },
                {
                    "internalType": "uint64",
                    "name": "_genesisTime",
                    "type": "uint64"
                },
                {
                    "internalType": "uint256",
                    "name": "_annualAprUpperBound",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_relativeLowerBound",
                    "type": "uint256"
                }
            ],
            "name": "initOracleV1",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "initOracleV1_1",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_memberAddress",
                    "type": "address"
                }
            ],
            "name": "isMember",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_newAdmin",
                    "type": "address"
                }
            ],
            "name": "proposeAdmin",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_oracleMember",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_newQuorum",
                    "type": "uint256"
                }
            ],
            "name": "removeMember",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "epoch",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "validatorsBalance",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "validatorsSkimmedBalance",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "validatorsExitedBalance",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "validatorsExitingBalance",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint32",
                            "name": "validatorsCount",
                            "type": "uint32"
                        },
                        {
                            "internalType": "uint32[]",
                            "name": "stoppedValidatorCountPerOperator",
                            "type": "uint32[]"
                        },
                        {
                            "internalType": "bool",
                            "name": "rebalanceDepositToRedeemMode",
                            "type": "bool"
                        },
                        {
                            "internalType": "bool",
                            "name": "slashingContainmentMode",
                            "type": "bool"
                        }
                    ],
                    "internalType": "struct IOracleManagerV1.ConsensusLayerReport",
                    "name": "_report",
                    "type": "tuple"
                }
            ],
            "name": "reportConsensusLayerData",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_oracleMember",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_newAddress",
                    "type": "address"
                }
            ],
            "name": "setMember",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_newQuorum",
                    "type": "uint256"
                }
            ],
            "name": "setQuorum",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_logic",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "__admin",
                    "type": "address"
                },
                {
                    "internalType": "bytes",
                    "name": "_data",
                    "type": "bytes"
                }
            ],
            "stateMutability": "payable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "CallWhenPaused",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "previousAdmin",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "newAdmin",
                    "type": "address"
                }
            ],
            "name": "AdminChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "beacon",
                    "type": "address"
                }
            ],
            "name": "BeaconUpgraded",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "Paused",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "Unpaused",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "implementation",
                    "type": "address"
                }
            ],
            "name": "Upgraded",
            "type": "event"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "admin",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "admin_",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newAdmin",
                    "type": "address"
                }
            ],
            "name": "changeAdmin",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "implementation",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "implementation_",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "pause",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "paused",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "unpause",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newImplementation",
                    "type": "address"
                }
            ],
            "name": "upgradeTo",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newImplementation",
                    "type": "address"
                },
                {
                    "internalType": "bytes",
                    "name": "data",
                    "type": "bytes"
                }
            ],
            "name": "upgradeToAndCall",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0x74d9c7341a0c83582444cb7265b7cffbe9ac7cc1a598e7d2638fda6e40f5546e",
    "receipt": {
        "to": null,
        "from": "0x341C40B94bF2afBFa42573cB78f16Ee15a056238",
        "contractAddress": "0x995CDF6c584EcD474D547a1B95b39Fc130f0b184",
        "transactionIndex": 46,
        "gasUsed": "879463",
        "logsBloom": "0x
        "blockHash": "0x22c117b0ec30f087930962a228943dad56afa152083983b108497897c6e17bd9",
        "transactionHash": "0x74d9c7341a0c83582444cb7265b7cffbe9ac7cc1a598e7d2638fda6e40f5546e",
        "logs": [
            {
                "transactionIndex": 46,
                "blockNumber": 9166612,
                "transactionHash": "0x74d9c7341a0c83582444cb7265b7cffbe9ac7cc1a598e7d2638fda6e40f5546e",
                "address": "0x995CDF6c584EcD474D547a1B95b39Fc130f0b184",
                "topics": [
                    "0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b",
                    "0x000000000000000000000000014e50c540213f5c91fd3dd960fb1255ea599f18"
                ],
                "data": "0x",
                "logIndex": 101,
                "blockHash": "0x22c117b0ec30f087930962a228943dad56afa152083983b108497897c6e17bd9"
            },
            {
                "transactionIndex": 46,
                "blockNumber": 9166612,
                "transactionHash": "0x74d9c7341a0c83582444cb7265b7cffbe9ac7cc1a598e7d2638fda6e40f5546e",
                "address": "0x995CDF6c584EcD474D547a1B95b39Fc130f0b184",
                "topics": [
                    "0x5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a1",
                    "0x0000000000000000000000001c8d258846f5e3eacc0885ad265fb505c69b600f"
                ],
                "data": "0x",
                "logIndex": 102,
                "blockHash": "0x22c117b0ec30f087930962a228943dad56afa152083983b108497897c6e17bd9"
            },
            {
                "transactionIndex": 46,
                "blockNumber": 9166612,
                "transactionHash": "0x74d9c7341a0c83582444cb7265b7cffbe9ac7cc1a598e7d2638fda6e40f5546e",
                "address": "0x995CDF6c584EcD474D547a1B95b39Fc130f0b184",
                "topics": [
                    "0xfc0d749143b04e0d92a3b49edae84a45f6bc88b75e99d9118ec4d7e87fe626c5"
                ],
                "data": "0x0000000000000000000000005b1dff31747bc2a35e459007869cc6fe8ba90212",
                "logIndex": 103,
                "blockHash": "0x22c117b0ec30f087930962a228943dad56afa152083983b108497897c6e17bd9"
            },
            {
                "transactionIndex": 46,
                "blockNumber": 9166612,
                "transactionHash": "0x74d9c7341a0c83582444cb7265b7cffbe9ac7cc1a598e7d2638fda6e40f5546e",
                "address": "0x995CDF6c584EcD474D547a1B95b39Fc130f0b184",
                "topics": [
                    "0x4a7503ca21ae5342feb83892e899e95fb309502a0016ed300e4965e2dbfe7335"
                ],
                "data": "0x00000000000000000000000000000000000000000000000000000000000000e10000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000006059f460",
                "logIndex": 104,
                "blockHash": "0x22c117b0ec30f087930962a228943dad56afa152083983b108497897c6e17bd9"
            },
            {
                "transactionIndex": 46,
                "blockNumber": 9166612,
                "transactionHash": "0x74d9c7341a0c83582444cb7265b7cffbe9ac7cc1a598e7d2638fda6e40f5546e",
                "address": "0x995CDF6c584EcD474D547a1B95b39Fc130f0b184",
                "topics": [
                    "0x5ab79ffcd89b6380c7fbdd89d02cfe3d9c53c99a85e150c2319075018d1aac5c"
                ],
                "data": "0x00000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000001f4",
                "logIndex": 105,
                "blockHash": "0x22c117b0ec30f087930962a228943dad56afa152083983b108497897c6e17bd9"
            },
            {
                "transactionIndex": 46,
                "blockNumber": 9166612,
                "transactionHash": "0x74d9c7341a0c83582444cb7265b7cffbe9ac7cc1a598e7d2638fda6e40f5546e",
                "address": "0x995CDF6c584EcD474D547a1B95b39Fc130f0b184",
                "topics": [
                    "0x8e72be630a666d46b219565c1647e3792924d9c74e901fa3c4a33e23b91fb9b1"
                ],
                "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "logIndex": 106,
                "blockHash": "0x22c117b0ec30f087930962a228943dad56afa152083983b108497897c6e17bd9"
            },
            {
                "transactionIndex": 46,
                "blockNumber": 9166612,
                "transactionHash": "0x74d9c7341a0c83582444cb7265b7cffbe9ac7cc1a598e7d2638fda6e40f5546e",
                "address": "0x995CDF6c584EcD474D547a1B95b39Fc130f0b184",
                "topics": [
                    "0x1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a71"
                ],
                "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000104bc8b8f970000000000000000000000005b1dff31747bc2a35e459007869cc6fe8ba902120000000000000000000000001c8d258846f5e3eacc0885ad265fb505c69b600f00000000000000000000000000000000000000000000000000000000000000e10000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000006059f46000000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000",
                "logIndex": 107,
                "blockHash": "0x22c117b0ec30f087930962a228943dad56afa152083983b108497897c6e17bd9"
            },
            {
                "transactionIndex": 46,
                "blockNumber": 9166612,
                "transactionHash": "0x74d9c7341a0c83582444cb7265b7cffbe9ac7cc1a598e7d2638fda6e40f5546e",
                "address": "0x995CDF6c584EcD474D547a1B95b39Fc130f0b184",
                "topics": [
                    "0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f"
                ],
                "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007706a7d768054c10eb4fc9103ea322f62831cb9",
                "logIndex": 108,
                "blockHash": "0x22c117b0ec30f087930962a228943dad56afa152083983b108497897c6e17bd9"
            }
        ],
        "blockNumber": 9166612,
        "cumulativeGasUsed": "5763399",
        "status": 1,
        "byzantium": true
    },
    "args": [
        "0x014e50c540213f5c91fD3DD960fb1255EA599F18",
        "0x07706A7D768054c10eB4FC9103Ea322f62831cb9",
        "0xbc8b8f970000000000000000000000005b1dff31747bc2a35e459007869cc6fe8ba902120000000000000000000000001c8d258846f5e3eacc0885ad265fb505c69b600f00000000000000000000000000000000000000000000000000000000000000e10000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000006059f46000000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000001f4"
    ],
    "numDeployments": 1,
    "solcInputHash": "803b991b13fc3eb82937205601e77786",
    "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallWhenPaused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kiln\",\"events\":{\"Paused(address)\":{\"params\":{\"admin\":\"The admin at the time of the pause event\"}},\"Unpaused(address)\":{\"params\":{\"admin\":\"The admin at the time of the unpause event\"}}},\"kind\":\"dev\",\"methods\":{\"admin()\":{\"details\":\"Returns the current admin. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\"},\"changeAdmin(address)\":{\"details\":\"Changes the admin of the proxy. Emits an {AdminChanged} event. NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\"},\"constructor\":{\"details\":\"The Admin of the proxy should not be the same as theadmin on the implementation logics. The admin here isthe only account allowed to perform calls on the proxy(the calls are never delegated to the implementation)\",\"params\":{\"__admin\":\"Address of the admin in charge of the proxy\",\"_data\":\"Calldata for an atomic initialization\",\"_logic\":\"Address of the implementation\"}},\"implementation()\":{\"details\":\"Returns the current implementation. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\"},\"pause()\":{\"details\":\"Pauses system\"},\"paused()\":{\"details\":\"Retrieves Paused state\",\"returns\":{\"_0\":\"Paused state\"}},\"unpause()\":{\"details\":\"Unpauses system\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy. NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy, and then call a function from the new implementation as specified by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract. NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\"}},\"title\":\"TUPProxy (Transparent Upgradeable Pausable Proxy)\",\"version\":1},\"userdoc\":{\"errors\":{\"CallWhenPaused()\":[{\"notice\":\"A call happened while the system was paused\"}]},\"events\":{\"Paused(address)\":{\"notice\":\"The system is now paused\"},\"Unpaused(address)\":{\"notice\":\"The system is now unpaused\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract extends the Transparent Upgradeable proxy and adds a system wide pause feature.         When the system is paused, the fallback will fail no matter what calls are made.         Address Zero is allowed to perform calls even if paused to allow view calls made         from RPC providers to properly work.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/TUPProxy.sol\":\"TUPProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/TUPProxy.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\n/// @title TUPProxy (Transparent Upgradeable Pausable Proxy)\\n/// @author Kiln\\n/// @notice This contract extends the Transparent Upgradeable proxy and adds a system wide pause feature.\\n///         When the system is paused, the fallback will fail no matter what calls are made.\\n///         Address Zero is allowed to perform calls even if paused to allow view calls made\\n///         from RPC providers to properly work.\\ncontract TUPProxy is TransparentUpgradeableProxy {\\n    /// @notice Storage slot of the pause status value\\n    bytes32 private constant _PAUSE_SLOT = bytes32(uint256(keccak256(\\\"river.tupproxy.pause\\\")) - 1);\\n\\n    /// @notice A call happened while the system was paused\\n    error CallWhenPaused();\\n\\n    /// @notice The system is now paused\\n    /// @param admin The admin at the time of the pause event\\n    event Paused(address admin);\\n\\n    /// @notice The system is now unpaused\\n    /// @param admin The admin at the time of the unpause event\\n    event Unpaused(address admin);\\n\\n    /// @dev The Admin of the proxy should not be the same as the\\n    /// @dev admin on the implementation logics. The admin here is\\n    /// @dev the only account allowed to perform calls on the proxy\\n    /// @dev (the calls are never delegated to the implementation)\\n    /// @param _logic Address of the implementation\\n    /// @param __admin Address of the admin in charge of the proxy\\n    /// @param _data Calldata for an atomic initialization\\n    constructor(address _logic, address __admin, bytes memory _data)\\n        payable\\n        TransparentUpgradeableProxy(_logic, __admin, _data)\\n    {}\\n\\n    /// @dev Retrieves Paused state\\n    /// @return Paused state\\n    function paused() external ifAdmin returns (bool) {\\n        return StorageSlot.getBooleanSlot(_PAUSE_SLOT).value;\\n    }\\n\\n    /// @dev Pauses system\\n    function pause() external ifAdmin {\\n        StorageSlot.getBooleanSlot(_PAUSE_SLOT).value = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /// @dev Unpauses system\\n    function unpause() external ifAdmin {\\n        StorageSlot.getBooleanSlot(_PAUSE_SLOT).value = false;\\n        emit Unpaused(msg.sender);\\n    }\\n\\n    /// @dev Overrides the fallback method to check if system is not paused before\\n    /// @dev Address Zero is allowed to perform calls even if system is paused. This allows\\n    /// view functions to be called when the system is paused as rpc providers can easily\\n    /// set the sender address to zero.\\n    function _beforeFallback() internal override {\\n        if (!StorageSlot.getBooleanSlot(_PAUSE_SLOT).value || msg.sender == address(0)) {\\n            super._beforeFallback();\\n        } else {\\n            revert CallWhenPaused();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x35bd93df3a77dae6301c8c0011d32f89efe3715fa2bdef7f2ad364949b7da6cb\",\"license\":\"BUSL-1.1\"},\"openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60806040523480156200001157600080fd5b506200002a6000196200007060201b62000d4e1760201c565b7f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a716000196000366040516200006293929190620000bd565b60405180910390a162000119565b620000b6620000a160017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd620000f3565b60001b82620000b960201b62000d811760201c565b50565b9055565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b6000828210156200011457634e487b7160e01b600052601160045260246000fd5b500390565b611c1080620001296000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806398041ea3116100ad578063c1ba4e5911610071578063c1ba4e5914610259578063c26c12eb1461026c578063d046815614610274578063dabb57571461027c578063fad2e86a1461029157600080fd5b806398041ea314610210578063a230c52414610223578063a519f06014610236578063b4aff5e71461023e578063bc8b8f971461024657600080fd5b806316f6f03e116100f457806316f6f03e146101aa5780635190dce0146101bd578063628105d1146101e057806365872cbe146101f35780636e9960c3146101fb57600080fd5b806303bc7f27146101315780630c647397146101465780630e18b68114610179578063147bf6c41461018157806314c8cd6a14610194575b600080fd5b61014461013f366004611739565b610299565b005b610159610154366004611774565b6105e7565b604080518251815260209283015192810192909252015b60405180910390f35b610144610683565b61014461018f3660046117a9565b6106da565b61019c610721565b604051908152602001610170565b6101446101b83660046117c4565b610730565b6101d06101cb3660046117a9565b6107f3565b6040519015158152602001610170565b6101446101ee3660046117ee565b61081e565b61019c610924565b61020361092e565b6040516101709190611821565b61014461021e3660046117c4565b610938565b6101d06102313660046117a9565b6109fc565b610203610a10565b610144610a1a565b61014461025436600461184c565b610aaf565b610144610267366004611774565b610caa565b61019c610d20565b610203610d2a565b610284610d34565b60405161017091906118d5565b61019c610d3e565b60006102a433610d85565b90508060001914156102d4573360405163472511eb60e11b81526004016102cb9190611821565b60405180910390fd5b60006102de610e06565b905082358111156103155782356102f3610e06565b6040516304f6456960e11b8152600481019290925260248201526044016102cb565b600061031f610e3a565b604051630f9f95a960e41b8152853560048201529091506001600160a01b0382169063f9f95a9090602401602060405180830381865afa158015610367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038b9190611930565b6103ab5760405163a225656d60e01b8152843560048201526024016102cb565b83358210156103fb576103bc610e6a565b6103c68435610ea5565b604051843581527f3b16582fd30a1d07d3a11bd74e5cd9290bd62bf73d4df6a19e434b5bde09c4769060200160405180910390a15b61040483610ed3565b1561042b57604051637a6a90d160e11b8152843560048201523360248201526044016102cb565b61043483610f04565b600061043f85610f48565b905060008061044d83610f78565b91509150600061045b611013565b905083337f76eeea294370eab10c370cba335d68bef19ccdb73231925a08563dcf69d5be678a61048c866001611963565b8560405161049c93929190611ac9565b60405180910390a3806104b0836001611963565b10610574576104bd610e6a565b6104d16104cc89356001611963565b610ea5565b6040516377eb342360e11b81526001600160a01b0386169063efd66846906104fd908b90600401611aee565b600060405180830381600087803b15801561051757600080fd5b505af115801561052b573d6000803e3d6000fd5b507f3b16582fd30a1d07d3a11bd74e5cd9290bd62bf73d4df6a19e434b5bde09c476925061055e91505089356001611963565b60405190815260200160405180910390a16105dd565b8161059c5761059760405180604001604052808681526020016001815250611043565b6105dd565b60016105a661108b565b84815481106105b7576105b7611b01565b906000526020600020906002020160010160008282546105d79190611963565b90915550505b5050505050505050565b60408051808201909152600080825260208201528161060461108b565b5411610636578161061361108b565b5460405163b21b708160e01b8152600481019290925260248201526044016102cb565b61063e61108b565b828154811061064f5761064f611b01565b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050919050565b61068b6110ad565b6001600160a01b0316336001600160a01b0316146106be573360405163472511eb60e11b81526004016102cb9190611821565b6106ce6106c96110ad565b6110b7565b6106d86000611100565b565b6106e2611140565b6001600160a01b0316336001600160a01b031614610715573360405163472511eb60e11b81526004016102cb9190611821565b61071e81611100565b50565b600061072b61114a565b905090565b610738611140565b6001600160a01b0316336001600160a01b03161461076b573360405163472511eb60e11b81526004016102cb9190611821565b600061077683610d85565b9050600081121561079a5760405163574b16a760e11b815260040160405180910390fd5b6107a381611168565b60006107ad611013565b90506107b9838261124b565b6040516001600160a01b038516907f7693a3e9eac51f172f145e6f54bc5554168997a1f4efb40f3fad091aa7cfb0e790600090a250505050565b6000806107ff83610d85565b90508060001914158015610817575061081781610ed3565b9392505050565b8161082761092e565b6001600160a01b0316336001600160a01b0316141580156108515750336001600160a01b03821614155b15610871573360405163472511eb60e11b81526004016102cb9190611821565b61087a826112df565b600061088583610d85565b126108a557816040516307bbad8160e51b81526004016102cb9190611821565b60006108b084610d85565b905060008112156108d45760405163574b16a760e11b815260040160405180910390fd5b6108de8184611306565b826001600160a01b0316846001600160a01b03167fc20826a9a3cb354d2c12357704db9eb03d7344375b092d70146dbbbc4d3f84d160405160405180910390a350505050565b600061072b610e06565b600061072b611140565b610940611140565b6001600160a01b0316336001600160a01b031614610973573360405163472511eb60e11b81526004016102cb9190611821565b600061097e83610d85565b9050600081126109a357826040516307bbad8160e51b81526004016102cb9190611821565b6109ac83611370565b60006109b6611013565b90506109c2838261124b565b6040516001600160a01b038516907f1a2323d99020f3db8e6ea85b1eea81e5bf422695877228e3d8a0241d7e957a6c90600090a250505050565b600080610a0883610d85565b121592915050565b600061072b610e3a565b6001610a246113c9565b8114610a555780610a336113c9565b604051631cfd276760e31b8152600481019290925260248201526044016102cb565b610a68610a63826001611963565b610d4e565b610a70610e6a565b7f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610aa493929190611b17565b60405180910390a150565b6000610ab96113c9565b8114610ac85780610a336113c9565b610ad6610a63826001611963565b610adf886110b7565b610ae8896113f9565b7ffc0d749143b04e0d92a3b49edae84a45f6bc88b75e99d9118ec4d7e87fe626c589604051610b179190611821565b60405180910390a1610b7c6040518060a00160405280896001600160401b03168152602001886001600160401b03168152602001876001600160401b03168152602001866001600160401b0316815260200160006001600160401b0316815250611430565b604080516001600160401b0389811682528881166020830152878116828401528616606082015290517f4a7503ca21ae5342feb83892e899e95fb309502a0016ed300e4965e2dbfe73359181900360800190a1610bec6040518060400160405280858152602001848152506114ec565b60408051848152602081018490527f5ab79ffcd89b6380c7fbdd89d02cfe3d9c53c99a85e150c2319075018d1aac5c910160405180910390a1610c2f600061152f565b604051600081527f8e72be630a666d46b219565c1647e3792924d9c74e901fa3c4a33e23b91fb9b19060200160405180910390a17f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610c9793929190611b17565b60405180910390a1505050505050505050565b610cb2611140565b6001600160a01b0316336001600160a01b031614610ce5573360405163472511eb60e11b81526004016102cb9190611821565b6000610cef611013565b905081811415610d125760405163a9cb9e0d60e01b815260040160405180910390fd5b610d1c828261124b565b5050565b600061072b611013565b600061072b6110ad565b606061072b61155d565b6000610d4861108b565b54919050565b61071e610d7c60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd611b4d565b829055565b9055565b600080610da16001600080516020611b7b833981519152611b4d565b90508060005b8154811015610dfa57846001600160a01b0316826000018281548110610dcf57610dcf611b01565b6000918252602090912001546001600160a01b03161415610df257949350505050565b600101610da7565b50600019949350505050565b600061072b610e3660017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed611b4d565b5490565b600061072b610e3660017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c611b4d565b610e726115dc565b610e7a611605565b6040517f59bc16d5874dc28f6f69be9e88387299800118ede161a5169eec92191977ebe590600090a1565b61071e610d7c60017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed611b4d565b6000600180831b9081908190610efb90610e3690600080516020611b9b833981519152611b4d565b16149392505050565b600180821b90610d1c90610f2690600080516020611b9b833981519152611b4d565b82610f43610e366001600080516020611b9b833981519152611b4d565b179055565b600081604051602001610f5b9190611aee565b604051602081830303815290604052805190602001209050919050565b6000806000610f8561108b565b54905060005b818110156110045784610f9c61108b565b8281548110610fad57610fad611b01565b9060005260206000209060020201600001541415610ffc5780610fce61108b565b8281548110610fdf57610fdf611b01565b906000526020600020906002020160010154935093505050915091565b600101610f8b565b50600019946000945092505050565b600061072b610e3660017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb611b4d565b600061105e6001600080516020611bbb833981519152611b4d565b80546001818101835560009283526020928390208551600290930201918255919093015192019190915550565b6000806110a76001600080516020611bbb833981519152611b4d565b92915050565b600061072b611627565b6110c0816112df565b6110c981611657565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b61110981611660565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b600061072b611669565b600061072b610e366001600080516020611b9b833981519152611b4d565b60006111836001600080516020611b7b833981519152611b4d565b8054909150819060009061119990600190611b4d565b9050838114611212578160000181815481106111b7576111b7611b01565b60009182526020909120015482546001600160a01b03909116908390869081106111e3576111e3611b01565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b815482908061122357611223611b64565b600082815260209020810160001990810180546001600160a01b031916905501905550505050565b600061125561155d565b519050821580156112665750600081115b8061127057508083115b1561128e5760405163a9cb9e0d60e01b815260040160405180910390fd5b611296610e6a565b8183146112da576112a68361152f565b6040518381527f8e72be630a666d46b219565c1647e3792924d9c74e901fa3c4a33e23b91fb9b19060200160405180910390a15b505050565b6001600160a01b03811661071e5760405163f6b2911f60e01b815260040160405180910390fd5b60006113216001600080516020611b7b833981519152611b4d565b80549091508190839082908690811061133c5761133c611b01565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b611379816112df565b60006113946001600080516020611b7b833981519152611b4d565b8054600181018255600091825260209091200180546001600160a01b0319166001600160a01b03939093169290921790915550565b600061072b610e3660017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd611b4d565b611402816112df565b61071e610d7c60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c611b4d565b600061145d60017fd84ee2c84c954c65bef1459fe03b761a42f49234527e3cd8fd9dce87cb83742b611b4d565b825181546020850151604086015160608701516001600160401b039485166001600160801b031990941693909317600160401b92851692909202919091176001600160801b0316600160801b918416919091026001600160c01b031617600160c01b918316919091021782556080909301516001909101805467ffffffffffffffff1916919093161790915550565b600061151960017ff81b149de6749a3f46464b2cce61e24462f67599ea4a5ce028aaf4ab1521f96e611b4d565b8251815560209092015160019092019190915550565b61071e610d7c60017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb611b4d565b6060600061157a6001600080516020611b7b833981519152611b4d565b80546040805160208084028201810190925282815292935083929183918301828280156115d057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115b2575b50505050509250505090565b60006115f76001600080516020611bbb833981519152611b4d565b905080610d1c8160006116fe565b6106d86116216001600080516020611b9b833981519152611b4d565b60009055565b600061072b610e3660017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281611b4d565b61071e81611699565b61071e816116d0565b600061072b610e3660017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113611b4d565b6116a2816112df565b61071e610d7c60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113611b4d565b61071e610d7c60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281611b4d565b508054600082556002029060005260206000209081019061071e91905b80821115611735576000808255600182015560020161171b565b5090565b60006020828403121561174b57600080fd5b81356001600160401b0381111561176157600080fd5b8201610120818503121561081757600080fd5b60006020828403121561178657600080fd5b5035919050565b80356001600160a01b03811681146117a457600080fd5b919050565b6000602082840312156117bb57600080fd5b6108178261178d565b600080604083850312156117d757600080fd5b6117e08361178d565b946020939093013593505050565b6000806040838503121561180157600080fd5b61180a8361178d565b91506118186020840161178d565b90509250929050565b6001600160a01b0391909116815260200190565b80356001600160401b03811681146117a457600080fd5b600080600080600080600080610100898b03121561186957600080fd5b6118728961178d565b975061188060208a0161178d565b965061188e60408a01611835565b955061189c60608a01611835565b94506118aa60808a01611835565b93506118b860a08a01611835565b925060c0890135915060e089013590509295985092959890939650565b6020808252825182820181905260009190848201906040850190845b818110156119165783516001600160a01b0316835292840192918401916001016118f1565b50909695505050505050565b801515811461071e57600080fd5b60006020828403121561194257600080fd5b815161081781611922565b634e487b7160e01b600052601160045260246000fd5b600082198211156119765761197661194d565b500190565b803563ffffffff811681146117a457600080fd5b6000808335601e198436030181126119a657600080fd5b83016020810192503590506001600160401b038111156119c557600080fd5b8060051b36038313156119d757600080fd5b9250929050565b8183526000602080850194508260005b85811015611a175763ffffffff611a048361197b565b16875295820195908201906001016119ee565b509495945050505050565b80356117a481611922565b6000610120823584526020830135602085015260408301356040850152606083013560608501526080830135608085015263ffffffff611a6f60a0850161197b565b1660a0850152611a8260c084018461198f565b8260c0870152611a9583870182846119de565b92505050611aa560e08401611a22565b151560e0850152610100611aba848201611a22565b15159401939093525090919050565b606081526000611adc6060830186611a2d565b60208301949094525060400152919050565b6020815260006108176020830184611a2d565b634e487b7160e01b600052603260045260246000fd5b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b600082821015611b5f57611b5f61194d565b500390565b634e487b7160e01b600052603160045260246000fdfec4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7f1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcda26469706673582212208b1b99b3150df5bfa9755c142fe9cdc1729f0332e2fbf315644c94856f72828c64736f6c634300080a0033",
    "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806398041ea3116100ad578063c1ba4e5911610071578063c1ba4e5914610259578063c26c12eb1461026c578063d046815614610274578063dabb57571461027c578063fad2e86a1461029157600080fd5b806398041ea314610210578063a230c52414610223578063a519f06014610236578063b4aff5e71461023e578063bc8b8f971461024657600080fd5b806316f6f03e116100f457806316f6f03e146101aa5780635190dce0146101bd578063628105d1146101e057806365872cbe146101f35780636e9960c3146101fb57600080fd5b806303bc7f27146101315780630c647397146101465780630e18b68114610179578063147bf6c41461018157806314c8cd6a14610194575b600080fd5b61014461013f366004611739565b610299565b005b610159610154366004611774565b6105e7565b604080518251815260209283015192810192909252015b60405180910390f35b610144610683565b61014461018f3660046117a9565b6106da565b61019c610721565b604051908152602001610170565b6101446101b83660046117c4565b610730565b6101d06101cb3660046117a9565b6107f3565b6040519015158152602001610170565b6101446101ee3660046117ee565b61081e565b61019c610924565b61020361092e565b6040516101709190611821565b61014461021e3660046117c4565b610938565b6101d06102313660046117a9565b6109fc565b610203610a10565b610144610a1a565b61014461025436600461184c565b610aaf565b610144610267366004611774565b610caa565b61019c610d20565b610203610d2a565b610284610d34565b60405161017091906118d5565b61019c610d3e565b60006102a433610d85565b90508060001914156102d4573360405163472511eb60e11b81526004016102cb9190611821565b60405180910390fd5b60006102de610e06565b905082358111156103155782356102f3610e06565b6040516304f6456960e11b8152600481019290925260248201526044016102cb565b600061031f610e3a565b604051630f9f95a960e41b8152853560048201529091506001600160a01b0382169063f9f95a9090602401602060405180830381865afa158015610367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038b9190611930565b6103ab5760405163a225656d60e01b8152843560048201526024016102cb565b83358210156103fb576103bc610e6a565b6103c68435610ea5565b604051843581527f3b16582fd30a1d07d3a11bd74e5cd9290bd62bf73d4df6a19e434b5bde09c4769060200160405180910390a15b61040483610ed3565b1561042b57604051637a6a90d160e11b8152843560048201523360248201526044016102cb565b61043483610f04565b600061043f85610f48565b905060008061044d83610f78565b91509150600061045b611013565b905083337f76eeea294370eab10c370cba335d68bef19ccdb73231925a08563dcf69d5be678a61048c866001611963565b8560405161049c93929190611ac9565b60405180910390a3806104b0836001611963565b10610574576104bd610e6a565b6104d16104cc89356001611963565b610ea5565b6040516377eb342360e11b81526001600160a01b0386169063efd66846906104fd908b90600401611aee565b600060405180830381600087803b15801561051757600080fd5b505af115801561052b573d6000803e3d6000fd5b507f3b16582fd30a1d07d3a11bd74e5cd9290bd62bf73d4df6a19e434b5bde09c476925061055e91505089356001611963565b60405190815260200160405180910390a16105dd565b8161059c5761059760405180604001604052808681526020016001815250611043565b6105dd565b60016105a661108b565b84815481106105b7576105b7611b01565b906000526020600020906002020160010160008282546105d79190611963565b90915550505b5050505050505050565b60408051808201909152600080825260208201528161060461108b565b5411610636578161061361108b565b5460405163b21b708160e01b8152600481019290925260248201526044016102cb565b61063e61108b565b828154811061064f5761064f611b01565b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050919050565b61068b6110ad565b6001600160a01b0316336001600160a01b0316146106be573360405163472511eb60e11b81526004016102cb9190611821565b6106ce6106c96110ad565b6110b7565b6106d86000611100565b565b6106e2611140565b6001600160a01b0316336001600160a01b031614610715573360405163472511eb60e11b81526004016102cb9190611821565b61071e81611100565b50565b600061072b61114a565b905090565b610738611140565b6001600160a01b0316336001600160a01b03161461076b573360405163472511eb60e11b81526004016102cb9190611821565b600061077683610d85565b9050600081121561079a5760405163574b16a760e11b815260040160405180910390fd5b6107a381611168565b60006107ad611013565b90506107b9838261124b565b6040516001600160a01b038516907f7693a3e9eac51f172f145e6f54bc5554168997a1f4efb40f3fad091aa7cfb0e790600090a250505050565b6000806107ff83610d85565b90508060001914158015610817575061081781610ed3565b9392505050565b8161082761092e565b6001600160a01b0316336001600160a01b0316141580156108515750336001600160a01b03821614155b15610871573360405163472511eb60e11b81526004016102cb9190611821565b61087a826112df565b600061088583610d85565b126108a557816040516307bbad8160e51b81526004016102cb9190611821565b60006108b084610d85565b905060008112156108d45760405163574b16a760e11b815260040160405180910390fd5b6108de8184611306565b826001600160a01b0316846001600160a01b03167fc20826a9a3cb354d2c12357704db9eb03d7344375b092d70146dbbbc4d3f84d160405160405180910390a350505050565b600061072b610e06565b600061072b611140565b610940611140565b6001600160a01b0316336001600160a01b031614610973573360405163472511eb60e11b81526004016102cb9190611821565b600061097e83610d85565b9050600081126109a357826040516307bbad8160e51b81526004016102cb9190611821565b6109ac83611370565b60006109b6611013565b90506109c2838261124b565b6040516001600160a01b038516907f1a2323d99020f3db8e6ea85b1eea81e5bf422695877228e3d8a0241d7e957a6c90600090a250505050565b600080610a0883610d85565b121592915050565b600061072b610e3a565b6001610a246113c9565b8114610a555780610a336113c9565b604051631cfd276760e31b8152600481019290925260248201526044016102cb565b610a68610a63826001611963565b610d4e565b610a70610e6a565b7f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610aa493929190611b17565b60405180910390a150565b6000610ab96113c9565b8114610ac85780610a336113c9565b610ad6610a63826001611963565b610adf886110b7565b610ae8896113f9565b7ffc0d749143b04e0d92a3b49edae84a45f6bc88b75e99d9118ec4d7e87fe626c589604051610b179190611821565b60405180910390a1610b7c6040518060a00160405280896001600160401b03168152602001886001600160401b03168152602001876001600160401b03168152602001866001600160401b0316815260200160006001600160401b0316815250611430565b604080516001600160401b0389811682528881166020830152878116828401528616606082015290517f4a7503ca21ae5342feb83892e899e95fb309502a0016ed300e4965e2dbfe73359181900360800190a1610bec6040518060400160405280858152602001848152506114ec565b60408051848152602081018490527f5ab79ffcd89b6380c7fbdd89d02cfe3d9c53c99a85e150c2319075018d1aac5c910160405180910390a1610c2f600061152f565b604051600081527f8e72be630a666d46b219565c1647e3792924d9c74e901fa3c4a33e23b91fb9b19060200160405180910390a17f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610c9793929190611b17565b60405180910390a1505050505050505050565b610cb2611140565b6001600160a01b0316336001600160a01b031614610ce5573360405163472511eb60e11b81526004016102cb9190611821565b6000610cef611013565b905081811415610d125760405163a9cb9e0d60e01b815260040160405180910390fd5b610d1c828261124b565b5050565b600061072b611013565b600061072b6110ad565b606061072b61155d565b6000610d4861108b565b54919050565b61071e610d7c60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd611b4d565b829055565b9055565b600080610da16001600080516020611b7b833981519152611b4d565b90508060005b8154811015610dfa57846001600160a01b0316826000018281548110610dcf57610dcf611b01565b6000918252602090912001546001600160a01b03161415610df257949350505050565b600101610da7565b50600019949350505050565b600061072b610e3660017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed611b4d565b5490565b600061072b610e3660017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c611b4d565b610e726115dc565b610e7a611605565b6040517f59bc16d5874dc28f6f69be9e88387299800118ede161a5169eec92191977ebe590600090a1565b61071e610d7c60017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed611b4d565b6000600180831b9081908190610efb90610e3690600080516020611b9b833981519152611b4d565b16149392505050565b600180821b90610d1c90610f2690600080516020611b9b833981519152611b4d565b82610f43610e366001600080516020611b9b833981519152611b4d565b179055565b600081604051602001610f5b9190611aee565b604051602081830303815290604052805190602001209050919050565b6000806000610f8561108b565b54905060005b818110156110045784610f9c61108b565b8281548110610fad57610fad611b01565b9060005260206000209060020201600001541415610ffc5780610fce61108b565b8281548110610fdf57610fdf611b01565b906000526020600020906002020160010154935093505050915091565b600101610f8b565b50600019946000945092505050565b600061072b610e3660017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb611b4d565b600061105e6001600080516020611bbb833981519152611b4d565b80546001818101835560009283526020928390208551600290930201918255919093015192019190915550565b6000806110a76001600080516020611bbb833981519152611b4d565b92915050565b600061072b611627565b6110c0816112df565b6110c981611657565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b61110981611660565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b600061072b611669565b600061072b610e366001600080516020611b9b833981519152611b4d565b60006111836001600080516020611b7b833981519152611b4d565b8054909150819060009061119990600190611b4d565b9050838114611212578160000181815481106111b7576111b7611b01565b60009182526020909120015482546001600160a01b03909116908390869081106111e3576111e3611b01565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b815482908061122357611223611b64565b600082815260209020810160001990810180546001600160a01b031916905501905550505050565b600061125561155d565b519050821580156112665750600081115b8061127057508083115b1561128e5760405163a9cb9e0d60e01b815260040160405180910390fd5b611296610e6a565b8183146112da576112a68361152f565b6040518381527f8e72be630a666d46b219565c1647e3792924d9c74e901fa3c4a33e23b91fb9b19060200160405180910390a15b505050565b6001600160a01b03811661071e5760405163f6b2911f60e01b815260040160405180910390fd5b60006113216001600080516020611b7b833981519152611b4d565b80549091508190839082908690811061133c5761133c611b01565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b611379816112df565b60006113946001600080516020611b7b833981519152611b4d565b8054600181018255600091825260209091200180546001600160a01b0319166001600160a01b03939093169290921790915550565b600061072b610e3660017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd611b4d565b611402816112df565b61071e610d7c60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c611b4d565b600061145d60017fd84ee2c84c954c65bef1459fe03b761a42f49234527e3cd8fd9dce87cb83742b611b4d565b825181546020850151604086015160608701516001600160401b039485166001600160801b031990941693909317600160401b92851692909202919091176001600160801b0316600160801b918416919091026001600160c01b031617600160c01b918316919091021782556080909301516001909101805467ffffffffffffffff1916919093161790915550565b600061151960017ff81b149de6749a3f46464b2cce61e24462f67599ea4a5ce028aaf4ab1521f96e611b4d565b8251815560209092015160019092019190915550565b61071e610d7c60017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb611b4d565b6060600061157a6001600080516020611b7b833981519152611b4d565b80546040805160208084028201810190925282815292935083929183918301828280156115d057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115b2575b50505050509250505090565b60006115f76001600080516020611bbb833981519152611b4d565b905080610d1c8160006116fe565b6106d86116216001600080516020611b9b833981519152611b4d565b60009055565b600061072b610e3660017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281611b4d565b61071e81611699565b61071e816116d0565b600061072b610e3660017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113611b4d565b6116a2816112df565b61071e610d7c60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113611b4d565b61071e610d7c60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281611b4d565b508054600082556002029060005260206000209081019061071e91905b80821115611735576000808255600182015560020161171b565b5090565b60006020828403121561174b57600080fd5b81356001600160401b0381111561176157600080fd5b8201610120818503121561081757600080fd5b60006020828403121561178657600080fd5b5035919050565b80356001600160a01b03811681146117a457600080fd5b919050565b6000602082840312156117bb57600080fd5b6108178261178d565b600080604083850312156117d757600080fd5b6117e08361178d565b946020939093013593505050565b6000806040838503121561180157600080fd5b61180a8361178d565b91506118186020840161178d565b90509250929050565b6001600160a01b0391909116815260200190565b80356001600160401b03811681146117a457600080fd5b600080600080600080600080610100898b03121561186957600080fd5b6118728961178d565b975061188060208a0161178d565b965061188e60408a01611835565b955061189c60608a01611835565b94506118aa60808a01611835565b93506118b860a08a01611835565b925060c0890135915060e089013590509295985092959890939650565b6020808252825182820181905260009190848201906040850190845b818110156119165783516001600160a01b0316835292840192918401916001016118f1565b50909695505050505050565b801515811461071e57600080fd5b60006020828403121561194257600080fd5b815161081781611922565b634e487b7160e01b600052601160045260246000fd5b600082198211156119765761197661194d565b500190565b803563ffffffff811681146117a457600080fd5b6000808335601e198436030181126119a657600080fd5b83016020810192503590506001600160401b038111156119c557600080fd5b8060051b36038313156119d757600080fd5b9250929050565b8183526000602080850194508260005b85811015611a175763ffffffff611a048361197b565b16875295820195908201906001016119ee565b509495945050505050565b80356117a481611922565b6000610120823584526020830135602085015260408301356040850152606083013560608501526080830135608085015263ffffffff611a6f60a0850161197b565b1660a0850152611a8260c084018461198f565b8260c0870152611a9583870182846119de565b92505050611aa560e08401611a22565b151560e0850152610100611aba848201611a22565b15159401939093525090919050565b606081526000611adc6060830186611a2d565b60208301949094525060400152919050565b6020815260006108176020830184611a2d565b634e487b7160e01b600052603260045260246000fd5b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b600082821015611b5f57611b5f61194d565b500390565b634e487b7160e01b600052603160045260246000fdfec4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7f1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcda26469706673582212208b1b99b3150df5bfa9755c142fe9cdc1729f0332e2fbf315644c94856f72828c64736f6c634300080a0033",
    "devdoc": {
        "author": "Kiln",
        "events": {
            "Paused(address)": {
                "params": {
                    "admin": "The admin at the time of the pause event"
                }
            },
            "Unpaused(address)": {
                "params": {
                    "admin": "The admin at the time of the unpause event"
                }
            }
        },
        "kind": "dev",
        "methods": {
            "admin()": {
                "details": "Returns the current admin. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`"
            },
            "changeAdmin(address)": {
                "details": "Changes the admin of the proxy. Emits an {AdminChanged} event. NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}."
            },
            "constructor": {
                "details": "The Admin of the proxy should not be the same as theadmin on the implementation logics. The admin here isthe only account allowed to perform calls on the proxy(the calls are never delegated to the implementation)",
                "params": {
                    "__admin": "Address of the admin in charge of the proxy",
                    "_data": "Calldata for an atomic initialization",
                    "_logic": "Address of the implementation"
                }
            },
            "implementation()": {
                "details": "Returns the current implementation. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`"
            },
            "pause()": {
                "details": "Pauses system"
            },
            "paused()": {
                "details": "Retrieves Paused state",
                "returns": {
                    "_0": "Paused state"
                }
            },
            "unpause()": {
                "details": "Unpauses system"
            },
            "upgradeTo(address)": {
                "details": "Upgrade the implementation of the proxy. NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}."
            },
            "upgradeToAndCall(address,bytes)": {
                "details": "Upgrade the implementation of the proxy, and then call a function from the new implementation as specified by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract. NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}."
            }
        },
        "title": "TUPProxy (Transparent Upgradeable Pausable Proxy)",
        "version": 1
    },
    "userdoc": {
        "errors": {
            "CallWhenPaused()": [
                {
                    "notice": "A call happened while the system was paused"
                }
            ]
        },
        "events": {
            "Paused(address)": {
                "notice": "The system is now paused"
            },
            "Unpaused(address)": {
                "notice": "The system is now unpaused"
            }
        },
        "kind": "user",
        "methods": {},
        "notice": "This contract extends the Transparent Upgradeable proxy and adds a system wide pause feature.         When the system is paused, the fallback will fail no matter what calls are made.         Address Zero is allowed to perform calls even if paused to allow view calls made         from RPC providers to properly work.",
        "version": 1
    },
    "storageLayout": {
        "storage": [],
        "types": null
    },
    "implementations": {
        "names": [
            "OracleV1_Implementation_0_6_0.json"
        ],
        "transactionHash": [
            "0x7c93d2aa1218afb5ce4e4433663866fd2981d5e9fe8fd6e41f4f158187f7dc73"
        ],
        "receipt": [
            {
                "to": null,
                "from": "0x341C40B94bF2afBFa42573cB78f16Ee15a056238",
                "contractAddress": "0x014e50c540213f5c91fD3DD960fb1255EA599F18",
                "transactionIndex": 54,
                "gasUsed": "1632780",
                "logsBloom": "0x
                "blockHash": "0xd9c15e07939cb06de8e6611a9251697614cdd3fe8bd859bc94c423c50097db6c",
                "transactionHash": "0x7c93d2aa1218afb5ce4e4433663866fd2981d5e9fe8fd6e41f4f158187f7dc73",
                "logs": [
                    {
                        "transactionIndex": 54,
                        "blockNumber": 9166611,
                        "transactionHash": "0x7c93d2aa1218afb5ce4e4433663866fd2981d5e9fe8fd6e41f4f158187f7dc73",
                        "address": "0x014e50c540213f5c91fD3DD960fb1255EA599F18",
                        "topics": [
                            "0x1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a71"
                        ],
                        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000",
                        "logIndex": 120,
                        "blockHash": "0xd9c15e07939cb06de8e6611a9251697614cdd3fe8bd859bc94c423c50097db6c"
                    }
                ],
                "blockNumber": 9166611,
                "cumulativeGasUsed": "10624066",
                "status": 1,
                "byzantium": true
            }
        ],
        "args": [
            []
        ],
        "numDeployments": [
            1
        ],
        "solcInputHash": [
            "17288a2de201671025ab4726f1192faa"
        ],
        "metadata": [
            "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddressAlreadyInUse\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"AlreadyReported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"providedEpochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minExpectedEpochId\",\"type\":\"uint256\"}],\"name\":\"EpochTooOld\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"InvalidEpoch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ReportIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"AddMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ClearedReporting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"cdata\",\"type\":\"bytes\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"RemoveMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"variant\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorsBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorsSkimmedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorsExitedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorsExitingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"validatorsCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"stoppedValidatorCountPerOperator\",\"type\":\"uint32[]\"},{\"internalType\":\"bool\",\"name\":\"rebalanceDepositToRedeemMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"slashingContainmentMode\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IOracleManagerV1.ConsensusLayerReport\",\"name\":\"report\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"}],\"name\":\"ReportedConsensusLayerData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"annualAprUpperBound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"relativeLowerBound\",\"type\":\"uint256\"}],\"name\":\"SetBounds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastReportedEpoch\",\"type\":\"uint256\"}],\"name\":\"SetLastReportedEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"SetPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newQuorum\",\"type\":\"uint256\"}],\"name\":\"SetQuorum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_river\",\"type\":\"address\"}],\"name\":\"SetRiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"epochsPerFrame\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"slotsPerEpoch\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"secondsPerSlot\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"genesisTime\",\"type\":\"uint64\"}],\"name\":\"SetSpec\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOracleMember\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newQuorum\",\"type\":\"uint256\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalReportStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastReportedEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleMember\",\"type\":\"address\"}],\"name\":\"getMemberReportStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getReportVariantDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"variant\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"internalType\":\"struct ReportsVariants.ReportVariantDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReportVariantsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_riverAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_administratorAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_epochsPerFrame\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_slotsPerEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_secondsPerSlot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_genesisTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_annualAprUpperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_relativeLowerBound\",\"type\":\"uint256\"}],\"name\":\"initOracleV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initOracleV1_1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"proposeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleMember\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newQuorum\",\"type\":\"uint256\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorsBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorsSkimmedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorsExitedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorsExitingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"validatorsCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"stoppedValidatorCountPerOperator\",\"type\":\"uint32[]\"},{\"internalType\":\"bool\",\"name\":\"rebalanceDepositToRedeemMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"slashingContainmentMode\",\"type\":\"bool\"}],\"internalType\":\"struct IOracleManagerV1.ConsensusLayerReport\",\"name\":\"_report\",\"type\":\"tuple\"}],\"name\":\"reportConsensusLayerData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleMember\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newQuorum\",\"type\":\"uint256\"}],\"name\":\"setQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kiln\",\"errors\":{\"AddressAlreadyInUse(address)\":[{\"params\":{\"newAddress\":\"The address already in use\"}}],\"AlreadyReported(uint256,address)\":[{\"params\":{\"epochId\":\"The epoch id provided as input\",\"member\":\"The oracle member\"}}],\"EpochTooOld(uint256,uint256)\":[{\"params\":{\"minExpectedEpochId\":\"The minimum epoch id expected\",\"providedEpochId\":\"The epoch id provided as input\"}}],\"InvalidEpoch(uint256)\":[{\"params\":{\"epoch\":\"The invalid epoch\"}}],\"InvalidInitialization(uint256,uint256)\":[{\"params\":{\"expectedVersion\":\"The version that was expected\",\"version\":\"The version that was attempting to be initialized\"}}],\"ReportIndexOutOfBounds(uint256,uint256)\":[{\"params\":{\"index\":\"Requested index\",\"length\":\"Size of the variant array\"}}],\"Unauthorized(address)\":[{\"params\":{\"caller\":\"Address performing the call\"}}]},\"kind\":\"dev\",\"methods\":{\"acceptAdmin()\":{\"details\":\"Only callable by the pending admin. Resets the pending admin if succesful.\"},\"addMember(address,uint256)\":{\"details\":\"Only callable by the adminstratorModifying the quorum clears all the reporting data\",\"params\":{\"_newOracleMember\":\"Address of the new member\",\"_newQuorum\":\"New quorum value\"}},\"getAdmin()\":{\"returns\":{\"_0\":\"The admin address\"}},\"getGlobalReportStatus()\":{\"returns\":{\"_0\":\"The raw report status value\"}},\"getLastReportedEpochId()\":{\"details\":\"The Oracle contracts expects reports on an epoch id >= that the returned value\",\"returns\":{\"_0\":\"The last reported epoch id\"}},\"getMemberReportStatus(address)\":{\"params\":{\"_oracleMember\":\"Address of member to check\"},\"returns\":{\"_0\":\"True if member has reported\"}},\"getOracleMembers()\":{\"returns\":{\"_0\":\"The oracle members\"}},\"getPendingAdmin()\":{\"returns\":{\"_0\":\"The pending admin address\"}},\"getQuorum()\":{\"returns\":{\"_0\":\"The current quorum\"}},\"getReportVariantDetails(uint256)\":{\"params\":{\"_idx\":\"The index of the report variant\"},\"returns\":{\"_0\":\"The report variant details\"}},\"getReportVariantsCount()\":{\"returns\":{\"_0\":\"The count of report variants\"}},\"getRiver()\":{\"returns\":{\"_0\":\"The address of River\"}},\"initOracleV1(address,address,uint64,uint64,uint64,uint64,uint256,uint256)\":{\"params\":{\"_administratorAddress\":\"Address able to call administrative methods\",\"_annualAprUpperBound\":\"CL bound parameter. Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.\",\"_epochsPerFrame\":\"CL spec parameter. Number of epochs in a frame.\",\"_genesisTime\":\"CL spec parameter. Timestamp of the genesis slot.\",\"_relativeLowerBound\":\"CL bound parameter. Maximum relative balance decrease.\",\"_river\":\"Address of the River contract, able to receive oracle input data after quorum is met\",\"_secondsPerSlot\":\"CL spec parameter. Number of seconds between slots.\",\"_slotsPerEpoch\":\"CL spec parameter. Number of slots in one epoch.\"}},\"isMember(address)\":{\"details\":\"Performs a naive search, do not call this on-chain, used as an off-chain helper\",\"params\":{\"_memberAddress\":\"Address of the member\"},\"returns\":{\"_0\":\"True if address is a member\"}},\"proposeAdmin(address)\":{\"details\":\"This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.\",\"params\":{\"_newAdmin\":\"New admin address\"}},\"removeMember(address,uint256)\":{\"details\":\"Only callable by the adminstratorModifying the quorum clears all the reporting dataRemaining members that have already voted should vote again for the same frame.\",\"params\":{\"_newQuorum\":\"New quorum value\",\"_oracleMember\":\"Address to remove\"}},\"reportConsensusLayerData((uint256,uint256,uint256,uint256,uint256,uint32,uint32[],bool,bool))\":{\"params\":{\"_report\":\"The report structure\"}},\"setMember(address,address)\":{\"details\":\"Only callable by the adminitrator or the member itselfCannot use an address already in use\",\"params\":{\"_newAddress\":\"New address for the member\",\"_oracleMember\":\"Address to change\"}},\"setQuorum(uint256)\":{\"details\":\"Modifying the quorum clears all the reporting data\",\"params\":{\"_newQuorum\":\"New quorum parameter\"}}},\"title\":\"Oracle (v1)\",\"version\":1},\"userdoc\":{\"errors\":{\"AddressAlreadyInUse(address)\":[{\"notice\":\"The address is already in use by an oracle member\"}],\"AlreadyReported(uint256,address)\":[{\"notice\":\"The member already reported on the given epoch id\"}],\"EpochTooOld(uint256,uint256)\":[{\"notice\":\"The provided epoch is too old compared to the expected epoch id\"}],\"InvalidArgument()\":[{\"notice\":\"The argument was invalid\"}],\"InvalidCall()\":[{\"notice\":\"The call was invalid\"}],\"InvalidEpoch(uint256)\":[{\"notice\":\"Thrown when the reported epoch is invalid\"}],\"InvalidInitialization(uint256,uint256)\":[{\"notice\":\"An error occured during the initialization\"}],\"InvalidZeroAddress()\":[{\"notice\":\"The address is zero\"}],\"ReportIndexOutOfBounds(uint256,uint256)\":[{\"notice\":\"Thrown when the report indexs fetched is out of bounds\"}],\"Unauthorized(address)\":[{\"notice\":\"The operator is unauthorized for the caller\"}]},\"events\":{\"AddMember(address)\":{\"notice\":\"A member has been added to the oracle member list\"},\"ClearedReporting()\":{\"notice\":\"Cleared reporting data\"},\"Initialize(uint256,bytes)\":{\"notice\":\"Emitted when the contract is properly initialized\"},\"RemoveMember(address)\":{\"notice\":\"A member has been removed from the oracle member list\"},\"ReportedConsensusLayerData(address,bytes32,(uint256,uint256,uint256,uint256,uint256,uint32,uint32[],bool,bool),uint256,uint256)\":{\"notice\":\"An oracle member performed a report\"},\"SetAdmin(address)\":{\"notice\":\"The admin address changed\"},\"SetBounds(uint256,uint256)\":{\"notice\":\"The report bounds have been changed\"},\"SetLastReportedEpoch(uint256)\":{\"notice\":\"The last reported epoch has changed\"},\"SetMember(address,address)\":{\"notice\":\"A member address has been edited\"},\"SetPendingAdmin(address)\":{\"notice\":\"The pending admin address changed\"},\"SetQuorum(uint256)\":{\"notice\":\"The storage quorum value has been changed\"},\"SetRiver(address)\":{\"notice\":\"The storage river address value has been changed\"},\"SetSpec(uint64,uint64,uint64,uint64)\":{\"notice\":\"The consensus layer spec has been changed\"}},\"kind\":\"user\",\"methods\":{\"acceptAdmin()\":{\"notice\":\"Accept the transfer of ownership\"},\"addMember(address,uint256)\":{\"notice\":\"Adds new address as oracle member, giving the ability to push cl reports.\"},\"getAdmin()\":{\"notice\":\"Retrieves the current admin address\"},\"getGlobalReportStatus()\":{\"notice\":\"Retrieve member report status\"},\"getLastReportedEpochId()\":{\"notice\":\"Retrieve the last reported epoch id\"},\"getMemberReportStatus(address)\":{\"notice\":\"Retrieve member report status\"},\"getOracleMembers()\":{\"notice\":\"Retrieve the list of oracle members\"},\"getPendingAdmin()\":{\"notice\":\"Retrieve the current pending admin address\"},\"getQuorum()\":{\"notice\":\"Retrieve the current quorum\"},\"getReportVariantDetails(uint256)\":{\"notice\":\"Retrieve the details of a report variant\"},\"getReportVariantsCount()\":{\"notice\":\"Retrieve report variants count\"},\"getRiver()\":{\"notice\":\"Retrieve River address\"},\"initOracleV1(address,address,uint64,uint64,uint64,uint64,uint256,uint256)\":{\"notice\":\"Initializes the oracle\"},\"initOracleV1_1()\":{\"notice\":\"Initializes the oracle\"},\"isMember(address)\":{\"notice\":\"Returns true if address is member\"},\"proposeAdmin(address)\":{\"notice\":\"Proposes a new address as admin\"},\"removeMember(address,uint256)\":{\"notice\":\"Removes an address from the oracle members.\"},\"reportConsensusLayerData((uint256,uint256,uint256,uint256,uint256,uint32,uint32[],bool,bool))\":{\"notice\":\"Submit a report as an oracle member\"},\"setMember(address,address)\":{\"notice\":\"Changes the address of an oracle member\"},\"setQuorum(uint256)\":{\"notice\":\"Edits the quorum required to forward cl data to River\"}},\"notice\":\"This contract handles the input from the allowed oracle members. Highly inspired by Lido's implementation.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/Oracle.1.sol\":\"OracleV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/Administrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IAdministrable.sol\\\";\\n\\nimport \\\"./libraries/LibAdministrable.sol\\\";\\nimport \\\"./libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrable\\n/// @author Kiln\\n/// @notice This contract handles the administration of the contracts\\nabstract contract Administrable is IAdministrable {\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() {\\n        if (msg.sender != LibAdministrable._getAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyPendingAdmin() {\\n        if (msg.sender != LibAdministrable._getPendingAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getAdmin() external view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getPendingAdmin() external view returns (address) {\\n        return LibAdministrable._getPendingAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function proposeAdmin(address _newAdmin) external onlyAdmin {\\n        _setPendingAdmin(_newAdmin);\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function acceptAdmin() external onlyPendingAdmin {\\n        _setAdmin(LibAdministrable._getPendingAdmin());\\n        _setPendingAdmin(address(0));\\n    }\\n\\n    /// @notice Internal utility to set the admin address\\n    /// @param _admin Address to set as admin\\n    function _setAdmin(address _admin) internal {\\n        LibSanitize._notZeroAddress(_admin);\\n        LibAdministrable._setAdmin(_admin);\\n        emit SetAdmin(_admin);\\n    }\\n\\n    /// @notice Internal utility to set the pending admin address\\n    /// @param _pendingAdmin Address to set as pending admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        LibAdministrable._setPendingAdmin(_pendingAdmin);\\n        emit SetPendingAdmin(_pendingAdmin);\\n    }\\n\\n    /// @notice Internal utility to retrieve the address of the current admin\\n    /// @return The address of admin\\n    function _getAdmin() internal view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n}\\n\",\"keccak256\":\"0xc9ce727028bc42bf4ea4247dfde9b57a5c36e1820aba5219207aa95c4f035372\",\"license\":\"BUSL-1.1\"},\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\n/// @title Initializable\\n/// @author Kiln\\n/// @notice This contract ensures that initializers are called only once per version\\ncontract Initializable {\\n    /// @notice Disable initialization on implementations\\n    constructor() {\\n        Version.set(type(uint256).max);\\n        emit Initialize(type(uint256).max, msg.data);\\n    }\\n\\n    /// @notice An error occured during the initialization\\n    /// @param version The version that was attempting to be initialized\\n    /// @param expectedVersion The version that was expected\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    /// @notice Emitted when the contract is properly initialized\\n    /// @param version New version of the contracts\\n    /// @param cdata Complete calldata that was used during the initialization\\n    event Initialize(uint256 version, bytes cdata);\\n\\n    /// @notice Use this modifier on initializers along with a hard-coded version number\\n    /// @param _version Version to initialize\\n    modifier init(uint256 _version) {\\n        if (_version != Version.get()) {\\n            revert InvalidInitialization(_version, Version.get());\\n        }\\n        Version.set(_version + 1); // prevents reentrency on the called method\\n        _;\\n        emit Initialize(_version, msg.data);\\n    }\\n}\\n\",\"keccak256\":\"0x2d85476c54b86308bc9687a7d072fddd2506f84f72a6892f7e0187214094ef79\",\"license\":\"BUSL-1.1\"},\"contracts/src/Oracle.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\nimport \\\"./interfaces/IOracle.1.sol\\\";\\n\\nimport \\\"./Administrable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\nimport \\\"./state/shared/RiverAddress.sol\\\";\\n\\nimport \\\"./state/oracle/LastEpochId.sol\\\";\\nimport \\\"./state/oracle/OracleMembers.sol\\\";\\nimport \\\"./state/oracle/Quorum.sol\\\";\\nimport \\\"./state/oracle/ReportsPositions.sol\\\";\\n\\n/// @title Oracle (v1)\\n/// @author Kiln\\n/// @notice This contract handles the input from the allowed oracle members. Highly inspired by Lido's implementation.\\ncontract OracleV1 is IOracleV1, Initializable, Administrable {\\n    modifier onlyAdminOrMember(address _oracleMember) {\\n        if (msg.sender != _getAdmin() && msg.sender != _oracleMember) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function initOracleV1(\\n        address _riverAddress,\\n        address _administratorAddress,\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime,\\n        uint256 _annualAprUpperBound,\\n        uint256 _relativeLowerBound\\n    ) external init(0) {\\n        _setAdmin(_administratorAddress);\\n        RiverAddress.set(_riverAddress);\\n        emit SetRiver(_riverAddress);\\n        CLSpec.set(\\n            CLSpec.CLSpecStruct({\\n                epochsPerFrame: _epochsPerFrame,\\n                slotsPerEpoch: _slotsPerEpoch,\\n                secondsPerSlot: _secondsPerSlot,\\n                genesisTime: _genesisTime,\\n                epochsToAssumedFinality: 0\\n            })\\n        );\\n        emit SetSpec(_epochsPerFrame, _slotsPerEpoch, _secondsPerSlot, _genesisTime);\\n        ReportBounds.set(\\n            ReportBounds.ReportBoundsStruct({\\n                annualAprUpperBound: _annualAprUpperBound,\\n                relativeLowerBound: _relativeLowerBound\\n            })\\n        );\\n        emit SetBounds(_annualAprUpperBound, _relativeLowerBound);\\n        Quorum.set(0);\\n        emit SetQuorum(0);\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function initOracleV1_1() external init(1) {\\n        _clearReports();\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getRiver() external view returns (address) {\\n        return RiverAddress.get();\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getMemberReportStatus(address _oracleMember) external view returns (bool) {\\n        int256 memberIndex = OracleMembers.indexOf(_oracleMember);\\n        return memberIndex != -1 && ReportsPositions.get(uint256(memberIndex));\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getGlobalReportStatus() external view returns (uint256) {\\n        return ReportsPositions.getRaw();\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getReportVariantsCount() external view returns (uint256) {\\n        return ReportsVariants.get().length;\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getReportVariantDetails(uint256 _idx)\\n        external\\n        view\\n        returns (ReportsVariants.ReportVariantDetails memory)\\n    {\\n        if (ReportsVariants.get().length <= _idx) {\\n            revert ReportIndexOutOfBounds(_idx, ReportsVariants.get().length);\\n        }\\n        return ReportsVariants.get()[_idx];\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getQuorum() external view returns (uint256) {\\n        return Quorum.get();\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getOracleMembers() external view returns (address[] memory) {\\n        return OracleMembers.get();\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function isMember(address _memberAddress) external view returns (bool) {\\n        return OracleMembers.indexOf(_memberAddress) >= 0;\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getLastReportedEpochId() external view returns (uint256) {\\n        return LastEpochId.get();\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function addMember(address _newOracleMember, uint256 _newQuorum) external onlyAdmin {\\n        int256 memberIdx = OracleMembers.indexOf(_newOracleMember);\\n        if (memberIdx >= 0) {\\n            revert AddressAlreadyInUse(_newOracleMember);\\n        }\\n        OracleMembers.push(_newOracleMember);\\n        uint256 previousQuorum = Quorum.get();\\n        _clearReportsAndSetQuorum(_newQuorum, previousQuorum);\\n        emit AddMember(_newOracleMember);\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function removeMember(address _oracleMember, uint256 _newQuorum) external onlyAdmin {\\n        int256 memberIdx = OracleMembers.indexOf(_oracleMember);\\n        if (memberIdx < 0) {\\n            revert LibErrors.InvalidCall();\\n        }\\n        OracleMembers.deleteItem(uint256(memberIdx));\\n        uint256 previousQuorum = Quorum.get();\\n        _clearReportsAndSetQuorum(_newQuorum, previousQuorum);\\n        emit RemoveMember(_oracleMember);\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function setMember(address _oracleMember, address _newAddress) external onlyAdminOrMember(_oracleMember) {\\n        LibSanitize._notZeroAddress(_newAddress);\\n        if (OracleMembers.indexOf(_newAddress) >= 0) {\\n            revert AddressAlreadyInUse(_newAddress);\\n        }\\n        int256 memberIdx = OracleMembers.indexOf(_oracleMember);\\n        if (memberIdx < 0) {\\n            revert LibErrors.InvalidCall();\\n        }\\n        OracleMembers.set(uint256(memberIdx), _newAddress);\\n        emit SetMember(_oracleMember, _newAddress);\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function setQuorum(uint256 _newQuorum) external onlyAdmin {\\n        uint256 previousQuorum = Quorum.get();\\n        if (previousQuorum == _newQuorum) {\\n            revert LibErrors.InvalidArgument();\\n        }\\n        _clearReportsAndSetQuorum(_newQuorum, previousQuorum);\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function reportConsensusLayerData(IRiverV1.ConsensusLayerReport calldata _report) external {\\n        // retrieve member index and revert if not oracle member\\n        int256 memberIndex = OracleMembers.indexOf(msg.sender);\\n        if (memberIndex == -1) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n\\n        // store last reported epoch to stack\\n        uint256 lastReportedEpochValue = LastEpochId.get();\\n\\n        // checks that the report epoch is not too old\\n        if (_report.epoch < lastReportedEpochValue) {\\n            revert EpochTooOld(_report.epoch, LastEpochId.get());\\n        }\\n        IRiverV1 river = IRiverV1(payable(RiverAddress.get()));\\n        // checks that the report epoch is not invalid\\n        if (!river.isValidEpoch(_report.epoch)) {\\n            revert InvalidEpoch(_report.epoch);\\n        }\\n        // if valid and greater than the lastReportedEpoch, we clear the reporting data\\n        if (_report.epoch > lastReportedEpochValue) {\\n            _clearReports();\\n            LastEpochId.set(_report.epoch);\\n            emit SetLastReportedEpoch(_report.epoch);\\n        }\\n        // we retrieve the voting status of the caller, and revert if already voted\\n        if (ReportsPositions.get(uint256(memberIndex))) {\\n            revert AlreadyReported(_report.epoch, msg.sender);\\n        }\\n        // we register the caller\\n        ReportsPositions.register(uint256(memberIndex));\\n\\n        // we compute the variant by hashing the report\\n        bytes32 variant = _reportChecksum(_report);\\n        // we retrieve the details for the given variant\\n        (int256 variantIndex, uint256 variantVotes) = _getReportVariantIndexAndVotes(variant);\\n        // we retrieve the quorum to stack\\n        uint256 quorum = Quorum.get();\\n\\n        emit ReportedConsensusLayerData(msg.sender, variant, _report, variantVotes + 1, quorum);\\n\\n        // if adding this vote reaches quorum\\n        if (variantVotes + 1 >= quorum) {\\n            // we clear the reporting data\\n            _clearReports();\\n            // we increment the lastReportedEpoch to force reports to be on the last frame\\n            LastEpochId.set(_report.epoch + 1);\\n            // we push the report to river\\n            river.setConsensusLayerData(_report);\\n            emit SetLastReportedEpoch(_report.epoch + 1);\\n        } else if (variantVotes == 0) {\\n            // if we have no votes for the variant, we create the variant details\\n            ReportsVariants.push(ReportsVariants.ReportVariantDetails({variant: variant, votes: 1}));\\n        } else {\\n            // otherwise we increment the vote\\n            ReportsVariants.get()[uint256(variantIndex)].votes += 1;\\n        }\\n    }\\n\\n    /// @notice Internal utility to clear all the reports and edit the quorum if a new value is provided\\n    /// @dev Ensures that the quorum respects invariants\\n    /// @dev The admin is in charge of providing a proper quorum based on the oracle member count\\n    /// @dev The quorum value Q should respect the following invariant, where O is oracle member count\\n    /// @dev (O / 2) + 1 <= Q <= O\\n    /// @param _newQuorum New quorum value\\n    /// @param _previousQuorum The old quorum value\\n    function _clearReportsAndSetQuorum(uint256 _newQuorum, uint256 _previousQuorum) internal {\\n        uint256 memberCount = OracleMembers.get().length;\\n        if ((_newQuorum == 0 && memberCount > 0) || _newQuorum > memberCount) {\\n            revert LibErrors.InvalidArgument();\\n        }\\n        _clearReports();\\n        if (_newQuorum != _previousQuorum) {\\n            Quorum.set(_newQuorum);\\n            emit SetQuorum(_newQuorum);\\n        }\\n    }\\n\\n    /// @notice Internal utility to hash and retrieve the variant id of a report\\n    /// @param _report The reported data structure\\n    /// @return The report variant\\n    function _reportChecksum(IRiverV1.ConsensusLayerReport calldata _report) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(_report));\\n    }\\n\\n    /// @notice Internal utility to clear all reporting details\\n    function _clearReports() internal {\\n        ReportsVariants.clear();\\n        ReportsPositions.clear();\\n        emit ClearedReporting();\\n    }\\n\\n    /// @notice Internal utility to retrieve index and vote count for a given variant\\n    /// @param _variant The variant to lookup\\n    /// @return The index of the variant, -1 if not found\\n    /// @return The vote count of the variant\\n    function _getReportVariantIndexAndVotes(bytes32 _variant) internal view returns (int256, uint256) {\\n        uint256 reportVariantsLength = ReportsVariants.get().length;\\n        for (uint256 idx = 0; idx < reportVariantsLength;) {\\n            if (ReportsVariants.get()[idx].variant == _variant) {\\n                return (int256(idx), ReportsVariants.get()[idx].votes);\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        return (-1, 0);\\n    }\\n\\n    /// @notice Internal utility to retrieve a casted River interface\\n    /// @return The casted River interface\\n    function _river() internal view returns (IRiverV1) {\\n        return IRiverV1(payable(RiverAddress.get()));\\n    }\\n}\\n\",\"keccak256\":\"0x38d3f16833af6ce053669efdbdfa9d40e4f34aba578f966fd210f0af5a8d04d6\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Administrable Interface\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the ownership of the contracts\\ninterface IAdministrable {\\n    /// @notice The pending admin address changed\\n    /// @param pendingAdmin New pending admin address\\n    event SetPendingAdmin(address indexed pendingAdmin);\\n\\n    /// @notice The admin address changed\\n    /// @param admin New admin address\\n    event SetAdmin(address indexed admin);\\n\\n    /// @notice Retrieves the current admin address\\n    /// @return The admin address\\n    function getAdmin() external view returns (address);\\n\\n    /// @notice Retrieve the current pending admin address\\n    /// @return The pending admin address\\n    function getPendingAdmin() external view returns (address);\\n\\n    /// @notice Proposes a new address as admin\\n    /// @dev This security prevents setting an invalid address as an admin. The pending\\n    /// @dev admin has to claim its ownership of the contract, and prove that the new\\n    /// @dev address is able to perform regular transactions.\\n    /// @param _newAdmin New admin address\\n    function proposeAdmin(address _newAdmin) external;\\n\\n    /// @notice Accept the transfer of ownership\\n    /// @dev Only callable by the pending admin. Resets the pending admin if succesful.\\n    function acceptAdmin() external;\\n}\\n\",\"keccak256\":\"0xe45ef81bf9326bac437dcf901eeb80628d5c87d51dcbcf3addb80e834ba7bfea\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IOracle.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./IRiver.1.sol\\\";\\nimport \\\"../state/oracle/ReportsVariants.sol\\\";\\n\\n/// @title Oracle Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the input from the allowed oracle members.\\n/// @notice Highly inspired by Lido's implementation.\\ninterface IOracleV1 {\\n    /// @notice The storage quorum value has been changed\\n    /// @param newQuorum The new quorum value\\n    event SetQuorum(uint256 newQuorum);\\n\\n    /// @notice A member has been added to the oracle member list\\n    /// @param member The address of the member\\n    event AddMember(address indexed member);\\n\\n    /// @notice A member has been removed from the oracle member list\\n    /// @param member The address of the member\\n    event RemoveMember(address indexed member);\\n\\n    /// @notice A member address has been edited\\n    /// @param oldAddress The previous member address\\n    /// @param newAddress The new member address\\n    event SetMember(address indexed oldAddress, address indexed newAddress);\\n\\n    /// @notice The storage river address value has been changed\\n    /// @param _river The new river address\\n    event SetRiver(address _river);\\n\\n    /// @notice The consensus layer spec has been changed\\n    /// @param epochsPerFrame The number of epochs inside a frame (225 = 24 hours)\\n    /// @param slotsPerEpoch The number of slots inside an epoch (32 on ethereum mainnet)\\n    /// @param secondsPerSlot The time between two slots (12 seconds on ethereum mainnet)\\n    /// @param genesisTime The timestamp of block #0\\n    event SetSpec(uint64 epochsPerFrame, uint64 slotsPerEpoch, uint64 secondsPerSlot, uint64 genesisTime);\\n\\n    /// @notice The report bounds have been changed\\n    /// @param annualAprUpperBound The maximum allowed apr. 10% means increases in balance extrapolated to a year should not exceed 10%.\\n    /// @param relativeLowerBound The maximum allowed balance decrease as a relative % of the total balance\\n    event SetBounds(uint256 annualAprUpperBound, uint256 relativeLowerBound);\\n\\n    /// @notice An oracle member performed a report\\n    /// @param member The oracle member\\n    /// @param variant The variant of the report\\n    /// @param report The raw report structure\\n    /// @param voteCount The vote count\\n    event ReportedConsensusLayerData(\\n        address indexed member,\\n        bytes32 indexed variant,\\n        IRiverV1.ConsensusLayerReport report,\\n        uint256 voteCount,\\n        uint256 quorum\\n    );\\n\\n    /// @notice The last reported epoch has changed\\n    event SetLastReportedEpoch(uint256 lastReportedEpoch);\\n\\n    /// @notice Cleared reporting data\\n    event ClearedReporting();\\n\\n    /// @notice The provided epoch is too old compared to the expected epoch id\\n    /// @param providedEpochId The epoch id provided as input\\n    /// @param minExpectedEpochId The minimum epoch id expected\\n    error EpochTooOld(uint256 providedEpochId, uint256 minExpectedEpochId);\\n\\n    /// @notice Thrown when the reported epoch is invalid\\n    /// @param epoch The invalid epoch\\n    error InvalidEpoch(uint256 epoch);\\n\\n    /// @notice Thrown when the report indexs fetched is out of bounds\\n    /// @param index Requested index\\n    /// @param length Size of the variant array\\n    error ReportIndexOutOfBounds(uint256 index, uint256 length);\\n\\n    /// @notice The member already reported on the given epoch id\\n    /// @param epochId The epoch id provided as input\\n    /// @param member The oracle member\\n    error AlreadyReported(uint256 epochId, address member);\\n\\n    /// @notice The address is already in use by an oracle member\\n    /// @param newAddress The address already in use\\n    error AddressAlreadyInUse(address newAddress);\\n\\n    /// @notice Initializes the oracle\\n    /// @param _river Address of the River contract, able to receive oracle input data after quorum is met\\n    /// @param _administratorAddress Address able to call administrative methods\\n    /// @param _epochsPerFrame CL spec parameter. Number of epochs in a frame.\\n    /// @param _slotsPerEpoch CL spec parameter. Number of slots in one epoch.\\n    /// @param _secondsPerSlot CL spec parameter. Number of seconds between slots.\\n    /// @param _genesisTime CL spec parameter. Timestamp of the genesis slot.\\n    /// @param _annualAprUpperBound CL bound parameter. Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.\\n    /// @param _relativeLowerBound CL bound parameter. Maximum relative balance decrease.\\n    function initOracleV1(\\n        address _river,\\n        address _administratorAddress,\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime,\\n        uint256 _annualAprUpperBound,\\n        uint256 _relativeLowerBound\\n    ) external;\\n\\n    /// @notice Initializes the oracle\\n    function initOracleV1_1() external;\\n\\n    /// @notice Retrieve River address\\n    /// @return The address of River\\n    function getRiver() external view returns (address);\\n\\n    /// @notice Retrieve member report status\\n    /// @param _oracleMember Address of member to check\\n    /// @return True if member has reported\\n    function getMemberReportStatus(address _oracleMember) external view returns (bool);\\n\\n    /// @notice Retrieve member report status\\n    /// @return The raw report status value\\n    function getGlobalReportStatus() external view returns (uint256);\\n\\n    /// @notice Retrieve report variants count\\n    /// @return The count of report variants\\n    function getReportVariantsCount() external view returns (uint256);\\n\\n    /// @notice Retrieve the details of a report variant\\n    /// @param _idx The index of the report variant\\n    /// @return The report variant details\\n    function getReportVariantDetails(uint256 _idx)\\n        external\\n        view\\n        returns (ReportsVariants.ReportVariantDetails memory);\\n\\n    /// @notice Retrieve the current quorum\\n    /// @return The current quorum\\n    function getQuorum() external view returns (uint256);\\n\\n    /// @notice Retrieve the list of oracle members\\n    /// @return The oracle members\\n    function getOracleMembers() external view returns (address[] memory);\\n\\n    /// @notice Returns true if address is member\\n    /// @dev Performs a naive search, do not call this on-chain, used as an off-chain helper\\n    /// @param _memberAddress Address of the member\\n    /// @return True if address is a member\\n    function isMember(address _memberAddress) external view returns (bool);\\n\\n    /// @notice Retrieve the last reported epoch id\\n    /// @dev The Oracle contracts expects reports on an epoch id >= that the returned value\\n    /// @return The last reported epoch id\\n    function getLastReportedEpochId() external view returns (uint256);\\n\\n    /// @notice Adds new address as oracle member, giving the ability to push cl reports.\\n    /// @dev Only callable by the adminstrator\\n    /// @dev Modifying the quorum clears all the reporting data\\n    /// @param _newOracleMember Address of the new member\\n    /// @param _newQuorum New quorum value\\n    function addMember(address _newOracleMember, uint256 _newQuorum) external;\\n\\n    /// @notice Removes an address from the oracle members.\\n    /// @dev Only callable by the adminstrator\\n    /// @dev Modifying the quorum clears all the reporting data\\n    /// @dev Remaining members that have already voted should vote again for the same frame.\\n    /// @param _oracleMember Address to remove\\n    /// @param _newQuorum New quorum value\\n    function removeMember(address _oracleMember, uint256 _newQuorum) external;\\n\\n    /// @notice Changes the address of an oracle member\\n    /// @dev Only callable by the adminitrator or the member itself\\n    /// @dev Cannot use an address already in use\\n    /// @param _oracleMember Address to change\\n    /// @param _newAddress New address for the member\\n    function setMember(address _oracleMember, address _newAddress) external;\\n\\n    /// @notice Edits the quorum required to forward cl data to River\\n    /// @dev Modifying the quorum clears all the reporting data\\n    /// @param _newQuorum New quorum parameter\\n    function setQuorum(uint256 _newQuorum) external;\\n\\n    /// @notice Submit a report as an oracle member\\n    /// @param _report The report structure\\n    function reportConsensusLayerData(IRiverV1.ConsensusLayerReport calldata _report) external;\\n}\\n\",\"keccak256\":\"0xb7c0e8ca0671b1768a4173315d9c1a9fe255f99c8ac0210a7a9b074fcb31dc46\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRiver.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/river/DailyCommittableLimits.sol\\\";\\n\\nimport \\\"./components/IConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"./components/IOracleManager.1.sol\\\";\\nimport \\\"./components/ISharesManager.1.sol\\\";\\nimport \\\"./components/IUserDepositManager.1.sol\\\";\\n\\n/// @title River Interface (v1)\\n/// @author Kiln\\n/// @notice The main system interface\\ninterface IRiverV1 is IConsensusLayerDepositManagerV1, IUserDepositManagerV1, ISharesManagerV1, IOracleManagerV1 {\\n    /// @notice Funds have been pulled from the Execution Layer Fee Recipient\\n    /// @param amount The amount pulled\\n    event PulledELFees(uint256 amount);\\n\\n    /// @notice Funds have been pulled from the Coverage Fund\\n    /// @param amount The amount pulled\\n    event PulledCoverageFunds(uint256 amount);\\n\\n    /// @notice Emitted when funds are pulled from the redeem manager\\n    /// @param amount The amount pulled\\n    event PulledRedeemManagerExceedingEth(uint256 amount);\\n\\n    /// @notice Emitted when funds are pulled from the CL recipient\\n    /// @param pulledSkimmedEthAmount The amount of skimmed ETH pulled\\n    /// @param pullExitedEthAmount The amount of exited ETH pulled\\n    event PulledCLFunds(uint256 pulledSkimmedEthAmount, uint256 pullExitedEthAmount);\\n\\n    /// @notice The stored Execution Layer Fee Recipient has been changed\\n    /// @param elFeeRecipient The new Execution Layer Fee Recipient\\n    event SetELFeeRecipient(address indexed elFeeRecipient);\\n\\n    /// @notice The stored Coverage Fund has been changed\\n    /// @param coverageFund The new Coverage Fund\\n    event SetCoverageFund(address indexed coverageFund);\\n\\n    /// @notice The stored Collector has been changed\\n    /// @param collector The new Collector\\n    event SetCollector(address indexed collector);\\n\\n    /// @notice The stored Allowlist has been changed\\n    /// @param allowlist The new Allowlist\\n    event SetAllowlist(address indexed allowlist);\\n\\n    /// @notice The stored Global Fee has been changed\\n    /// @param fee The new Global Fee\\n    event SetGlobalFee(uint256 fee);\\n\\n    /// @notice The stored Operators Registry has been changed\\n    /// @param operatorRegistry The new Operators Registry\\n    event SetOperatorsRegistry(address indexed operatorRegistry);\\n\\n    /// @notice The stored Metadata URI string has been changed\\n    /// @param metadataURI The new Metadata URI string\\n    event SetMetadataURI(string metadataURI);\\n\\n    /// @notice The system underlying supply increased. This is a snapshot of the balances for accounting purposes\\n    /// @param _collector The address of the collector during this event\\n    /// @param _oldTotalUnderlyingBalance Old total ETH balance under management by River\\n    /// @param _oldTotalSupply Old total supply in shares\\n    /// @param _newTotalUnderlyingBalance New total ETH balance under management by River\\n    /// @param _newTotalSupply New total supply in shares\\n    event RewardsEarned(\\n        address indexed _collector,\\n        uint256 _oldTotalUnderlyingBalance,\\n        uint256 _oldTotalSupply,\\n        uint256 _newTotalUnderlyingBalance,\\n        uint256 _newTotalSupply\\n    );\\n\\n    /// @notice Emitted when the daily committable limits are changed\\n    /// @param minNetAmount The minimum amount that must be used as the daily committable amount\\n    /// @param maxRelativeAmount The maximum amount that can be used as the daily committable amount, relative to the total underlying supply\\n    event SetMaxDailyCommittableAmounts(uint256 minNetAmount, uint256 maxRelativeAmount);\\n\\n    /// @notice Emitted when the redeem manager address is changed\\n    /// @param redeemManager The address of the redeem manager\\n    event SetRedeemManager(address redeemManager);\\n\\n    /// @notice Emitted when the balance to deposit is updated\\n    /// @param oldAmount The old balance to deposit\\n    /// @param newAmount The new balance to deposit\\n    event SetBalanceToDeposit(uint256 oldAmount, uint256 newAmount);\\n\\n    /// @notice Emitted when the balance to redeem is updated\\n    /// @param oldAmount The old balance to redeem\\n    /// @param newAmount The new balance to redeem\\n    event SetBalanceToRedeem(uint256 oldAmount, uint256 newAmount);\\n\\n    /// @notice Emitted when the balance committed to deposit\\n    /// @param oldAmount The old balance committed to deposit\\n    /// @param newAmount The new balance committed to deposit\\n    event SetBalanceCommittedToDeposit(uint256 oldAmount, uint256 newAmount);\\n\\n    /// @notice Emitted when the redeem manager received a withdraw event report\\n    /// @param redeemManagerDemand The total demand in LsETH of the redeem manager\\n    /// @param suppliedRedeemManagerDemand The amount of LsETH demand actually supplied\\n    /// @param suppliedRedeemManagerDemandInEth The amount in ETH of the supplied demand\\n    event ReportedRedeemManager(\\n        uint256 redeemManagerDemand, uint256 suppliedRedeemManagerDemand, uint256 suppliedRedeemManagerDemandInEth\\n    );\\n\\n    /// @notice Thrown when the amount received from the Withdraw contract doe not match the requested amount\\n    /// @param requested The amount that was requested\\n    /// @param received The amount that was received\\n    error InvalidPulledClFundsAmount(uint256 requested, uint256 received);\\n\\n    /// @notice The computed amount of shares to mint is 0\\n    error ZeroMintedShares();\\n\\n    /// @notice The access was denied\\n    /// @param account The account that was denied\\n    error Denied(address account);\\n\\n    /// @notice Initializes the River system\\n    /// @param _depositContractAddress Address to make Consensus Layer deposits\\n    /// @param _elFeeRecipientAddress Address that receives the execution layer fees\\n    /// @param _withdrawalCredentials Credentials to use for every validator deposit\\n    /// @param _oracleAddress The address of the Oracle contract\\n    /// @param _systemAdministratorAddress Administrator address\\n    /// @param _allowlistAddress Address of the allowlist contract\\n    /// @param _operatorRegistryAddress Address of the operator registry\\n    /// @param _collectorAddress Address receiving the the global fee on revenue\\n    /// @param _globalFee Amount retained when the ETH balance increases and sent to the collector\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _operatorRegistryAddress,\\n        address _collectorAddress,\\n        uint256 _globalFee\\n    ) external;\\n\\n    /// @notice Initialized version 1.1 of the River System\\n    /// @param _redeemManager The redeem manager address\\n    /// @param _epochsPerFrame The amounts of epochs in a frame\\n    /// @param _slotsPerEpoch The slots inside an epoch\\n    /// @param _secondsPerSlot The seconds inside a slot\\n    /// @param _genesisTime The genesis timestamp\\n    /// @param _epochsToAssumedFinality The number of epochs before an epoch is considered final on-chain\\n    /// @param _annualAprUpperBound The reporting upper bound\\n    /// @param _relativeLowerBound The reporting lower bound\\n    /// @param _maxDailyNetCommittableAmount_ The net daily committable limit\\n    /// @param _maxDailyRelativeCommittableAmount_ The relative daily committable limit\\n    function initRiverV1_1(\\n        address _redeemManager,\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime,\\n        uint64 _epochsToAssumedFinality,\\n        uint256 _annualAprUpperBound,\\n        uint256 _relativeLowerBound,\\n        uint128 _maxDailyNetCommittableAmount_,\\n        uint128 _maxDailyRelativeCommittableAmount_\\n    ) external;\\n\\n    /// @notice Get the current global fee\\n    /// @return The global fee\\n    function getGlobalFee() external view returns (uint256);\\n\\n    /// @notice Retrieve the allowlist address\\n    /// @return The allowlist address\\n    function getAllowlist() external view returns (address);\\n\\n    /// @notice Retrieve the collector address\\n    /// @return The collector address\\n    function getCollector() external view returns (address);\\n\\n    /// @notice Retrieve the execution layer fee recipient\\n    /// @return The execution layer fee recipient address\\n    function getELFeeRecipient() external view returns (address);\\n\\n    /// @notice Retrieve the coverage fund\\n    /// @return The coverage fund address\\n    function getCoverageFund() external view returns (address);\\n\\n    /// @notice Retrieve the redeem manager\\n    /// @return The redeem manager address\\n    function getRedeemManager() external view returns (address);\\n\\n    /// @notice Retrieve the operators registry\\n    /// @return The operators registry address\\n    function getOperatorsRegistry() external view returns (address);\\n\\n    /// @notice Retrieve the metadata uri string value\\n    /// @return The metadata uri string value\\n    function getMetadataURI() external view returns (string memory);\\n\\n    /// @notice Retrieve the configured daily committable limits\\n    /// @return The daily committable limits structure\\n    function getDailyCommittableLimits()\\n        external\\n        view\\n        returns (DailyCommittableLimits.DailyCommittableLimitsStruct memory);\\n\\n    /// @notice Resolves the provided redeem requests by calling the redeem manager\\n    /// @param _redeemRequestIds The list of redeem requests to resolve\\n    /// @return withdrawalEventIds The list of matching withdrawal events, or error codes\\n    function resolveRedeemRequests(uint32[] calldata _redeemRequestIds)\\n        external\\n        view\\n        returns (int64[] memory withdrawalEventIds);\\n\\n    /// @notice Set the daily committable limits\\n    /// @param _dcl The Daily Committable Limits structure\\n    function setDailyCommittableLimits(DailyCommittableLimits.DailyCommittableLimitsStruct memory _dcl) external;\\n\\n    /// @notice Retrieve the current balance to redeem\\n    /// @return The current balance to redeem\\n    function getBalanceToRedeem() external view returns (uint256);\\n\\n    /// @notice Performs a redeem request on the redeem manager\\n    /// @param _lsETHAmount The amount of LsETH to redeem\\n    /// @param _recipient The address that will own the redeem request\\n    /// @return redeemRequestId The ID of the newly created redeem request\\n    function requestRedeem(uint256 _lsETHAmount, address _recipient) external returns (uint32 redeemRequestId);\\n\\n    /// @notice Claims several redeem requests\\n    /// @param _redeemRequestIds The list of redeem requests to claim\\n    /// @param _withdrawalEventIds The list of resolved withdrawal event ids\\n    /// @return claimStatuses The operation status results\\n    function claimRedeemRequests(uint32[] calldata _redeemRequestIds, uint32[] calldata _withdrawalEventIds)\\n        external\\n        returns (uint8[] memory claimStatuses);\\n\\n    /// @notice Changes the global fee parameter\\n    /// @param _newFee New fee value\\n    function setGlobalFee(uint256 _newFee) external;\\n\\n    /// @notice Changes the allowlist address\\n    /// @param _newAllowlist New address for the allowlist\\n    function setAllowlist(address _newAllowlist) external;\\n\\n    /// @notice Changes the collector address\\n    /// @param _newCollector New address for the collector\\n    function setCollector(address _newCollector) external;\\n\\n    /// @notice Changes the execution layer fee recipient\\n    /// @param _newELFeeRecipient New address for the recipient\\n    function setELFeeRecipient(address _newELFeeRecipient) external;\\n\\n    /// @notice Changes the coverage fund\\n    /// @param _newCoverageFund New address for the fund\\n    function setCoverageFund(address _newCoverageFund) external;\\n\\n    /// @notice Sets the metadata uri string value\\n    /// @param _metadataURI The new metadata uri string value\\n    function setMetadataURI(string memory _metadataURI) external;\\n\\n    /// @notice Input for execution layer fee earnings\\n    function sendELFees() external payable;\\n\\n    /// @notice Input for consensus layer funds, containing both exit and skimming\\n    function sendCLFunds() external payable;\\n\\n    /// @notice Input for coverage funds\\n    function sendCoverageFunds() external payable;\\n\\n    /// @notice Input for the redeem manager funds\\n    function sendRedeemManagerExceedingFunds() external payable;\\n}\\n\",\"keccak256\":\"0xcf93b73ed4c213444412796c85277cf9c211b8db31926a7e261c90ef3633b452\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IConsensusLayerDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Consensys Layer Deposit Manager Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the interactions with the official deposit contract\\ninterface IConsensusLayerDepositManagerV1 {\\n    /// @notice The stored deposit contract address changed\\n    /// @param depositContract Address of the deposit contract\\n    event SetDepositContractAddress(address indexed depositContract);\\n\\n    /// @notice The stored withdrawal credentials changed\\n    /// @param withdrawalCredentials The withdrawal credentials to use for deposits\\n    event SetWithdrawalCredentials(bytes32 withdrawalCredentials);\\n\\n    /// @notice Emitted when the deposited validator count is updated\\n    /// @param oldDepositedValidatorCount The old deposited validator count value\\n    /// @param newDepositedValidatorCount The new deposited validator count value\\n    event SetDepositedValidatorCount(uint256 oldDepositedValidatorCount, uint256 newDepositedValidatorCount);\\n\\n    /// @notice Not enough funds to deposit one validator\\n    error NotEnoughFunds();\\n\\n    /// @notice The length of the BLS Public key is invalid during deposit\\n    error InconsistentPublicKeys();\\n\\n    /// @notice The length of the BLS Signature is invalid during deposit\\n    error InconsistentSignatures();\\n\\n    /// @notice The internal key retrieval returned no keys\\n    error NoAvailableValidatorKeys();\\n\\n    /// @notice The received count of public keys to deposit is invalid\\n    error InvalidPublicKeyCount();\\n\\n    /// @notice The received count of signatures to deposit is invalid\\n    error InvalidSignatureCount();\\n\\n    /// @notice The withdrawal credentials value is null\\n    error InvalidWithdrawalCredentials();\\n\\n    /// @notice An error occured during the deposit\\n    error ErrorOnDeposit();\\n\\n    /// @notice Returns the amount of ETH not yet committed for deposit\\n    /// @return The amount of ETH not yet committed for deposit\\n    function getBalanceToDeposit() external view returns (uint256);\\n\\n    /// @notice Returns the amount of ETH committed for deposit\\n    /// @return The amount of ETH committed for deposit\\n    function getCommittedBalance() external view returns (uint256);\\n\\n    /// @notice Retrieve the withdrawal credentials\\n    /// @return The withdrawal credentials\\n    function getWithdrawalCredentials() external view returns (bytes32);\\n\\n    /// @notice Get the deposited validator count (the count of deposits made by the contract)\\n    /// @return The deposited validator count\\n    function getDepositedValidatorCount() external view returns (uint256);\\n\\n    /// @notice Deposits current balance to the Consensus Layer by batches of 32 ETH\\n    /// @param _maxCount The maximum amount of validator keys to fund\\n    function depositToConsensusLayer(uint256 _maxCount) external;\\n}\\n\",\"keccak256\":\"0x8e55597dba3a8c15b097a9e66bb5b833020bcb67ea833acb1d6e1f4b1a0457c0\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IOracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../state/river/CLSpec.sol\\\";\\nimport \\\"../../state/river/ReportBounds.sol\\\";\\n\\n/// @title Oracle Manager (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the inputs provided by the oracle\\ninterface IOracleManagerV1 {\\n    /// @notice The stored oracle address changed\\n    /// @param oracleAddress The new oracle address\\n    event SetOracle(address indexed oracleAddress);\\n\\n    /// @notice The consensus layer data provided by the oracle has been updated\\n    /// @param validatorCount The new count of validators running on the consensus layer\\n    /// @param validatorTotalBalance The new total balance sum of all validators\\n    /// @param roundId Round identifier\\n    event ConsensusLayerDataUpdate(uint256 validatorCount, uint256 validatorTotalBalance, bytes32 roundId);\\n\\n    /// @notice The Consensus Layer Spec is changed\\n    /// @param epochsPerFrame The number of epochs inside a frame\\n    /// @param slotsPerEpoch The number of slots inside an epoch\\n    /// @param secondsPerSlot The number of seconds inside a slot\\n    /// @param genesisTime The genesis timestamp\\n    /// @param epochsToAssumedFinality The number of epochs before an epoch is considered final\\n    event SetSpec(\\n        uint64 epochsPerFrame,\\n        uint64 slotsPerEpoch,\\n        uint64 secondsPerSlot,\\n        uint64 genesisTime,\\n        uint64 epochsToAssumedFinality\\n    );\\n\\n    /// @notice The Report Bounds are changed\\n    /// @param annualAprUpperBound The reporting upper bound\\n    /// @param relativeLowerBound The reporting lower bound\\n    event SetBounds(uint256 annualAprUpperBound, uint256 relativeLowerBound);\\n\\n    /// @notice The provided report has beend processed\\n    /// @param report The report that was provided\\n    /// @param trace The trace structure providing more insights on internals\\n    event ProcessedConsensusLayerReport(\\n        IOracleManagerV1.ConsensusLayerReport report, ConsensusLayerDataReportingTrace trace\\n    );\\n\\n    /// @notice The reported validator count is invalid\\n    /// @param providedValidatorCount The received validator count value\\n    /// @param depositedValidatorCount The number of deposits performed by the system\\n    /// @param lastReportedValidatorCount The last reported validator count\\n    error InvalidValidatorCountReport(\\n        uint256 providedValidatorCount, uint256 depositedValidatorCount, uint256 lastReportedValidatorCount\\n    );\\n\\n    /// @notice Thrown when an invalid epoch was reported\\n    /// @param epoch Invalid epoch\\n    error InvalidEpoch(uint256 epoch);\\n\\n    /// @notice The balance increase is higher than the maximum allowed by the upper bound\\n    /// @param prevTotalEthIncludingExited The previous total balance, including all exited balance\\n    /// @param postTotalEthIncludingExited The post-report total balance, including all exited balance\\n    /// @param timeElapsed The time in seconds since last report\\n    /// @param annualAprUpperBound The upper bound value that was used\\n    error TotalValidatorBalanceIncreaseOutOfBound(\\n        uint256 prevTotalEthIncludingExited,\\n        uint256 postTotalEthIncludingExited,\\n        uint256 timeElapsed,\\n        uint256 annualAprUpperBound\\n    );\\n\\n    /// @notice The balance decrease is higher than the maximum allowed by the lower bound\\n    /// @param prevTotalEthIncludingExited The previous total balance, including all exited balance\\n    /// @param postTotalEthIncludingExited The post-report total balance, including all exited balance\\n    /// @param timeElapsed The time in seconds since last report\\n    /// @param relativeLowerBound The lower bound value that was used\\n    error TotalValidatorBalanceDecreaseOutOfBound(\\n        uint256 prevTotalEthIncludingExited,\\n        uint256 postTotalEthIncludingExited,\\n        uint256 timeElapsed,\\n        uint256 relativeLowerBound\\n    );\\n\\n    /// @notice The total exited balance decreased\\n    /// @param currentValidatorsExitedBalance The current exited balance\\n    /// @param newValidatorsExitedBalance The new exited balance\\n    error InvalidDecreasingValidatorsExitedBalance(\\n        uint256 currentValidatorsExitedBalance, uint256 newValidatorsExitedBalance\\n    );\\n\\n    /// @notice The total skimmed balance decreased\\n    /// @param currentValidatorsSkimmedBalance The current exited balance\\n    /// @param newValidatorsSkimmedBalance The new exited balance\\n    error InvalidDecreasingValidatorsSkimmedBalance(\\n        uint256 currentValidatorsSkimmedBalance, uint256 newValidatorsSkimmedBalance\\n    );\\n\\n    /// @notice Trace structure emitted via logs during reporting\\n    struct ConsensusLayerDataReportingTrace {\\n        uint256 rewards;\\n        uint256 pulledELFees;\\n        uint256 pulledRedeemManagerExceedingEthBuffer;\\n        uint256 pulledCoverageFunds;\\n    }\\n\\n    /// @notice The format of the oracle report\\n    struct ConsensusLayerReport {\\n        // this is the epoch at which the report was performed\\n        // data should be fetched up to the state of this epoch by the oracles\\n        uint256 epoch;\\n        // the sum of all the validator balances on the consensus layer\\n        // when a validator enters the exit queue, the validator is considered stopped, its balance is accounted in both validatorsExitingBalance and validatorsBalance\\n        // when a validator leaves the exit queue and the funds are sweeped onto the execution layer, the balance is only accounted in validatorsExitedBalance and not in validatorsBalance\\n        // this value can decrease between reports\\n        uint256 validatorsBalance;\\n        // the sum of all the skimmings performed on the validators\\n        // these values can be found in the execution layer block bodies under the withdrawals field\\n        // a withdrawal is considered skimming if\\n        // - the epoch at which it happened is < validator.withdrawableEpoch\\n        // - the epoch at which it happened is >= validator.withdrawableEpoch and in that case we only account for what would be above 32 eth as skimming\\n        // this value cannot decrease over reports\\n        uint256 validatorsSkimmedBalance;\\n        // the sum of all the exits performed on the validators\\n        // these values can be found in the execution layer block bodies under the withdrawals field\\n        // a withdrawal is considered exit if\\n        // - the epoch at which it happened is >= validator.withdrawableEpoch and in that case we only account for what would be <= 32 eth as exit\\n        // this value cannot decrease over reports\\n        uint256 validatorsExitedBalance;\\n        // the sum of all the exiting balance, which is all the validators on their way to get sweeped and exited\\n        // this includes voluntary exits and slashings\\n        // this value can decrease between reports\\n        uint256 validatorsExitingBalance;\\n        // the count of activated validators\\n        // even validators that are exited are still accounted\\n        // this value cannot decrease over reports\\n        uint32 validatorsCount;\\n        // an array containing the count of stopped validators per operator\\n        // the first element of the array is the sum of all stopped validators\\n        // then index 1 would be operator 0\\n        // these values cannot decrease over reports\\n        uint32[] stoppedValidatorCountPerOperator;\\n        // flag enabled by the oracles when the buffer rebalancing is activated\\n        // the activation logic is written in the oracle specification and all oracle members must agree on the activation\\n        // when active, the eth in the deposit buffer can be used to pay for exits in the redeem manager\\n        bool rebalanceDepositToRedeemMode;\\n        // flag enabled by the oracles when the slashing containment is activated\\n        // the activation logic is written in the oracle specification and all oracle members must agree on the activation\\n        // This flag is activated when a pre-defined threshold of slashed validators in our set of validators is reached\\n        // This flag is deactivated when a bottom threshold is met, this means that when we reach the upper threshold and activate the flag, we will deactivate it when we reach the bottom threshold and not before\\n        // when active, no more validator exits can be requested by the protocol\\n        bool slashingContainmentMode;\\n    }\\n\\n    /// @notice The format of the oracle report in storage\\n    /// @notice These fields have the exact same function as the ones in ConsensusLayerReport, but this struct is optimized for storage\\n    struct StoredConsensusLayerReport {\\n        uint256 epoch;\\n        uint256 validatorsBalance;\\n        uint256 validatorsSkimmedBalance;\\n        uint256 validatorsExitedBalance;\\n        uint256 validatorsExitingBalance;\\n        uint32 validatorsCount;\\n        bool rebalanceDepositToRedeemMode;\\n        bool slashingContainmentMode;\\n    }\\n\\n    /// @notice Get oracle address\\n    /// @return The oracle address\\n    function getOracle() external view returns (address);\\n\\n    /// @notice Get CL validator total balance\\n    /// @return The CL Validator total balance\\n    function getCLValidatorTotalBalance() external view returns (uint256);\\n\\n    /// @notice Get CL validator count (the amount of validator reported by the oracles)\\n    /// @return The CL validator count\\n    function getCLValidatorCount() external view returns (uint256);\\n\\n    /// @notice Verifies if the provided epoch is valid\\n    /// @param epoch The epoch to lookup\\n    /// @return True if valid\\n    function isValidEpoch(uint256 epoch) external view returns (bool);\\n\\n    /// @notice Retrieve the block timestamp\\n    /// @return The current timestamp from the EVM context\\n    function getTime() external view returns (uint256);\\n\\n    /// @notice Retrieve expected epoch id\\n    /// @return The current expected epoch id\\n    function getExpectedEpochId() external view returns (uint256);\\n\\n    /// @notice Retrieve the last completed epoch id\\n    /// @return The last completed epoch id\\n    function getLastCompletedEpochId() external view returns (uint256);\\n\\n    /// @notice Retrieve the current epoch id based on block timestamp\\n    /// @return The current epoch id\\n    function getCurrentEpochId() external view returns (uint256);\\n\\n    /// @notice Retrieve the current cl spec\\n    /// @return The Consensus Layer Specification\\n    function getCLSpec() external view returns (CLSpec.CLSpecStruct memory);\\n\\n    /// @notice Retrieve the current frame details\\n    /// @return _startEpochId The epoch at the beginning of the frame\\n    /// @return _startTime The timestamp of the beginning of the frame in seconds\\n    /// @return _endTime The timestamp of the end of the frame in seconds\\n    function getCurrentFrame() external view returns (uint256 _startEpochId, uint256 _startTime, uint256 _endTime);\\n\\n    /// @notice Retrieve the first epoch id of the frame of the provided epoch id\\n    /// @param _epochId Epoch id used to get the frame\\n    /// @return The first epoch id of the frame containing the given epoch id\\n    function getFrameFirstEpochId(uint256 _epochId) external view returns (uint256);\\n\\n    /// @notice Retrieve the report bounds\\n    /// @return The report bounds\\n    function getReportBounds() external view returns (ReportBounds.ReportBoundsStruct memory);\\n\\n    /// @notice Retrieve the last consensus layer report\\n    /// @return The stored consensus layer report\\n    function getLastConsensusLayerReport() external view returns (IOracleManagerV1.StoredConsensusLayerReport memory);\\n\\n    /// @notice Set the oracle address\\n    /// @param _oracleAddress Address of the oracle\\n    function setOracle(address _oracleAddress) external;\\n\\n    /// @notice Set the consensus layer spec\\n    /// @param _newValue The new consensus layer spec value\\n    function setCLSpec(CLSpec.CLSpecStruct calldata _newValue) external;\\n\\n    /// @notice Set the report bounds\\n    /// @param _newValue The new report bounds value\\n    function setReportBounds(ReportBounds.ReportBoundsStruct calldata _newValue) external;\\n\\n    /// @notice Performs all the reporting logics\\n    /// @param _report The consensus layer report structure\\n    function setConsensusLayerData(ConsensusLayerReport calldata _report) external;\\n}\\n\",\"keccak256\":\"0x3c4400c0157355e2f123604ac5949e868644d34f7f122ef47ab311e68eefe54d\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/ISharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Shares Manager Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the shares of the depositor and the ERC20 interface\\ninterface ISharesManagerV1 is IERC20 {\\n    /// @notice Emitted when the total supply is changed\\n    event SetTotalSupply(uint256 totalSupply);\\n\\n    /// @notice Balance too low to perform operation\\n    error BalanceTooLow();\\n\\n    /// @notice Allowance too low to perform operation\\n    /// @param _from Account where funds are sent from\\n    /// @param _operator Account attempting the transfer\\n    /// @param _allowance Current allowance\\n    /// @param _value Requested transfer value in shares\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n\\n    /// @notice Invalid empty transfer\\n    error NullTransfer();\\n\\n    /// @notice Invalid transfer recipients\\n    /// @param _from Account sending the funds in the invalid transfer\\n    /// @param _to Account receiving the funds in the invalid transfer\\n    error UnauthorizedTransfer(address _from, address _to);\\n\\n    /// @notice Retrieve the token name\\n    /// @return The token name\\n    function name() external pure returns (string memory);\\n\\n    /// @notice Retrieve the token symbol\\n    /// @return The token symbol\\n    function symbol() external pure returns (string memory);\\n\\n    /// @notice Retrieve the decimal count\\n    /// @return The decimal count\\n    function decimals() external pure returns (uint8);\\n\\n    /// @notice Retrieve the total token supply\\n    /// @return The total supply in shares\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the total underlying asset supply\\n    /// @return The total underlying asset supply\\n    function totalUnderlyingSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The balance of the account in shares\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The underlying balance of the account\\n    function balanceOfUnderlying(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance from an amount of shares\\n    /// @param _shares Amount of shares to convert\\n    /// @return The underlying asset balance represented by the shares\\n    function underlyingBalanceFromShares(uint256 _shares) external view returns (uint256);\\n\\n    /// @notice Retrieve the shares count from an underlying asset amount\\n    /// @param _underlyingAssetAmount Amount of underlying asset to convert\\n    /// @return The amount of shares worth the underlying asset amopunt\\n    function sharesFromUnderlyingBalance(uint256 _underlyingAssetAmount) external view returns (uint256);\\n\\n    /// @notice Retrieve the allowance value for a spender\\n    /// @param _owner Address that issued the allowance\\n    /// @param _spender Address that received the allowance\\n    /// @return The allowance in shares for a given spender\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    /// @notice Performs a transfer from the message sender to the provided account\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Performs a transfer between two recipients\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Approves an account for future spendings\\n    /// @dev An approved account can use transferFrom to transfer funds on behalf of the token owner\\n    /// @param _spender Address that is allowed to spend the tokens\\n    /// @param _value The allowed amount in shares, will override previous value\\n    /// @return True if success\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    /// @notice Increase allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _additionalValue Amount of shares to add\\n    /// @return True if success\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool);\\n\\n    /// @notice Decrease allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _subtractableValue Amount of shares to subtract\\n    /// @return True if success\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool);\\n}\\n\",\"keccak256\":\"0x48205c5d24d9946b62185f16c7d43e071e96b0d4b8a25ce6948fd4450f868444\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/components/IUserDepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title User Deposit Manager (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the inbound transfers cases or the explicit submissions\\ninterface IUserDepositManagerV1 {\\n    /// @notice User deposited ETH in the system\\n    /// @param depositor Address performing the deposit\\n    /// @param recipient Address receiving the minted shares\\n    /// @param amount Amount in ETH deposited\\n    event UserDeposit(address indexed depositor, address indexed recipient, uint256 amount);\\n\\n    /// @notice And empty deposit attempt was made\\n    error EmptyDeposit();\\n\\n    /// @notice Explicit deposit method to mint on msg.sender\\n    function deposit() external payable;\\n\\n    /// @notice Explicit deposit method to mint on msg.sender and transfer to _recipient\\n    /// @param _recipient Address receiving the minted LsETH\\n    function depositAndTransfer(address _recipient) external payable;\\n\\n    /// @notice Implicit deposit method, when the user performs a regular transfer to the contract\\n    receive() external payable;\\n\\n    /// @notice Invalid call, when the user sends a transaction with a data payload but no method matched\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x1abcda34431bfbb82b6ede5c852f4ece6544cca24616f58cb44ed340df0ef06b\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\nimport \\\"../state/shared/PendingAdministratorAddress.sol\\\";\\n\\n/// @title Lib Administrable\\n/// @author Kiln\\n/// @notice This library handles the admin and pending admin storage vars\\nlibrary LibAdministrable {\\n    /// @notice Retrieve the system admin\\n    /// @return The address of the system admin\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n\\n    /// @notice Retrieve the pending system admin\\n    /// @return The adress of the pending system admin\\n    function _getPendingAdmin() internal view returns (address) {\\n        return PendingAdministratorAddress.get();\\n    }\\n\\n    /// @notice Sets the system admin\\n    /// @param _admin New system admin\\n    function _setAdmin(address _admin) internal {\\n        AdministratorAddress.set(_admin);\\n    }\\n\\n    /// @notice Sets the pending system admin\\n    /// @param _pendingAdmin New pending system admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        PendingAdministratorAddress.set(_pendingAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0xbe4cec02aff69406624f3ab71a19948997aaf74f63e171137f2f3b85bdb7bc3a\",\"license\":\"MIT\"},\"contracts/src/libraries/LibBasisPoints.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Lib Basis Points\\n/// @notice Holds the basis points max value\\nlibrary LibBasisPoints {\\n    /// @notice The max value for basis points (represents 100%)\\n    uint256 internal constant BASIS_POINTS_MAX = 10_000;\\n}\\n\",\"keccak256\":\"0x97228a01dcd48f033555e3a44f9be37fb474a1b027f703f28097d539808f1c6c\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibErrors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Errors\\n/// @notice Library of common errors\\nlibrary LibErrors {\\n    /// @notice The operator is unauthorized for the caller\\n    /// @param caller Address performing the call\\n    error Unauthorized(address caller);\\n\\n    /// @notice The call was invalid\\n    error InvalidCall();\\n\\n    /// @notice The argument was invalid\\n    error InvalidArgument();\\n\\n    /// @notice The address is zero\\n    error InvalidZeroAddress();\\n\\n    /// @notice The string is empty\\n    error InvalidEmptyString();\\n\\n    /// @notice The fee is invalid\\n    error InvalidFee();\\n}\\n\",\"keccak256\":\"0x7bdbd4ada124723fa08e2088405ba0bf4453beb23d84f4af09e894e06e751f33\",\"license\":\"MIT\"},\"contracts/src/libraries/LibSanitize.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./LibErrors.sol\\\";\\nimport \\\"./LibBasisPoints.sol\\\";\\n\\n/// @title Lib Sanitize\\n/// @notice Utilities to sanitize input values\\nlibrary LibSanitize {\\n    /// @notice Reverts if address is 0\\n    /// @param _address Address to check\\n    function _notZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert LibErrors.InvalidZeroAddress();\\n        }\\n    }\\n\\n    /// @notice Reverts if string is empty\\n    /// @param _string String to check\\n    function _notEmptyString(string memory _string) internal pure {\\n        if (bytes(_string).length == 0) {\\n            revert LibErrors.InvalidEmptyString();\\n        }\\n    }\\n\\n    /// @notice Reverts if fee is invalid\\n    /// @param _fee Fee to check\\n    function _validFee(uint256 _fee) internal pure {\\n        if (_fee > LibBasisPoints.BASIS_POINTS_MAX) {\\n            revert LibErrors.InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8aeeb866c4657a96c8b4c006340c7996d15a6f0044b730c276bc3ba8d5bcd48\",\"license\":\"MIT\"},\"contracts/src/libraries/LibUnstructuredStorage.sol\":{\"content\":\"// SPDX-License-Identifier:    MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @title Lib Unstructured Storage\\n/// @notice Utilities to work with unstructured storage\\nlibrary LibUnstructuredStorage {\\n    /// @notice Retrieve a bool value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bool value\\n    function getStorageBool(bytes32 _position) internal view returns (bool data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an address value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The address value\\n    function getStorageAddress(bytes32 _position) internal view returns (address data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve a bytes32 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bytes32 value\\n    function getStorageBytes32(bytes32 _position) internal view returns (bytes32 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an uint256 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The uint256 value\\n    function getStorageUint256(bytes32 _position) internal view returns (uint256 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Sets a bool value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bool value to set\\n    function setStorageBool(bytes32 _position, bool _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an address value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The address value to set\\n    function setStorageAddress(bytes32 _position, address _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets a bytes32 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bytes32 value to set\\n    function setStorageBytes32(bytes32 _position, bytes32 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an uint256 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The uint256 value to set\\n    function setStorageUint256(bytes32 _position, uint256 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8e1a2f0dc18e023e12747355b3c95258d4de698f2bb6196222a1dc92940caa3\",\"license\":\"MIT\"},\"contracts/src/state/oracle/LastEpochId.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Last Epoch Id Storage\\n/// @notice Utility to manage the Last Epoch Id in storage\\nlibrary LastEpochId {\\n    /// @notice Storage slot of the Last Epoch Id\\n    bytes32 internal constant LAST_EPOCH_ID_SLOT = bytes32(uint256(keccak256(\\\"river.state.lastEpochId\\\")) - 1);\\n\\n    /// @notice Retrieve the Last Epoch Id\\n    /// @return The Last Epoch Id\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(LAST_EPOCH_ID_SLOT);\\n    }\\n\\n    /// @notice Sets the Last Epoch Id\\n    /// @param _newValue New Last Epoch Id\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(LAST_EPOCH_ID_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x7a992b8b6c71cfb28f504186b7846e6b7957491d5a67bed446713d48bee4c31a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/OracleMembers.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Oracle Members Storage\\n/// @notice Utility to manage the Oracle Members in storage\\n/// @dev There can only be up to 256 oracle members. This is due to how report statuses are stored in Reports Positions\\nlibrary OracleMembers {\\n    /// @notice Storage slot of the Oracle Members\\n    bytes32 internal constant ORACLE_MEMBERS_SLOT = bytes32(uint256(keccak256(\\\"river.state.oracleMembers\\\")) - 1);\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The array of oracle members\\n        address[] value;\\n    }\\n\\n    /// @notice Retrieve the list of oracle members\\n    /// @return List of oracle members\\n    function get() internal view returns (address[] memory) {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Add a new oracle member to the list\\n    /// @param _newOracleMember Address of the new oracle member\\n    function push(address _newOracleMember) internal {\\n        LibSanitize._notZeroAddress(_newOracleMember);\\n\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_newOracleMember);\\n    }\\n\\n    /// @notice Set an address in the oracle member list\\n    /// @param _index The index to edit\\n    /// @param _newOracleAddress The new value of the oracle member\\n    function set(uint256 _index, address _newOracleAddress) internal {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_index] = _newOracleAddress;\\n    }\\n\\n    /// @notice Retrieve the index of the oracle member\\n    /// @param _memberAddress The address to lookup\\n    /// @return The index of the member, -1 if not found\\n    function indexOf(address _memberAddress) internal view returns (int256) {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        for (uint256 idx = 0; idx < r.value.length;) {\\n            if (r.value[idx] == _memberAddress) {\\n                return int256(idx);\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return int256(-1);\\n    }\\n\\n    /// @notice Delete the oracle member at the given index\\n    /// @param _idx The index of the member to remove\\n    function deleteItem(uint256 _idx) internal {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 lastIdx = r.value.length - 1;\\n        if (lastIdx != _idx) {\\n            r.value[_idx] = r.value[lastIdx];\\n        }\\n\\n        r.value.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x15d800646b54c37160442613719e79e68269aedb112705d63f88e2da7e7c0f04\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/Quorum.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Quorum Storage\\n/// @notice Utility to manage the Quorum in storage\\nlibrary Quorum {\\n    /// @notice Storage slot of the Quorum\\n    bytes32 internal constant QUORUM_SLOT = bytes32(uint256(keccak256(\\\"river.state.quorum\\\")) - 1);\\n\\n    /// @notice Retrieve the Quorum\\n    /// @return The Quorum\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(QUORUM_SLOT);\\n    }\\n\\n    /// @notice Sets the Quorum\\n    /// @param _newValue New Quorum\\n    function set(uint256 _newValue) internal {\\n        return LibUnstructuredStorage.setStorageUint256(QUORUM_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x792a970cdecd7fb20f3e9be818ba247032cc499a88a300b0e1ae7120cdf41483\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/ReportsPositions.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Reports Positions Storage\\n/// @notice Utility to manage the Reports Positions in storage\\n/// @dev Each bit in the stored uint256 value tells if the member at a given index has reported\\nlibrary ReportsPositions {\\n    /// @notice Storage slot of the Reports Positions\\n    bytes32 internal constant REPORTS_POSITIONS_SLOT = bytes32(uint256(keccak256(\\\"river.state.reportsPositions\\\")) - 1);\\n\\n    /// @notice Retrieve the Reports Positions at index\\n    /// @param _idx The index to retrieve\\n    /// @return True if already reported\\n    function get(uint256 _idx) internal view returns (bool) {\\n        uint256 mask = 1 << _idx;\\n        return LibUnstructuredStorage.getStorageUint256(REPORTS_POSITIONS_SLOT) & mask == mask;\\n    }\\n\\n    /// @notice Retrieve the raw Reports Positions from storage\\n    /// @return Raw Reports Positions\\n    function getRaw() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(REPORTS_POSITIONS_SLOT);\\n    }\\n\\n    /// @notice Register an index as reported\\n    /// @param _idx The index to register\\n    function register(uint256 _idx) internal {\\n        uint256 mask = 1 << _idx;\\n        return LibUnstructuredStorage.setStorageUint256(\\n            REPORTS_POSITIONS_SLOT, LibUnstructuredStorage.getStorageUint256(REPORTS_POSITIONS_SLOT) | mask\\n        );\\n    }\\n\\n    /// @notice Clears all the report positions in storage\\n    function clear() internal {\\n        return LibUnstructuredStorage.setStorageUint256(REPORTS_POSITIONS_SLOT, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x690b7a1cd9f56d779214291e2af6472352c992f2fd7bf7d52f101d4ce4efb2ec\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/ReportsVariants.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Reports Variants Storage\\n/// @notice Utility to manage the Reports Variants in storage\\nlibrary ReportsVariants {\\n    /// @notice Storage slot of the Reports Variants\\n    bytes32 internal constant REPORT_VARIANTS_SLOT = bytes32(uint256(keccak256(\\\"river.state.reportsVariants\\\")) - 1);\\n\\n    struct ReportVariantDetails {\\n        bytes32 variant;\\n        uint256 votes;\\n    }\\n\\n    /// @notice Structure in storage\\n    struct Slot {\\n        /// @custom:attribute The list of variants\\n        ReportVariantDetails[] value;\\n    }\\n\\n    /// @notice Retrieve the Reports Variants from storage\\n    /// @return The Reports Variants\\n    function get() internal view returns (ReportVariantDetails[] storage) {\\n        bytes32 slot = REPORT_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Reports Variants value at index\\n    /// @param _idx The index to set\\n    /// @param _val The value to set\\n    function set(uint256 _idx, ReportVariantDetails memory _val) internal {\\n        bytes32 slot = REPORT_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_idx] = _val;\\n    }\\n\\n    /// @notice Add a new variant in the list\\n    /// @param _variant The new variant to add\\n    function push(ReportVariantDetails memory _variant) internal {\\n        bytes32 slot = REPORT_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_variant);\\n    }\\n\\n    /// @notice Retrieve the index of a specific variant, ignoring the count field\\n    /// @param _variant Variant value to lookup\\n    /// @return The index of the variant, -1 if not found\\n    function indexOfReport(bytes32 _variant) internal view returns (int256) {\\n        bytes32 slot = REPORT_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        for (uint256 idx = 0; idx < r.value.length;) {\\n            if (r.value[idx].variant == _variant) {\\n                return int256(idx);\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return int256(-1);\\n    }\\n\\n    /// @notice Clear all variants from storage\\n    function clear() internal {\\n        bytes32 slot = REPORT_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        delete r.value;\\n    }\\n}\\n\",\"keccak256\":\"0x1dbac2d4b2bf15f1c39e915f8c15be7d1676f455a80b989670f99539fd55fb38\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/CLSpec.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Consensus Layer Spec Storage\\n/// @notice Utility to manage the Consensus Layer Spec in storage\\nlibrary CLSpec {\\n    /// @notice Storage slot of the Consensus Layer Spec\\n    bytes32 internal constant CL_SPEC_SLOT = bytes32(uint256(keccak256(\\\"river.state.clSpec\\\")) - 1);\\n\\n    /// @notice The Consensus Layer Spec structure\\n    struct CLSpecStruct {\\n        /// @custom:attribute The count of epochs per frame, 225 means 24h\\n        uint64 epochsPerFrame;\\n        /// @custom:attribute The count of slots in an epoch (32 on mainnet)\\n        uint64 slotsPerEpoch;\\n        /// @custom:attribute The seconds in a slot (12 on mainnet)\\n        uint64 secondsPerSlot;\\n        /// @custom:attribute The block timestamp of the first consensus layer block\\n        uint64 genesisTime;\\n        /// @custom:attribute The count of epochs before considering an epoch final on-chain\\n        uint64 epochsToAssumedFinality;\\n    }\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        CLSpecStruct value;\\n    }\\n\\n    /// @notice Retrieve the Consensus Layer Spec from storage\\n    /// @return The Consensus Layer Spec\\n    function get() internal view returns (CLSpecStruct memory) {\\n        bytes32 slot = CL_SPEC_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Consensus Layer Spec value in storage\\n    /// @param _newCLSpec The new value to set in storage\\n    function set(CLSpecStruct memory _newCLSpec) internal {\\n        bytes32 slot = CL_SPEC_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newCLSpec;\\n    }\\n}\\n\",\"keccak256\":\"0x308ade79e8c4249aa28e30b86518c9e02b223dca76e01b5036de63d2c7176635\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DailyCommittableLimits.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Daily Committable Limits storage\\n/// @notice Utility to manage the Daily Committable Limits in storage\\nlibrary DailyCommittableLimits {\\n    /// @notice Storage slot of the Daily Committable Limits storage\\n    bytes32 internal constant DAILY_COMMITTABLE_LIMITS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.dailyCommittableLimits\\\")) - 1);\\n\\n    /// @notice The daily committable limits structure\\n    struct DailyCommittableLimitsStruct {\\n        uint128 minDailyNetCommittableAmount;\\n        uint128 maxDailyRelativeCommittableAmount;\\n    }\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        DailyCommittableLimitsStruct value;\\n    }\\n\\n    /// @notice Retrieve the Daily Committable Limits from storage\\n    /// @return The Daily Committable Limits\\n    function get() internal view returns (DailyCommittableLimitsStruct memory) {\\n        bytes32 slot = DAILY_COMMITTABLE_LIMITS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Daily Committable Limits value in storage\\n    /// @param _newValue The new value to set in storage\\n    function set(DailyCommittableLimitsStruct memory _newValue) internal {\\n        bytes32 slot = DAILY_COMMITTABLE_LIMITS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newValue;\\n    }\\n}\\n\",\"keccak256\":\"0x884cfb145667d95b1bbae229e3d32d17fc935d5587cb2d318f9506b15df0457c\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/ReportBounds.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Report Bounds Storage\\n/// @notice Utility to manage the Report Bounds in storage\\nlibrary ReportBounds {\\n    /// @notice Storage slot of the Report Bounds\\n    bytes32 internal constant REPORT_BOUNDS_SLOT = bytes32(uint256(keccak256(\\\"river.state.reportBounds\\\")) - 1);\\n\\n    /// @notice The Report Bounds structure\\n    struct ReportBoundsStruct {\\n        /// @custom:attribute The maximum allowed annual apr, checked before submitting a report to River\\n        uint256 annualAprUpperBound;\\n        /// @custom:attribute The maximum allowed balance decrease, also checked before submitting a report to River\\n        uint256 relativeLowerBound;\\n    }\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        ReportBoundsStruct value;\\n    }\\n\\n    /// @notice Retrieve the Report Bounds from storage\\n    /// @return The Report Bounds\\n    function get() internal view returns (ReportBoundsStruct memory) {\\n        bytes32 slot = REPORT_BOUNDS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Report Bounds in storage\\n    /// @param _newReportBounds The new Report Bounds value\\n    function set(ReportBoundsStruct memory _newReportBounds) internal {\\n        bytes32 slot = REPORT_BOUNDS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newReportBounds;\\n    }\\n}\\n\",\"keccak256\":\"0xbae9eb981ca4714656f2cee8137329d94196fca58d0c18a097da583662023ca9\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrator Address Storage\\n/// @notice Utility to manage the Administrator Address in storage\\nlibrary AdministratorAddress {\\n    /// @notice Storage slot of the Administrator Address\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Administrator Address\\n    /// @return The Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Administrator Address\\n    /// @param _newValue New Administrator Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x4f702b4454858199ca8fd15ef1cee63d9dc3d4d8f2ff7a2f859a4e151e46e8ec\",\"license\":\"MIT\"},\"contracts/src/state/shared/PendingAdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Pending Administrator Address Storage\\n/// @notice Utility to manage the Pending Administrator Address in storage\\nlibrary PendingAdministratorAddress {\\n    /// @notice Storage slot of the Pending Administrator Address\\n    bytes32 public constant PENDING_ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.pendingAdministratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Pending Administrator Address\\n    /// @return The Pending Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Pending Administrator Address\\n    /// @param _newValue New Pending Administrator Address\\n    function set(address _newValue) internal {\\n        LibUnstructuredStorage.setStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x2164cafa435d1e1650037164e2b094ca3af00cc68e05b59140406aa59b1949f2\",\"license\":\"MIT\"},\"contracts/src/state/shared/RiverAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title River Address Storage\\n/// @notice Utility to manage the River Address in storage\\nlibrary RiverAddress {\\n    /// @notice Storage slot of the River Address\\n    bytes32 internal constant RIVER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.riverAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the River Address\\n    /// @return The River Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(RIVER_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the River Address\\n    /// @param _newValue New River Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(RIVER_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xffc846d2e04891e3b0625a9e710fa2a18b4e1af43609f0d76d6c3b7bf5c51384\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Version Storage\\n/// @notice Utility to manage the Version in storage\\nlibrary Version {\\n    /// @notice Storage slot of the Version\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    /// @notice Retrieve the Version\\n    /// @return The Version\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    /// @notice Sets the Version\\n    /// @param _newValue New Version\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(VERSION_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x82f1cc4bbb1f16c1cdbac93596334805eb1a2e0e40ccbd0ab0f78e22d3f83864\",\"license\":\"BUSL-1.1\"},\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}"
        ],
        "bytecode": [
            "0x60806040523480156200001157600080fd5b506200002a6000196200007060201b62000d4e1760201c565b7f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a716000196000366040516200006293929190620000bd565b60405180910390a162000119565b620000b6620000a160017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd620000f3565b60001b82620000b960201b62000d811760201c565b50565b9055565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b6000828210156200011457634e487b7160e01b600052601160045260246000fd5b500390565b611c1080620001296000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806398041ea3116100ad578063c1ba4e5911610071578063c1ba4e5914610259578063c26c12eb1461026c578063d046815614610274578063dabb57571461027c578063fad2e86a1461029157600080fd5b806398041ea314610210578063a230c52414610223578063a519f06014610236578063b4aff5e71461023e578063bc8b8f971461024657600080fd5b806316f6f03e116100f457806316f6f03e146101aa5780635190dce0146101bd578063628105d1146101e057806365872cbe146101f35780636e9960c3146101fb57600080fd5b806303bc7f27146101315780630c647397146101465780630e18b68114610179578063147bf6c41461018157806314c8cd6a14610194575b600080fd5b61014461013f366004611739565b610299565b005b610159610154366004611774565b6105e7565b604080518251815260209283015192810192909252015b60405180910390f35b610144610683565b61014461018f3660046117a9565b6106da565b61019c610721565b604051908152602001610170565b6101446101b83660046117c4565b610730565b6101d06101cb3660046117a9565b6107f3565b6040519015158152602001610170565b6101446101ee3660046117ee565b61081e565b61019c610924565b61020361092e565b6040516101709190611821565b61014461021e3660046117c4565b610938565b6101d06102313660046117a9565b6109fc565b610203610a10565b610144610a1a565b61014461025436600461184c565b610aaf565b610144610267366004611774565b610caa565b61019c610d20565b610203610d2a565b610284610d34565b60405161017091906118d5565b61019c610d3e565b60006102a433610d85565b90508060001914156102d4573360405163472511eb60e11b81526004016102cb9190611821565b60405180910390fd5b60006102de610e06565b905082358111156103155782356102f3610e06565b6040516304f6456960e11b8152600481019290925260248201526044016102cb565b600061031f610e3a565b604051630f9f95a960e41b8152853560048201529091506001600160a01b0382169063f9f95a9090602401602060405180830381865afa158015610367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038b9190611930565b6103ab5760405163a225656d60e01b8152843560048201526024016102cb565b83358210156103fb576103bc610e6a565b6103c68435610ea5565b604051843581527f3b16582fd30a1d07d3a11bd74e5cd9290bd62bf73d4df6a19e434b5bde09c4769060200160405180910390a15b61040483610ed3565b1561042b57604051637a6a90d160e11b8152843560048201523360248201526044016102cb565b61043483610f04565b600061043f85610f48565b905060008061044d83610f78565b91509150600061045b611013565b905083337f76eeea294370eab10c370cba335d68bef19ccdb73231925a08563dcf69d5be678a61048c866001611963565b8560405161049c93929190611ac9565b60405180910390a3806104b0836001611963565b10610574576104bd610e6a565b6104d16104cc89356001611963565b610ea5565b6040516377eb342360e11b81526001600160a01b0386169063efd66846906104fd908b90600401611aee565b600060405180830381600087803b15801561051757600080fd5b505af115801561052b573d6000803e3d6000fd5b507f3b16582fd30a1d07d3a11bd74e5cd9290bd62bf73d4df6a19e434b5bde09c476925061055e91505089356001611963565b60405190815260200160405180910390a16105dd565b8161059c5761059760405180604001604052808681526020016001815250611043565b6105dd565b60016105a661108b565b84815481106105b7576105b7611b01565b906000526020600020906002020160010160008282546105d79190611963565b90915550505b5050505050505050565b60408051808201909152600080825260208201528161060461108b565b5411610636578161061361108b565b5460405163b21b708160e01b8152600481019290925260248201526044016102cb565b61063e61108b565b828154811061064f5761064f611b01565b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050919050565b61068b6110ad565b6001600160a01b0316336001600160a01b0316146106be573360405163472511eb60e11b81526004016102cb9190611821565b6106ce6106c96110ad565b6110b7565b6106d86000611100565b565b6106e2611140565b6001600160a01b0316336001600160a01b031614610715573360405163472511eb60e11b81526004016102cb9190611821565b61071e81611100565b50565b600061072b61114a565b905090565b610738611140565b6001600160a01b0316336001600160a01b03161461076b573360405163472511eb60e11b81526004016102cb9190611821565b600061077683610d85565b9050600081121561079a5760405163574b16a760e11b815260040160405180910390fd5b6107a381611168565b60006107ad611013565b90506107b9838261124b565b6040516001600160a01b038516907f7693a3e9eac51f172f145e6f54bc5554168997a1f4efb40f3fad091aa7cfb0e790600090a250505050565b6000806107ff83610d85565b90508060001914158015610817575061081781610ed3565b9392505050565b8161082761092e565b6001600160a01b0316336001600160a01b0316141580156108515750336001600160a01b03821614155b15610871573360405163472511eb60e11b81526004016102cb9190611821565b61087a826112df565b600061088583610d85565b126108a557816040516307bbad8160e51b81526004016102cb9190611821565b60006108b084610d85565b905060008112156108d45760405163574b16a760e11b815260040160405180910390fd5b6108de8184611306565b826001600160a01b0316846001600160a01b03167fc20826a9a3cb354d2c12357704db9eb03d7344375b092d70146dbbbc4d3f84d160405160405180910390a350505050565b600061072b610e06565b600061072b611140565b610940611140565b6001600160a01b0316336001600160a01b031614610973573360405163472511eb60e11b81526004016102cb9190611821565b600061097e83610d85565b9050600081126109a357826040516307bbad8160e51b81526004016102cb9190611821565b6109ac83611370565b60006109b6611013565b90506109c2838261124b565b6040516001600160a01b038516907f1a2323d99020f3db8e6ea85b1eea81e5bf422695877228e3d8a0241d7e957a6c90600090a250505050565b600080610a0883610d85565b121592915050565b600061072b610e3a565b6001610a246113c9565b8114610a555780610a336113c9565b604051631cfd276760e31b8152600481019290925260248201526044016102cb565b610a68610a63826001611963565b610d4e565b610a70610e6a565b7f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610aa493929190611b17565b60405180910390a150565b6000610ab96113c9565b8114610ac85780610a336113c9565b610ad6610a63826001611963565b610adf886110b7565b610ae8896113f9565b7ffc0d749143b04e0d92a3b49edae84a45f6bc88b75e99d9118ec4d7e87fe626c589604051610b179190611821565b60405180910390a1610b7c6040518060a00160405280896001600160401b03168152602001886001600160401b03168152602001876001600160401b03168152602001866001600160401b0316815260200160006001600160401b0316815250611430565b604080516001600160401b0389811682528881166020830152878116828401528616606082015290517f4a7503ca21ae5342feb83892e899e95fb309502a0016ed300e4965e2dbfe73359181900360800190a1610bec6040518060400160405280858152602001848152506114ec565b60408051848152602081018490527f5ab79ffcd89b6380c7fbdd89d02cfe3d9c53c99a85e150c2319075018d1aac5c910160405180910390a1610c2f600061152f565b604051600081527f8e72be630a666d46b219565c1647e3792924d9c74e901fa3c4a33e23b91fb9b19060200160405180910390a17f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610c9793929190611b17565b60405180910390a1505050505050505050565b610cb2611140565b6001600160a01b0316336001600160a01b031614610ce5573360405163472511eb60e11b81526004016102cb9190611821565b6000610cef611013565b905081811415610d125760405163a9cb9e0d60e01b815260040160405180910390fd5b610d1c828261124b565b5050565b600061072b611013565b600061072b6110ad565b606061072b61155d565b6000610d4861108b565b54919050565b61071e610d7c60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd611b4d565b829055565b9055565b600080610da16001600080516020611b7b833981519152611b4d565b90508060005b8154811015610dfa57846001600160a01b0316826000018281548110610dcf57610dcf611b01565b6000918252602090912001546001600160a01b03161415610df257949350505050565b600101610da7565b50600019949350505050565b600061072b610e3660017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed611b4d565b5490565b600061072b610e3660017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c611b4d565b610e726115dc565b610e7a611605565b6040517f59bc16d5874dc28f6f69be9e88387299800118ede161a5169eec92191977ebe590600090a1565b61071e610d7c60017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed611b4d565b6000600180831b9081908190610efb90610e3690600080516020611b9b833981519152611b4d565b16149392505050565b600180821b90610d1c90610f2690600080516020611b9b833981519152611b4d565b82610f43610e366001600080516020611b9b833981519152611b4d565b179055565b600081604051602001610f5b9190611aee565b604051602081830303815290604052805190602001209050919050565b6000806000610f8561108b565b54905060005b818110156110045784610f9c61108b565b8281548110610fad57610fad611b01565b9060005260206000209060020201600001541415610ffc5780610fce61108b565b8281548110610fdf57610fdf611b01565b906000526020600020906002020160010154935093505050915091565b600101610f8b565b50600019946000945092505050565b600061072b610e3660017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb611b4d565b600061105e6001600080516020611bbb833981519152611b4d565b80546001818101835560009283526020928390208551600290930201918255919093015192019190915550565b6000806110a76001600080516020611bbb833981519152611b4d565b92915050565b600061072b611627565b6110c0816112df565b6110c981611657565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b61110981611660565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b600061072b611669565b600061072b610e366001600080516020611b9b833981519152611b4d565b60006111836001600080516020611b7b833981519152611b4d565b8054909150819060009061119990600190611b4d565b9050838114611212578160000181815481106111b7576111b7611b01565b60009182526020909120015482546001600160a01b03909116908390869081106111e3576111e3611b01565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b815482908061122357611223611b64565b600082815260209020810160001990810180546001600160a01b031916905501905550505050565b600061125561155d565b519050821580156112665750600081115b8061127057508083115b1561128e5760405163a9cb9e0d60e01b815260040160405180910390fd5b611296610e6a565b8183146112da576112a68361152f565b6040518381527f8e72be630a666d46b219565c1647e3792924d9c74e901fa3c4a33e23b91fb9b19060200160405180910390a15b505050565b6001600160a01b03811661071e5760405163f6b2911f60e01b815260040160405180910390fd5b60006113216001600080516020611b7b833981519152611b4d565b80549091508190839082908690811061133c5761133c611b01565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b611379816112df565b60006113946001600080516020611b7b833981519152611b4d565b8054600181018255600091825260209091200180546001600160a01b0319166001600160a01b03939093169290921790915550565b600061072b610e3660017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd611b4d565b611402816112df565b61071e610d7c60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c611b4d565b600061145d60017fd84ee2c84c954c65bef1459fe03b761a42f49234527e3cd8fd9dce87cb83742b611b4d565b825181546020850151604086015160608701516001600160401b039485166001600160801b031990941693909317600160401b92851692909202919091176001600160801b0316600160801b918416919091026001600160c01b031617600160c01b918316919091021782556080909301516001909101805467ffffffffffffffff1916919093161790915550565b600061151960017ff81b149de6749a3f46464b2cce61e24462f67599ea4a5ce028aaf4ab1521f96e611b4d565b8251815560209092015160019092019190915550565b61071e610d7c60017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb611b4d565b6060600061157a6001600080516020611b7b833981519152611b4d565b80546040805160208084028201810190925282815292935083929183918301828280156115d057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115b2575b50505050509250505090565b60006115f76001600080516020611bbb833981519152611b4d565b905080610d1c8160006116fe565b6106d86116216001600080516020611b9b833981519152611b4d565b60009055565b600061072b610e3660017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281611b4d565b61071e81611699565b61071e816116d0565b600061072b610e3660017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113611b4d565b6116a2816112df565b61071e610d7c60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113611b4d565b61071e610d7c60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281611b4d565b508054600082556002029060005260206000209081019061071e91905b80821115611735576000808255600182015560020161171b565b5090565b60006020828403121561174b57600080fd5b81356001600160401b0381111561176157600080fd5b8201610120818503121561081757600080fd5b60006020828403121561178657600080fd5b5035919050565b80356001600160a01b03811681146117a457600080fd5b919050565b6000602082840312156117bb57600080fd5b6108178261178d565b600080604083850312156117d757600080fd5b6117e08361178d565b946020939093013593505050565b6000806040838503121561180157600080fd5b61180a8361178d565b91506118186020840161178d565b90509250929050565b6001600160a01b0391909116815260200190565b80356001600160401b03811681146117a457600080fd5b600080600080600080600080610100898b03121561186957600080fd5b6118728961178d565b975061188060208a0161178d565b965061188e60408a01611835565b955061189c60608a01611835565b94506118aa60808a01611835565b93506118b860a08a01611835565b925060c0890135915060e089013590509295985092959890939650565b6020808252825182820181905260009190848201906040850190845b818110156119165783516001600160a01b0316835292840192918401916001016118f1565b50909695505050505050565b801515811461071e57600080fd5b60006020828403121561194257600080fd5b815161081781611922565b634e487b7160e01b600052601160045260246000fd5b600082198211156119765761197661194d565b500190565b803563ffffffff811681146117a457600080fd5b6000808335601e198436030181126119a657600080fd5b83016020810192503590506001600160401b038111156119c557600080fd5b8060051b36038313156119d757600080fd5b9250929050565b8183526000602080850194508260005b85811015611a175763ffffffff611a048361197b565b16875295820195908201906001016119ee565b509495945050505050565b80356117a481611922565b6000610120823584526020830135602085015260408301356040850152606083013560608501526080830135608085015263ffffffff611a6f60a0850161197b565b1660a0850152611a8260c084018461198f565b8260c0870152611a9583870182846119de565b92505050611aa560e08401611a22565b151560e0850152610100611aba848201611a22565b15159401939093525090919050565b606081526000611adc6060830186611a2d565b60208301949094525060400152919050565b6020815260006108176020830184611a2d565b634e487b7160e01b600052603260045260246000fd5b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b600082821015611b5f57611b5f61194d565b500390565b634e487b7160e01b600052603160045260246000fdfec4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7f1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcda26469706673582212208b1b99b3150df5bfa9755c142fe9cdc1729f0332e2fbf315644c94856f72828c64736f6c634300080a0033"
        ],
        "deployedBytecode": [
            "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806398041ea3116100ad578063c1ba4e5911610071578063c1ba4e5914610259578063c26c12eb1461026c578063d046815614610274578063dabb57571461027c578063fad2e86a1461029157600080fd5b806398041ea314610210578063a230c52414610223578063a519f06014610236578063b4aff5e71461023e578063bc8b8f971461024657600080fd5b806316f6f03e116100f457806316f6f03e146101aa5780635190dce0146101bd578063628105d1146101e057806365872cbe146101f35780636e9960c3146101fb57600080fd5b806303bc7f27146101315780630c647397146101465780630e18b68114610179578063147bf6c41461018157806314c8cd6a14610194575b600080fd5b61014461013f366004611739565b610299565b005b610159610154366004611774565b6105e7565b604080518251815260209283015192810192909252015b60405180910390f35b610144610683565b61014461018f3660046117a9565b6106da565b61019c610721565b604051908152602001610170565b6101446101b83660046117c4565b610730565b6101d06101cb3660046117a9565b6107f3565b6040519015158152602001610170565b6101446101ee3660046117ee565b61081e565b61019c610924565b61020361092e565b6040516101709190611821565b61014461021e3660046117c4565b610938565b6101d06102313660046117a9565b6109fc565b610203610a10565b610144610a1a565b61014461025436600461184c565b610aaf565b610144610267366004611774565b610caa565b61019c610d20565b610203610d2a565b610284610d34565b60405161017091906118d5565b61019c610d3e565b60006102a433610d85565b90508060001914156102d4573360405163472511eb60e11b81526004016102cb9190611821565b60405180910390fd5b60006102de610e06565b905082358111156103155782356102f3610e06565b6040516304f6456960e11b8152600481019290925260248201526044016102cb565b600061031f610e3a565b604051630f9f95a960e41b8152853560048201529091506001600160a01b0382169063f9f95a9090602401602060405180830381865afa158015610367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038b9190611930565b6103ab5760405163a225656d60e01b8152843560048201526024016102cb565b83358210156103fb576103bc610e6a565b6103c68435610ea5565b604051843581527f3b16582fd30a1d07d3a11bd74e5cd9290bd62bf73d4df6a19e434b5bde09c4769060200160405180910390a15b61040483610ed3565b1561042b57604051637a6a90d160e11b8152843560048201523360248201526044016102cb565b61043483610f04565b600061043f85610f48565b905060008061044d83610f78565b91509150600061045b611013565b905083337f76eeea294370eab10c370cba335d68bef19ccdb73231925a08563dcf69d5be678a61048c866001611963565b8560405161049c93929190611ac9565b60405180910390a3806104b0836001611963565b10610574576104bd610e6a565b6104d16104cc89356001611963565b610ea5565b6040516377eb342360e11b81526001600160a01b0386169063efd66846906104fd908b90600401611aee565b600060405180830381600087803b15801561051757600080fd5b505af115801561052b573d6000803e3d6000fd5b507f3b16582fd30a1d07d3a11bd74e5cd9290bd62bf73d4df6a19e434b5bde09c476925061055e91505089356001611963565b60405190815260200160405180910390a16105dd565b8161059c5761059760405180604001604052808681526020016001815250611043565b6105dd565b60016105a661108b565b84815481106105b7576105b7611b01565b906000526020600020906002020160010160008282546105d79190611963565b90915550505b5050505050505050565b60408051808201909152600080825260208201528161060461108b565b5411610636578161061361108b565b5460405163b21b708160e01b8152600481019290925260248201526044016102cb565b61063e61108b565b828154811061064f5761064f611b01565b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050919050565b61068b6110ad565b6001600160a01b0316336001600160a01b0316146106be573360405163472511eb60e11b81526004016102cb9190611821565b6106ce6106c96110ad565b6110b7565b6106d86000611100565b565b6106e2611140565b6001600160a01b0316336001600160a01b031614610715573360405163472511eb60e11b81526004016102cb9190611821565b61071e81611100565b50565b600061072b61114a565b905090565b610738611140565b6001600160a01b0316336001600160a01b03161461076b573360405163472511eb60e11b81526004016102cb9190611821565b600061077683610d85565b9050600081121561079a5760405163574b16a760e11b815260040160405180910390fd5b6107a381611168565b60006107ad611013565b90506107b9838261124b565b6040516001600160a01b038516907f7693a3e9eac51f172f145e6f54bc5554168997a1f4efb40f3fad091aa7cfb0e790600090a250505050565b6000806107ff83610d85565b90508060001914158015610817575061081781610ed3565b9392505050565b8161082761092e565b6001600160a01b0316336001600160a01b0316141580156108515750336001600160a01b03821614155b15610871573360405163472511eb60e11b81526004016102cb9190611821565b61087a826112df565b600061088583610d85565b126108a557816040516307bbad8160e51b81526004016102cb9190611821565b60006108b084610d85565b905060008112156108d45760405163574b16a760e11b815260040160405180910390fd5b6108de8184611306565b826001600160a01b0316846001600160a01b03167fc20826a9a3cb354d2c12357704db9eb03d7344375b092d70146dbbbc4d3f84d160405160405180910390a350505050565b600061072b610e06565b600061072b611140565b610940611140565b6001600160a01b0316336001600160a01b031614610973573360405163472511eb60e11b81526004016102cb9190611821565b600061097e83610d85565b9050600081126109a357826040516307bbad8160e51b81526004016102cb9190611821565b6109ac83611370565b60006109b6611013565b90506109c2838261124b565b6040516001600160a01b038516907f1a2323d99020f3db8e6ea85b1eea81e5bf422695877228e3d8a0241d7e957a6c90600090a250505050565b600080610a0883610d85565b121592915050565b600061072b610e3a565b6001610a246113c9565b8114610a555780610a336113c9565b604051631cfd276760e31b8152600481019290925260248201526044016102cb565b610a68610a63826001611963565b610d4e565b610a70610e6a565b7f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610aa493929190611b17565b60405180910390a150565b6000610ab96113c9565b8114610ac85780610a336113c9565b610ad6610a63826001611963565b610adf886110b7565b610ae8896113f9565b7ffc0d749143b04e0d92a3b49edae84a45f6bc88b75e99d9118ec4d7e87fe626c589604051610b179190611821565b60405180910390a1610b7c6040518060a00160405280896001600160401b03168152602001886001600160401b03168152602001876001600160401b03168152602001866001600160401b0316815260200160006001600160401b0316815250611430565b604080516001600160401b0389811682528881166020830152878116828401528616606082015290517f4a7503ca21ae5342feb83892e899e95fb309502a0016ed300e4965e2dbfe73359181900360800190a1610bec6040518060400160405280858152602001848152506114ec565b60408051848152602081018490527f5ab79ffcd89b6380c7fbdd89d02cfe3d9c53c99a85e150c2319075018d1aac5c910160405180910390a1610c2f600061152f565b604051600081527f8e72be630a666d46b219565c1647e3792924d9c74e901fa3c4a33e23b91fb9b19060200160405180910390a17f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7181600036604051610c9793929190611b17565b60405180910390a1505050505050505050565b610cb2611140565b6001600160a01b0316336001600160a01b031614610ce5573360405163472511eb60e11b81526004016102cb9190611821565b6000610cef611013565b905081811415610d125760405163a9cb9e0d60e01b815260040160405180910390fd5b610d1c828261124b565b5050565b600061072b611013565b600061072b6110ad565b606061072b61155d565b6000610d4861108b565b54919050565b61071e610d7c60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd611b4d565b829055565b9055565b600080610da16001600080516020611b7b833981519152611b4d565b90508060005b8154811015610dfa57846001600160a01b0316826000018281548110610dcf57610dcf611b01565b6000918252602090912001546001600160a01b03161415610df257949350505050565b600101610da7565b50600019949350505050565b600061072b610e3660017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed611b4d565b5490565b600061072b610e3660017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c611b4d565b610e726115dc565b610e7a611605565b6040517f59bc16d5874dc28f6f69be9e88387299800118ede161a5169eec92191977ebe590600090a1565b61071e610d7c60017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed611b4d565b6000600180831b9081908190610efb90610e3690600080516020611b9b833981519152611b4d565b16149392505050565b600180821b90610d1c90610f2690600080516020611b9b833981519152611b4d565b82610f43610e366001600080516020611b9b833981519152611b4d565b179055565b600081604051602001610f5b9190611aee565b604051602081830303815290604052805190602001209050919050565b6000806000610f8561108b565b54905060005b818110156110045784610f9c61108b565b8281548110610fad57610fad611b01565b9060005260206000209060020201600001541415610ffc5780610fce61108b565b8281548110610fdf57610fdf611b01565b906000526020600020906002020160010154935093505050915091565b600101610f8b565b50600019946000945092505050565b600061072b610e3660017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb611b4d565b600061105e6001600080516020611bbb833981519152611b4d565b80546001818101835560009283526020928390208551600290930201918255919093015192019190915550565b6000806110a76001600080516020611bbb833981519152611b4d565b92915050565b600061072b611627565b6110c0816112df565b6110c981611657565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b61110981611660565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b600061072b611669565b600061072b610e366001600080516020611b9b833981519152611b4d565b60006111836001600080516020611b7b833981519152611b4d565b8054909150819060009061119990600190611b4d565b9050838114611212578160000181815481106111b7576111b7611b01565b60009182526020909120015482546001600160a01b03909116908390869081106111e3576111e3611b01565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b815482908061122357611223611b64565b600082815260209020810160001990810180546001600160a01b031916905501905550505050565b600061125561155d565b519050821580156112665750600081115b8061127057508083115b1561128e5760405163a9cb9e0d60e01b815260040160405180910390fd5b611296610e6a565b8183146112da576112a68361152f565b6040518381527f8e72be630a666d46b219565c1647e3792924d9c74e901fa3c4a33e23b91fb9b19060200160405180910390a15b505050565b6001600160a01b03811661071e5760405163f6b2911f60e01b815260040160405180910390fd5b60006113216001600080516020611b7b833981519152611b4d565b80549091508190839082908690811061133c5761133c611b01565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b611379816112df565b60006113946001600080516020611b7b833981519152611b4d565b8054600181018255600091825260209091200180546001600160a01b0319166001600160a01b03939093169290921790915550565b600061072b610e3660017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd611b4d565b611402816112df565b61071e610d7c60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c611b4d565b600061145d60017fd84ee2c84c954c65bef1459fe03b761a42f49234527e3cd8fd9dce87cb83742b611b4d565b825181546020850151604086015160608701516001600160401b039485166001600160801b031990941693909317600160401b92851692909202919091176001600160801b0316600160801b918416919091026001600160c01b031617600160c01b918316919091021782556080909301516001909101805467ffffffffffffffff1916919093161790915550565b600061151960017ff81b149de6749a3f46464b2cce61e24462f67599ea4a5ce028aaf4ab1521f96e611b4d565b8251815560209092015160019092019190915550565b61071e610d7c60017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb611b4d565b6060600061157a6001600080516020611b7b833981519152611b4d565b80546040805160208084028201810190925282815292935083929183918301828280156115d057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115b2575b50505050509250505090565b60006115f76001600080516020611bbb833981519152611b4d565b905080610d1c8160006116fe565b6106d86116216001600080516020611b9b833981519152611b4d565b60009055565b600061072b610e3660017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281611b4d565b61071e81611699565b61071e816116d0565b600061072b610e3660017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113611b4d565b6116a2816112df565b61071e610d7c60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113611b4d565b61071e610d7c60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281611b4d565b508054600082556002029060005260206000209081019061071e91905b80821115611735576000808255600182015560020161171b565b5090565b60006020828403121561174b57600080fd5b81356001600160401b0381111561176157600080fd5b8201610120818503121561081757600080fd5b60006020828403121561178657600080fd5b5035919050565b80356001600160a01b03811681146117a457600080fd5b919050565b6000602082840312156117bb57600080fd5b6108178261178d565b600080604083850312156117d757600080fd5b6117e08361178d565b946020939093013593505050565b6000806040838503121561180157600080fd5b61180a8361178d565b91506118186020840161178d565b90509250929050565b6001600160a01b0391909116815260200190565b80356001600160401b03811681146117a457600080fd5b600080600080600080600080610100898b03121561186957600080fd5b6118728961178d565b975061188060208a0161178d565b965061188e60408a01611835565b955061189c60608a01611835565b94506118aa60808a01611835565b93506118b860a08a01611835565b925060c0890135915060e089013590509295985092959890939650565b6020808252825182820181905260009190848201906040850190845b818110156119165783516001600160a01b0316835292840192918401916001016118f1565b50909695505050505050565b801515811461071e57600080fd5b60006020828403121561194257600080fd5b815161081781611922565b634e487b7160e01b600052601160045260246000fd5b600082198211156119765761197661194d565b500190565b803563ffffffff811681146117a457600080fd5b6000808335601e198436030181126119a657600080fd5b83016020810192503590506001600160401b038111156119c557600080fd5b8060051b36038313156119d757600080fd5b9250929050565b8183526000602080850194508260005b85811015611a175763ffffffff611a048361197b565b16875295820195908201906001016119ee565b509495945050505050565b80356117a481611922565b6000610120823584526020830135602085015260408301356040850152606083013560608501526080830135608085015263ffffffff611a6f60a0850161197b565b1660a0850152611a8260c084018461198f565b8260c0870152611a9583870182846119de565b92505050611aa560e08401611a22565b151560e0850152610100611aba848201611a22565b15159401939093525090919050565b606081526000611adc6060830186611a2d565b60208301949094525060400152919050565b6020815260006108176020830184611a2d565b634e487b7160e01b600052603260045260246000fd5b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b600082821015611b5f57611b5f61194d565b500390565b634e487b7160e01b600052603160045260246000fdfec4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7f1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcda26469706673582212208b1b99b3150df5bfa9755c142fe9cdc1729f0332e2fbf315644c94856f72828c64736f6c634300080a0033"
        ],
        "devdoc": [
            {
                "author": "Kiln",
                "errors": {
                    "AddressAlreadyInUse(address)": [
                        {
                            "params": {
                                "newAddress": "The address already in use"
                            }
                        }
                    ],
                    "AlreadyReported(uint256,address)": [
                        {
                            "params": {
                                "epochId": "The epoch id provided as input",
                                "member": "The oracle member"
                            }
                        }
                    ],
                    "EpochTooOld(uint256,uint256)": [
                        {
                            "params": {
                                "minExpectedEpochId": "The minimum epoch id expected",
                                "providedEpochId": "The epoch id provided as input"
                            }
                        }
                    ],
                    "InvalidEpoch(uint256)": [
                        {
                            "params": {
                                "epoch": "The invalid epoch"
                            }
                        }
                    ],
                    "InvalidInitialization(uint256,uint256)": [
                        {
                            "params": {
                                "expectedVersion": "The version that was expected",
                                "version": "The version that was attempting to be initialized"
                            }
                        }
                    ],
                    "ReportIndexOutOfBounds(uint256,uint256)": [
                        {
                            "params": {
                                "index": "Requested index",
                                "length": "Size of the variant array"
                            }
                        }
                    ],
                    "Unauthorized(address)": [
                        {
                            "params": {
                                "caller": "Address performing the call"
                            }
                        }
                    ]
                },
                "kind": "dev",
                "methods": {
                    "acceptAdmin()": {
                        "details": "Only callable by the pending admin. Resets the pending admin if succesful."
                    },
                    "addMember(address,uint256)": {
                        "details": "Only callable by the adminstratorModifying the quorum clears all the reporting data",
                        "params": {
                            "_newOracleMember": "Address of the new member",
                            "_newQuorum": "New quorum value"
                        }
                    },
                    "getAdmin()": {
                        "returns": {
                            "_0": "The admin address"
                        }
                    },
                    "getGlobalReportStatus()": {
                        "returns": {
                            "_0": "The raw report status value"
                        }
                    },
                    "getLastReportedEpochId()": {
                        "details": "The Oracle contracts expects reports on an epoch id >= that the returned value",
                        "returns": {
                            "_0": "The last reported epoch id"
                        }
                    },
                    "getMemberReportStatus(address)": {
                        "params": {
                            "_oracleMember": "Address of member to check"
                        },
                        "returns": {
                            "_0": "True if member has reported"
                        }
                    },
                    "getOracleMembers()": {
                        "returns": {
                            "_0": "The oracle members"
                        }
                    },
                    "getPendingAdmin()": {
                        "returns": {
                            "_0": "The pending admin address"
                        }
                    },
                    "getQuorum()": {
                        "returns": {
                            "_0": "The current quorum"
                        }
                    },
                    "getReportVariantDetails(uint256)": {
                        "params": {
                            "_idx": "The index of the report variant"
                        },
                        "returns": {
                            "_0": "The report variant details"
                        }
                    },
                    "getReportVariantsCount()": {
                        "returns": {
                            "_0": "The count of report variants"
                        }
                    },
                    "getRiver()": {
                        "returns": {
                            "_0": "The address of River"
                        }
                    },
                    "initOracleV1(address,address,uint64,uint64,uint64,uint64,uint256,uint256)": {
                        "params": {
                            "_administratorAddress": "Address able to call administrative methods",
                            "_annualAprUpperBound": "CL bound parameter. Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.",
                            "_epochsPerFrame": "CL spec parameter. Number of epochs in a frame.",
                            "_genesisTime": "CL spec parameter. Timestamp of the genesis slot.",
                            "_relativeLowerBound": "CL bound parameter. Maximum relative balance decrease.",
                            "_river": "Address of the River contract, able to receive oracle input data after quorum is met",
                            "_secondsPerSlot": "CL spec parameter. Number of seconds between slots.",
                            "_slotsPerEpoch": "CL spec parameter. Number of slots in one epoch."
                        }
                    },
                    "isMember(address)": {
                        "details": "Performs a naive search, do not call this on-chain, used as an off-chain helper",
                        "params": {
                            "_memberAddress": "Address of the member"
                        },
                        "returns": {
                            "_0": "True if address is a member"
                        }
                    },
                    "proposeAdmin(address)": {
                        "details": "This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.",
                        "params": {
                            "_newAdmin": "New admin address"
                        }
                    },
                    "removeMember(address,uint256)": {
                        "details": "Only callable by the adminstratorModifying the quorum clears all the reporting dataRemaining members that have already voted should vote again for the same frame.",
                        "params": {
                            "_newQuorum": "New quorum value",
                            "_oracleMember": "Address to remove"
                        }
                    },
                    "reportConsensusLayerData((uint256,uint256,uint256,uint256,uint256,uint32,uint32[],bool,bool))": {
                        "params": {
                            "_report": "The report structure"
                        }
                    },
                    "setMember(address,address)": {
                        "details": "Only callable by the adminitrator or the member itselfCannot use an address already in use",
                        "params": {
                            "_newAddress": "New address for the member",
                            "_oracleMember": "Address to change"
                        }
                    },
                    "setQuorum(uint256)": {
                        "details": "Modifying the quorum clears all the reporting data",
                        "params": {
                            "_newQuorum": "New quorum parameter"
                        }
                    }
                },
                "title": "Oracle (v1)",
                "version": 1
            }
        ],
        "userdoc": [
            {
                "errors": {
                    "AddressAlreadyInUse(address)": [
                        {
                            "notice": "The address is already in use by an oracle member"
                        }
                    ],
                    "AlreadyReported(uint256,address)": [
                        {
                            "notice": "The member already reported on the given epoch id"
                        }
                    ],
                    "EpochTooOld(uint256,uint256)": [
                        {
                            "notice": "The provided epoch is too old compared to the expected epoch id"
                        }
                    ],
                    "InvalidArgument()": [
                        {
                            "notice": "The argument was invalid"
                        }
                    ],
                    "InvalidCall()": [
                        {
                            "notice": "The call was invalid"
                        }
                    ],
                    "InvalidEpoch(uint256)": [
                        {
                            "notice": "Thrown when the reported epoch is invalid"
                        }
                    ],
                    "InvalidInitialization(uint256,uint256)": [
                        {
                            "notice": "An error occured during the initialization"
                        }
                    ],
                    "InvalidZeroAddress()": [
                        {
                            "notice": "The address is zero"
                        }
                    ],
                    "ReportIndexOutOfBounds(uint256,uint256)": [
                        {
                            "notice": "Thrown when the report indexs fetched is out of bounds"
                        }
                    ],
                    "Unauthorized(address)": [
                        {
                            "notice": "The operator is unauthorized for the caller"
                        }
                    ]
                },
                "events": {
                    "AddMember(address)": {
                        "notice": "A member has been added to the oracle member list"
                    },
                    "ClearedReporting()": {
                        "notice": "Cleared reporting data"
                    },
                    "Initialize(uint256,bytes)": {
                        "notice": "Emitted when the contract is properly initialized"
                    },
                    "RemoveMember(address)": {
                        "notice": "A member has been removed from the oracle member list"
                    },
                    "ReportedConsensusLayerData(address,bytes32,(uint256,uint256,uint256,uint256,uint256,uint32,uint32[],bool,bool),uint256,uint256)": {
                        "notice": "An oracle member performed a report"
                    },
                    "SetAdmin(address)": {
                        "notice": "The admin address changed"
                    },
                    "SetBounds(uint256,uint256)": {
                        "notice": "The report bounds have been changed"
                    },
                    "SetLastReportedEpoch(uint256)": {
                        "notice": "The last reported epoch has changed"
                    },
                    "SetMember(address,address)": {
                        "notice": "A member address has been edited"
                    },
                    "SetPendingAdmin(address)": {
                        "notice": "The pending admin address changed"
                    },
                    "SetQuorum(uint256)": {
                        "notice": "The storage quorum value has been changed"
                    },
                    "SetRiver(address)": {
                        "notice": "The storage river address value has been changed"
                    },
                    "SetSpec(uint64,uint64,uint64,uint64)": {
                        "notice": "The consensus layer spec has been changed"
                    }
                },
                "kind": "user",
                "methods": {
                    "acceptAdmin()": {
                        "notice": "Accept the transfer of ownership"
                    },
                    "addMember(address,uint256)": {
                        "notice": "Adds new address as oracle member, giving the ability to push cl reports."
                    },
                    "getAdmin()": {
                        "notice": "Retrieves the current admin address"
                    },
                    "getGlobalReportStatus()": {
                        "notice": "Retrieve member report status"
                    },
                    "getLastReportedEpochId()": {
                        "notice": "Retrieve the last reported epoch id"
                    },
                    "getMemberReportStatus(address)": {
                        "notice": "Retrieve member report status"
                    },
                    "getOracleMembers()": {
                        "notice": "Retrieve the list of oracle members"
                    },
                    "getPendingAdmin()": {
                        "notice": "Retrieve the current pending admin address"
                    },
                    "getQuorum()": {
                        "notice": "Retrieve the current quorum"
                    },
                    "getReportVariantDetails(uint256)": {
                        "notice": "Retrieve the details of a report variant"
                    },
                    "getReportVariantsCount()": {
                        "notice": "Retrieve report variants count"
                    },
                    "getRiver()": {
                        "notice": "Retrieve River address"
                    },
                    "initOracleV1(address,address,uint64,uint64,uint64,uint64,uint256,uint256)": {
                        "notice": "Initializes the oracle"
                    },
                    "initOracleV1_1()": {
                        "notice": "Initializes the oracle"
                    },
                    "isMember(address)": {
                        "notice": "Returns true if address is member"
                    },
                    "proposeAdmin(address)": {
                        "notice": "Proposes a new address as admin"
                    },
                    "removeMember(address,uint256)": {
                        "notice": "Removes an address from the oracle members."
                    },
                    "reportConsensusLayerData((uint256,uint256,uint256,uint256,uint256,uint32,uint32[],bool,bool))": {
                        "notice": "Submit a report as an oracle member"
                    },
                    "setMember(address,address)": {
                        "notice": "Changes the address of an oracle member"
                    },
                    "setQuorum(uint256)": {
                        "notice": "Edits the quorum required to forward cl data to River"
                    }
                },
                "notice": "This contract handles the input from the allowed oracle members. Highly inspired by Lido's implementation.",
                "version": 1
            }
        ],
        "storageLayout": [
            {
                "storage": [],
                "types": null
            }
        ]
    }
}