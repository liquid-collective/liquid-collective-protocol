{
    "address": "0xd22445dFeB2e394d097DbfBa94270d1E0868d5AE",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "Denied",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidAlloweeCount",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "version",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "expectedVersion",
                    "type": "uint256"
                }
            ],
            "name": "InvalidInitialization",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidZeroAddress",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "MismatchedAlloweeAndStatusCount",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "caller",
                    "type": "address"
                }
            ],
            "name": "Unauthorized",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "version",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "bytes",
                    "name": "cdata",
                    "type": "bytes"
                }
            ],
            "name": "Initialize",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "SetAdmin",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "allower",
                    "type": "address"
                }
            ],
            "name": "SetAllower",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address[]",
                    "name": "accounts",
                    "type": "address[]"
                },
                {
                    "indexed": false,
                    "internalType": "uint256[]",
                    "name": "permissions",
                    "type": "uint256[]"
                }
            ],
            "name": "SetAllowlistPermissions",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "pendingAdmin",
                    "type": "address"
                }
            ],
            "name": "SetPendingAdmin",
            "type": "event"
        },
        {
            "inputs": [],
            "name": "acceptAdmin",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address[]",
                    "name": "_accounts",
                    "type": "address[]"
                },
                {
                    "internalType": "uint256[]",
                    "name": "_permissions",
                    "type": "uint256[]"
                }
            ],
            "name": "allow",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getAdmin",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getAllower",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPendingAdmin",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "getPermissions",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_mask",
                    "type": "uint256"
                }
            ],
            "name": "hasPermission",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_admin",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_allower",
                    "type": "address"
                }
            ],
            "name": "initAllowlistV1",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_mask",
                    "type": "uint256"
                }
            ],
            "name": "isAllowed",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "isDenied",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_mask",
                    "type": "uint256"
                }
            ],
            "name": "onlyAllowed",
            "outputs": [],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_newAdmin",
                    "type": "address"
                }
            ],
            "name": "proposeAdmin",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_newAllowerAddress",
                    "type": "address"
                }
            ],
            "name": "setAllower",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_logic",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "__admin",
                    "type": "address"
                },
                {
                    "internalType": "bytes",
                    "name": "_data",
                    "type": "bytes"
                }
            ],
            "stateMutability": "payable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "CallWhenPaused",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "previousAdmin",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "newAdmin",
                    "type": "address"
                }
            ],
            "name": "AdminChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "beacon",
                    "type": "address"
                }
            ],
            "name": "BeaconUpgraded",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "Paused",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "Unpaused",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "implementation",
                    "type": "address"
                }
            ],
            "name": "Upgraded",
            "type": "event"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "admin",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "admin_",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newAdmin",
                    "type": "address"
                }
            ],
            "name": "changeAdmin",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "implementation",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "implementation_",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "pause",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "paused",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "unpause",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newImplementation",
                    "type": "address"
                }
            ],
            "name": "upgradeTo",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newImplementation",
                    "type": "address"
                },
                {
                    "internalType": "bytes",
                    "name": "data",
                    "type": "bytes"
                }
            ],
            "name": "upgradeToAndCall",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0x2c755b253270a73f3f13e2b2f547033d98dedd18bcd367bc96b536db054688e5",
    "receipt": {
        "to": null,
        "from": "0x341C40B94bF2afBFa42573cB78f16Ee15a056238",
        "contractAddress": "0xd22445dFeB2e394d097DbfBa94270d1E0868d5AE",
        "transactionIndex": 29,
        "gasUsed": "799731",
        "logsBloom": "0x
        "blockHash": "0x972ad130a68386b5a625c2251e58aae9bce141d17b78cff6b7c8f433370d2cc9",
        "transactionHash": "0x2c755b253270a73f3f13e2b2f547033d98dedd18bcd367bc96b536db054688e5",
        "logs": [
            {
                "transactionIndex": 29,
                "blockNumber": 9166606,
                "transactionHash": "0x2c755b253270a73f3f13e2b2f547033d98dedd18bcd367bc96b536db054688e5",
                "address": "0xd22445dFeB2e394d097DbfBa94270d1E0868d5AE",
                "topics": [
                    "0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b",
                    "0x00000000000000000000000067ddc8290c15e18c21fabbcd5fa4613824e3f165"
                ],
                "data": "0x",
                "logIndex": 71,
                "blockHash": "0x972ad130a68386b5a625c2251e58aae9bce141d17b78cff6b7c8f433370d2cc9"
            },
            {
                "transactionIndex": 29,
                "blockNumber": 9166606,
                "transactionHash": "0x2c755b253270a73f3f13e2b2f547033d98dedd18bcd367bc96b536db054688e5",
                "address": "0xd22445dFeB2e394d097DbfBa94270d1E0868d5AE",
                "topics": [
                    "0x5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a1",
                    "0x000000000000000000000000ccfca4493945879911907cea0e319b28ceda4f67"
                ],
                "data": "0x",
                "logIndex": 72,
                "blockHash": "0x972ad130a68386b5a625c2251e58aae9bce141d17b78cff6b7c8f433370d2cc9"
            },
            {
                "transactionIndex": 29,
                "blockNumber": 9166606,
                "transactionHash": "0x2c755b253270a73f3f13e2b2f547033d98dedd18bcd367bc96b536db054688e5",
                "address": "0xd22445dFeB2e394d097DbfBa94270d1E0868d5AE",
                "topics": [
                    "0xb96ab8443049f385aba7fbc2899e3fcdfba4d80ac8458847f40b7d426bae2dcf",
                    "0x000000000000000000000000ccfca4493945879911907cea0e319b28ceda4f67"
                ],
                "data": "0x",
                "logIndex": 73,
                "blockHash": "0x972ad130a68386b5a625c2251e58aae9bce141d17b78cff6b7c8f433370d2cc9"
            },
            {
                "transactionIndex": 29,
                "blockNumber": 9166606,
                "transactionHash": "0x2c755b253270a73f3f13e2b2f547033d98dedd18bcd367bc96b536db054688e5",
                "address": "0xd22445dFeB2e394d097DbfBa94270d1E0868d5AE",
                "topics": [
                    "0x1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a71"
                ],
                "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000446e8cac11000000000000000000000000ccfca4493945879911907cea0e319b28ceda4f67000000000000000000000000ccfca4493945879911907cea0e319b28ceda4f6700000000000000000000000000000000000000000000000000000000",
                "logIndex": 74,
                "blockHash": "0x972ad130a68386b5a625c2251e58aae9bce141d17b78cff6b7c8f433370d2cc9"
            },
            {
                "transactionIndex": 29,
                "blockNumber": 9166606,
                "transactionHash": "0x2c755b253270a73f3f13e2b2f547033d98dedd18bcd367bc96b536db054688e5",
                "address": "0xd22445dFeB2e394d097DbfBa94270d1E0868d5AE",
                "topics": [
                    "0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f"
                ],
                "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007706a7d768054c10eb4fc9103ea322f62831cb9",
                "logIndex": 75,
                "blockHash": "0x972ad130a68386b5a625c2251e58aae9bce141d17b78cff6b7c8f433370d2cc9"
            }
        ],
        "blockNumber": 9166606,
        "cumulativeGasUsed": "10107186",
        "status": 1,
        "byzantium": true
    },
    "args": [
        "0x67DDc8290c15e18c21FAbbCD5fA4613824E3F165",
        "0x07706A7D768054c10eB4FC9103Ea322f62831cb9",
        "0x6e8cac11000000000000000000000000ccfca4493945879911907cea0e319b28ceda4f67000000000000000000000000ccfca4493945879911907cea0e319b28ceda4f67"
    ],
    "numDeployments": 1,
    "solcInputHash": "803b991b13fc3eb82937205601e77786",
    "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallWhenPaused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kiln\",\"events\":{\"Paused(address)\":{\"params\":{\"admin\":\"The admin at the time of the pause event\"}},\"Unpaused(address)\":{\"params\":{\"admin\":\"The admin at the time of the unpause event\"}}},\"kind\":\"dev\",\"methods\":{\"admin()\":{\"details\":\"Returns the current admin. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\"},\"changeAdmin(address)\":{\"details\":\"Changes the admin of the proxy. Emits an {AdminChanged} event. NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\"},\"constructor\":{\"details\":\"The Admin of the proxy should not be the same as theadmin on the implementation logics. The admin here isthe only account allowed to perform calls on the proxy(the calls are never delegated to the implementation)\",\"params\":{\"__admin\":\"Address of the admin in charge of the proxy\",\"_data\":\"Calldata for an atomic initialization\",\"_logic\":\"Address of the implementation\"}},\"implementation()\":{\"details\":\"Returns the current implementation. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\"},\"pause()\":{\"details\":\"Pauses system\"},\"paused()\":{\"details\":\"Retrieves Paused state\",\"returns\":{\"_0\":\"Paused state\"}},\"unpause()\":{\"details\":\"Unpauses system\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy. NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy, and then call a function from the new implementation as specified by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract. NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\"}},\"title\":\"TUPProxy (Transparent Upgradeable Pausable Proxy)\",\"version\":1},\"userdoc\":{\"errors\":{\"CallWhenPaused()\":[{\"notice\":\"A call happened while the system was paused\"}]},\"events\":{\"Paused(address)\":{\"notice\":\"The system is now paused\"},\"Unpaused(address)\":{\"notice\":\"The system is now unpaused\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract extends the Transparent Upgradeable proxy and adds a system wide pause feature.         When the system is paused, the fallback will fail no matter what calls are made.         Address Zero is allowed to perform calls even if paused to allow view calls made         from RPC providers to properly work.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/TUPProxy.sol\":\"TUPProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/TUPProxy.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\n/// @title TUPProxy (Transparent Upgradeable Pausable Proxy)\\n/// @author Kiln\\n/// @notice This contract extends the Transparent Upgradeable proxy and adds a system wide pause feature.\\n///         When the system is paused, the fallback will fail no matter what calls are made.\\n///         Address Zero is allowed to perform calls even if paused to allow view calls made\\n///         from RPC providers to properly work.\\ncontract TUPProxy is TransparentUpgradeableProxy {\\n    /// @notice Storage slot of the pause status value\\n    bytes32 private constant _PAUSE_SLOT = bytes32(uint256(keccak256(\\\"river.tupproxy.pause\\\")) - 1);\\n\\n    /// @notice A call happened while the system was paused\\n    error CallWhenPaused();\\n\\n    /// @notice The system is now paused\\n    /// @param admin The admin at the time of the pause event\\n    event Paused(address admin);\\n\\n    /// @notice The system is now unpaused\\n    /// @param admin The admin at the time of the unpause event\\n    event Unpaused(address admin);\\n\\n    /// @dev The Admin of the proxy should not be the same as the\\n    /// @dev admin on the implementation logics. The admin here is\\n    /// @dev the only account allowed to perform calls on the proxy\\n    /// @dev (the calls are never delegated to the implementation)\\n    /// @param _logic Address of the implementation\\n    /// @param __admin Address of the admin in charge of the proxy\\n    /// @param _data Calldata for an atomic initialization\\n    constructor(address _logic, address __admin, bytes memory _data)\\n        payable\\n        TransparentUpgradeableProxy(_logic, __admin, _data)\\n    {}\\n\\n    /// @dev Retrieves Paused state\\n    /// @return Paused state\\n    function paused() external ifAdmin returns (bool) {\\n        return StorageSlot.getBooleanSlot(_PAUSE_SLOT).value;\\n    }\\n\\n    /// @dev Pauses system\\n    function pause() external ifAdmin {\\n        StorageSlot.getBooleanSlot(_PAUSE_SLOT).value = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /// @dev Unpauses system\\n    function unpause() external ifAdmin {\\n        StorageSlot.getBooleanSlot(_PAUSE_SLOT).value = false;\\n        emit Unpaused(msg.sender);\\n    }\\n\\n    /// @dev Overrides the fallback method to check if system is not paused before\\n    /// @dev Address Zero is allowed to perform calls even if system is paused. This allows\\n    /// view functions to be called when the system is paused as rpc providers can easily\\n    /// set the sender address to zero.\\n    function _beforeFallback() internal override {\\n        if (!StorageSlot.getBooleanSlot(_PAUSE_SLOT).value || msg.sender == address(0)) {\\n            super._beforeFallback();\\n        } else {\\n            revert CallWhenPaused();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x35bd93df3a77dae6301c8c0011d32f89efe3715fa2bdef7f2ad364949b7da6cb\",\"license\":\"BUSL-1.1\"},\"openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x608060405234801561001057600080fd5b5061002660001961006960201b61061d1760201c565b7f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7160001960003660405161005c939291906100b1565b60405180910390a161010c565b6100aa61009760017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6100e7565b60001b826100ad60201b6106501760201c565b50565b9055565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b60008282101561010757634e487b7160e01b600052601160045260246000fd5b500390565b610bd48061011b6000396000f3fe608060405234801561001057600080fd5b50600436106100bf5760003560e01c80636e8cac111161007c5780636e8cac11146101465780636e9960c3146101595780638d944fd914610161578063d046815614610184578063e580d9941461018c578063e838dfbb1461019f578063f8350ed0146101b257600080fd5b806307a40008146100c45780630e18b681146100e2578063147bf6c4146100ec578063160a7925146100ff5780634679a9e1146101205780635a40910214610133575b600080fd5b6100cc6101c5565b6040516100d99190610924565b60405180910390f35b6100ea6101d4565b005b6100ea6100fa366004610954565b610234565b61011261010d366004610954565b61027b565b6040519081526020016100d9565b6100ea61012e366004610954565b61028c565b6100ea610141366004610976565b610307565b6100ea6101543660046109a0565b610366565b6100cc61043b565b61017461016f366004610976565b610445565b60405190151581526020016100d9565b6100cc61045b565b6100ea61019a366004610a1f565b610465565b6101746101ad366004610954565b6105d3565b6101746101c0366004610976565b6105ec565b60006101cf610654565b905090565b6101dc610688565b6001600160a01b0316336001600160a01b031614610218573360405163472511eb60e11b815260040161020f9190610924565b60405180910390fd5b610228610223610688565b610692565b61023260006106db565b565b61023c61071b565b6001600160a01b0316336001600160a01b03161461026f573360405163472511eb60e11b815260040161020f9190610924565b610278816106db565b50565b600061028682610725565b92915050565b61029461071b565b6001600160a01b0316336001600160a01b0316146102c7573360405163472511eb60e11b815260040161020f9190610924565b6102d081610773565b6040516001600160a01b038216907fb96ab8443049f385aba7fbc2899e3fcdfba4d80ac8458847f40b7d426bae2dcf90600090a250565b600061031283610725565b9050600160ff1b808216141561033d578260405163e7d05e2760e01b815260040161020f9190610924565b8182821614610361578260405163472511eb60e11b815260040161020f9190610924565b505050565b60006103706107aa565b81146103a1578061037f6107aa565b604051631cfd276760e31b81526004810192909252602482015260440161020f565b6103b46103af826001610aa1565b61061d565b6103bd83610692565b6103c682610773565b6040516001600160a01b038316907fb96ab8443049f385aba7fbc2899e3fcdfba4d80ac8458847f40b7d426bae2dcf90600090a27f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a718160003660405161042e93929190610ab9565b60405180910390a1505050565b60006101cf61071b565b6000818261045285610725565b16149392505050565b60006101cf610688565b61046d610654565b6001600160a01b0316336001600160a01b0316141580156104a7575061049161043b565b6001600160a01b0316336001600160a01b031614155b156104c7573360405163472511eb60e11b815260040161020f9190610924565b826104e557604051631ac3cbdf60e21b815260040160405180910390fd5b8281146105055760405163b7c599df60e01b815260040160405180910390fd5b60005b8381101561058f5761053f85858381811061052557610525610aef565b905060200201602081019061053a9190610954565b6107da565b61058785858381811061055457610554610aef565b90506020020160208101906105699190610954565b84848481811061057b5761057b610aef565b90506020020135610801565b600101610508565b507f649636a73c855dfe2014a555a98949d77640be8f4eb6702749d5f83c9aa6fcd0848484846040516105c59493929190610b05565b60405180910390a150505050565b6000600160ff1b806105e484610725565b161492915050565b6000806105f884610725565b9050600160ff1b8082161415610612576000915050610286565b821690911492915050565b61027861064b60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd610b87565b829055565b9055565b60006101cf61068460017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b80610b87565b5490565b60006101cf61084d565b61069b816107da565b6106a48161087d565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b6106e481610886565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b60006101cf61088f565b60008061075360017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a4135610b87565b6001600160a01b0390931660009081526020939093525050604090205490565b61077c816107da565b61027861064b60017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b80610b87565b60006101cf61068460017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd610b87565b6001600160a01b0381166102785760405163f6b2911f60e01b815260040160405180910390fd5b600061082e60017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a4135610b87565b6001600160a01b03909316600090815260209390935250604090912055565b60006101cf61068460017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281610b87565b610278816108bf565b610278816108f6565b60006101cf61068460017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113610b87565b6108c8816107da565b61027861064b60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113610b87565b61027861064b60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281610b87565b6001600160a01b0391909116815260200190565b80356001600160a01b038116811461094f57600080fd5b919050565b60006020828403121561096657600080fd5b61096f82610938565b9392505050565b6000806040838503121561098957600080fd5b61099283610938565b946020939093013593505050565b600080604083850312156109b357600080fd5b6109bc83610938565b91506109ca60208401610938565b90509250929050565b60008083601f8401126109e557600080fd5b50813567ffffffffffffffff8111156109fd57600080fd5b6020830191508360208260051b8501011115610a1857600080fd5b9250929050565b60008060008060408587031215610a3557600080fd5b843567ffffffffffffffff80821115610a4d57600080fd5b610a59888389016109d3565b90965094506020870135915080821115610a7257600080fd5b50610a7f878288016109d3565b95989497509550505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610ab457610ab4610a8b565b500190565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b634e487b7160e01b600052603260045260246000fd5b6040808252810184905260008560608301825b87811015610b46576001600160a01b03610b3184610938565b16825260209283019290910190600101610b18565b5083810360208501528481526001600160fb1b03851115610b6657600080fd5b8460051b915081866020830137600091016020019081529695505050505050565b600082821015610b9957610b99610a8b565b50039056fea264697066735822122043cfc6c69a12920d8ad2f534d13473e84a8aaeec64609f72fe35a86aa5a3928764736f6c634300080a0033",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100bf5760003560e01c80636e8cac111161007c5780636e8cac11146101465780636e9960c3146101595780638d944fd914610161578063d046815614610184578063e580d9941461018c578063e838dfbb1461019f578063f8350ed0146101b257600080fd5b806307a40008146100c45780630e18b681146100e2578063147bf6c4146100ec578063160a7925146100ff5780634679a9e1146101205780635a40910214610133575b600080fd5b6100cc6101c5565b6040516100d99190610924565b60405180910390f35b6100ea6101d4565b005b6100ea6100fa366004610954565b610234565b61011261010d366004610954565b61027b565b6040519081526020016100d9565b6100ea61012e366004610954565b61028c565b6100ea610141366004610976565b610307565b6100ea6101543660046109a0565b610366565b6100cc61043b565b61017461016f366004610976565b610445565b60405190151581526020016100d9565b6100cc61045b565b6100ea61019a366004610a1f565b610465565b6101746101ad366004610954565b6105d3565b6101746101c0366004610976565b6105ec565b60006101cf610654565b905090565b6101dc610688565b6001600160a01b0316336001600160a01b031614610218573360405163472511eb60e11b815260040161020f9190610924565b60405180910390fd5b610228610223610688565b610692565b61023260006106db565b565b61023c61071b565b6001600160a01b0316336001600160a01b03161461026f573360405163472511eb60e11b815260040161020f9190610924565b610278816106db565b50565b600061028682610725565b92915050565b61029461071b565b6001600160a01b0316336001600160a01b0316146102c7573360405163472511eb60e11b815260040161020f9190610924565b6102d081610773565b6040516001600160a01b038216907fb96ab8443049f385aba7fbc2899e3fcdfba4d80ac8458847f40b7d426bae2dcf90600090a250565b600061031283610725565b9050600160ff1b808216141561033d578260405163e7d05e2760e01b815260040161020f9190610924565b8182821614610361578260405163472511eb60e11b815260040161020f9190610924565b505050565b60006103706107aa565b81146103a1578061037f6107aa565b604051631cfd276760e31b81526004810192909252602482015260440161020f565b6103b46103af826001610aa1565b61061d565b6103bd83610692565b6103c682610773565b6040516001600160a01b038316907fb96ab8443049f385aba7fbc2899e3fcdfba4d80ac8458847f40b7d426bae2dcf90600090a27f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a718160003660405161042e93929190610ab9565b60405180910390a1505050565b60006101cf61071b565b6000818261045285610725565b16149392505050565b60006101cf610688565b61046d610654565b6001600160a01b0316336001600160a01b0316141580156104a7575061049161043b565b6001600160a01b0316336001600160a01b031614155b156104c7573360405163472511eb60e11b815260040161020f9190610924565b826104e557604051631ac3cbdf60e21b815260040160405180910390fd5b8281146105055760405163b7c599df60e01b815260040160405180910390fd5b60005b8381101561058f5761053f85858381811061052557610525610aef565b905060200201602081019061053a9190610954565b6107da565b61058785858381811061055457610554610aef565b90506020020160208101906105699190610954565b84848481811061057b5761057b610aef565b90506020020135610801565b600101610508565b507f649636a73c855dfe2014a555a98949d77640be8f4eb6702749d5f83c9aa6fcd0848484846040516105c59493929190610b05565b60405180910390a150505050565b6000600160ff1b806105e484610725565b161492915050565b6000806105f884610725565b9050600160ff1b8082161415610612576000915050610286565b821690911492915050565b61027861064b60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd610b87565b829055565b9055565b60006101cf61068460017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b80610b87565b5490565b60006101cf61084d565b61069b816107da565b6106a48161087d565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b6106e481610886565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b60006101cf61088f565b60008061075360017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a4135610b87565b6001600160a01b0390931660009081526020939093525050604090205490565b61077c816107da565b61027861064b60017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b80610b87565b60006101cf61068460017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd610b87565b6001600160a01b0381166102785760405163f6b2911f60e01b815260040160405180910390fd5b600061082e60017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a4135610b87565b6001600160a01b03909316600090815260209390935250604090912055565b60006101cf61068460017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281610b87565b610278816108bf565b610278816108f6565b60006101cf61068460017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113610b87565b6108c8816107da565b61027861064b60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113610b87565b61027861064b60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281610b87565b6001600160a01b0391909116815260200190565b80356001600160a01b038116811461094f57600080fd5b919050565b60006020828403121561096657600080fd5b61096f82610938565b9392505050565b6000806040838503121561098957600080fd5b61099283610938565b946020939093013593505050565b600080604083850312156109b357600080fd5b6109bc83610938565b91506109ca60208401610938565b90509250929050565b60008083601f8401126109e557600080fd5b50813567ffffffffffffffff8111156109fd57600080fd5b6020830191508360208260051b8501011115610a1857600080fd5b9250929050565b60008060008060408587031215610a3557600080fd5b843567ffffffffffffffff80821115610a4d57600080fd5b610a59888389016109d3565b90965094506020870135915080821115610a7257600080fd5b50610a7f878288016109d3565b95989497509550505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610ab457610ab4610a8b565b500190565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b634e487b7160e01b600052603260045260246000fd5b6040808252810184905260008560608301825b87811015610b46576001600160a01b03610b3184610938565b16825260209283019290910190600101610b18565b5083810360208501528481526001600160fb1b03851115610b6657600080fd5b8460051b915081866020830137600091016020019081529695505050505050565b600082821015610b9957610b99610a8b565b50039056fea264697066735822122043cfc6c69a12920d8ad2f534d13473e84a8aaeec64609f72fe35a86aa5a3928764736f6c634300080a0033",
    "devdoc": {
        "author": "Kiln",
        "events": {
            "Paused(address)": {
                "params": {
                    "admin": "The admin at the time of the pause event"
                }
            },
            "Unpaused(address)": {
                "params": {
                    "admin": "The admin at the time of the unpause event"
                }
            }
        },
        "kind": "dev",
        "methods": {
            "admin()": {
                "details": "Returns the current admin. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`"
            },
            "changeAdmin(address)": {
                "details": "Changes the admin of the proxy. Emits an {AdminChanged} event. NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}."
            },
            "constructor": {
                "details": "The Admin of the proxy should not be the same as theadmin on the implementation logics. The admin here isthe only account allowed to perform calls on the proxy(the calls are never delegated to the implementation)",
                "params": {
                    "__admin": "Address of the admin in charge of the proxy",
                    "_data": "Calldata for an atomic initialization",
                    "_logic": "Address of the implementation"
                }
            },
            "implementation()": {
                "details": "Returns the current implementation. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`"
            },
            "pause()": {
                "details": "Pauses system"
            },
            "paused()": {
                "details": "Retrieves Paused state",
                "returns": {
                    "_0": "Paused state"
                }
            },
            "unpause()": {
                "details": "Unpauses system"
            },
            "upgradeTo(address)": {
                "details": "Upgrade the implementation of the proxy. NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}."
            },
            "upgradeToAndCall(address,bytes)": {
                "details": "Upgrade the implementation of the proxy, and then call a function from the new implementation as specified by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract. NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}."
            }
        },
        "title": "TUPProxy (Transparent Upgradeable Pausable Proxy)",
        "version": 1
    },
    "userdoc": {
        "errors": {
            "CallWhenPaused()": [
                {
                    "notice": "A call happened while the system was paused"
                }
            ]
        },
        "events": {
            "Paused(address)": {
                "notice": "The system is now paused"
            },
            "Unpaused(address)": {
                "notice": "The system is now unpaused"
            }
        },
        "kind": "user",
        "methods": {},
        "notice": "This contract extends the Transparent Upgradeable proxy and adds a system wide pause feature.         When the system is paused, the fallback will fail no matter what calls are made.         Address Zero is allowed to perform calls even if paused to allow view calls made         from RPC providers to properly work.",
        "version": 1
    },
    "storageLayout": {
        "storage": [],
        "types": null
    },
    "implementations": {
        "names": [
            "AllowlistV1_Implementation_0_6_0.json"
        ],
        "transactionHash": [
            "0x95c77ca69af3e5d12cfa16897b22e801bdbc85f2490b8289cd7b0c5d1ef3630d"
        ],
        "receipt": [
            {
                "to": null,
                "from": "0x341C40B94bF2afBFa42573cB78f16Ee15a056238",
                "contractAddress": "0x67DDc8290c15e18c21FAbbCD5fA4613824E3F165",
                "transactionIndex": 37,
                "gasUsed": "735167",
                "logsBloom": "0x
                "blockHash": "0xb7d9e862449deec226566209fb422c984181d5c4c57e5d539d8162267631d444",
                "transactionHash": "0x95c77ca69af3e5d12cfa16897b22e801bdbc85f2490b8289cd7b0c5d1ef3630d",
                "logs": [
                    {
                        "transactionIndex": 37,
                        "blockNumber": 9166605,
                        "transactionHash": "0x95c77ca69af3e5d12cfa16897b22e801bdbc85f2490b8289cd7b0c5d1ef3630d",
                        "address": "0x67DDc8290c15e18c21FAbbCD5fA4613824E3F165",
                        "topics": [
                            "0x1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a71"
                        ],
                        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000",
                        "logIndex": 77,
                        "blockHash": "0xb7d9e862449deec226566209fb422c984181d5c4c57e5d539d8162267631d444"
                    }
                ],
                "blockNumber": 9166605,
                "cumulativeGasUsed": "7030026",
                "status": 1,
                "byzantium": true
            }
        ],
        "args": [
            []
        ],
        "numDeployments": [
            1
        ],
        "solcInputHash": [
            "17288a2de201671025ab4726f1192faa"
        ],
        "metadata": [
            "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"Denied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAlloweeCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchedAlloweeAndStatusCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"cdata\",\"type\":\"bytes\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"allower\",\"type\":\"address\"}],\"name\":\"SetAllower\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"permissions\",\"type\":\"uint256[]\"}],\"name\":\"SetAllowlistPermissions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"SetPendingAdmin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_permissions\",\"type\":\"uint256[]\"}],\"name\":\"allow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPermissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allower\",\"type\":\"address\"}],\"name\":\"initAllowlistV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isDenied\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"onlyAllowed\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"proposeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAllowerAddress\",\"type\":\"address\"}],\"name\":\"setAllower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kiln\",\"errors\":{\"Denied(address)\":[{\"params\":{\"_account\":\"The denied account\"}}],\"InvalidInitialization(uint256,uint256)\":[{\"params\":{\"expectedVersion\":\"The version that was expected\",\"version\":\"The version that was attempting to be initialized\"}}],\"Unauthorized(address)\":[{\"params\":{\"caller\":\"Address performing the call\"}}]},\"kind\":\"dev\",\"methods\":{\"acceptAdmin()\":{\"details\":\"Only callable by the pending admin. Resets the pending admin if succesful.\"},\"allow(address[],uint256[])\":{\"details\":\"The permission value is overridden and not updated\",\"params\":{\"_accounts\":\"Accounts with statuses to edit\",\"_permissions\":\"Allowlist permissions for each account, in the same order as _accounts\"}},\"getAdmin()\":{\"returns\":{\"_0\":\"The admin address\"}},\"getAllower()\":{\"returns\":{\"_0\":\"The address of the allower\"}},\"getPendingAdmin()\":{\"returns\":{\"_0\":\"The pending admin address\"}},\"getPermissions(address)\":{\"params\":{\"_account\":\"Recipient to verify\"},\"returns\":{\"_0\":\"The raw permissions value of the account\"}},\"hasPermission(address,uint256)\":{\"params\":{\"_account\":\"Recipient to verify\",\"_mask\":\"Combination of permissions to verify\"},\"returns\":{\"_0\":\"True if mask is respected\"}},\"initAllowlistV1(address,address)\":{\"params\":{\"_admin\":\"Address of the Allowlist administrator\",\"_allower\":\"Address of the allower\"}},\"isAllowed(address,uint256)\":{\"params\":{\"_account\":\"Recipient to verify\",\"_mask\":\"Combination of permissions to verify\"},\"returns\":{\"_0\":\"True if mask is respected and user is allowed\"}},\"isDenied(address)\":{\"params\":{\"_account\":\"Recipient to verify\"},\"returns\":{\"_0\":\"True if user is denied access\"}},\"onlyAllowed(address,uint256)\":{\"params\":{\"_account\":\"Recipient to verify\",\"_mask\":\"Combination of permissions to verify\"}},\"proposeAdmin(address)\":{\"details\":\"This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.\",\"params\":{\"_newAdmin\":\"New admin address\"}},\"setAllower(address)\":{\"params\":{\"_newAllowerAddress\":\"New address allowed to edit the allowlist\"}}},\"title\":\"Allowlist (v1)\",\"version\":1},\"userdoc\":{\"errors\":{\"Denied(address)\":[{\"notice\":\"The account is denied access\"}],\"InvalidAlloweeCount()\":[{\"notice\":\"The provided accounts list is empty\"}],\"InvalidInitialization(uint256,uint256)\":[{\"notice\":\"An error occured during the initialization\"}],\"InvalidZeroAddress()\":[{\"notice\":\"The address is zero\"}],\"MismatchedAlloweeAndStatusCount()\":[{\"notice\":\"The provided accounts and permissions list have different lengths\"}],\"Unauthorized(address)\":[{\"notice\":\"The operator is unauthorized for the caller\"}]},\"events\":{\"Initialize(uint256,bytes)\":{\"notice\":\"Emitted when the contract is properly initialized\"},\"SetAdmin(address)\":{\"notice\":\"The admin address changed\"},\"SetAllower(address)\":{\"notice\":\"The stored allower address has been changed\"},\"SetAllowlistPermissions(address[],uint256[])\":{\"notice\":\"The permissions of several accounts have changed\"},\"SetPendingAdmin(address)\":{\"notice\":\"The pending admin address changed\"}},\"kind\":\"user\",\"methods\":{\"acceptAdmin()\":{\"notice\":\"Accept the transfer of ownership\"},\"allow(address[],uint256[])\":{\"notice\":\"Sets the allowlisting status for one or more accounts\"},\"getAdmin()\":{\"notice\":\"Retrieves the current admin address\"},\"getAllower()\":{\"notice\":\"Retrieves the allower address\"},\"getPendingAdmin()\":{\"notice\":\"Retrieve the current pending admin address\"},\"getPermissions(address)\":{\"notice\":\"This method retrieves the raw permission value\"},\"hasPermission(address,uint256)\":{\"notice\":\"This method returns true if the user has the expected permission         ignoring any deny list membership\"},\"initAllowlistV1(address,address)\":{\"notice\":\"Initializes the allowlist\"},\"isAllowed(address,uint256)\":{\"notice\":\"This method returns true if the user has the expected permission and         is not in the deny list\"},\"isDenied(address)\":{\"notice\":\"This method returns true if the user is in the deny list\"},\"onlyAllowed(address,uint256)\":{\"notice\":\"This method should be used as a modifier and is expected to revert         if the user hasn't got the required permission or if the user is         in the deny list.\"},\"proposeAdmin(address)\":{\"notice\":\"Proposes a new address as admin\"},\"setAllower(address)\":{\"notice\":\"Changes the allower address\"}},\"notice\":\"This contract handles the list of allowed recipients.All accounts have an uint256 value associated with their addresses whereeach bit represents a right in the system. The DENY_MASK defined the maskused to identify if the denied bit is on, preventing users from interactingwith the system\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/Allowlist.1.sol\":\"AllowlistV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/Administrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IAdministrable.sol\\\";\\n\\nimport \\\"./libraries/LibAdministrable.sol\\\";\\nimport \\\"./libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrable\\n/// @author Kiln\\n/// @notice This contract handles the administration of the contracts\\nabstract contract Administrable is IAdministrable {\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() {\\n        if (msg.sender != LibAdministrable._getAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyPendingAdmin() {\\n        if (msg.sender != LibAdministrable._getPendingAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getAdmin() external view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getPendingAdmin() external view returns (address) {\\n        return LibAdministrable._getPendingAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function proposeAdmin(address _newAdmin) external onlyAdmin {\\n        _setPendingAdmin(_newAdmin);\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function acceptAdmin() external onlyPendingAdmin {\\n        _setAdmin(LibAdministrable._getPendingAdmin());\\n        _setPendingAdmin(address(0));\\n    }\\n\\n    /// @notice Internal utility to set the admin address\\n    /// @param _admin Address to set as admin\\n    function _setAdmin(address _admin) internal {\\n        LibSanitize._notZeroAddress(_admin);\\n        LibAdministrable._setAdmin(_admin);\\n        emit SetAdmin(_admin);\\n    }\\n\\n    /// @notice Internal utility to set the pending admin address\\n    /// @param _pendingAdmin Address to set as pending admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        LibAdministrable._setPendingAdmin(_pendingAdmin);\\n        emit SetPendingAdmin(_pendingAdmin);\\n    }\\n\\n    /// @notice Internal utility to retrieve the address of the current admin\\n    /// @return The address of admin\\n    function _getAdmin() internal view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n}\\n\",\"keccak256\":\"0xc9ce727028bc42bf4ea4247dfde9b57a5c36e1820aba5219207aa95c4f035372\",\"license\":\"BUSL-1.1\"},\"contracts/src/Allowlist.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IAllowlist.1.sol\\\";\\n\\nimport \\\"./libraries/LibAllowlistMasks.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./Administrable.sol\\\";\\n\\nimport \\\"./state/allowlist/AllowerAddress.sol\\\";\\nimport \\\"./state/allowlist/Allowlist.sol\\\";\\n\\n/// @title Allowlist (v1)\\n/// @author Kiln\\n/// @notice This contract handles the list of allowed recipients.\\n/// @notice All accounts have an uint256 value associated with their addresses where\\n/// @notice each bit represents a right in the system. The DENY_MASK defined the mask\\n/// @notice used to identify if the denied bit is on, preventing users from interacting\\n/// @notice with the system\\ncontract AllowlistV1 is IAllowlistV1, Initializable, Administrable {\\n    /// @inheritdoc IAllowlistV1\\n    function initAllowlistV1(address _admin, address _allower) external init(0) {\\n        _setAdmin(_admin);\\n        AllowerAddress.set(_allower);\\n        emit SetAllower(_allower);\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function getAllower() external view returns (address) {\\n        return AllowerAddress.get();\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function isAllowed(address _account, uint256 _mask) external view returns (bool) {\\n        uint256 userPermissions = Allowlist.get(_account);\\n        if (userPermissions & LibAllowlistMasks.DENY_MASK == LibAllowlistMasks.DENY_MASK) {\\n            return false;\\n        }\\n        return userPermissions & _mask == _mask;\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function isDenied(address _account) external view returns (bool) {\\n        return Allowlist.get(_account) & LibAllowlistMasks.DENY_MASK == LibAllowlistMasks.DENY_MASK;\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function hasPermission(address _account, uint256 _mask) external view returns (bool) {\\n        return Allowlist.get(_account) & _mask == _mask;\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function getPermissions(address _account) external view returns (uint256) {\\n        return Allowlist.get(_account);\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function onlyAllowed(address _account, uint256 _mask) external view {\\n        uint256 userPermissions = Allowlist.get(_account);\\n        if (userPermissions & LibAllowlistMasks.DENY_MASK == LibAllowlistMasks.DENY_MASK) {\\n            revert Denied(_account);\\n        }\\n        if (userPermissions & _mask != _mask) {\\n            revert LibErrors.Unauthorized(_account);\\n        }\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function setAllower(address _newAllowerAddress) external onlyAdmin {\\n        AllowerAddress.set(_newAllowerAddress);\\n        emit SetAllower(_newAllowerAddress);\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function allow(address[] calldata _accounts, uint256[] calldata _permissions) external {\\n        if (msg.sender != AllowerAddress.get() && msg.sender != _getAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n\\n        if (_accounts.length == 0) {\\n            revert InvalidAlloweeCount();\\n        }\\n\\n        if (_accounts.length != _permissions.length) {\\n            revert MismatchedAlloweeAndStatusCount();\\n        }\\n\\n        for (uint256 i = 0; i < _accounts.length;) {\\n            LibSanitize._notZeroAddress(_accounts[i]);\\n            Allowlist.set(_accounts[i], _permissions[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit SetAllowlistPermissions(_accounts, _permissions);\\n    }\\n}\\n\",\"keccak256\":\"0xb277c87f78e086ddfe6c5f69f2e39032ecc275ceebc31678a5a5be7fd71ec1bb\",\"license\":\"BUSL-1.1\"},\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\n/// @title Initializable\\n/// @author Kiln\\n/// @notice This contract ensures that initializers are called only once per version\\ncontract Initializable {\\n    /// @notice Disable initialization on implementations\\n    constructor() {\\n        Version.set(type(uint256).max);\\n        emit Initialize(type(uint256).max, msg.data);\\n    }\\n\\n    /// @notice An error occured during the initialization\\n    /// @param version The version that was attempting to be initialized\\n    /// @param expectedVersion The version that was expected\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    /// @notice Emitted when the contract is properly initialized\\n    /// @param version New version of the contracts\\n    /// @param cdata Complete calldata that was used during the initialization\\n    event Initialize(uint256 version, bytes cdata);\\n\\n    /// @notice Use this modifier on initializers along with a hard-coded version number\\n    /// @param _version Version to initialize\\n    modifier init(uint256 _version) {\\n        if (_version != Version.get()) {\\n            revert InvalidInitialization(_version, Version.get());\\n        }\\n        Version.set(_version + 1); // prevents reentrency on the called method\\n        _;\\n        emit Initialize(_version, msg.data);\\n    }\\n}\\n\",\"keccak256\":\"0x2d85476c54b86308bc9687a7d072fddd2506f84f72a6892f7e0187214094ef79\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Administrable Interface\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the ownership of the contracts\\ninterface IAdministrable {\\n    /// @notice The pending admin address changed\\n    /// @param pendingAdmin New pending admin address\\n    event SetPendingAdmin(address indexed pendingAdmin);\\n\\n    /// @notice The admin address changed\\n    /// @param admin New admin address\\n    event SetAdmin(address indexed admin);\\n\\n    /// @notice Retrieves the current admin address\\n    /// @return The admin address\\n    function getAdmin() external view returns (address);\\n\\n    /// @notice Retrieve the current pending admin address\\n    /// @return The pending admin address\\n    function getPendingAdmin() external view returns (address);\\n\\n    /// @notice Proposes a new address as admin\\n    /// @dev This security prevents setting an invalid address as an admin. The pending\\n    /// @dev admin has to claim its ownership of the contract, and prove that the new\\n    /// @dev address is able to perform regular transactions.\\n    /// @param _newAdmin New admin address\\n    function proposeAdmin(address _newAdmin) external;\\n\\n    /// @notice Accept the transfer of ownership\\n    /// @dev Only callable by the pending admin. Resets the pending admin if succesful.\\n    function acceptAdmin() external;\\n}\\n\",\"keccak256\":\"0xe45ef81bf9326bac437dcf901eeb80628d5c87d51dcbcf3addb80e834ba7bfea\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAllowlist.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Allowlist Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the list of allowed recipients.\\ninterface IAllowlistV1 {\\n    /// @notice The permissions of several accounts have changed\\n    /// @param accounts List of accounts\\n    /// @param permissions New permissions for each account at the same index\\n    event SetAllowlistPermissions(address[] accounts, uint256[] permissions);\\n\\n    /// @notice The stored allower address has been changed\\n    /// @param allower The new allower address\\n    event SetAllower(address indexed allower);\\n\\n    /// @notice The provided accounts list is empty\\n    error InvalidAlloweeCount();\\n\\n    /// @notice The account is denied access\\n    /// @param _account The denied account\\n    error Denied(address _account);\\n\\n    /// @notice The provided accounts and permissions list have different lengths\\n    error MismatchedAlloweeAndStatusCount();\\n\\n    /// @notice Initializes the allowlist\\n    /// @param _admin Address of the Allowlist administrator\\n    /// @param _allower Address of the allower\\n    function initAllowlistV1(address _admin, address _allower) external;\\n\\n    /// @notice Retrieves the allower address\\n    /// @return The address of the allower\\n    function getAllower() external view returns (address);\\n\\n    /// @notice This method returns true if the user has the expected permission and\\n    ///         is not in the deny list\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    /// @return True if mask is respected and user is allowed\\n    function isAllowed(address _account, uint256 _mask) external view returns (bool);\\n\\n    /// @notice This method returns true if the user is in the deny list\\n    /// @param _account Recipient to verify\\n    /// @return True if user is denied access\\n    function isDenied(address _account) external view returns (bool);\\n\\n    /// @notice This method returns true if the user has the expected permission\\n    ///         ignoring any deny list membership\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    /// @return True if mask is respected\\n    function hasPermission(address _account, uint256 _mask) external view returns (bool);\\n\\n    /// @notice This method retrieves the raw permission value\\n    /// @param _account Recipient to verify\\n    /// @return The raw permissions value of the account\\n    function getPermissions(address _account) external view returns (uint256);\\n\\n    /// @notice This method should be used as a modifier and is expected to revert\\n    ///         if the user hasn't got the required permission or if the user is\\n    ///         in the deny list.\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    function onlyAllowed(address _account, uint256 _mask) external view;\\n\\n    /// @notice Changes the allower address\\n    /// @param _newAllowerAddress New address allowed to edit the allowlist\\n    function setAllower(address _newAllowerAddress) external;\\n\\n    /// @notice Sets the allowlisting status for one or more accounts\\n    /// @dev The permission value is overridden and not updated\\n    /// @param _accounts Accounts with statuses to edit\\n    /// @param _permissions Allowlist permissions for each account, in the same order as _accounts\\n    function allow(address[] calldata _accounts, uint256[] calldata _permissions) external;\\n}\\n\",\"keccak256\":\"0x31166276cb00a5933800d9fadbe6c17f7397d981cd6193df5c50a0c0457b0355\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibAdministrable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\nimport \\\"../state/shared/PendingAdministratorAddress.sol\\\";\\n\\n/// @title Lib Administrable\\n/// @author Kiln\\n/// @notice This library handles the admin and pending admin storage vars\\nlibrary LibAdministrable {\\n    /// @notice Retrieve the system admin\\n    /// @return The address of the system admin\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n\\n    /// @notice Retrieve the pending system admin\\n    /// @return The adress of the pending system admin\\n    function _getPendingAdmin() internal view returns (address) {\\n        return PendingAdministratorAddress.get();\\n    }\\n\\n    /// @notice Sets the system admin\\n    /// @param _admin New system admin\\n    function _setAdmin(address _admin) internal {\\n        AdministratorAddress.set(_admin);\\n    }\\n\\n    /// @notice Sets the pending system admin\\n    /// @param _pendingAdmin New pending system admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        PendingAdministratorAddress.set(_pendingAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0xbe4cec02aff69406624f3ab71a19948997aaf74f63e171137f2f3b85bdb7bc3a\",\"license\":\"MIT\"},\"contracts/src/libraries/LibAllowlistMasks.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Lib Allowlist Masks\\n/// @notice Holds all the mask values\\nlibrary LibAllowlistMasks {\\n    /// @notice Mask used for denied accounts\\n    uint256 internal constant DENY_MASK = 0x1 << 255;\\n    /// @notice The mask for the deposit right\\n    uint256 internal constant DEPOSIT_MASK = 0x1;\\n    /// @notice The mask for the donation right\\n    uint256 internal constant DONATE_MASK = 0x1 << 1;\\n    /// @notice The mask for the redeem right\\n    uint256 internal constant REDEEM_MASK = 0x1 << 2;\\n}\\n\",\"keccak256\":\"0x39a0307a04bcec3b8352c3205a746407939ccf05625c56e78f2e43105a5e6d4c\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibBasisPoints.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Lib Basis Points\\n/// @notice Holds the basis points max value\\nlibrary LibBasisPoints {\\n    /// @notice The max value for basis points (represents 100%)\\n    uint256 internal constant BASIS_POINTS_MAX = 10_000;\\n}\\n\",\"keccak256\":\"0x97228a01dcd48f033555e3a44f9be37fb474a1b027f703f28097d539808f1c6c\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibErrors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Errors\\n/// @notice Library of common errors\\nlibrary LibErrors {\\n    /// @notice The operator is unauthorized for the caller\\n    /// @param caller Address performing the call\\n    error Unauthorized(address caller);\\n\\n    /// @notice The call was invalid\\n    error InvalidCall();\\n\\n    /// @notice The argument was invalid\\n    error InvalidArgument();\\n\\n    /// @notice The address is zero\\n    error InvalidZeroAddress();\\n\\n    /// @notice The string is empty\\n    error InvalidEmptyString();\\n\\n    /// @notice The fee is invalid\\n    error InvalidFee();\\n}\\n\",\"keccak256\":\"0x7bdbd4ada124723fa08e2088405ba0bf4453beb23d84f4af09e894e06e751f33\",\"license\":\"MIT\"},\"contracts/src/libraries/LibSanitize.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./LibErrors.sol\\\";\\nimport \\\"./LibBasisPoints.sol\\\";\\n\\n/// @title Lib Sanitize\\n/// @notice Utilities to sanitize input values\\nlibrary LibSanitize {\\n    /// @notice Reverts if address is 0\\n    /// @param _address Address to check\\n    function _notZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert LibErrors.InvalidZeroAddress();\\n        }\\n    }\\n\\n    /// @notice Reverts if string is empty\\n    /// @param _string String to check\\n    function _notEmptyString(string memory _string) internal pure {\\n        if (bytes(_string).length == 0) {\\n            revert LibErrors.InvalidEmptyString();\\n        }\\n    }\\n\\n    /// @notice Reverts if fee is invalid\\n    /// @param _fee Fee to check\\n    function _validFee(uint256 _fee) internal pure {\\n        if (_fee > LibBasisPoints.BASIS_POINTS_MAX) {\\n            revert LibErrors.InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8aeeb866c4657a96c8b4c006340c7996d15a6f0044b730c276bc3ba8d5bcd48\",\"license\":\"MIT\"},\"contracts/src/libraries/LibUnstructuredStorage.sol\":{\"content\":\"// SPDX-License-Identifier:    MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @title Lib Unstructured Storage\\n/// @notice Utilities to work with unstructured storage\\nlibrary LibUnstructuredStorage {\\n    /// @notice Retrieve a bool value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bool value\\n    function getStorageBool(bytes32 _position) internal view returns (bool data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an address value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The address value\\n    function getStorageAddress(bytes32 _position) internal view returns (address data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve a bytes32 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bytes32 value\\n    function getStorageBytes32(bytes32 _position) internal view returns (bytes32 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an uint256 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The uint256 value\\n    function getStorageUint256(bytes32 _position) internal view returns (uint256 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Sets a bool value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bool value to set\\n    function setStorageBool(bytes32 _position, bool _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an address value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The address value to set\\n    function setStorageAddress(bytes32 _position, address _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets a bytes32 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bytes32 value to set\\n    function setStorageBytes32(bytes32 _position, bytes32 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an uint256 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The uint256 value to set\\n    function setStorageUint256(bytes32 _position, uint256 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8e1a2f0dc18e023e12747355b3c95258d4de698f2bb6196222a1dc92940caa3\",\"license\":\"MIT\"},\"contracts/src/state/allowlist/AllowerAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Allower Address Storage\\n/// @notice Utility to manage the Allower Address in storage\\nlibrary AllowerAddress {\\n    /// @notice Storage slot of the Allower Address\\n    bytes32 internal constant ALLOWER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowerAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Allower Address\\n    /// @return The Allower Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ALLOWER_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Allower Address\\n    /// @param _newValue New Allower Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ALLOWER_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x63cdb0d2b7fd015cbf16a6e6f52a2bb97513ab0d97a56aca24fd4c753a9ec6f6\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/allowlist/Allowlist.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Allowlist Storage\\n/// @notice Utility to manage the Allowlist mapping in storage\\nlibrary Allowlist {\\n    /// @notice Storage slot of the Allowlist mapping\\n    bytes32 internal constant ALLOWLIST_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowlist\\\")) - 1);\\n\\n    /// @notice Structure stored in storage slot\\n    struct Slot {\\n        /// @custom:attribute Mapping keeping track of permissions per account\\n        mapping(address => uint256) value;\\n    }\\n\\n    /// @notice Retrieve the Allowlist value of an account\\n    /// @param _account The account to verify\\n    /// @return The Allowlist value\\n    function get(address _account) internal view returns (uint256) {\\n        bytes32 slot = ALLOWLIST_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_account];\\n    }\\n\\n    /// @notice Sets the Allowlist value of an account\\n    /// @param _account The account value to set\\n    /// @param _status The value to set\\n    function set(address _account, uint256 _status) internal {\\n        bytes32 slot = ALLOWLIST_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_account] = _status;\\n    }\\n}\\n\",\"keccak256\":\"0xbbd7ff8156eefb7023efdc141b72f729a675b64c771b991aa2a1c4c37a6671a5\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrator Address Storage\\n/// @notice Utility to manage the Administrator Address in storage\\nlibrary AdministratorAddress {\\n    /// @notice Storage slot of the Administrator Address\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Administrator Address\\n    /// @return The Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Administrator Address\\n    /// @param _newValue New Administrator Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x4f702b4454858199ca8fd15ef1cee63d9dc3d4d8f2ff7a2f859a4e151e46e8ec\",\"license\":\"MIT\"},\"contracts/src/state/shared/PendingAdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Pending Administrator Address Storage\\n/// @notice Utility to manage the Pending Administrator Address in storage\\nlibrary PendingAdministratorAddress {\\n    /// @notice Storage slot of the Pending Administrator Address\\n    bytes32 public constant PENDING_ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.pendingAdministratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Pending Administrator Address\\n    /// @return The Pending Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Pending Administrator Address\\n    /// @param _newValue New Pending Administrator Address\\n    function set(address _newValue) internal {\\n        LibUnstructuredStorage.setStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x2164cafa435d1e1650037164e2b094ca3af00cc68e05b59140406aa59b1949f2\",\"license\":\"MIT\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Version Storage\\n/// @notice Utility to manage the Version in storage\\nlibrary Version {\\n    /// @notice Storage slot of the Version\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    /// @notice Retrieve the Version\\n    /// @return The Version\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    /// @notice Sets the Version\\n    /// @param _newValue New Version\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(VERSION_SLOT, _newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x82f1cc4bbb1f16c1cdbac93596334805eb1a2e0e40ccbd0ab0f78e22d3f83864\",\"license\":\"BUSL-1.1\"}},\"version\":1}"
        ],
        "bytecode": [
            "0x608060405234801561001057600080fd5b5061002660001961006960201b61061d1760201c565b7f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a7160001960003660405161005c939291906100b1565b60405180910390a161010c565b6100aa61009760017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6100e7565b60001b826100ad60201b6106501760201c565b50565b9055565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b60008282101561010757634e487b7160e01b600052601160045260246000fd5b500390565b610bd48061011b6000396000f3fe608060405234801561001057600080fd5b50600436106100bf5760003560e01c80636e8cac111161007c5780636e8cac11146101465780636e9960c3146101595780638d944fd914610161578063d046815614610184578063e580d9941461018c578063e838dfbb1461019f578063f8350ed0146101b257600080fd5b806307a40008146100c45780630e18b681146100e2578063147bf6c4146100ec578063160a7925146100ff5780634679a9e1146101205780635a40910214610133575b600080fd5b6100cc6101c5565b6040516100d99190610924565b60405180910390f35b6100ea6101d4565b005b6100ea6100fa366004610954565b610234565b61011261010d366004610954565b61027b565b6040519081526020016100d9565b6100ea61012e366004610954565b61028c565b6100ea610141366004610976565b610307565b6100ea6101543660046109a0565b610366565b6100cc61043b565b61017461016f366004610976565b610445565b60405190151581526020016100d9565b6100cc61045b565b6100ea61019a366004610a1f565b610465565b6101746101ad366004610954565b6105d3565b6101746101c0366004610976565b6105ec565b60006101cf610654565b905090565b6101dc610688565b6001600160a01b0316336001600160a01b031614610218573360405163472511eb60e11b815260040161020f9190610924565b60405180910390fd5b610228610223610688565b610692565b61023260006106db565b565b61023c61071b565b6001600160a01b0316336001600160a01b03161461026f573360405163472511eb60e11b815260040161020f9190610924565b610278816106db565b50565b600061028682610725565b92915050565b61029461071b565b6001600160a01b0316336001600160a01b0316146102c7573360405163472511eb60e11b815260040161020f9190610924565b6102d081610773565b6040516001600160a01b038216907fb96ab8443049f385aba7fbc2899e3fcdfba4d80ac8458847f40b7d426bae2dcf90600090a250565b600061031283610725565b9050600160ff1b808216141561033d578260405163e7d05e2760e01b815260040161020f9190610924565b8182821614610361578260405163472511eb60e11b815260040161020f9190610924565b505050565b60006103706107aa565b81146103a1578061037f6107aa565b604051631cfd276760e31b81526004810192909252602482015260440161020f565b6103b46103af826001610aa1565b61061d565b6103bd83610692565b6103c682610773565b6040516001600160a01b038316907fb96ab8443049f385aba7fbc2899e3fcdfba4d80ac8458847f40b7d426bae2dcf90600090a27f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a718160003660405161042e93929190610ab9565b60405180910390a1505050565b60006101cf61071b565b6000818261045285610725565b16149392505050565b60006101cf610688565b61046d610654565b6001600160a01b0316336001600160a01b0316141580156104a7575061049161043b565b6001600160a01b0316336001600160a01b031614155b156104c7573360405163472511eb60e11b815260040161020f9190610924565b826104e557604051631ac3cbdf60e21b815260040160405180910390fd5b8281146105055760405163b7c599df60e01b815260040160405180910390fd5b60005b8381101561058f5761053f85858381811061052557610525610aef565b905060200201602081019061053a9190610954565b6107da565b61058785858381811061055457610554610aef565b90506020020160208101906105699190610954565b84848481811061057b5761057b610aef565b90506020020135610801565b600101610508565b507f649636a73c855dfe2014a555a98949d77640be8f4eb6702749d5f83c9aa6fcd0848484846040516105c59493929190610b05565b60405180910390a150505050565b6000600160ff1b806105e484610725565b161492915050565b6000806105f884610725565b9050600160ff1b8082161415610612576000915050610286565b821690911492915050565b61027861064b60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd610b87565b829055565b9055565b60006101cf61068460017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b80610b87565b5490565b60006101cf61084d565b61069b816107da565b6106a48161087d565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b6106e481610886565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b60006101cf61088f565b60008061075360017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a4135610b87565b6001600160a01b0390931660009081526020939093525050604090205490565b61077c816107da565b61027861064b60017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b80610b87565b60006101cf61068460017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd610b87565b6001600160a01b0381166102785760405163f6b2911f60e01b815260040160405180910390fd5b600061082e60017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a4135610b87565b6001600160a01b03909316600090815260209390935250604090912055565b60006101cf61068460017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281610b87565b610278816108bf565b610278816108f6565b60006101cf61068460017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113610b87565b6108c8816107da565b61027861064b60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113610b87565b61027861064b60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281610b87565b6001600160a01b0391909116815260200190565b80356001600160a01b038116811461094f57600080fd5b919050565b60006020828403121561096657600080fd5b61096f82610938565b9392505050565b6000806040838503121561098957600080fd5b61099283610938565b946020939093013593505050565b600080604083850312156109b357600080fd5b6109bc83610938565b91506109ca60208401610938565b90509250929050565b60008083601f8401126109e557600080fd5b50813567ffffffffffffffff8111156109fd57600080fd5b6020830191508360208260051b8501011115610a1857600080fd5b9250929050565b60008060008060408587031215610a3557600080fd5b843567ffffffffffffffff80821115610a4d57600080fd5b610a59888389016109d3565b90965094506020870135915080821115610a7257600080fd5b50610a7f878288016109d3565b95989497509550505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610ab457610ab4610a8b565b500190565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b634e487b7160e01b600052603260045260246000fd5b6040808252810184905260008560608301825b87811015610b46576001600160a01b03610b3184610938565b16825260209283019290910190600101610b18565b5083810360208501528481526001600160fb1b03851115610b6657600080fd5b8460051b915081866020830137600091016020019081529695505050505050565b600082821015610b9957610b99610a8b565b50039056fea264697066735822122043cfc6c69a12920d8ad2f534d13473e84a8aaeec64609f72fe35a86aa5a3928764736f6c634300080a0033"
        ],
        "deployedBytecode": [
            "0x608060405234801561001057600080fd5b50600436106100bf5760003560e01c80636e8cac111161007c5780636e8cac11146101465780636e9960c3146101595780638d944fd914610161578063d046815614610184578063e580d9941461018c578063e838dfbb1461019f578063f8350ed0146101b257600080fd5b806307a40008146100c45780630e18b681146100e2578063147bf6c4146100ec578063160a7925146100ff5780634679a9e1146101205780635a40910214610133575b600080fd5b6100cc6101c5565b6040516100d99190610924565b60405180910390f35b6100ea6101d4565b005b6100ea6100fa366004610954565b610234565b61011261010d366004610954565b61027b565b6040519081526020016100d9565b6100ea61012e366004610954565b61028c565b6100ea610141366004610976565b610307565b6100ea6101543660046109a0565b610366565b6100cc61043b565b61017461016f366004610976565b610445565b60405190151581526020016100d9565b6100cc61045b565b6100ea61019a366004610a1f565b610465565b6101746101ad366004610954565b6105d3565b6101746101c0366004610976565b6105ec565b60006101cf610654565b905090565b6101dc610688565b6001600160a01b0316336001600160a01b031614610218573360405163472511eb60e11b815260040161020f9190610924565b60405180910390fd5b610228610223610688565b610692565b61023260006106db565b565b61023c61071b565b6001600160a01b0316336001600160a01b03161461026f573360405163472511eb60e11b815260040161020f9190610924565b610278816106db565b50565b600061028682610725565b92915050565b61029461071b565b6001600160a01b0316336001600160a01b0316146102c7573360405163472511eb60e11b815260040161020f9190610924565b6102d081610773565b6040516001600160a01b038216907fb96ab8443049f385aba7fbc2899e3fcdfba4d80ac8458847f40b7d426bae2dcf90600090a250565b600061031283610725565b9050600160ff1b808216141561033d578260405163e7d05e2760e01b815260040161020f9190610924565b8182821614610361578260405163472511eb60e11b815260040161020f9190610924565b505050565b60006103706107aa565b81146103a1578061037f6107aa565b604051631cfd276760e31b81526004810192909252602482015260440161020f565b6103b46103af826001610aa1565b61061d565b6103bd83610692565b6103c682610773565b6040516001600160a01b038316907fb96ab8443049f385aba7fbc2899e3fcdfba4d80ac8458847f40b7d426bae2dcf90600090a27f1809e49bba43f2d39fa57894b50cd6ccb428cc438230e065cac3eb24a1355a718160003660405161042e93929190610ab9565b60405180910390a1505050565b60006101cf61071b565b6000818261045285610725565b16149392505050565b60006101cf610688565b61046d610654565b6001600160a01b0316336001600160a01b0316141580156104a7575061049161043b565b6001600160a01b0316336001600160a01b031614155b156104c7573360405163472511eb60e11b815260040161020f9190610924565b826104e557604051631ac3cbdf60e21b815260040160405180910390fd5b8281146105055760405163b7c599df60e01b815260040160405180910390fd5b60005b8381101561058f5761053f85858381811061052557610525610aef565b905060200201602081019061053a9190610954565b6107da565b61058785858381811061055457610554610aef565b90506020020160208101906105699190610954565b84848481811061057b5761057b610aef565b90506020020135610801565b600101610508565b507f649636a73c855dfe2014a555a98949d77640be8f4eb6702749d5f83c9aa6fcd0848484846040516105c59493929190610b05565b60405180910390a150505050565b6000600160ff1b806105e484610725565b161492915050565b6000806105f884610725565b9050600160ff1b8082161415610612576000915050610286565b821690911492915050565b61027861064b60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd610b87565b829055565b9055565b60006101cf61068460017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b80610b87565b5490565b60006101cf61084d565b61069b816107da565b6106a48161087d565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b6106e481610886565b6040516001600160a01b038216907f2a0f8515de3fa34ef68b99300347b8793c01683350743e96fe440594528298f490600090a250565b60006101cf61088f565b60008061075360017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a4135610b87565b6001600160a01b0390931660009081526020939093525050604090205490565b61077c816107da565b61027861064b60017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b80610b87565b60006101cf61068460017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd610b87565b6001600160a01b0381166102785760405163f6b2911f60e01b815260040160405180910390fd5b600061082e60017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a4135610b87565b6001600160a01b03909316600090815260209390935250604090912055565b60006101cf61068460017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281610b87565b610278816108bf565b610278816108f6565b60006101cf61068460017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113610b87565b6108c8816107da565b61027861064b60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113610b87565b61027861064b60017f6e6ab8b7c7aaba79eef8cc633522d606bb008c101cf9832c9ad05d10a9847281610b87565b6001600160a01b0391909116815260200190565b80356001600160a01b038116811461094f57600080fd5b919050565b60006020828403121561096657600080fd5b61096f82610938565b9392505050565b6000806040838503121561098957600080fd5b61099283610938565b946020939093013593505050565b600080604083850312156109b357600080fd5b6109bc83610938565b91506109ca60208401610938565b90509250929050565b60008083601f8401126109e557600080fd5b50813567ffffffffffffffff8111156109fd57600080fd5b6020830191508360208260051b8501011115610a1857600080fd5b9250929050565b60008060008060408587031215610a3557600080fd5b843567ffffffffffffffff80821115610a4d57600080fd5b610a59888389016109d3565b90965094506020870135915080821115610a7257600080fd5b50610a7f878288016109d3565b95989497509550505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610ab457610ab4610a8b565b500190565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b634e487b7160e01b600052603260045260246000fd5b6040808252810184905260008560608301825b87811015610b46576001600160a01b03610b3184610938565b16825260209283019290910190600101610b18565b5083810360208501528481526001600160fb1b03851115610b6657600080fd5b8460051b915081866020830137600091016020019081529695505050505050565b600082821015610b9957610b99610a8b565b50039056fea264697066735822122043cfc6c69a12920d8ad2f534d13473e84a8aaeec64609f72fe35a86aa5a3928764736f6c634300080a0033"
        ],
        "devdoc": [
            {
                "author": "Kiln",
                "errors": {
                    "Denied(address)": [
                        {
                            "params": {
                                "_account": "The denied account"
                            }
                        }
                    ],
                    "InvalidInitialization(uint256,uint256)": [
                        {
                            "params": {
                                "expectedVersion": "The version that was expected",
                                "version": "The version that was attempting to be initialized"
                            }
                        }
                    ],
                    "Unauthorized(address)": [
                        {
                            "params": {
                                "caller": "Address performing the call"
                            }
                        }
                    ]
                },
                "kind": "dev",
                "methods": {
                    "acceptAdmin()": {
                        "details": "Only callable by the pending admin. Resets the pending admin if succesful."
                    },
                    "allow(address[],uint256[])": {
                        "details": "The permission value is overridden and not updated",
                        "params": {
                            "_accounts": "Accounts with statuses to edit",
                            "_permissions": "Allowlist permissions for each account, in the same order as _accounts"
                        }
                    },
                    "getAdmin()": {
                        "returns": {
                            "_0": "The admin address"
                        }
                    },
                    "getAllower()": {
                        "returns": {
                            "_0": "The address of the allower"
                        }
                    },
                    "getPendingAdmin()": {
                        "returns": {
                            "_0": "The pending admin address"
                        }
                    },
                    "getPermissions(address)": {
                        "params": {
                            "_account": "Recipient to verify"
                        },
                        "returns": {
                            "_0": "The raw permissions value of the account"
                        }
                    },
                    "hasPermission(address,uint256)": {
                        "params": {
                            "_account": "Recipient to verify",
                            "_mask": "Combination of permissions to verify"
                        },
                        "returns": {
                            "_0": "True if mask is respected"
                        }
                    },
                    "initAllowlistV1(address,address)": {
                        "params": {
                            "_admin": "Address of the Allowlist administrator",
                            "_allower": "Address of the allower"
                        }
                    },
                    "isAllowed(address,uint256)": {
                        "params": {
                            "_account": "Recipient to verify",
                            "_mask": "Combination of permissions to verify"
                        },
                        "returns": {
                            "_0": "True if mask is respected and user is allowed"
                        }
                    },
                    "isDenied(address)": {
                        "params": {
                            "_account": "Recipient to verify"
                        },
                        "returns": {
                            "_0": "True if user is denied access"
                        }
                    },
                    "onlyAllowed(address,uint256)": {
                        "params": {
                            "_account": "Recipient to verify",
                            "_mask": "Combination of permissions to verify"
                        }
                    },
                    "proposeAdmin(address)": {
                        "details": "This security prevents setting an invalid address as an admin. The pendingadmin has to claim its ownership of the contract, and prove that the newaddress is able to perform regular transactions.",
                        "params": {
                            "_newAdmin": "New admin address"
                        }
                    },
                    "setAllower(address)": {
                        "params": {
                            "_newAllowerAddress": "New address allowed to edit the allowlist"
                        }
                    }
                },
                "title": "Allowlist (v1)",
                "version": 1
            }
        ],
        "userdoc": [
            {
                "errors": {
                    "Denied(address)": [
                        {
                            "notice": "The account is denied access"
                        }
                    ],
                    "InvalidAlloweeCount()": [
                        {
                            "notice": "The provided accounts list is empty"
                        }
                    ],
                    "InvalidInitialization(uint256,uint256)": [
                        {
                            "notice": "An error occured during the initialization"
                        }
                    ],
                    "InvalidZeroAddress()": [
                        {
                            "notice": "The address is zero"
                        }
                    ],
                    "MismatchedAlloweeAndStatusCount()": [
                        {
                            "notice": "The provided accounts and permissions list have different lengths"
                        }
                    ],
                    "Unauthorized(address)": [
                        {
                            "notice": "The operator is unauthorized for the caller"
                        }
                    ]
                },
                "events": {
                    "Initialize(uint256,bytes)": {
                        "notice": "Emitted when the contract is properly initialized"
                    },
                    "SetAdmin(address)": {
                        "notice": "The admin address changed"
                    },
                    "SetAllower(address)": {
                        "notice": "The stored allower address has been changed"
                    },
                    "SetAllowlistPermissions(address[],uint256[])": {
                        "notice": "The permissions of several accounts have changed"
                    },
                    "SetPendingAdmin(address)": {
                        "notice": "The pending admin address changed"
                    }
                },
                "kind": "user",
                "methods": {
                    "acceptAdmin()": {
                        "notice": "Accept the transfer of ownership"
                    },
                    "allow(address[],uint256[])": {
                        "notice": "Sets the allowlisting status for one or more accounts"
                    },
                    "getAdmin()": {
                        "notice": "Retrieves the current admin address"
                    },
                    "getAllower()": {
                        "notice": "Retrieves the allower address"
                    },
                    "getPendingAdmin()": {
                        "notice": "Retrieve the current pending admin address"
                    },
                    "getPermissions(address)": {
                        "notice": "This method retrieves the raw permission value"
                    },
                    "hasPermission(address,uint256)": {
                        "notice": "This method returns true if the user has the expected permission         ignoring any deny list membership"
                    },
                    "initAllowlistV1(address,address)": {
                        "notice": "Initializes the allowlist"
                    },
                    "isAllowed(address,uint256)": {
                        "notice": "This method returns true if the user has the expected permission and         is not in the deny list"
                    },
                    "isDenied(address)": {
                        "notice": "This method returns true if the user is in the deny list"
                    },
                    "onlyAllowed(address,uint256)": {
                        "notice": "This method should be used as a modifier and is expected to revert         if the user hasn't got the required permission or if the user is         in the deny list."
                    },
                    "proposeAdmin(address)": {
                        "notice": "Proposes a new address as admin"
                    },
                    "setAllower(address)": {
                        "notice": "Changes the allower address"
                    }
                },
                "notice": "This contract handles the list of allowed recipients.All accounts have an uint256 value associated with their addresses whereeach bit represents a right in the system. The DENY_MASK defined the maskused to identify if the denied bit is on, preventing users from interactingwith the system",
                "version": 1
            }
        ],
        "storageLayout": [
            {
                "storage": [],
                "types": null
            }
        ]
    }
}